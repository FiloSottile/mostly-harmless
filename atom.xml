<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[PyTux]]></title>
  <link href="http://filosottile.github.com/atom.xml" rel="self"/>
  <link href="http://filosottile.github.com/"/>
  <updated>2013-01-20T12:20:51+01:00</updated>
  <id>http://filosottile.github.com/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Why Mega WILL change the status quo]]></title>
      <link href="http://filosottile.github.com/why-mega-will-change-the-status-quo/"/>
    
    <updated>2013-01-19T19:23:00+01:00</updated>
    <id>http://filosottile.github.com/why-mega-will-change-the-status-quo</id>
    
      <content type="html"><![CDATA[<p><em>A response to <a href="https://dl.dropbox.com/u/4374976/random/megaless.html">this</a>
on the newly launched <a href="https://mega.co.nz">Mega</a>.</em></p>

<p>It is true that theoretically no sharing approach can solve the problem of being inspectable,
however what Mega does is <strong>eliminate the single point of failure</strong>.</p>

<p>What made sharing over Megaupload difficult and finally killed the service was that
MPAA and RIAA could pressure Mega to obtain access to their data
(remember that they had direct read and delete access to Mega* data),
fingerprint a bunch of files and take down those that matched pirate videos or tracks.</p>

<p><em>Now Mega encrypts client-side all the uploaded data, and gives you the key to store (and share) along with the URL.</em></p>

<p>How this changes the outcome, you ask? Simply stated, <strong>now MPAA and RIAA can&#8217;t do anything with access only to Mega infrastructure</strong>.</p>

<p>Obviously key (and URL sharing) is the weakest link in the chain. but consider the two following (common) scenarios:</p>

<h3>The classic pirate movie/music forum/blog</h3>

<p>The users of those sites always re-uploaded all the content,
as taking the links of another community was considered really unkind and prevented in various ways.</p>

<p>However, all the copies were easy to kill at once by fingerprinting.</p>

<p>Now, instead, a MPAA/RIAA employee (or program) would have to scan through all those disperse, ephemeral and registration-based communities,
in a giant struggle that never comes to an end.</p>

<p>This because <strong>each community will have its own copy of the data, each one requiring its key to be taken down, and each key will have to be fetched from each particular site</strong>.</p>

<p>Do you want to be sure that no one will take down your link? Put it (and its key) behind a CAPTCHA.
This way an automated program will not suffice and they&#8217;ll not have enough human resources to check all the forums, blogs, etc.</p>

<h3>The underground textual community</h3>

<p>Let&#8217;s say an IRC channel, but also a Skype group chat or Facebook group might work (although I would never share pirate stuff along with my name and surname, but &#8230;).</p>

<p>Ever tried sharing big amounts of data over those services? It&#8217;s a pain. And sharing with a number of people is plainly impossible.</p>

<p>But now, <strong>one simply upload to Mega the file, and then share link+key with his closed group, and the only way to prevent this is to <em>be part</em> of that group</strong>.</p>

<blockquote><p>This time I have the feeling that the bad guys win.</p></blockquote>

<p>P.S. I know that <a href="http://www.matasano.com/articles/javascript-cryptography/">JavaScript crypto is doomed</a> but they are not going to MitM your connection to steal your Mega keys, really.</p>

<p>P.P.S. If you read this far, you might enjoy <a href="https://twitter.com/FiloSottile">following me on Twitter</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Archive your GitHub repo and data]]></title>
      <link href="http://filosottile.github.com/archive-your-github-repo-and-data/"/>
    
    <updated>2013-01-14T23:17:00+01:00</updated>
    <id>http://filosottile.github.com/archive-your-github-repo-and-data</id>
    
      <content type="html"><![CDATA[<p>GitHub is a service we all trust, so this is not a &#8220;get your data off that cloud before it explodes!&#8221;-style post,
but sometimes you want to take an offline copy of your or somebody&#8217;s work.</p>

<p>Here is a quick and dirty Python script that will help you clone all the repositories, the Gists and some metadata
that can be fetched over the API.
Be warned, it only fetches public repos and data and there&#8217;s no error checking.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usage: gh_dump.py [-h] [--forks] [--no-gist] [--no-metadata] username
</span><span class='line'>
</span><span class='line'>Dump an user's public GitHub data into current directory.
</span><span class='line'>
</span><span class='line'>positional arguments:
</span><span class='line'>  username       the GH username
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help     show this help message and exit
</span><span class='line'>  --forks        git clone also forks (default is don't)
</span><span class='line'>  --no-gist      don't download user gists (default is do)
</span><span class='line'>  --no-metadata  don't download user metadata (default is do)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python3</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This is free and unencumbered software released into the public domain.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Anyone is free to copy, modify, publish, use, compile, sell, or</span>
</span><span class='line'><span class="c"># distribute this software, either in source code form or as a compiled</span>
</span><span class='line'><span class="c"># binary, for any purpose, commercial or non-commercial, and by any</span>
</span><span class='line'><span class="c"># means.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># In jurisdictions that recognize copyright laws, the author or authors</span>
</span><span class='line'><span class="c"># of this software dedicate any and all copyright interest in the</span>
</span><span class='line'><span class="c"># software to the public domain. We make this dedication for the benefit</span>
</span><span class='line'><span class="c"># of the public at large and to the detriment of our heirs and</span>
</span><span class='line'><span class="c"># successors. We intend this dedication to be an overt act of</span>
</span><span class='line'><span class="c"># relinquishment in perpetuity of all present and future rights to this</span>
</span><span class='line'><span class="c"># software under copyright law.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span>
</span><span class='line'><span class="c"># EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span>
</span><span class='line'><span class="c"># MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span>
</span><span class='line'><span class="c"># IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span>
</span><span class='line'><span class="c"># OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span>
</span><span class='line'><span class="c"># ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span>
</span><span class='line'><span class="c"># OTHER DEALINGS IN THE SOFTWARE.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For more information, please refer to &lt;http://unlicense.org/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">argparse</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">call</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'>
</span><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">&#39;Dump an user</span><span class="se">\&#39;</span><span class="s">s public GitHub data into current directory.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;user&#39;</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">&#39;username&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">help</span><span class="o">=</span><span class="s">&#39;the GH username&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;--forks&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;forks&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&#39;store_true&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">help</span><span class="o">=</span><span class="s">&#39;git clone also forks (default is don</span><span class="se">\&#39;</span><span class="s">t)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;--no-gist&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;gists&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&#39;store_false&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">help</span><span class="o">=</span><span class="s">&#39;don</span><span class="se">\&#39;</span><span class="s">t download user gists (default is do)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;--no-metadata&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;metadata&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&#39;store_false&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">help</span><span class="o">=</span><span class="s">&#39;don</span><span class="se">\&#39;</span><span class="s">t download user metadata (default is do)&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">clear_url</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r&#39;\{[^\}]*\}&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;https://api.github.com/users/&#39;</span> <span class="o">+</span> <span class="n">args</span><span class="o">.</span><span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;user.json&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span><span class="n">clear_url</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="s">&#39;repos_url&#39;</span><span class="p">]))</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">repos</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;repos.json&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">repo</span> <span class="ow">in</span> <span class="n">repos</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">repo</span><span class="p">[</span><span class="s">&#39;fork&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">call</span><span class="p">([</span><span class="s">&#39;git&#39;</span><span class="p">,</span> <span class="s">&#39;clone&#39;</span><span class="p">,</span> <span class="n">repo</span><span class="p">[</span><span class="s">&#39;clone_url&#39;</span><span class="p">]])</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">args</span><span class="o">.</span><span class="n">forks</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s">&#39;forks&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="s">&#39;forks&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">call</span><span class="p">([</span><span class="s">&#39;git&#39;</span><span class="p">,</span> <span class="s">&#39;clone&#39;</span><span class="p">,</span> <span class="n">repo</span><span class="p">[</span><span class="s">&#39;clone_url&#39;</span><span class="p">],</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;forks&#39;</span><span class="p">,</span> <span class="n">repo</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">])])</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span><span class="n">clear_url</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="s">&#39;gists_url&#39;</span><span class="p">]))</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">gists</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;gists.json&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">gists</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s">&#39;gists&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="s">&#39;gists&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">gist</span> <span class="ow">in</span> <span class="n">gists</span><span class="p">:</span>
</span><span class='line'>        <span class="n">call</span><span class="p">([</span><span class="s">&#39;git&#39;</span><span class="p">,</span> <span class="s">&#39;clone&#39;</span><span class="p">,</span> <span class="n">gist</span><span class="p">[</span><span class="s">&#39;git_pull_url&#39;</span><span class="p">],</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;gists&#39;</span><span class="p">,</span> <span class="n">gist</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">])])</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">metadata</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;received_events&#39;</span><span class="p">,</span> <span class="s">&#39;events&#39;</span><span class="p">,</span> <span class="s">&#39;organizations&#39;</span><span class="p">,</span> <span class="s">&#39;followers&#39;</span><span class="p">,</span> <span class="s">&#39;starred&#39;</span><span class="p">,</span> <span class="s">&#39;following&#39;</span><span class="p">,</span> <span class="s">&#39;subscriptions&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span><span class="n">clear_url</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="n">name</span> <span class="o">+</span> <span class="s">&#39;_url&#39;</span><span class="p">]))</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&#39;.json&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>I wrote and used this to archive Aaron Swartz GitHub account on <a href="https://archive.org/details/aaronswGHarchive">archive.org</a>. R.I.P.</em></p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Automatically compile .less and .coffee files]]></title>
      <link href="http://filosottile.github.com/automatically-compile-less-and-coffee-files/"/>
    
    <updated>2013-01-12T00:25:00+01:00</updated>
    <id>http://filosottile.github.com/automatically-compile-less-and-coffee-files</id>
    
      <content type="html"><![CDATA[<p>This small python script makes use of <a href="http://packages.python.org/watchdog/"><code>watchdog</code></a> (and <a href="http://amoffat.github.com/sh/"><code>sh</code></a>) to monitor your code directory (recursively) and build <a href="http://lesscss.org/">less</a> and <a href="http://coffeescript.org">CoffeeScript</a> files upon edit.</p>

<p>Simply launch it from the relevant folder and it will work in the background.</p>

<p>It should be trivial to add minification (and linting, but I suggest linting in the editor) to the process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python2</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">watchdog.events</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">watchdog.observers</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sh</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Detach</span>
</span><span class='line'><span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">fork</span><span class="p">():</span> <span class="n">os</span><span class="o">.</span><span class="n">_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">coffee</span> <span class="o">=</span> <span class="n">sh</span><span class="o">.</span><span class="n">coffee</span><span class="o">.</span><span class="n">bake</span><span class="p">(</span><span class="s">&#39;-c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">less</span> <span class="o">=</span> <span class="n">sh</span><span class="o">.</span><span class="n">lessc</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Handler</span><span class="p">(</span><span class="n">watchdog</span><span class="o">.</span><span class="n">events</span><span class="o">.</span><span class="n">PatternMatchingEventHandler</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">watchdog</span><span class="o">.</span><span class="n">events</span><span class="o">.</span><span class="n">PatternMatchingEventHandler</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">patterns</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;*.less&#39;</span><span class="p">,</span> <span class="s">&#39;*.coffee&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="n">ignore_directories</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">case_sensitive</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_modified</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">src_path</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;.less&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span> <span class="n">less</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">src_path</span><span class="p">,</span> <span class="n">event</span><span class="o">.</span><span class="n">src_path</span><span class="p">[:</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;.css&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="n">sh</span><span class="o">.</span><span class="n">ErrorReturnCode_1</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span> <span class="k">print</span> <span class="n">e</span><span class="o">.</span><span class="n">stderr</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">src_path</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;.coffee&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span> <span class="n">coffee</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">src_path</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="n">sh</span><span class="o">.</span><span class="n">ErrorReturnCode_1</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span> <span class="k">print</span> <span class="n">e</span><span class="o">.</span><span class="n">stderr</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on_created</span> <span class="o">=</span> <span class="n">on_modified</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">event_handler</span> <span class="o">=</span> <span class="n">Handler</span><span class="p">()</span>
</span><span class='line'>    <span class="n">observer</span> <span class="o">=</span> <span class="n">watchdog</span><span class="o">.</span><span class="n">observers</span><span class="o">.</span><span class="n">Observer</span><span class="p">()</span>
</span><span class='line'>    <span class="n">observer</span><span class="o">.</span><span class="n">schedule</span><span class="p">(</span><span class="n">event_handler</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">observer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>        <span class="n">observer</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
</span><span class='line'>    <span class="n">observer</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It requires <code>coffee</code> (<code>npm install coffee-script</code>) and <code>lessc</code> (<code>npm install less</code>).</p>

<p>Should be compatible with Mac OS X and Linux at least, BSD and Win&#8230; maybe.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[GitHub: checkout a pull request as a branch &#10150;]]></title>
      <link href="https://coderwall.com/p/z5rkga"/>
    
    <updated>2013-01-01T06:36:00+01:00</updated>
    <id>http://filosottile.github.com/github-checkout-a-pull-request-as-a-branch</id>
    
      <content type="html"><![CDATA[<p>Today looking at the Travis log of a Pull request build I saw this interesting command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch origin +refs/pull/611/merge:</span></code></pre></td></tr></table></div></figure>


<p>Turns out that GitHub makes available from your main remote the PR branches as remote refs.</p>

<p>Also (discovered by blind guessing), if you change <code>/merge</code> with <code>/head</code> you get a ref to the clean PR head, unmerged with its target branch. What can be the most useful is up to you, I guess.</p>

<p>This is probably easy because GH on its side stores all the forks of a repo as the same Git repository.</p>

<p>An example in the Coderwall ProTip linked at the title.</p>
<br><a href="http://filosottile.github.com/github-checkout-a-pull-request-as-a-branch/">Permalink</a>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Krumiro - send a message to all your Facebook friends]]></title>
      <link href="http://filosottile.github.com/krumiro-send-a-message-to-all-your-facebook-friends/"/>
    
    <updated>2012-12-22T19:20:00+01:00</updated>
    <id>http://filosottile.github.com/krumiro-send-a-message-to-all-your-facebook-friends</id>
    
      <content type="html"><![CDATA[<blockquote><p><strong>Disclamer</strong>: this code is published without any guarantee, and <strong>the author is not responsible for any use or consequence deriving from its use</strong>.
By using it you are accepting this and you accept not to consider the author liable for your use.</p>

<p>For the technically inclined, it&#8217;s all under <a href="http://filosottile.mit-license.org">MIT License</a>.</p></blockquote>

<p>This is a simple script allowing you to send a message to all your Facebook friends.</p>

<h3>Features</h3>

<ul>
<li>Different messages for male and female friends;</li>
<li>Replace <code>%name</code> with the name of the recipient in the messages (like <code>Hi %name! ...</code>);</li>
<li>Configurable time to wait between a message and the next, with total duration prediction;</li>
<li>List of friends to exclude.</li>
</ul>


<p>If you have any request or suggestion, simply leave a comment.</p>

<h3>Installation</h3>

<ul>
<li>Drag this &#8221;<a href="javascript:(function(d){var js, ref = d.getElementsByTagName('script')[0];js = d.createElement('script'); js.async = true;js.src = 'https://gist.github.com/raw/4215248/krumiro_en.js';ref.parentNode.insertBefore(js, ref);}(document));">Krumiro</a>&#8221; to your bookmarks bar;</li>
<li>Done! Now the Krumiro button is ready.</li>
</ul>


<h3>Use</h3>

<ul>
<li>While on a Facebook page, simply click it;</li>
<li>Some windows asking you what to do will show up;</li>
<li>The page will freeze until the script has finished, go grab a coffee, and maybe <a href="https://www.twitter.com">follow me on Twitter</a>.</li>
</ul>


<!-- more -->


<h3>Code (for the curious - it&#8217;s ugly)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">msg_m_prompt</span> <span class="o">=</span> <span class="s1">&#39;Insert the message for males. I\&#39;ll replace %name with the recipient name.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">msg_f_prompt</span> <span class="o">=</span> <span class="s1">&#39;Insert the message for females. I\&#39;ll replace %name with the recipient name.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">throttle_prompt</span> <span class="o">=</span> <span class="s1">&#39;Insert the pause in milliseconds between a friend and the next.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">exclude_prompt</span> <span class="o">=</span> <span class="s1">&#39;Insert the list of friends to ignore, comma separated.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">exerror_alert</span> <span class="o">=</span> <span class="s1">&#39;%s is not in your friends, you might have made a mistake. Do you want to continue?&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">time_alert</span> <span class="o">=</span> <span class="s1">&#39;The script will take %s seconds!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">done</span> <span class="o">=</span> <span class="s1">&#39;Done!&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="o">||</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Object</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nb">Number</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="nx">a</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==-</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">||-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">a</span><span class="p">))));</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">in</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">===</span><span class="nx">d</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">};}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">size</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">key</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="nx">s</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">sleep</span><span class="p">(</span><span class="nx">milliseconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="nx">e7</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">milliseconds</span><span class="p">){</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">send</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">serialize</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span>
</span><span class='line'>         <span class="nx">str</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span> <span class="o">+</span> <span class="s2">&quot;=&quot;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">p</span><span class="p">]));</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&amp;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">random</span><span class="p">(</span><span class="nx">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">min</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">len</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">len</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="nx">min</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">generatePhstamp</span><span class="p">(</span><span class="nx">qs</span><span class="p">,</span> <span class="nx">dtsg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">input_len</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">numeric_csrf_value</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">ii</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ii</span><span class="o">&lt;</span><span class="nx">dtsg</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">ii</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">numeric_csrf_value</span><span class="o">+=</span><span class="nx">dtsg</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">ii</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;1&#39;</span> <span class="o">+</span> <span class="nx">numeric_csrf_value</span> <span class="o">+</span> <span class="nx">input_len</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fbid</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">Env</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][timestamp_relative]&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">()).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][author]&quot;</span><span class="o">:</span> <span class="s2">&quot;fbid:&quot;</span> <span class="o">+</span> <span class="nx">fbid</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][is_cleared]&quot;</span><span class="o">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][message_id]&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">(</span><span class="mi">14</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;@mail.projektitan.com&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][specific_to_list][0]&quot;</span><span class="o">:</span> <span class="s2">&quot;fbid:&quot;</span> <span class="o">+</span> <span class="nx">to</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;__user&quot;</span><span class="o">:</span> <span class="nx">fbid</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][timestamp_absolute]&quot;</span><span class="o">:</span> <span class="s2">&quot;Oggi&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][spoof_warning]&quot;</span><span class="o">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][client_thread_id]&quot;</span><span class="o">:</span> <span class="s2">&quot;user:&quot;</span> <span class="o">+</span> <span class="nx">to</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][source]&quot;</span><span class="o">:</span> <span class="s2">&quot;source:chat:web&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][has_attachment]&quot;</span><span class="o">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][source_tags][0]&quot;</span><span class="o">:</span> <span class="s2">&quot;source:chat&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][body]&quot;</span><span class="o">:</span> <span class="nx">msg</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][is_filtered_content]&quot;</span><span class="o">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][timestamp]&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][is_unread]&quot;</span><span class="o">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][action_type]&quot;</span><span class="o">:</span> <span class="s2">&quot;ma-type:user-generated-message&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;__a&quot;</span><span class="o">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][specific_to_list][1]&quot;</span><span class="o">:</span> <span class="s2">&quot;fbid:&quot;</span> <span class="o">+</span> <span class="nx">fbid</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][html_body]&quot;</span><span class="o">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][status]&quot;</span><span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;client&quot;</span><span class="o">:</span> <span class="s2">&quot;mercury&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;message_batch[0][is_forward]&quot;</span><span class="o">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;fb_dtsg&quot;</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">Env</span><span class="p">.</span><span class="nx">fb_dtsg</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">serialize</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Thanks http://pastebin.com/VJAhUw30</span>
</span><span class='line'>    <span class="nx">req</span> <span class="o">+=</span> <span class="s2">&quot;&amp;phstamp=&quot;</span> <span class="o">+</span> <span class="nx">generatePhstamp</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">fb_dtsg</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">xmlhttp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;/ajax/mercury/send_messages.php&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">buddy</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;https://www.facebook.com/ajax/chat/user_info_all.php?__user=&quot;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">Env</span><span class="p">.</span><span class="nx">user</span> <span class="o">+</span> <span class="s2">&quot;&amp;__a=1&amp;viewer=&quot;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">Env</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">resp</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">9</span><span class="p">));</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">spam</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">msg_m</span><span class="p">,</span> <span class="nx">msg_f</span><span class="p">,</span> <span class="nx">buddy_num</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">pos</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">throttle</span><span class="p">,</span> <span class="nx">exclude</span><span class="p">,</span> <span class="nx">present</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">buddy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">buddy_list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">buddy_num</span> <span class="o">=</span> <span class="nx">size</span><span class="p">(</span><span class="nx">buddy_list</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">msg_m</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="nx">msg_m_prompt</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">msg_f</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="nx">msg_f_prompt</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">exclude</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="nx">exclude_prompt</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">exclude</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">exclude</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">trim</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="nx">exclude</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">exclude</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">present</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">buddy_list</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">buddy_list</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">name</span> <span class="o">==</span> <span class="nx">exclude</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">trim</span><span class="p">())</span> <span class="nx">present</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">present</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">confirm</span><span class="p">(</span><span class="nx">exerror_alert</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;%s&#39;</span><span class="p">,</span> <span class="nx">exclude</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">trim</span><span class="p">())))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">throttle</span> <span class="o">=</span> <span class="o">+</span><span class="nx">prompt</span><span class="p">(</span><span class="nx">throttle_prompt</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">confirm</span><span class="p">(</span><span class="nx">time_alert</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;%s&#39;</span><span class="p">,</span> <span class="nx">buddy_num</span><span class="o">*</span><span class="nx">throttle</span><span class="o">/</span><span class="mi">1000</span><span class="p">)))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">buddy_list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">buddy_list</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">gender</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">msg_f</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">msg_m</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">msg</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;%name&#39;</span><span class="p">,</span> <span class="nx">buddy_list</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">firstName</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">exclude</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">buddy_list</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">send</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">pos</span> <span class="o">%</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">buddy_num</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">pos</span><span class="o">/</span><span class="p">(</span><span class="nx">buddy_num</span><span class="o">/</span><span class="mi">100</span><span class="p">))</span> <span class="o">+</span> <span class="s1">&#39; %&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">pos</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">sleep</span><span class="p">(</span><span class="nx">throttle</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">spam</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Please take this and go signing those updates]]></title>
      <link href="http://filosottile.github.com/please-take-this-and-go-signing-those-updates/"/>
    
    <updated>2012-12-19T20:47:00+01:00</updated>
    <id>http://filosottile.github.com/please-take-this-and-go-signing-those-updates</id>
    
      <content type="html"><![CDATA[<p>If your program does any sort of self-updating, it is <em>fundamental</em> that you <strong>check the update payload integrity</strong>. And no, fetching it over HTTPS might <a href="http://docs.python.org/2/library/urllib2.html">not</a> <a href="http://docs.python.org/3.3/library/urllib.request.html">be</a> <a href="http://www.rubyinside.com/how-to-cure-nethttps-risky-default-https-behavior-4010.html">enough</a>.</p>

<p>Otherwise, anyone who can tamper with the traffic of your users, like anyone on their same network, or their ISP, can trivially get <strong>code execution</strong> by modifying the update while your program downloads it. And yes, <a href="http://www.infobytesec.com/down/isr-evilgrade-Readme.txt">it is exploited in the wild and it is easy</a>.</p>

<p>The common way to sign something is to use RSA, but you might not want to rely on <em>yet another external dependency</em>, with God knows which license&#8230;<br/>
Then, <strong>take this</strong>! It&#8217;s a drop-in, <em>zero-dependency</em> <strong>RSA signature verifying function</strong> that run on Python 2.4+ (seriously) and&#8230; it&#8217;s in the Public Domain (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>), it&#8217;s yours.</p>

<figure class='code'><figcaption><span>rsa_verify.py </span><a href='https://gist.github.com/4340076#file-rsa_verify-py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">rsa_verify</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">signature</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha256</span> <span class="c"># You&#39;ll need the backport for 2.4 http://code.krypto.org/python/hashlib/</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">version_info</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">b</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">version_info</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;latin1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="o">==</span> <span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">block_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">key</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>        <span class="n">block_size</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>    <span class="n">signature</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">signature</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="n">key</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">key</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="n">raw_bytes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">signature</span><span class="p">:</span>
</span><span class='line'>        <span class="n">raw_bytes</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;B&quot;</span><span class="p">,</span> <span class="n">signature</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">))</span>
</span><span class='line'>        <span class="n">signature</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>    <span class="n">signature</span> <span class="o">=</span> <span class="p">(</span><span class="n">block_size</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">raw_bytes</span><span class="p">))</span> <span class="o">*</span> <span class="n">b</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">raw_bytes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">signature</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x00\x01</span><span class="s">&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">signature</span> <span class="o">=</span> <span class="n">signature</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">b</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span><span class="p">)</span> <span class="ow">in</span> <span class="n">signature</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">signature</span> <span class="o">=</span> <span class="n">signature</span><span class="p">[</span><span class="n">signature</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">b</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">signature</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">b</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x30\x31\x30\x0D\x06\x09\x60\x86\x48\x01\x65\x03\x04\x02\x01\x05\x00\x04\x20</span><span class="s">&#39;</span><span class="p">)):</span> <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">signature</span> <span class="o">=</span> <span class="n">signature</span><span class="p">[</span><span class="mi">19</span><span class="p">:]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">signature</span> <span class="o">!=</span> <span class="n">sha256</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">():</span> <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/4340076">Here</a> are the instructions on how to generate your private and public keys and how to sign new updates. Don&#8217;t worry, it&#8217;s all really easy; if you happen to encounter any issues, shoot me a mail at <code>filippo.valsorda -&gt; gmail.com</code>!</p>

<p>I am sufficiently proficient only in Python, so if any C, Perl, PHP or Brainfuck guru wants to show up and contribute the same function in another language, it would be awesome!</p>

<p>Now you don&#8217;t have any excuses anymore (at least you Python devs): <strong>go signing your updates</strong>!<br/>
(And maybe also <a href="https://www.twitter.com/FiloSottile">following me on Twitter</a>)</p>
]]></content>
    
  </entry>
  
</feed>
