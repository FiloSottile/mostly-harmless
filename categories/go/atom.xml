<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | PyTux]]></title>
  <link href="http://filippo.io/categories/go/atom.xml" rel="self"/>
  <link href="http://filippo.io/"/>
  <updated>2014-03-18T04:43:43+01:00</updated>
  <id>http://filippo.io/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Callback-based combinations (in Go)]]></title>
    <link href="http://filippo.io/callback-based-combinations-in-go/"/>
    <updated>2014-01-16T15:20:00+01:00</updated>
    <id>http://filippo.io/callback-based-combinations-in-go</id>
    <content type="html"><![CDATA[<p>Let’s have a look at this task: generate all the <strong>combinations of <em>k</em> elements out of <em>N</em></strong>. That is, all the <em>unordered k-tuples</em> made of elements from a pool of length N. <a href="https://en.wikipedia.org/wiki/Combination">See Wikipedia</a> for more.</p>

<p>An example of an application: if you are bruteforcing two misspellings in a password, the optimal set of couples of characters to bruteforce at the same time is the set of all the combinations of 2 characters out of the password.</p>

<p>There are a number of ways you can do this in code. Algorithm-wise you have to choose between a recursive approach and an iterative one. The recursive one might be more immediate for some people, but it does. Not. Scale. (<em>Recursion limit reached</em> anyone?) Also in some languages <strong>function calls are really expensive</strong>.</p>

<p>However what this article is about is how to grab the output. First you have to decide whether to return <em>k</em>-tuples of indices in 0 – N-1 or of actual pool elements.</p>

<p>For example with a pool of elements of <code>qwerty</code> and a <em>k</em> of 2, you can decide to return values like <code>(q, t)</code> and <code>(t, y)</code> or <code>(0, 4)</code> and <code>(4, 5)</code>.</p>

<!-- more -->

<p>My opinion is that you should always prefer the indices:</p>

<ul>
  <li>to return actual elements you have to pass the pool to the algorithm;</li>
  <li>you can reuse a set of indices over two same-size pools;</li>
  <li>for some tasks you can avoid the work of extracting the values from the pool by index all the times (e.g. if you filter them);</li>
  <li>by returning elements you lose information about their index that might be irrecoverable (if there are duplicates in the pool) or expensive to recover (<code>O(N)</code>);</li>
  <li>sometimes, well, you just need the indices.</li>
</ul>

<p>Then, you can think to a number of approaches here:</p>

<ol>
  <li>just return an array or a set of all the combinations</li>
  <li>yield them (if you have support for generators)</li>
  <li>call a callback on each one</li>
  <li>plainly process them where you generate them</li>
</ol>

<p>I prefer by far the callback approach:</p>

<ul>
  <li>it is supported in much more languages than generators;</li>
  <li>can be used elegantly and succinctly with anonymous functions;</li>
  <li><strong>doesn’t require <code>k*N</code> memory</strong>, you can just filter or process them on the fly;</li>
  <li>you can build any other approach over it, e.g. by passing a <code>append</code> function as the callback;</li>
  <li>by using closures you can share the callee scope;</li>
  <li>keeps your code <a href="https://en.wikipedia.org/wiki/Don%27t_Repeat_Yourself">DRY</a>.</li>
</ul>

<p>So, code! Here are the Go snippets for combinations with and without repetitions. Most of it was translated to Go from <a href="http://docs.python.org/2/library/itertools.html#itertools.combinations">the Python documentation</a> and adapted according to the contents of this article.</p>

<p><div><script src='https://gist.github.com/8463644.js?file=combinations.go'></script>
<noscript><pre><code>func combinations(n, m int, f func([]int)) {
	// For each combination of m elements out of n
	// call the function f passing a list of m integers in 0-n
	// without repetitions
	
	// TODO: switch to iterative algo
	s := make([]int, m)
	last := m - 1
	var rc func(int, int)
	rc = func(i, next int) {
		for j := next; j &lt; n; j++ {
			s[i] = j
			if i == last {
				f(s)
			} else {
				rc(i+1, j+1)
			}
		}
		return
	}
	rc(0, 0)
}</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/8463644.js?file=combinations_with_replacement.go'></script>
<noscript><pre><code>func combinations_with_replacement(n, m int, f func([]int)) {
	// For each combination of m elements out of n
	// call the function f passing a list of m integers in 0-n
	// with repetitions
	indices := make([]int, m)
	f(indices)

	for {
		var i int
		for i = m - 1; i &gt;= 0; i-- {
			if indices[i] != n-1 {
				break
			}
		}
		if i &lt; 0 {
			break
		}

		indices_i := indices[i]
		for k := i; k &lt; m; k++ {
			indices[k] = indices_i + 1
		}
		f(indices)
	}
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
