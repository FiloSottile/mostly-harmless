<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: crypto | PyTux]]></title>
  <link href="https://filippo.io/categories/crypto/atom.xml" rel="self"/>
  <link href="https://filippo.io/"/>
  <updated>2014-06-29T14:51:21+02:00</updated>
  <id>https://filippo.io/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Keybase.io and encrypted private key uploading]]></title>
    <link href="https://filippo.io/on-keybase-dot-io-and-encrypted-private-key-sharing/"/>
    <updated>2014-03-31T21:15:00+02:00</updated>
    <id>https://filippo.io/on-keybase-dot-io-and-encrypted-private-key-sharing</id>
    <content type="html"><![CDATA[<p>One thing in particular of Keybase.io attracts a lot heat recently: they support uploading your encrypted key on their servers. This usually is pointed at as a mortal sin.</p>

<p>Well, here is my private key, the untouched output of <code>gpg --armor --export-secret-keys filippo.io | gpg --armor --clearsign</code>.</p>

<p>```
—–BEGIN PGP SIGNED MESSAGE—–
Hash: SHA512</p>

<ul>
  <li>—–BEGIN PGP PRIVATE KEY BLOCK—–
Version: GnuPG v1</li>
</ul>

<p>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
roqkWuFinvGPsdX//BcJPMZyAGfCa577lT+Y
=ROzK
- —–END PGP PRIVATE KEY BLOCK—–
—–BEGIN PGP SIGNATURE—–
Version: GnuPG v1</p>

<p>iQEcBAEBCgAGBQJTOcOhAAoJECBNgkAQH1IWD5gH/2lGtDIu3d5GWA+GRRc1mL1I
FA1w2jdB1m4RGDgQWi7xX38cx0/8J8b+OzYKxC0pYezoKBmWMEa/xCdKIwrDLcBg
bx89qYgbeyJYY3B0PrVMBa2NdkNr8J1RXv+GVOUpkhJiVJY9OSJKmjDbVnpL5jEZ
3+j3DXK+5c56LdsWAQ5x5ZPyDWL6vEAUTxwL89Uy7GQSmeA7yh2j+xrjd2wBgAzq
FC/2wKJZYDLLuFFqMwi8fsX1vfsll/eAlb++vbel4pdunqqG4eW0C69jqe+RMyNK
1+YkPzGAJf7KWMcYzk9bzpFBEHmNh+0ZWiXkfrOsOw+vQjHJbXN8wE5pszBD0og=
=2qD5
—–END PGP SIGNATURE—–
```{:.short}</p>

<p>What you have now on me <strong>is what Keybase would have</strong> on anyone that uploaded their private key, and this is not even TripleSec’d, is just my very own, signed by many people, regular PGP key as it lives password protected on my laptop. And now on my blog. (Isn’t it Backup Day or something?)</p>

<p>If this is indeed dangerous you will shortly see messages signed by me saying that I stink, and immediately after me waving revocation certificates in the air. But it’s not going to happen, because decrypting the above is arguably as difficult as computing my secret key from the public one.</p>

<!-- more -->

<h2 id="the-sensible-argument">The sensible argument</h2>

<p>There is however a more informed point that is made against uploading your key: “<em>what if they start serving a keylogger on their site?</em>”</p>

<p>However here the issue <strong>is not</strong> having uploaded the private key to the Keybase servers <strong>but using the in-browser client</strong>. If the server turns malicious and you are doing crypto in the browser, you are pwn’d, otherwise you are not.</p>

<p>Let’s look at the threat models.</p>

<h4 id="keybase-is-compromised-you-use-the-website-to-do-crypto">Keybase is compromised; you use the website to do crypto</h4>

<p>The attacker does not need to upload any keylogger, they just modify the code to catch your decrypted private key while you use it and send it hidden in the next upload. The End.</p>

<h4 id="keybase-is-compromised-you-use-the-cli-client-uncompromised">Keybase is compromised; you use the CLI client (uncompromised)</h4>

<p>Here the attacker has only an encryption of the private key as the one above, you keep using your client happily and when he desperately upload a keylogger to the site you just go like “WTF!? I don’t do crypto in the browser, why is it asking me some password? MAX!”</p>

<h4 id="the-cli-client-is-compromised">The CLI client is compromised</h4>

<p>Goodbye. Your computer is compromised, don’t even try. But this holds true of any tool, even the very GnuPG.</p>

<hr />

<p><a href="https://news.ycombinator.com/item?id=7503931">Discuss (or post messages signed by me) on HN</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The ECB Penguin]]></title>
    <link href="https://filippo.io/the-ecb-penguin/"/>
    <updated>2013-11-10T19:54:00+01:00</updated>
    <id>https://filippo.io/the-ecb-penguin</id>
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/f0/Tux_ecb.jpg" alt="Tux ecb.jpg" class="center" /></p>

<p>This is an image that has become kind of a cultural icon in the cryptography and InfoSec community. I’m speaking about “the penguin”, a picture of the <a href="https://commons.wikimedia.org/wiki/File:Tux.jpg">Tux Linux mascot</a> encrypted with a block cipher in <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29">ECB mode</a> that still shows clearly the outline of the original.</p>

<div class="reset-zoom"><blockquote class="twitter-tweet" data-conversation="none" align="center" data-dnt="true"><p>.<a href="https://twitter.com/solardiz">@solardiz</a> <a href="https://twitter.com/ErrataRob">@ErrataRob</a> ECB mode strikes again, I see. It&#39;s hard to believe there&#39;s anyone left who hasn&#39;t seen the penguin.</p>&mdash; Andrea (@puellavulnerata) <a href="https://twitter.com/puellavulnerata/statuses/396863689602519041">November 3, 2013</a></blockquote>
<script async="" src="https://filippo.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<!-- more -->

<p><img src="/images/ecb penguin - Google.png" alt="Google suggestions" class="center" /></p>

<h2 id="ecb">ECB</h2>

<p>You have a cipher, that with a key will encrypt 16 bytes of data. And you have some data, that is more than 16 bytes. So you have a problem. Well, ECB is the wrong solution to that problem: you just encrypt each 16-bytes block separately.</p>

<p>Why is it wrong? Because this way blocks that were equal before encryption will <strong>remain equal</strong> also after! And this will lead to all kinds of unwanted consequences.</p>

<p>One good example is the recent <a href="/analyzing-the-adobe-leaked-passwords/">Adobe passwords crossword game</a> but the best visualization of the concept is him, the penguin!</p>

<h2 id="the-original">The original</h2>

<p>The <a href="https://en.wikipedia.org/wiki/File:Tux_ecb.jpg">original image</a> has been created by <a href="https://en.wikipedia.org/wiki/User:Lunkwill">User:Lunkwill</a> of en.wikipedia in 2004 and added to the page “<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">Block cipher mode of operation</a>” with <a href="https://en.wikipedia.org/w/index.php?title=Block_cipher_mode_of_operation&amp;diff=prev&amp;oldid=2191923">this edit</a>.</p>

<p>It has even been <a href="https://en.wikipedia.org/wiki/Wikipedia:Featured_picture_candidates/April-2004#Tux_ecb.jpg">proposed as a Wikipedia featured picture</a>.</p>

<p>Nothing more is known about the original. I wrote an email to the author, and I will update the blog post if he replies.</p>

<h2 id="my-take-at-it">My take at it</h2>

<p>The picture is amazing, but rather low quality even for screen, let alone for printing. So, I decided to generate my own.</p>

<p>First thing needed was an image format where the pixels were represented sequentially as plain bytes, without any compression, and possibly with a simple header. The perfect candidate turned out to be the <a href="https://en.wikipedia.org/wiki/Netpbm_format#PPM_example">PPM binary format</a>, part of the Netpbm spec. (It is just basically a ASCII header and then a sequence of 3-bytes RGB representations of the pixels.)</p>

<p>Here is the process:</p>

<p><code>bash
# First convert the Tux to PPM with Gimp
# Then take the header apart
head -n 4 Tux.ppm &gt; header.txt
tail -n +5 Tux.ppm &gt; body.bin
# Then encrypt with ECB (experiment with some different keys)
openssl enc -aes-128-ecb -nosalt -pass pass:"ANNA" -in body.bin -out body.ecb.bin
# And finally put the result together and convert to some better format with Gimp
cat header.txt body.ecb.bin &gt; Tux.ecb.ppm
</code></p>

<p>And the result! (<a href="http://www.cafepress.com/ecbpenguin.1060438520">Prints on sale</a>, it makes for a great nerdy office decoration, much like “Crypto Safety Procedures”)</p>

<p><a href="/images/Tux-ECB.png"><img src="/images/Tux-ECB-small.png" alt="Tux ecb.jpg" class="center" /></a></p>

<h3 id="bonus-pop-art">Bonus: pop art</h3>

<p>Also, the color combinations spawning from the different keys reminded me of the <a href="https://www.google.com/search?q=Marilyn+Monroe+by+Andy+Warhol&amp;tbm=isch">Marilyn Monroe by Andy Warhol</a>, so… (<a href="http://www.cafepress.com/ecbpenguin.1060711059">Poster</a>!)</p>

<p><img src="/images/POP-xsmall.png" alt="POP Tuxes" class="center" /></p>

<p><a href="http://www.cafepress.com/ecbpenguin">Visit the shop</a> for other ECB Tux gear! Or just <a href="https://twitter.com/FiloSottile">follow me</a> on Twitter.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please take this and go signing those updates]]></title>
    <link href="https://filippo.io/please-take-this-and-go-signing-those-updates/"/>
    <updated>2012-12-19T20:47:00+01:00</updated>
    <id>https://filippo.io/please-take-this-and-go-signing-those-updates</id>
    <content type="html"><![CDATA[<p>If your program does any sort of self-updating, it is <em>fundamental</em> that you <strong>check the update payload integrity</strong>. And no, fetching it over HTTPS might <a href="http://docs.python.org/2/library/urllib2.html">not</a> <a href="http://docs.python.org/3.3/library/urllib.request.html">be</a> <a href="http://www.rubyinside.com/how-to-cure-nethttps-risky-default-https-behavior-4010.html">enough</a>.</p>

<p>Otherwise, anyone who can tamper with the traffic of your users, like anyone on their same network, or their ISP, can trivially get <strong>code execution</strong> by modifying the update while your program downloads it. And yes, <a href="http://www.infobytesec.com/down/isr-evilgrade-Readme.txt">it is exploited in the wild and it is easy</a>.</p>

<p>The common way to sign something is to use RSA, but you might not want to rely on <em>yet another external dependency</em>, with God knows which license…<br />
Then, <strong>take this</strong>! It’s a drop-in, <em>zero-dependency</em> <strong>RSA signature verifying function</strong> that run on Python 2.4+ (seriously) and… it’s in the Public Domain (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>), it’s yours.</p>

<p><div><script src='https://gist.github.com/4340076.js?file=rsa_verify.py'></script>
<noscript><pre><code>def rsa_verify(message, signature, key):
    from struct import pack
    from hashlib import sha256 # You'll need the backport for 2.4 http://code.krypto.org/python/hashlib/
    from sys import version_info
    def b(x):
        if version_info[0] == 2: return x
        else: return x.encode('latin1')
    assert(type(message) == type(b('')))
    block_size = 0
    n = key[0]
    while n:
        block_size += 1
        n &gt;&gt;= 8
    signature = pow(int(signature, 16), key[1], key[0])
    raw_bytes = []
    while signature:
        raw_bytes.insert(0, pack(&quot;B&quot;, signature &amp; 0xFF))
        signature &gt;&gt;= 8
    signature = (block_size - len(raw_bytes)) * b('\x00') + b('').join(raw_bytes)
    if signature[0:2] != b('\x00\x01'): return False
    signature = signature[2:]
    if not b('\x00') in signature: return False
    signature = signature[signature.index(b('\x00'))+1:]
    if not signature.startswith(b('\x30\x31\x30\x0D\x06\x09\x60\x86\x48\x01\x65\x03\x04\x02\x01\x05\x00\x04\x20')): return False
    signature = signature[19:]
    if signature != sha256(message).digest(): return False
    return True</code></pre></noscript></div>
</p>

<p><a href="https://gist.github.com/4340076">Here</a> are the instructions on how to generate your private and public keys and how to sign new updates. Don’t worry, it’s all really easy; if you happen to encounter any issues, shoot me a mail at <code>filippo.valsorda -&gt; gmail.com</code>!</p>

<p>I am sufficiently proficient only in Python, so if any C, Perl, PHP or Brainfuck guru wants to show up and contribute the same function in another language, it would be awesome!</p>

<p>Now you don’t have any excuses anymore (at least you Python devs): <strong>go signing your updates</strong>!<br />
(And maybe also <a href="https://www.twitter.com/FiloSottile">following me on Twitter</a>)</p>
]]></content>
  </entry>
  
</feed>
