<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: imported | PyTux]]></title>
  <link href="https://filippo.io/categories/imported/atom.xml" rel="self"/>
  <link href="https://filippo.io/"/>
  <updated>2014-06-29T02:19:14+02:00</updated>
  <id>https://filippo.io/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Taking Retina screenshots with PhantomJS]]></title>
    <link href="https://filippo.io/taking-retina-screenshots-with-phantomjs/"/>
    <updated>2012-05-12T16:44:00+02:00</updated>
    <id>https://filippo.io/taking-retina-screenshots-with-phantomjs</id>
    <content type="html"><![CDATA[<p>With <a href="http://phantomjs.org">PhantomJS</a>, a headless WebKit browser with Javascript API, you can automatically render a webpage like you see it on your screen in an image or PDF. This is an awesome feature, useful for testing or - thatâ€™s what I use it for - rendering some elements of the page as images for later use.</p>

<p>Here I will explain how to take Retina-like screenshots. These are screenshots with double width and height for the same element where the details are rendered with double the precision. There are different reasons to want that: you might not own a new iPad or an iPhone4* and want to see how your website would look on these devices or you might want to add a Retina unit test to your awesome test stack. I want to render text to images so that they will still look sharp on Retina screens when used as replacements.</p>

<p>The key is the CSS3 <a href="http://www.w3schools.com/css3/css3_2dtransforms.asp"><code>transform</code></a> property and its <code>scale(2)</code> value, plus a couple of tweaks.
<!--more-->
Here is a modified version of the rasterize.js example to output Retina screenshots.
<div><script src='https://gist.github.com/2667199.js?file=rasterize.js'></script>
<noscript><pre><code>var page = require('webpage').create(),
    address, output, size;

if (phantom.args.length &lt; 2 || phantom.args.length &gt; 3) {
    console.log('Usage: rasterize.js URL filename');
    phantom.exit();
} else {
    address = phantom.args[0];
    output = phantom.args[1];
    page.viewportSize = { width: 1280, height: 1024 };
    page.open(address, function (status) {
        if (status !== 'success') {
            console.log('Unable to load the address!');
        } else {
            page.evaluate(function () {
                /* scale the whole body */
                document.body.style.webkitTransform = &quot;scale(2)&quot;;
                document.body.style.webkitTransformOrigin = &quot;0% 0%&quot;;
                /* fix the body width that overflows out of the viewport */
                document.body.style.width = &quot;50%&quot;;
            });
            window.setTimeout(function () {
                page.render(output);
                phantom.exit();
            }, 200);
        }
    });
}</code></pre></noscript></div>
</p>

<h3 id="bonus">Bonus</h3>
<p>You might want to render only a single element, for example your content div or your always-buggy sidebar, to an image.<br />
Well, have a look at <a href="https://developer.mozilla.org/en/DOM/element.getBoundingClientRect"><code>element.getBoundingClientRect</code></a> (<a href="http://ejohn.org/blog/getboundingclientrect-is-awesome/">getBoundingClientRect is Awesome</a>) and PhantomJS <a href="https://github.com/ariya/phantomjs/wiki/API-Reference#wiki-webpage-clipRect"><code>page.clipRect</code></a>.</p>

<p>Here is a spoiler ;)
<div><script src='https://gist.github.com/2667279.js?file=gistfile1.js'></script>
<noscript><pre><code>page.clipRect = page.evaluate(function() {
    return document.getElementById(ELEMENT_ID).getBoundingClientRect(); 
});</code></pre></noscript></div>
</p>

<h3 id="references">References</h3>
<ul>
  <li><a href="http://fcargoet.evolix.net/2012/01/use-phantomjs-to-take-screenshots-of-you-webapp-for-you/">Use PhantomJS to take screenshots of your webapp for you</a> - /home/florian</li>
  <li><a href="https://github.com/ariya/phantomjs/wiki/Screen-Capture">Rendering QuickStart example</a> - PhantomJs Wiki</li>
  <li><a href="https://github.com/ariya/phantomjs/wiki/API-Reference#wiki-webpage-render"><code>render()</code> API reference</a> </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send a HEAD request in Python]]></title>
    <link href="https://filippo.io/send-a-head-request-in-python/"/>
    <updated>2012-03-18T17:53:00+01:00</updated>
    <id>https://filippo.io/send-a-head-request-in-python</id>
    <content type="html"><![CDATA[<p>There are a lot of questions on this topic around the web and common answers are to use <code>httplib</code>, that however is a really-low level library, or to use <code>urllib2</code>, but a lot of people complains about it returning to <code>GET</code> if following a redirect.</p>

<p>Here is my <code>urllib2</code> solution, written looking at the code of <code>urllib2.HTTPRedirectHandler</code> and subclassing it in order to make it keep using the <code>HeadRequest</code>.</p>

<p><div><script src='https://gist.github.com/2077204.js?file=HEAD-request.py'></script>
<noscript><pre><code>import urllib2

class HeadRequest(urllib2.Request):
    def get_method(self):
        return &quot;HEAD&quot;

class HEADRedirectHandler(urllib2.HTTPRedirectHandler):
    &quot;&quot;&quot;
    Subclass the HTTPRedirectHandler to make it use our 
    HeadRequest also on the redirected URL
    &quot;&quot;&quot;
    def redirect_request(self, req, fp, code, msg, headers, newurl): 
        if code in (301, 302, 303, 307):
            newurl = newurl.replace(' ', '%20') 
            return HeadRequest(newurl, 
                               headers=req.headers, 
                               origin_req_host=req.get_origin_req_host(), 
                               unverifiable=True) 
        else: 
            raise urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp)

# Build our opener with the HEADRedirectHandler
opener = urllib2.OpenerDirector() 
for handler in [urllib2.HTTPHandler, urllib2.HTTPDefaultErrorHandler,
                HEADRedirectHandler,
                urllib2.HTTPErrorProcessor, urllib2.HTTPSHandler]:
    opener.add_handler(handler())

response = opener.open(HeadRequest(url))

print response.geturl()
print response.info()</code></pre></noscript></div>
</p>

<p>For example, here is a fast URL un-shortener (redirect follower) realized with the method above (and a fallback).</p>

<p><div><script src='https://gist.github.com/2077115.js?file=redirect-follower.py'></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys
import urllib2

# This script uses HEAD requests (with fallback in case of 405) 
# to follow the redirect path up to the real URL
# (c) 2012 Filippo Valsorda - FiloSottile
# Released under the GPL license

class HeadRequest(urllib2.Request):
    def get_method(self):
        return &quot;HEAD&quot;

class HEADRedirectHandler(urllib2.HTTPRedirectHandler):
    &quot;&quot;&quot;
    Subclass the HTTPRedirectHandler to make it use our 
    HeadRequest also on the redirected URL
    &quot;&quot;&quot;
    def redirect_request(self, req, fp, code, msg, headers, newurl): 
        if code in (301, 302, 303, 307):
            newurl = newurl.replace(' ', '%20') 
            newheaders = dict((k,v) for k,v in req.headers.items()
                              if k.lower() not in (&quot;content-length&quot;, &quot;content-type&quot;))
            return HeadRequest(newurl, 
                               headers=newheaders,
                               origin_req_host=req.get_origin_req_host(), 
                               unverifiable=True) 
        else: 
            raise urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp) 
            
class HTTPMethodFallback(urllib2.BaseHandler):
    &quot;&quot;&quot;
    Fallback to GET if HEAD is not allowed (405 HTTP error)
    &quot;&quot;&quot;
    def http_error_405(self, req, fp, code, msg, headers): 
        fp.read()
        fp.close()

        newheaders = dict((k,v) for k,v in req.headers.items()
                          if k.lower() not in (&quot;content-length&quot;, &quot;content-type&quot;))
        return self.parent.open(urllib2.Request(req.get_full_url(), 
                                         headers=newheaders, 
                                         origin_req_host=req.get_origin_req_host(), 
                                         unverifiable=True))

# Build our opener
opener = urllib2.OpenerDirector() 
for handler in [urllib2.HTTPHandler, urllib2.HTTPDefaultErrorHandler,
                HTTPMethodFallback, HEADRedirectHandler,
                urllib2.HTTPErrorProcessor, urllib2.HTTPSHandler]:
    opener.add_handler(handler())

response = opener.open(HeadRequest(sys.argv[1]))

print response.geturl()</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
