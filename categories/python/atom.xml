<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | PyTux]]></title>
  <link href="http://filippo.io/categories/python/atom.xml" rel="self"/>
  <link href="http://filippo.io/"/>
  <updated>2014-01-27T05:10:09+01:00</updated>
  <id>http://filippo.io/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add support for a new video site to youtube-dl]]></title>
    <link href="http://filippo.io/add-support-for-a-new-video-site-to-youtube-dl/"/>
    <updated>2014-01-27T02:12:00+01:00</updated>
    <id>http://filippo.io/add-support-for-a-new-video-site-to-youtube-dl</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/rg3/youtube-dl">youtube-dl</a> is a very feature packed command line video downloader. Contrary to what the name might make you think, it supports way more sites than YouTube. <strong>240</strong> as of <a href="https://github.com/rg3/youtube-dl/tree/5700e7792aed45d6504ae957610d8254d5bb073f"><code>5700e77</code></a>.</p>

<p>What makes this possible is the structure of ytdl and its awesome community: all the common stuff (CLI, Downloading, Postprocessing) is in the core, and websites support is added in a plugin fashion (with a lot of helper functions available). So anyone can add support for its favorite video site by using another plugin as a template, with no need to understand the whole codebase. And a lot of people indeed did: <a href="https://github.com/rg3/youtube-dl/pulls">we’re nearing <strong>500 Pull Requests</strong></a>!</p>

<p>So, what I’m going to show you today is how to add support to ytdl for a simple site (I picked <a href="https://vine.co/">Vine</a> for the tutorial) and how to contribute to ytdl in general.</p>

<!-- more -->

<h2 id="how-ytdl-is-organized">How ytdl is organized</h2>

<p>The website plugins are called Information Extractors – IE – and their role is clear and simple:</p>

<ol>
  <li>they describe what URLs they are able to interpret (with a regex)</li>
  <li>they get a input URL, usually interact with the site and return a dictionary of information about the video, including its video file URL and its title <em>(over-simplified)</em></li>
</ol>

<p>You can find IEs in <code>youtube_dl/extractor</code>.</p>

<p>The rest of ytdl deals with parsing the input arguments (<code>youtube_dl/__init__.py</code>), downloading the file (<code>youtube_dl.downloader</code>) and post-processing (<code>youtube_dl.postprocessor</code>)</p>

<h2 id="lets-get-started">Let’s get started</h2>

<p>Of course, if you didn’t already <code>git clone</code> ytdl GitHub repository and make sure it’s up-to-date.</p>

<p>Remove the existing Vine IE if you want to follow along the tutorial step by step</p>

<p><code>bash
rm youtube_dl/extractor/vine.py
sed -i '/VineIE/d' youtube_dl/extractor/__init__.py
</code></p>

<h2 id="anatomy-of-a-ie">Anatomy of a IE</h2>

<p>We already know that a IE is found in <code>youtube_dl/extractor</code>, but how does it look like?</p>

<p>Each site has its own file, named <code>lowercase_site.py</code>. Inside it, a subclass of <code>youtube_dl.extractor.common.InfoExtractor</code> named <code>CameCaseSiteIE</code> is defined.</p>

<p>That subclass has a property, <code>_VALID_URL</code>, a regex that defines what URLs will be handled by the IE (a <code>re.match</code> is performed) and is usually reused to extract for example the video id.</p>

<p>The only other thing needed is the <code>_real_extract</code> method. It takes a URL as its only argument and return a list of dicts, one for each video (usually just one), with <em>at least</em> the following fields:</p>

<ul>
  <li><code>id</code>: a short video id, should be unique for the site, usually it is site-internal</li>
  <li><code>url</code>: the URL of the actual downloadable video file</li>
  <li><code>ext</code>: the extension of the video file</li>
  <li><code>title</code>: the human-readable full title of the video, all characters allowed, Unicode possibly</li>
</ul>

<p>So, this is how our bare VineIE should start looking like:</p>

<p>```python
from .common import InfoExtractor</p>

<p>class VineIE(InfoExtractor):
    _VALID_URL = r’(?:https?://)?(?:www.)?vine.co/.*’</p>

<pre><code>def _real_extract(self, url):
    return [] ```
</code></pre>

<p>Finally, each IE is imported inside <code>youtube_dl/extractor/__init__.py</code> to be exposed. So, you’ll want to add a line like this to that file (please note that the IEs are alphabetically sorted)</p>

<p><code>python
from .vine import VineIE
</code></p>

<p>Just this line will be enough.</p>

<p><strong>A note about syntax</strong>: ytdl is a Python2/3 double codebase – that means, it runs both on Python 2 and Python 3, so be careful to use features and statements that are cross-compatible. You’ll find all the compatibility imports already done for you in <code>youtube_dl.utils</code>.</p>

<h2 id="how-to-run-it">How to run it</h2>

<p>Before digging deeper, let’s see how to test-run our development ytdl.</p>

<p>Since youtube_dl is a executable Python package, you can run it from inside your working directory like this</p>

<p><code>
python -m youtube_dl URL
</code></p>

<p>So to run our Vine IE we would use something like</p>

<p><code>
python -m youtube_dl vine.co/foo
</code></p>

<p>That indeed does not generate any output or error, great.</p>

<h2 id="now-lets-look-at-vine">Now let’s look at Vine</h2>

<p>The first thing you want to do is get a bunch of different videos from your target site, and try to spot the differences. In particular, start with the URL pattern and test assumptions about what parts of it are required or optional.</p>

<p>Here is a Vine for you: <a href="https://vine.co/v/b9KOOWX7HUx"><code>https://vine.co/v/b9KOOWX7HUx</code></a></p>

<p>The Vine URL pattern is really simple “<code>https://vine.co/v/VIDEO_ID</code>” so we can rewrite <code>_VALID_URL</code> as:</p>

<p><code>python
_VALID_URL = r'(?:https?://)?(?:www\.)?vine\.co/v/(?P&lt;id&gt;\w+)'
</code></p>

<p>So we can start doing some useful stuff in <code>_real_extract</code>:</p>

<p>```python
mobj = re.match(self._VALID_URL, url)</p>

<p>video_id = mobj.group(‘id’)
webpage_url = ‘https://vine.co/v/’ + video_id
webpage = self._download_webpage(webpage_url, video_id)
```</p>

<p><code>InfoExtractor._download_webpage</code> downloads a webpage logging progress (this is what <code>video_id</code> is used for) and handles errors.</p>

<p>Feel free to add a <code>print webpage</code> at the bottom of the function and run with <code>python -m youtube_dl https://vine.co/v/b9KOOWX7HUx</code> to check that everything is working.</p>

<h2 id="the-fun-part-reversing">The fun part: reversing</h2>

<p>Ok, so we have the page HTML and we know what we want to extract, now let’s dissect the page to get our file out.</p>

<p>For this I usually turn to Chrome and its Developer Tools. The Network tab is invaluable in identifying what your final goal is, and so what you should be looking for.</p>

<p>However Vine is really friendly, and a simple right-click &gt; Inspect Element on the playing video will be enough</p>

<p><img src="/images/Jack Dorsey's post on Vine 2014-01-27 04-25-35.png" alt="The video tag" /></p>

<p>So, we just have to get the mp4 URL out of the <code>source</code> tag. <em>Tip</em>: use the Developer Tools to spot what you’re looking for, but then build your regex based on the actual page source, as pretty printing WILL get in your way and the live DOM might be substantially different from the source.</p>

<p>A regex like this should fit: <code>&lt;source src="([^"]+)" type="video/mp4"&gt;</code></p>

<p>Here comes the next step in our IE:</p>

<p>```python
# Log that we are starting to parse the page
self.report_extraction(video_id)</p>

<p>video_url = self._html_search_regex(r’&lt;meta property=”twitter:player:stream” content=”(.+?)”’, webpage, u’video URL’)
```</p>

<p><code>InfoExtractor._html_search_regex</code>, as above, is a helper function that does the boilerplate searching, logging and error handling for you.</p>

<p>Only the title to go. Again, modern pages help: we can piggyback on Facebook-targeted OpenGraph metadata to reliably extract the title</p>

<p><img src="/images/Jack Dorsey's post on Vine 2014-01-27 04-37-45.png" alt="The OpenGraph tag" /></p>

<p>Aaaand, there’s a helper for that! The whole <code>InfoExtractor._og_search_*</code> suite.</p>

<p>Let’s put this last piece in place and return our data</p>

<p><code>python
return [{
    'id':        video_id,
    'url':       video_url,
    'ext':       'mp4',
    'title':     self._og_search_title(webpage),
}]
</code></p>

<p><strong>Note</strong>: there are better ways to parse HTML than regexes, but ytdl is Public Domain and self-contained, so using external libraries is not an option.</p>

<h2 id="finish">Finish</h2>

<p>Putting it all together, this should be more or less your final result</p>

<p>```python
import re</p>

<p>from .common import InfoExtractor</p>

<p>class VineIE(InfoExtractor):
    _VALID_URL = r’(?:https?://)?(?:www.)?vine.co/v/(?P<id>\w+)'</id></p>

<pre><code>def _real_extract(self, url):
    mobj = re.match(self._VALID_URL, url)

    video_id = mobj.group('id')
    webpage_url = 'https://vine.co/v/' + video_id
    webpage = self._download_webpage(webpage_url, video_id)

    # Log that we are starting to parse the page
    self.report_extraction(video_id)

    video_url = self._html_search_regex(r'&lt;meta property="twitter:player:stream" content="(.+?)"', webpage, u'video URL')

    return [{
        'id':        video_id,
        'url':       video_url,
        'ext':       'mp4',
        'title':     self._og_search_title(webpage),
    }] ```
</code></pre>

<p>With this few lines of code, you get all the power and the features of ytdl, for a new site!</p>

<p>Now just run it, sit back and enjoy (and test a bunch of videos to be sure!)</p>

<p><code>
$ python -m youtube_dl https://vine.co/v/b9KOOWX7HUx
[Vine] b9KOOWX7HUx: Downloading webpage
[Vine] b9KOOWX7HUx: Extracting information
[download] Destination: Chicken.-b9KOOWX7HUx.mp4
[download] 100% of 884.30KiB in 00:00
</code></p>

<p>Finally, please <a href="https://github.com/rg3/youtube-dl/pulls">submit a PR</a> to get your IE included in ytdl. Don’t worry, if it downloads, we will be happy to merge it, and if it doesn’t, we will be happy to help!</p>

<h2 id="ah-add-a-test">Ah, add a test</h2>

<p>Forgot to mention, ytdl has a complete testing system built in. It is really important that you add a test to your IE before submitting it, as otherwise it would not be possible to do maintenance of so many IEs that break all the time when sites change layout.</p>

<p>Try to write one for each video or URL type.</p>

<p>You just need to add a <code>_TEST</code> dict property (or a <code>_TESTS</code> list of dicts) looking like this:</p>

<p><code>python
_TEST = {
    u'url': u'https://vine.co/v/b9KOOWX7HUx',
    u'file': u'b9KOOWX7HUx.mp4',
    u'md5': u'2f36fed6235b16da96ce9b4dc890940d',
    u'info_dict': {
        u"title": u"Chicken."
    }
}
</code></p>

<p>The properties are as follows:</p>

<ul>
  <li><code>url</code> is the input URL</li>
  <li><code>file</code> is the filename of the resulting video, with this format “<code>{id}.{ext}</code>”</li>
  <li><code>md5</code> is the md5 hash <strong>of the first 10KB</strong> of the file, to get it download the video with the <code>--test</code> flag and run <code>md5sum</code> on it</li>
  <li><code>info_dict</code> is just a dict of fields that will be checked against the <code>_real_extract</code> return value (missing fields will be ignored)</li>
</ul>

<p>You can run a single IE test on all the supported Python environments using <a href="https://testrun.org/tox/latest/">tox</a></p>

<p><code>
$ tox test.test_download:TestDownload.test_Vine
[...]
__________ summary __________
  py26: commands succeeded
  py27: commands succeeded
  py33: commands succeeded
  congratulations :)
</code></p>

<hr />

<p>In the next article we will have a look at how to write a IE for a more picky/obfuscated video site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonic solutions to the Facebook Hacker Cup 2014 Qualification Round]]></title>
    <link href="http://filippo.io/pythonic-solutions-to-the-facebook-hacker-cup-2014-qualification-round/"/>
    <updated>2013-11-25T10:52:00+01:00</updated>
    <id>http://filippo.io/pythonic-solutions-to-the-facebook-hacker-cup-2014-qualification-round</id>
    <content type="html"><![CDATA[<p>Facebook organizes this cool competition called the <a href="https://www.facebook.com/hackercup">Hacker Cup</a>. Yesterday the Qualification Round finished, and the user solutions got published. So, since the problems text is under a <a href="https://creativecommons.org/">CC license</a> (thanks FB!) I’m publishing here the problems and my answers.</p>

<p>This code pretty much embodies why I love Python: it’s clear, fast to write and reads almost like English. When I (thought I) needed speed, I just turned at <a href="http://cython.org/">Cython</a> with a few edits to the code.</p>

<p><em>NOTE: if for some reason I misunderstood and I wasn’t allowed to do this, please get in contact with me ASAP and I’ll take this down.</em></p>

<!-- more -->

<h2 id="square-detector">Square Detector</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-square-detector-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-square_detector-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-square_detector_answer-txt">the answer</a>.</p>

<p>This was an easy one, I just scanned the grid until I found a <code>#</code>, assumed it was the upper-left corner and counted the following <code>#</code> to learn the edge length. At this point I had all the info to build a model of how a correct grid should look like, so I just checked the real one against it.</p>

<p><div><script src='https://gist.github.com/7643628.js?file=Square%20Detector.py'></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys

T = int(sys.stdin.readline().strip())

for t in range(1, T + 1):
    N = int(sys.stdin.readline().strip())
    GRID = [sys.stdin.readline().strip() for i in range(N)]

    # Find the the upper-left corner (J, I) and the edge K
    for I, row in enumerate(GRID):
        if not '#' in row: continue
        K = 0
        J = row.index('#')
        for x in range(J, N):
            if row[x] == '#': K += 1
            else: break
        break

    # If the square would not fit, fail
    if I + K &gt; N:
        print('Case #%i: NO' % t)
        continue
    
    # Build a module of how a row including the square should look like
    MOD = (J * '.' + K * '#').ljust(N, '.')

    # Check that the grid looks like what it should
    for i, row in enumerate(GRID):
        if i &gt;= I and i &lt; I + K:
            if row != MOD: break
        else:
            if row != N * '.': break
    else:
        # Reached if we didn't break out of the loop
        # Ok, I'll admit that for-else is not that clear
        print('Case #%i: YES' % t)
        continue

    print('Case #%i: NO' % t)
</code></pre></noscript></div>
</p>

<h2 id="basketball-game">Basketball Game</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-basketball-game-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-basketball_game-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-basketball_game_answer-txt">the answer</a>.</p>

<p>This is actually my favorite. The problem was fun and the Python code reads as if it was English. It makes hard use of mutable objects and their properties.</p>

<p><div><script src='https://gist.github.com/7643628.js?file=Basketball%20Game.py'></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys
INPUT = open(sys.argv[1])

class Player():
    name = None
    shot_percentage = None
    height = None
    draft = None
    time_played = 0

T = int(INPUT.readline().strip())

for t in range(1, T + 1):
    N, M, P = [int(x) for x in INPUT.readline().strip().split(' ')]
    PLAYERS = []
    for _ in range(N):
        player = Player()
        player.name, s, h = INPUT.readline().strip().split(' ')
        player.shot_percentage, player.height = int(s), int(h)
        PLAYERS.append(player)

    PLAYERS.sort(reverse=True, key=lambda p: (p.shot_percentage, p.height))
    for n, p in enumerate(PLAYERS):
        p.draft = n + 1

    TEAM_A = [p for p in PLAYERS if p.draft % 2 != 0]
    TEAM_B = [p for p in PLAYERS if p.draft % 2 == 0]

    PLAYING_A = TEAM_A[:P]
    PLAYING_B = TEAM_B[:P]

    for _ in range(M):
        for TEAM, PLAYING in ((TEAM_A, PLAYING_A), (TEAM_B, PLAYING_B)):
            if len(TEAM) == len(PLAYING): continue

            for p in PLAYING: p.time_played += 1

            BENCH = [p for p in TEAM if p not in PLAYING]

            leaving = sorted(PLAYING, key=lambda p: (p.time_played, p.draft))[-1]
            entering = sorted(BENCH, key=lambda p: (p.time_played, p.draft))[0]

            PLAYING.remove(leaving)
            PLAYING.append(entering)

            BENCH.remove(entering)
            BENCH.append(leaving)

    print('Case #%i: ' % t + ' '.join(sorted(p.name for p in PLAYING_A + PLAYING_B)))

</code></pre></noscript></div>
</p>

<h2 id="tennison">Tennison</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-tennison-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-tennison-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-tennison_answer-txt">the answer</a>.</p>

<p>Finally the hardest one. This was a nice recursive problem. The constrains allowed for a lot of big test cases, so I went a bit overkill with speed, wrote some custom caching, ported my actual recursive function to Cython (it’s awesome! Just check out the <code>-a</code> HTML output to figure out what you have to optimize and you’re done) and made the program parallelizable.</p>

<p>Turns out, memoization would have been enough. Still, it has been really fun!</p>

<p><div><script src='https://gist.github.com/7643628.js?file=Tennison.py'></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import pyximport; pyximport.install()
from fast_Tennison import play_a_set

from multiprocessing import Pool

import sys

T = int(sys.stdin.readline().strip())

TEST_CASES = []
for t in range(1, T + 1):
    l = sys.stdin.readline().strip().split(' ')
    K = int(l[0])
    ps, pr, pi, pu, pw, pd, pl = (float(x) for x in l[1:])
    won, lost = 0, 0
    TEST_CASES.append((t, {}, K, won, lost, pi, ps, pr, pu, pw, pd, pl))

def do(x):
    r = play_a_set(*x[1:])
    sys.stderr.write('#{}: {:f}\n'.format(x[0], r))
    return r
pool = Pool(processes=8)
RESULTS = pool.map(do, TEST_CASES, chunksize=1)

for t in range(1, T + 1):
    print('Case #{}: {:f}'.format(t, RESULTS[t-1]))
</code></pre></noscript></div>

<div><script src='https://gist.github.com/7643628.js?file=fast_Tennison.pyx'></script>
<noscript><pre><code>cpdef double play_a_set(cache, int K, int won, int lost, double p_sun, double ps, double pr, double pu, double pw, double pd, double pl):
    cdef double new_p_sun, positive

    if won == K: return 1
    if lost == K: return 0

    if won * 1000 + lost * 10 + p_sun in cache:
      return cache[won * 1000 + lost * 10 + p_sun]

    positive = 0

    ## There is sun     P: p_sun
    #### He wins            P: ps
    ###### p_sun changes        P: pw
    new_p_sun = min(1, p_sun + pu)
    positive += p_sun * ps * pw * play_a_set(cache, K, won+1, lost, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pw
    positive += p_sun * ps * (1 - pw) * play_a_set(cache, K, won+1, lost, p_sun, ps, pr, pu, pw, pd, pl)
    #### He loses           P: 1 - ps
    ###### p_sun changes        P: pl
    new_p_sun = max(0, p_sun - pd)
    positive += p_sun * (1 - ps) * pl * play_a_set(cache, K, won, lost+1, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pl
    positive += p_sun * (1 - ps) * (1 - pl) * play_a_set(cache, K, won, lost+1, p_sun, ps, pr, pu, pw, pd, pl)
    ## There is rain    P: 1 - p_sun
    #### He wins            P: pr
    ###### p_sun changes        P: pw
    new_p_sun = min(1, p_sun + pu)
    positive += (1 - p_sun) * pr * pw * play_a_set(cache, K, won+1, lost, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pw
    positive += (1 - p_sun) * pr * (1 - pw) * play_a_set(cache, K, won+1, lost, p_sun, ps, pr, pu, pw, pd, pl)
    #### He loses           P: 1 - pr
    ###### p_sun changes        P: pl
    new_p_sun = max(0, p_sun - pd)
    positive += (1 - p_sun) * (1 - pr) * pl * play_a_set(cache, K, won, lost+1, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pl
    positive += (1 - p_sun) * (1 - pr) * (1 - pl) * play_a_set(cache, K, won, lost+1, p_sun, ps, pr, pu, pw, pd, pl)

    cache[won * 1000 + lost * 10 + p_sun] = positive

    return positive
</code></pre></noscript></div>
</p>

<p>That’s all! I got admitted to the next round, so maybe <a href="https://twitter.com/FiloSottile">follow me on Twitter</a> if you want to read the next batch of problems and solutions!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python GitHub Push WebHook Handler]]></title>
    <link href="http://filippo.io/a-python-github-push-webhook-handler/"/>
    <updated>2013-11-24T19:23:00+01:00</updated>
    <id>http://filippo.io/a-python-github-push-webhook-handler</id>
    <content type="html"><![CDATA[<p>GitHub offers a number of <strong>Service Hooks</strong> that trigger actions when someone pushes to your repository. The generic hook is a simple WebHook that you can easily handle on your server.</p>

<p>There is a official Rack handler somewhere, and maybe a Django one, but nothing in pure Python. So here is it.</p>

<p>It’s pretty simple and self-contained, start it with the IP address and port to listen on as arguments, and it will pass a function - <code>handle_hook()</code> - the payload received on each push as a Python dictionary. It also checks that the originating IP is actually GH.</p>

<p>Then simply enter the address of your server on the GH Service Hooks repo Admin page, and you’re all set.</p>

<p><img src="/images/Service Hooks 2013-11-24 00-54-05.png" alt="The Webhooks admin page" /></p>

<p>For reference on what’s inside the payload, <a href="https://help.github.com/articles/post-receive-hooks">RTFM</a>.</p>

<p><div><script src='https://gist.github.com/7634541.js?file=HookHandler.py'></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import BaseHTTPServer
import sys
import time
import urlparse
import json


HOST_NAME = sys.argv[1]
PORT_NUMBER = int(sys.argv[2])


def handle_hook(payload):
    pass


class HookHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    server_version = &quot;HookHandler/0.1&quot;
    def do_GET(s):
        s.send_response(200)
        s.wfile.write('Hello!')

    def do_POST(s):
        # Check that the IP is within the GH ranges
        if not any(s.client_address[0].startswith(IP)
                   for IP in ('192.30.252', '192.30.253', '192.30.254', '192.30.255')):
            s.send_error(403)

        length = int(s.headers['Content-Length'])
        post_data = urlparse.parse_qs(s.rfile.read(length).decode('utf-8'))
        payload = json.loads(post_data['payload'][0])

        handle_hook(payload)

        s.send_response(200)


if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), HookHandler)
    print time.asctime(), &quot;Server Starts - %s:%s&quot; % (HOST_NAME, PORT_NUMBER)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    print time.asctime(), &quot;Server Stops - %s:%s&quot; % (HOST_NAME, PORT_NUMBER)
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instance monkey-patching in Python]]></title>
    <link href="http://filippo.io/instance-monkey-patching-in-python/"/>
    <updated>2013-10-07T00:19:00+02:00</updated>
    <id>http://filippo.io/instance-monkey-patching-in-python</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Monkey_patch">Monkey-patching</a> is the technique of swapping functions or methods with others in order to change a module, library or class behavior.</p>

<p>There are some people with strong opinions about it. I haven’t, but it comes really useful when testing, to simulate side-effecting functions or to silence expected errors and warnings.</p>

<p><strong>Class methods</strong> monkey patching in Python is really easy, as you can freely assign function to class method names:</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; def not_exactly_add(self, x, y):
...    return x * y
...
&gt;&gt;&gt; Class.add = not_exactly_add
&gt;&gt;&gt; inst.add(3, 3)
9
</code></p>

<!-- more -->

<p>This way <strong>all the instances</strong> of the target class will have the method monkey-patched and there is no problem with arguments, bindings… Everything really straight-forward.</p>

<p>We can also call the old existing method, to handle only some cases or to add some functionality while not repeating code (<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>):</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; old_boring_add = Class.add
&gt;&gt;&gt; def add_is_not_enough(self, x, y):
...    return old_boring_add(self, x, y) + 1
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; Class.add = add_is_not_enough
&gt;&gt;&gt; inst.add(3, 3)
7
</code></p>

<!-- Finally, we might want to monkey-patch repeatedly, maybe dinamically, and so have each monkey-patch to **build on top of the previous one**. Easy done,  -->

<p>But what if we wanted to do the same, patching <strong>just a single instance</strong>?</p>

<p>To recap, the requirements are:</p>

<ul>
  <li>we want just the current instance to be patched;</li>
  <li>we want to build something on top of the existing method, not to replace it entirely;</li>
  <li>we want each monkey-patch not to rollback all the previous ones (so no <a href="http://docs.python.org/2/library/functions.html#super"><code>super()</code></a> or class method call);</li>
  <li>we want to be able to do so also from inside a method.</li>
</ul>

<p>The trick is to save and use the existing method as we did above, and then <strong>bind the new function to the instance</strong> with <a href="http://docs.python.org/2/library/types.html#types.MethodType"><code>types.MethodType</code></a> before assigning it to the method name.</p>

<p>The binding is the magic that causes the instance to be passed as first argument (<code>self</code>) each time the method is called. See <a href="http://stackoverflow.com/questions/114214/class-method-differences-in-python-bound-unbound-and-static">these</a> <a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">two</a> StackOverflow questions to get an idea.</p>

<p><code>python
&gt;&gt;&gt; import types
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...    def become_more_powerful(self):
...       old_add = self.add
...       def more_powerful_add(self, x, y):
...          return old_add(x, y) + 1
...       self.add = types.MethodType(more_powerful_add, self)
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
7
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
10
</code></p>

<p>And here we go!</p>

<h2 id="a-practical-example">A practical example</h2>

<p>You can see this technique being used in <a href="https://github.com/rg3/youtube-dl"><em>youtube-dl</em></a> to silence expected warnings in <a href="https://github.com/rg3/youtube-dl/commit/00fcc17aeeab11ce694699bf183d33a3af75aab6">this commit</a>.</p>

<p>The monkey-patching of the instance is done on itself by a method of a testing subclass of the downloader.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decompressing Lempel-Ziv-Stac in Python]]></title>
    <link href="http://filippo.io/decompressing-lempel-ziv-stac-in-python/"/>
    <updated>2013-01-29T12:06:00+01:00</updated>
    <id>http://filippo.io/decompressing-lempel-ziv-stac-in-python</id>
    <content type="html"><![CDATA[<p>Lempel-Ziv-Stac is a simple (and a bit exotic) compression algorithm,
used on embedded devices, for example for config files, for example on routers,
for example on those that expose the config file on the public internet. Just sayin’…</p>

<p>There is not a Python implementation of it, so here is my Lempel-Ziv-Stac decompression routine.
<!-- more -->
<div><script src='https://gist.github.com/4663892.js'></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

##############################################################
# Lempel-Ziv-Stac decompression
# BitReader and RingList classes
# 
# Copyright (C) 2011  Filippo Valsorda - FiloSottile
# filosottile.wiki gmail.com - www.pytux.it
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
# 
##############################################################

import collections

class BitReader:
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and permits to extract
    bits one by one like a stream
    &quot;&quot;&quot;
    def __init__(self, bytes):
        self._bits = collections.deque()
        
        for byte in bytes:
            byte = ord(byte)
            for n in xrange(8):
                self._bits.append(bool((byte &gt;&gt; (7-n)) &amp; 1))
            
    def getBit(self):
        return self._bits.popleft()
        
    def getBits(self, num):
        res = 0
        for i in xrange(num):
            res += self.getBit() &lt;&lt; num-1-i
        return res
        
    def getByte(self):
        return self.getBits(8)
        
    def __len__(self):
        return len(self._bits)
        
class RingList:
    &quot;&quot;&quot;
    When the list is full, for every item appended
    the older is removed
    &quot;&quot;&quot;
    def __init__(self, length):
        self.__data__ = collections.deque()
        self.__full__ = False
        self.__max__ = length

    def append(self, x):
        if self.__full__:
            self.__data__.popleft()
        self.__data__.append(x)
        if self.size() == self.__max__:
            self.__full__ = True

    def get(self):
        return self.__data__

    def size(self):
        return len(self.__data__)

    def maxsize(self):
        return self.__max__
        
    def __getitem__(self, n):
        if n &gt;= self.size():
            return None
        return self.__data__[n]
        
def LZSDecompress(data, window = RingList(2048)):
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and an optional
    pre-populated dictionary; return the decompressed
    string and the final dictionary
    &quot;&quot;&quot;
    reader = BitReader(data)
    result = ''
    
    while True:
        bit = reader.getBit()
        if not bit:
            char = reader.getByte()
            result += chr(char)
            window.append(char)
        else:
            bit = reader.getBit()
            if bit:
                offset = reader.getBits(7)
                if offset == 0:
                    # EOF
                    break
            else:
                offset = reader.getBits(11)
            
            lenField = reader.getBits(2)
            if lenField &lt; 3:
                lenght = lenField + 2
            else:
                lenField &lt;&lt;= 2
                lenField += reader.getBits(2)
                if lenField &lt; 15:
                    lenght = (lenField &amp; 0x0f) + 5
                else:
                    lenCounter = 0
                    lenField = reader.getBits(4)
                    while lenField == 15:
                        lenField = reader.getBits(4)
                        lenCounter += 1
                    lenght = 15*lenCounter + 8 + lenField
            
            for i in xrange(lenght):
                char = window[-offset]
                result += chr(char)
                window.append(char)
    
    return result, window</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
