<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | PyTux]]></title>
  <link href="http://filippo.io/categories/python/atom.xml" rel="self"/>
  <link href="http://filippo.io/"/>
  <updated>2014-01-16T18:02:11-05:00</updated>
  <id>http://filippo.io/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pythonic solutions to the Facebook Hacker Cup 2014 Qualification Round]]></title>
    <link href="http://filippo.io/pythonic-solutions-to-the-facebook-hacker-cup-2014-qualification-round/"/>
    <updated>2013-11-25T10:52:00-05:00</updated>
    <id>http://filippo.io/pythonic-solutions-to-the-facebook-hacker-cup-2014-qualification-round</id>
    <content type="html"><![CDATA[<p>Facebook organizes this cool competition called the <a href="https://www.facebook.com/hackercup">Hacker Cup</a>. Yesterday the Qualification Round finished, and the user solutions got published. So, since the problems text is under a <a href="https://creativecommons.org/">CC license</a> (thanks FB!) I’m publishing here the problems and my answers.</p>

<p>This code pretty much embodies why I love Python: it’s clear, fast to write and reads almost like English. When I (thought I) needed speed, I just turned at <a href="http://cython.org/">Cython</a> with a few edits to the code.</p>

<p><em>NOTE: if for some reason I misunderstood and I wasn’t allowed to do this, please get in contact with me ASAP and I’ll take this down.</em></p>

<!-- more -->

<h2 id="square-detector">Square Detector</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-square-detector-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-square_detector-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-square_detector_answer-txt">the answer</a>.</p>

<p>This was an easy one, I just scanned the grid until I found a <code>#</code>, assumed it was the upper-left corner and counted the following <code>#</code> to learn the edge length. At this point I had all the info to build a model of how a correct grid should look like, so I just checked the real one against it.</p>

<p><div><script src='https://gist.github.com/7643628.js?file=Square%20Detector.py'></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys

T = int(sys.stdin.readline().strip())

for t in range(1, T + 1):
    N = int(sys.stdin.readline().strip())
    GRID = [sys.stdin.readline().strip() for i in range(N)]

    # Find the the upper-left corner (J, I) and the edge K
    for I, row in enumerate(GRID):
        if not '#' in row: continue
        K = 0
        J = row.index('#')
        for x in range(J, N):
            if row[x] == '#': K += 1
            else: break
        break

    # If the square would not fit, fail
    if I + K &gt; N:
        print('Case #%i: NO' % t)
        continue
    
    # Build a module of how a row including the square should look like
    MOD = (J * '.' + K * '#').ljust(N, '.')

    # Check that the grid looks like what it should
    for i, row in enumerate(GRID):
        if i &gt;= I and i &lt; I + K:
            if row != MOD: break
        else:
            if row != N * '.': break
    else:
        # Reached if we didn't break out of the loop
        # Ok, I'll admit that for-else is not that clear
        print('Case #%i: YES' % t)
        continue

    print('Case #%i: NO' % t)
</code></pre></noscript></div>
</p>

<h2 id="basketball-game">Basketball Game</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-basketball-game-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-basketball_game-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-basketball_game_answer-txt">the answer</a>.</p>

<p>This is actually my favorite. The problem was fun and the Python code reads as if it was English. It makes hard use of mutable objects and their properties.</p>

<p><div><script src='https://gist.github.com/7643628.js?file=Basketball%20Game.py'></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import sys
INPUT = open(sys.argv[1])

class Player():
    name = None
    shot_percentage = None
    height = None
    draft = None
    time_played = 0

T = int(INPUT.readline().strip())

for t in range(1, T + 1):
    N, M, P = [int(x) for x in INPUT.readline().strip().split(' ')]
    PLAYERS = []
    for _ in range(N):
        player = Player()
        player.name, s, h = INPUT.readline().strip().split(' ')
        player.shot_percentage, player.height = int(s), int(h)
        PLAYERS.append(player)

    PLAYERS.sort(reverse=True, key=lambda p: (p.shot_percentage, p.height))
    for n, p in enumerate(PLAYERS):
        p.draft = n + 1

    TEAM_A = [p for p in PLAYERS if p.draft % 2 != 0]
    TEAM_B = [p for p in PLAYERS if p.draft % 2 == 0]

    PLAYING_A = TEAM_A[:P]
    PLAYING_B = TEAM_B[:P]

    for _ in range(M):
        for TEAM, PLAYING in ((TEAM_A, PLAYING_A), (TEAM_B, PLAYING_B)):
            if len(TEAM) == len(PLAYING): continue

            for p in PLAYING: p.time_played += 1

            BENCH = [p for p in TEAM if p not in PLAYING]

            leaving = sorted(PLAYING, key=lambda p: (p.time_played, p.draft))[-1]
            entering = sorted(BENCH, key=lambda p: (p.time_played, p.draft))[0]

            PLAYING.remove(leaving)
            PLAYING.append(entering)

            BENCH.remove(entering)
            BENCH.append(leaving)

    print('Case #%i: ' % t + ' '.join(sorted(p.name for p in PLAYING_A + PLAYING_B)))

</code></pre></noscript></div>
</p>

<h2 id="tennison">Tennison</h2>

<p>Read the <a href="https://gist.github.com/FiloSottile/7643628#file-tennison-md">problem</a> and check out <a href="https://gist.github.com/FiloSottile/7643628#file-tennison-txt">the test cases</a> and <a href="https://gist.github.com/FiloSottile/7643628#file-tennison_answer-txt">the answer</a>.</p>

<p>Finally the hardest one. This was a nice recursive problem. The constrains allowed for a lot of big test cases, so I went a bit overkill with speed, wrote some custom caching, ported my actual recursive function to Cython (it’s awesome! Just check out the <code>-a</code> HTML output to figure out what you have to optimize and you’re done) and made the program parallelizable.</p>

<p>Turns out, memoization would have been enough. Still, it has been really fun!</p>

<p><div><script src='https://gist.github.com/7643628.js?file=Tennison.py'></script>
<noscript><pre><code>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import pyximport; pyximport.install()
from fast_Tennison import play_a_set

from multiprocessing import Pool

import sys

T = int(sys.stdin.readline().strip())

TEST_CASES = []
for t in range(1, T + 1):
    l = sys.stdin.readline().strip().split(' ')
    K = int(l[0])
    ps, pr, pi, pu, pw, pd, pl = (float(x) for x in l[1:])
    won, lost = 0, 0
    TEST_CASES.append((t, {}, K, won, lost, pi, ps, pr, pu, pw, pd, pl))

def do(x):
    r = play_a_set(*x[1:])
    sys.stderr.write('#{}: {:f}\n'.format(x[0], r))
    return r
pool = Pool(processes=8)
RESULTS = pool.map(do, TEST_CASES, chunksize=1)

for t in range(1, T + 1):
    print('Case #{}: {:f}'.format(t, RESULTS[t-1]))
</code></pre></noscript></div>

<div><script src='https://gist.github.com/7643628.js?file=fast_Tennison.pyx'></script>
<noscript><pre><code>cpdef double play_a_set(cache, int K, int won, int lost, double p_sun, double ps, double pr, double pu, double pw, double pd, double pl):
    cdef double new_p_sun, positive

    if won == K: return 1
    if lost == K: return 0

    if won * 1000 + lost * 10 + p_sun in cache:
      return cache[won * 1000 + lost * 10 + p_sun]

    positive = 0

    ## There is sun     P: p_sun
    #### He wins            P: ps
    ###### p_sun changes        P: pw
    new_p_sun = min(1, p_sun + pu)
    positive += p_sun * ps * pw * play_a_set(cache, K, won+1, lost, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pw
    positive += p_sun * ps * (1 - pw) * play_a_set(cache, K, won+1, lost, p_sun, ps, pr, pu, pw, pd, pl)
    #### He loses           P: 1 - ps
    ###### p_sun changes        P: pl
    new_p_sun = max(0, p_sun - pd)
    positive += p_sun * (1 - ps) * pl * play_a_set(cache, K, won, lost+1, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pl
    positive += p_sun * (1 - ps) * (1 - pl) * play_a_set(cache, K, won, lost+1, p_sun, ps, pr, pu, pw, pd, pl)
    ## There is rain    P: 1 - p_sun
    #### He wins            P: pr
    ###### p_sun changes        P: pw
    new_p_sun = min(1, p_sun + pu)
    positive += (1 - p_sun) * pr * pw * play_a_set(cache, K, won+1, lost, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pw
    positive += (1 - p_sun) * pr * (1 - pw) * play_a_set(cache, K, won+1, lost, p_sun, ps, pr, pu, pw, pd, pl)
    #### He loses           P: 1 - pr
    ###### p_sun changes        P: pl
    new_p_sun = max(0, p_sun - pd)
    positive += (1 - p_sun) * (1 - pr) * pl * play_a_set(cache, K, won, lost+1, new_p_sun, ps, pr, pu, pw, pd, pl)
    ###### p_sun stays          P: 1 - pl
    positive += (1 - p_sun) * (1 - pr) * (1 - pl) * play_a_set(cache, K, won, lost+1, p_sun, ps, pr, pu, pw, pd, pl)

    cache[won * 1000 + lost * 10 + p_sun] = positive

    return positive
</code></pre></noscript></div>
</p>

<p>That’s all! I got admitted to the next round, so maybe <a href="https://twitter.com/FiloSottile">follow me on Twitter</a> if you want to read the next batch of problems and solutions!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python GitHub Push WebHook Handler]]></title>
    <link href="http://filippo.io/a-python-github-push-webhook-handler/"/>
    <updated>2013-11-24T19:23:00-05:00</updated>
    <id>http://filippo.io/a-python-github-push-webhook-handler</id>
    <content type="html"><![CDATA[<p>GitHub offers a number of <strong>Service Hooks</strong> that trigger actions when someone pushes to your repository. The generic hook is a simple WebHook that you can easily handle on your server.</p>

<p>There is a official Rack handler somewhere, and maybe a Django one, but nothing in pure Python. So here is it.</p>

<p>It’s pretty simple and self-contained, start it with the IP address and port to listen on as arguments, and it will pass a function - <code>handle_hook()</code> - the payload received on each push as a Python dictionary. It also checks that the originating IP is actually GH.</p>

<p>Then simply enter the address of your server on the GH Service Hooks repo Admin page, and you’re all set.</p>

<p><img src="/images/Service Hooks 2013-11-24 00-54-05.png" alt="The Webhooks admin page" /></p>

<p>For reference on what’s inside the payload, <a href="https://help.github.com/articles/post-receive-hooks">RTFM</a>.</p>

<p><div><script src='https://gist.github.com/7634541.js?file=HookHandler.py'></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import BaseHTTPServer
import sys
import time
import urlparse
import json


HOST_NAME = sys.argv[1]
PORT_NUMBER = int(sys.argv[2])


def handle_hook(payload):
    pass


class HookHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    server_version = &quot;HookHandler/0.1&quot;
    def do_GET(s):
        s.send_response(200)
        s.wfile.write('Hello!')

    def do_POST(s):
        # Check that the IP is within the GH ranges
        if not any(s.client_address[0].startswith(IP)
                   for IP in ('192.30.252', '192.30.253', '192.30.254', '192.30.255')):
            s.send_error(403)

        length = int(s.headers['Content-Length'])
        post_data = urlparse.parse_qs(s.rfile.read(length).decode('utf-8'))
        payload = json.loads(post_data['payload'][0])

        handle_hook(payload)

        s.send_response(200)


if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), HookHandler)
    print time.asctime(), &quot;Server Starts - %s:%s&quot; % (HOST_NAME, PORT_NUMBER)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    print time.asctime(), &quot;Server Stops - %s:%s&quot; % (HOST_NAME, PORT_NUMBER)
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instance monkey-patching in Python]]></title>
    <link href="http://filippo.io/instance-monkey-patching-in-python/"/>
    <updated>2013-10-07T00:19:00-04:00</updated>
    <id>http://filippo.io/instance-monkey-patching-in-python</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Monkey_patch">Monkey-patching</a> is the technique of swapping functions or methods with others in order to change a module, library or class behavior.</p>

<p>There are some people with strong opinions about it. I haven’t, but it comes really useful when testing, to simulate side-effecting functions or to silence expected errors and warnings.</p>

<p><strong>Class methods</strong> monkey patching in Python is really easy, as you can freely assign function to class method names:</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; def not_exactly_add(self, x, y):
...    return x * y
...
&gt;&gt;&gt; Class.add = not_exactly_add
&gt;&gt;&gt; inst.add(3, 3)
9
</code></p>

<!-- more -->

<p>This way <strong>all the instances</strong> of the target class will have the method monkey-patched and there is no problem with arguments, bindings… Everything really straight-forward.</p>

<p>We can also call the old existing method, to handle only some cases or to add some functionality while not repeating code (<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>):</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; old_boring_add = Class.add
&gt;&gt;&gt; def add_is_not_enough(self, x, y):
...    return old_boring_add(self, x, y) + 1
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; Class.add = add_is_not_enough
&gt;&gt;&gt; inst.add(3, 3)
7
</code></p>

<!-- Finally, we might want to monkey-patch repeatedly, maybe dinamically, and so have each monkey-patch to **build on top of the previous one**. Easy done,  -->

<p>But what if we wanted to do the same, patching <strong>just a single instance</strong>?</p>

<p>To recap, the requirements are:</p>

<ul>
  <li>we want just the current instance to be patched;</li>
  <li>we want to build something on top of the existing method, not to replace it entirely;</li>
  <li>we want each monkey-patch not to rollback all the previous ones (so no <a href="http://docs.python.org/2/library/functions.html#super"><code>super()</code></a> or class method call);</li>
  <li>we want to be able to do so also from inside a method.</li>
</ul>

<p>The trick is to save and use the existing method as we did above, and then <strong>bind the new function to the instance</strong> with <a href="http://docs.python.org/2/library/types.html#types.MethodType"><code>types.MethodType</code></a> before assigning it to the method name.</p>

<p>The binding is the magic that causes the instance to be passed as first argument (<code>self</code>) each time the method is called. See <a href="http://stackoverflow.com/questions/114214/class-method-differences-in-python-bound-unbound-and-static">these</a> <a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">two</a> StackOverflow questions to get an idea.</p>

<p><code>python
&gt;&gt;&gt; import types
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...    def become_more_powerful(self):
...       old_add = self.add
...       def more_powerful_add(self, x, y):
...          return old_add(x, y) + 1
...       self.add = types.MethodType(more_powerful_add, self)
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
7
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
10
</code></p>

<p>And here we go!</p>

<h2 id="a-practical-example">A practical example</h2>

<p>You can see this technique being used in <a href="https://github.com/rg3/youtube-dl"><em>youtube-dl</em></a> to silence expected warnings in <a href="https://github.com/rg3/youtube-dl/commit/00fcc17aeeab11ce694699bf183d33a3af75aab6">this commit</a>.</p>

<p>The monkey-patching of the instance is done on itself by a method of a testing subclass of the downloader.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decompressing Lempel-Ziv-Stac in Python]]></title>
    <link href="http://filippo.io/decompressing-lempel-ziv-stac-in-python/"/>
    <updated>2013-01-29T12:06:00-05:00</updated>
    <id>http://filippo.io/decompressing-lempel-ziv-stac-in-python</id>
    <content type="html"><![CDATA[<p>Lempel-Ziv-Stac is a simple (and a bit exotic) compression algorithm,
used on embedded devices, for example for config files, for example on routers,
for example on those that expose the config file on the public internet. Just sayin’…</p>

<p>There is not a Python implementation of it, so here is my Lempel-Ziv-Stac decompression routine.
<!-- more -->
<div><script src='https://gist.github.com/4663892.js'></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

##############################################################
# Lempel-Ziv-Stac decompression
# BitReader and RingList classes
# 
# Copyright (C) 2011  Filippo Valsorda - FiloSottile
# filosottile.wiki gmail.com - www.pytux.it
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
# 
##############################################################

import collections

class BitReader:
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and permits to extract
    bits one by one like a stream
    &quot;&quot;&quot;
    def __init__(self, bytes):
        self._bits = collections.deque()
        
        for byte in bytes:
            byte = ord(byte)
            for n in xrange(8):
                self._bits.append(bool((byte &gt;&gt; (7-n)) &amp; 1))
            
    def getBit(self):
        return self._bits.popleft()
        
    def getBits(self, num):
        res = 0
        for i in xrange(num):
            res += self.getBit() &lt;&lt; num-1-i
        return res
        
    def getByte(self):
        return self.getBits(8)
        
    def __len__(self):
        return len(self._bits)
        
class RingList:
    &quot;&quot;&quot;
    When the list is full, for every item appended
    the older is removed
    &quot;&quot;&quot;
    def __init__(self, length):
        self.__data__ = collections.deque()
        self.__full__ = False
        self.__max__ = length

    def append(self, x):
        if self.__full__:
            self.__data__.popleft()
        self.__data__.append(x)
        if self.size() == self.__max__:
            self.__full__ = True

    def get(self):
        return self.__data__

    def size(self):
        return len(self.__data__)

    def maxsize(self):
        return self.__max__
        
    def __getitem__(self, n):
        if n &gt;= self.size():
            return None
        return self.__data__[n]
        
def LZSDecompress(data, window = RingList(2048)):
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and an optional
    pre-populated dictionary; return the decompressed
    string and the final dictionary
    &quot;&quot;&quot;
    reader = BitReader(data)
    result = ''
    
    while True:
        bit = reader.getBit()
        if not bit:
            char = reader.getByte()
            result += chr(char)
            window.append(char)
        else:
            bit = reader.getBit()
            if bit:
                offset = reader.getBits(7)
                if offset == 0:
                    # EOF
                    break
            else:
                offset = reader.getBits(11)
            
            lenField = reader.getBits(2)
            if lenField &lt; 3:
                lenght = lenField + 2
            else:
                lenField &lt;&lt;= 2
                lenField += reader.getBits(2)
                if lenField &lt; 15:
                    lenght = (lenField &amp; 0x0f) + 5
                else:
                    lenCounter = 0
                    lenField = reader.getBits(4)
                    while lenField == 15:
                        lenField = reader.getBits(4)
                        lenCounter += 1
                    lenght = 15*lenCounter + 8 + lenField
            
            for i in xrange(lenght):
                char = window[-offset]
                result += chr(char)
                window.append(char)
    
    return result, window</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archive your GitHub repo and data]]></title>
    <link href="http://filippo.io/archive-your-github-repo-and-data/"/>
    <updated>2013-01-14T23:17:00-05:00</updated>
    <id>http://filippo.io/archive-your-github-repo-and-data</id>
    <content type="html"><![CDATA[<p>GitHub is a service we all trust, so this is not a “get your data off that cloud before it explodes!”-style post,
but sometimes you want to take an offline copy of your or somebody’s work.</p>

<p>Here is a quick and dirty Python script that will help you clone all the repositories, the Gists and some metadata
that can be fetched over the API.
Be warned, it only fetches public repos and data and there’s no error checking.</p>

<p><div><script src='https://gist.github.com/4710058.js?file=usage.txt'></script>
<noscript><pre><code>usage: gh_dump.py [-h] [--forks] [--no-gist] [--no-metadata] username

Dump an user's public GitHub data into current directory.

positional arguments:
  username       the GH username

optional arguments:
  -h, --help     show this help message and exit
  --forks        git clone also forks (default is don't)
  --no-gist      don't download user gists (default is do)
  --no-metadata  don't download user metadata (default is do)</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/4710058.js?file=archive_GH.py'></script>
<noscript><pre><code>#!/usr/bin/env python3

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to &lt;http://unlicense.org/&gt;

import argparse
from urllib.request import urlopen
from subprocess import call
import json
import re
import os.path

parser = argparse.ArgumentParser(description='Dump an user\'s public GitHub data into current directory.')
parser.add_argument('user', metavar='username',
                   help='the GH username')
parser.add_argument('--forks', dest='forks', action='store_true',
                   help='git clone also forks (default is don\'t)')
parser.add_argument('--no-gist', dest='gists', action='store_false',
                   help='don\'t download user gists (default is do)')
parser.add_argument('--no-metadata', dest='metadata', action='store_false',
                   help='don\'t download user metadata (default is do)')

args = parser.parse_args()

def clear_url(url):
    return re.sub(r'\{[^\}]*\}', '', url)

data = urlopen('https://api.github.com/users/' + args.user).read()
user = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('user.json', 'wb') as f:
        f.write(data)

data = urlopen(clear_url(user['repos_url'])).read()
repos = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('repos.json', 'wb') as f:
        f.write(data)
for repo in repos:
    if not repo['fork']:
        call(['git', 'clone', repo['clone_url']])
    elif args.forks:
        if not os.path.exists('forks'):
            os.makedirs('forks')
        call(['git', 'clone', repo['clone_url'], os.path.join('forks', repo['name'])])

data = urlopen(clear_url(user['gists_url'])).read()
gists = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('gists.json', 'wb') as f:
        f.write(data)
if args.gists:
    if not os.path.exists('gists'):
        os.makedirs('gists')
    for gist in gists:
        call(['git', 'clone', gist['git_pull_url'], os.path.join('gists', gist['id'])])

if args.metadata:
    for name in ['received_events', 'events', 'organizations', 'followers', 'starred', 'following', 'subscriptions']:
        data = urlopen(clear_url(user[name + '_url'])).read()
        with open(name + '.json', 'wb') as f:
            f.write(data)</code></pre></noscript></div>
</p>

<p><em>I wrote and used this to archive Aaron Swartz GitHub account on <a href="https://archive.org/details/aaronswGHarchive">archive.org</a>. R.I.P.</em></p>
]]></content>
  </entry>
  
</feed>
