<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | PyTux]]></title>
  <link href="http://filosottile.github.com/categories/python/atom.xml" rel="self"/>
  <link href="http://filosottile.github.com/"/>
  <updated>2013-10-26T19:15:27-04:00</updated>
  <id>http://filosottile.github.com/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instance monkey-patching in Python]]></title>
    <link href="http://filosottile.github.com/instance-monkey-patching-in-python/"/>
    <updated>2013-10-07T00:19:00-04:00</updated>
    <id>http://filosottile.github.com/instance-monkey-patching-in-python</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Monkey_patch">Monkey-patching</a> is the technique of swapping functions or methods with others in order to change a module, library or class behavior.</p>

<p>There are some people with strong opinions about it. I haven’t, but it comes really useful when testing, to simulate side-effecting functions or to silence expected errors and warnings.</p>

<p><strong>Class methods</strong> monkey patching in Python is really easy, as you can freely assign function to class method names:</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; def not_exactly_add(self, x, y):
...    return x * y
...
&gt;&gt;&gt; Class.add = not_exactly_add
&gt;&gt;&gt; inst.add(3, 3)
9
</code></p>

<!-- more -->

<p>This way <strong>all the instances</strong> of the target class will have the method monkey-patched and there is no problem with arguments, bindings… Everything really straight-forward.</p>

<p>We can also call the old existing method, to handle only some cases or to add some functionality while not repeating code (<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>):</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; old_boring_add = Class.add
&gt;&gt;&gt; def add_is_not_enough(self, x, y):
...    return old_boring_add(self, x, y) + 1
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; Class.add = add_is_not_enough
&gt;&gt;&gt; inst.add(3, 3)
7
</code></p>

<!-- Finally, we might want to monkey-patch repeatedly, maybe dinamically, and so have each monkey-patch to **build on top of the previous one**. Easy done,  -->

<p>But what if we wanted to do the same, patching <strong>just a single instance</strong>?</p>

<p>To recap, the requirements are:</p>

<ul>
  <li>we want just the current instance to be patched;</li>
  <li>we want to build something on top of the existing method, not to replace it entirely;</li>
  <li>we want each monkey-patch not to rollback all the previous ones (so no <a href="http://docs.python.org/2/library/functions.html#super"><code>super()</code></a> or class method call);</li>
  <li>we want to be able to do so also from inside a method.</li>
</ul>

<p>The trick is to save and use the existing method as we did above, and then <strong>bind the new function to the instance</strong> with <a href="http://docs.python.org/2/library/types.html#types.MethodType"><code>types.MethodType</code></a> before assigning it to the method name.</p>

<p>The binding is the magic that causes the instance to be passed as first argument (<code>self</code>) each time the method is called. See <a href="http://stackoverflow.com/questions/114214/class-method-differences-in-python-bound-unbound-and-static">these</a> <a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">two</a> StackOverflow questions to get an idea.</p>

<p><code>python
&gt;&gt;&gt; import types
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...    def become_more_powerful(self):
...       old_add = self.add
...       def more_powerful_add(self, x, y):
...          return old_add(x, y) + 1
...       self.add = types.MethodType(more_powerful_add, self)
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
7
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
10
</code></p>

<p>And here we go!</p>

<h2 id="a-practical-example">A practical example</h2>

<p>You can see this technique being used in <a href="https://github.com/rg3/youtube-dl"><em>youtube-dl</em></a> to silence expected warnings in <a href="https://github.com/rg3/youtube-dl/commit/00fcc17aeeab11ce694699bf183d33a3af75aab6">this commit</a>.</p>

<p>The monkey-patching of the instance is done on itself by a method of a testing subclass of the downloader.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decompressing Lempel-Ziv-Stac in Python]]></title>
    <link href="http://filosottile.github.com/decompressing-lempel-ziv-stac-in-python/"/>
    <updated>2013-01-29T12:06:00-05:00</updated>
    <id>http://filosottile.github.com/decompressing-lempel-ziv-stac-in-python</id>
    <content type="html"><![CDATA[<p>Lempel-Ziv-Stac is a simple (and a bit exotic) compression algorithm,
used on embedded devices, for example for config files, for example on routers,
for example on those that expose the config file on the public internet. Just sayin’…</p>

<p>There is not a Python implementation of it, so here is my Lempel-Ziv-Stac decompression routine.
<!-- more -->
{% gist 4663892 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archive your GitHub repo and data]]></title>
    <link href="http://filosottile.github.com/archive-your-github-repo-and-data/"/>
    <updated>2013-01-14T23:17:00-05:00</updated>
    <id>http://filosottile.github.com/archive-your-github-repo-and-data</id>
    <content type="html"><![CDATA[<p>GitHub is a service we all trust, so this is not a “get your data off that cloud before it explodes!”-style post,
but sometimes you want to take an offline copy of your or somebody’s work.</p>

<p>Here is a quick and dirty Python script that will help you clone all the repositories, the Gists and some metadata
that can be fetched over the API.
Be warned, it only fetches public repos and data and there’s no error checking.</p>

<p>{% gist 4710058 usage.txt %}</p>

<p>{% gist 4710058 archive_GH.py %}</p>

<p><em>I wrote and used this to archive Aaron Swartz GitHub account on <a href="https://archive.org/details/aaronswGHarchive">archive.org</a>. R.I.P.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please take this and go signing those updates]]></title>
    <link href="http://filosottile.github.com/please-take-this-and-go-signing-those-updates/"/>
    <updated>2012-12-19T20:47:00-05:00</updated>
    <id>http://filosottile.github.com/please-take-this-and-go-signing-those-updates</id>
    <content type="html"><![CDATA[<p>If your program does any sort of self-updating, it is <em>fundamental</em> that you <strong>check the update payload integrity</strong>. And no, fetching it over HTTPS might <a href="http://docs.python.org/2/library/urllib2.html">not</a> <a href="http://docs.python.org/3.3/library/urllib.request.html">be</a> <a href="http://www.rubyinside.com/how-to-cure-nethttps-risky-default-https-behavior-4010.html">enough</a>.</p>

<p>Otherwise, anyone who can tamper with the traffic of your users, like anyone on their same network, or their ISP, can trivially get <strong>code execution</strong> by modifying the update while your program downloads it. And yes, <a href="http://www.infobytesec.com/down/isr-evilgrade-Readme.txt">it is exploited in the wild and it is easy</a>.</p>

<p>The common way to sign something is to use RSA, but you might not want to rely on <em>yet another external dependency</em>, with God knows which license…<br />
Then, <strong>take this</strong>! It’s a drop-in, <em>zero-dependency</em> <strong>RSA signature verifying function</strong> that run on Python 2.4+ (seriously) and… it’s in the Public Domain (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>), it’s yours.</p>

<p>{% gist 4340076 rsa_verify.py %}</p>

<p><a href="https://gist.github.com/4340076">Here</a> are the instructions on how to generate your private and public keys and how to sign new updates. Don’t worry, it’s all really easy; if you happen to encounter any issues, shoot me a mail at <code>filippo.valsorda -&gt; gmail.com</code>!</p>

<p>I am sufficiently proficient only in Python, so if any C, Perl, PHP or Brainfuck guru wants to show up and contribute the same function in another language, it would be awesome!</p>

<p>Now you don’t have any excuses anymore (at least you Python devs): <strong>go signing your updates</strong>!<br />
(And maybe also <a href="https://www.twitter.com/FiloSottile">following me on Twitter</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send a HEAD request in Python]]></title>
    <link href="http://filosottile.github.com/send-a-head-request-in-python/"/>
    <updated>2012-03-18T17:53:00-04:00</updated>
    <id>http://filosottile.github.com/send-a-head-request-in-python</id>
    <content type="html"><![CDATA[<p>There are a lot of questions on this topic around the web and common answers are to use <code>httplib</code>, that however is a really-low level library, or to use <code>urllib2</code>, but a lot of people complains about it returning to <code>GET</code> if following a redirect.</p>

<p>Here is my <code>urllib2</code> solution, written looking at the code of <code>urllib2.HTTPRedirectHandler</code> and subclassing it in order to make it keep using the <code>HeadRequest</code>.</p>

<p>{% gist 2077204 HEAD-request.py %}</p>

<p>For example, here is a fast URL un-shortener (redirect follower) realized with the method above (and a fallback).</p>

<p>{% gist 2077115 redirect-follower.py %}</p>
]]></content>
  </entry>
  
</feed>
