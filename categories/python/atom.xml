<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | PyTux]]></title>
  <link href="http://filippo.io/categories/python/atom.xml" rel="self"/>
  <link href="http://filippo.io/"/>
  <updated>2013-11-20T18:09:20-05:00</updated>
  <id>http://filippo.io/</id>
  <author>
    <name><![CDATA[Filippo Valsorda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instance monkey-patching in Python]]></title>
    <link href="http://filippo.io/instance-monkey-patching-in-python/"/>
    <updated>2013-10-07T00:19:00-04:00</updated>
    <id>http://filippo.io/instance-monkey-patching-in-python</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Monkey_patch">Monkey-patching</a> is the technique of swapping functions or methods with others in order to change a module, library or class behavior.</p>

<p>There are some people with strong opinions about it. I haven’t, but it comes really useful when testing, to simulate side-effecting functions or to silence expected errors and warnings.</p>

<p><strong>Class methods</strong> monkey patching in Python is really easy, as you can freely assign function to class method names:</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; def not_exactly_add(self, x, y):
...    return x * y
...
&gt;&gt;&gt; Class.add = not_exactly_add
&gt;&gt;&gt; inst.add(3, 3)
9
</code></p>

<!-- more -->

<p>This way <strong>all the instances</strong> of the target class will have the method monkey-patched and there is no problem with arguments, bindings… Everything really straight-forward.</p>

<p>We can also call the old existing method, to handle only some cases or to add some functionality while not repeating code (<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>):</p>

<p><code>python
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...
&gt;&gt;&gt; old_boring_add = Class.add
&gt;&gt;&gt; def add_is_not_enough(self, x, y):
...    return old_boring_add(self, x, y) + 1
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; Class.add = add_is_not_enough
&gt;&gt;&gt; inst.add(3, 3)
7
</code></p>

<!-- Finally, we might want to monkey-patch repeatedly, maybe dinamically, and so have each monkey-patch to **build on top of the previous one**. Easy done,  -->

<p>But what if we wanted to do the same, patching <strong>just a single instance</strong>?</p>

<p>To recap, the requirements are:</p>

<ul>
  <li>we want just the current instance to be patched;</li>
  <li>we want to build something on top of the existing method, not to replace it entirely;</li>
  <li>we want each monkey-patch not to rollback all the previous ones (so no <a href="http://docs.python.org/2/library/functions.html#super"><code>super()</code></a> or class method call);</li>
  <li>we want to be able to do so also from inside a method.</li>
</ul>

<p>The trick is to save and use the existing method as we did above, and then <strong>bind the new function to the instance</strong> with <a href="http://docs.python.org/2/library/types.html#types.MethodType"><code>types.MethodType</code></a> before assigning it to the method name.</p>

<p>The binding is the magic that causes the instance to be passed as first argument (<code>self</code>) each time the method is called. See <a href="http://stackoverflow.com/questions/114214/class-method-differences-in-python-bound-unbound-and-static">these</a> <a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">two</a> StackOverflow questions to get an idea.</p>

<p><code>python
&gt;&gt;&gt; import types
&gt;&gt;&gt; class Class():
...    def add(self, x, y):
...       return x + y
...    def become_more_powerful(self):
...       old_add = self.add
...       def more_powerful_add(self, x, y):
...          return old_add(x, y) + 1
...       self.add = types.MethodType(more_powerful_add, self)
...
&gt;&gt;&gt; inst = Class()
&gt;&gt;&gt; inst.add(3, 3)
6
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
7
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.become_more_powerful()
&gt;&gt;&gt; inst.add(3, 3)
10
</code></p>

<p>And here we go!</p>

<h2 id="a-practical-example">A practical example</h2>

<p>You can see this technique being used in <a href="https://github.com/rg3/youtube-dl"><em>youtube-dl</em></a> to silence expected warnings in <a href="https://github.com/rg3/youtube-dl/commit/00fcc17aeeab11ce694699bf183d33a3af75aab6">this commit</a>.</p>

<p>The monkey-patching of the instance is done on itself by a method of a testing subclass of the downloader.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decompressing Lempel-Ziv-Stac in Python]]></title>
    <link href="http://filippo.io/decompressing-lempel-ziv-stac-in-python/"/>
    <updated>2013-01-29T12:06:00-05:00</updated>
    <id>http://filippo.io/decompressing-lempel-ziv-stac-in-python</id>
    <content type="html"><![CDATA[<p>Lempel-Ziv-Stac is a simple (and a bit exotic) compression algorithm,
used on embedded devices, for example for config files, for example on routers,
for example on those that expose the config file on the public internet. Just sayin’…</p>

<p>There is not a Python implementation of it, so here is my Lempel-Ziv-Stac decompression routine.
<!-- more -->
<div><script src='https://gist.github.com/4663892.js'></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

##############################################################
# Lempel-Ziv-Stac decompression
# BitReader and RingList classes
# 
# Copyright (C) 2011  Filippo Valsorda - FiloSottile
# filosottile.wiki gmail.com - www.pytux.it
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
# 
##############################################################

import collections

class BitReader:
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and permits to extract
    bits one by one like a stream
    &quot;&quot;&quot;
    def __init__(self, bytes):
        self._bits = collections.deque()
        
        for byte in bytes:
            byte = ord(byte)
            for n in xrange(8):
                self._bits.append(bool((byte &gt;&gt; (7-n)) &amp; 1))
            
    def getBit(self):
        return self._bits.popleft()
        
    def getBits(self, num):
        res = 0
        for i in xrange(num):
            res += self.getBit() &lt;&lt; num-1-i
        return res
        
    def getByte(self):
        return self.getBits(8)
        
    def __len__(self):
        return len(self._bits)
        
class RingList:
    &quot;&quot;&quot;
    When the list is full, for every item appended
    the older is removed
    &quot;&quot;&quot;
    def __init__(self, length):
        self.__data__ = collections.deque()
        self.__full__ = False
        self.__max__ = length

    def append(self, x):
        if self.__full__:
            self.__data__.popleft()
        self.__data__.append(x)
        if self.size() == self.__max__:
            self.__full__ = True

    def get(self):
        return self.__data__

    def size(self):
        return len(self.__data__)

    def maxsize(self):
        return self.__max__
        
    def __getitem__(self, n):
        if n &gt;= self.size():
            return None
        return self.__data__[n]
        
def LZSDecompress(data, window = RingList(2048)):
    &quot;&quot;&quot;
    Gets a string or a iterable of chars (also mmap)
    representing bytes (ord) and an optional
    pre-populated dictionary; return the decompressed
    string and the final dictionary
    &quot;&quot;&quot;
    reader = BitReader(data)
    result = ''
    
    while True:
        bit = reader.getBit()
        if not bit:
            char = reader.getByte()
            result += chr(char)
            window.append(char)
        else:
            bit = reader.getBit()
            if bit:
                offset = reader.getBits(7)
                if offset == 0:
                    # EOF
                    break
            else:
                offset = reader.getBits(11)
            
            lenField = reader.getBits(2)
            if lenField &lt; 3:
                lenght = lenField + 2
            else:
                lenField &lt;&lt;= 2
                lenField += reader.getBits(2)
                if lenField &lt; 15:
                    lenght = (lenField &amp; 0x0f) + 5
                else:
                    lenCounter = 0
                    lenField = reader.getBits(4)
                    while lenField == 15:
                        lenField = reader.getBits(4)
                        lenCounter += 1
                    lenght = 15*lenCounter + 8 + lenField
            
            for i in xrange(lenght):
                char = window[-offset]
                result += chr(char)
                window.append(char)
    
    return result, window</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archive your GitHub repo and data]]></title>
    <link href="http://filippo.io/archive-your-github-repo-and-data/"/>
    <updated>2013-01-14T23:17:00-05:00</updated>
    <id>http://filippo.io/archive-your-github-repo-and-data</id>
    <content type="html"><![CDATA[<p>GitHub is a service we all trust, so this is not a “get your data off that cloud before it explodes!”-style post,
but sometimes you want to take an offline copy of your or somebody’s work.</p>

<p>Here is a quick and dirty Python script that will help you clone all the repositories, the Gists and some metadata
that can be fetched over the API.
Be warned, it only fetches public repos and data and there’s no error checking.</p>

<p><div><script src='https://gist.github.com/4710058.js?file=usage.txt'></script>
<noscript><pre><code>usage: gh_dump.py [-h] [--forks] [--no-gist] [--no-metadata] username

Dump an user's public GitHub data into current directory.

positional arguments:
  username       the GH username

optional arguments:
  -h, --help     show this help message and exit
  --forks        git clone also forks (default is don't)
  --no-gist      don't download user gists (default is do)
  --no-metadata  don't download user metadata (default is do)</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/4710058.js?file=archive_GH.py'></script>
<noscript><pre><code>#!/usr/bin/env python3

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to &lt;http://unlicense.org/&gt;

import argparse
from urllib.request import urlopen
from subprocess import call
import json
import re
import os.path

parser = argparse.ArgumentParser(description='Dump an user\'s public GitHub data into current directory.')
parser.add_argument('user', metavar='username',
                   help='the GH username')
parser.add_argument('--forks', dest='forks', action='store_true',
                   help='git clone also forks (default is don\'t)')
parser.add_argument('--no-gist', dest='gists', action='store_false',
                   help='don\'t download user gists (default is do)')
parser.add_argument('--no-metadata', dest='metadata', action='store_false',
                   help='don\'t download user metadata (default is do)')

args = parser.parse_args()

def clear_url(url):
    return re.sub(r'\{[^\}]*\}', '', url)

data = urlopen('https://api.github.com/users/' + args.user).read()
user = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('user.json', 'wb') as f:
        f.write(data)

data = urlopen(clear_url(user['repos_url'])).read()
repos = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('repos.json', 'wb') as f:
        f.write(data)
for repo in repos:
    if not repo['fork']:
        call(['git', 'clone', repo['clone_url']])
    elif args.forks:
        if not os.path.exists('forks'):
            os.makedirs('forks')
        call(['git', 'clone', repo['clone_url'], os.path.join('forks', repo['name'])])

data = urlopen(clear_url(user['gists_url'])).read()
gists = json.loads(data.decode('utf-8'))
if args.metadata:
    with open('gists.json', 'wb') as f:
        f.write(data)
if args.gists:
    if not os.path.exists('gists'):
        os.makedirs('gists')
    for gist in gists:
        call(['git', 'clone', gist['git_pull_url'], os.path.join('gists', gist['id'])])

if args.metadata:
    for name in ['received_events', 'events', 'organizations', 'followers', 'starred', 'following', 'subscriptions']:
        data = urlopen(clear_url(user[name + '_url'])).read()
        with open(name + '.json', 'wb') as f:
            f.write(data)</code></pre></noscript></div>
</p>

<p><em>I wrote and used this to archive Aaron Swartz GitHub account on <a href="https://archive.org/details/aaronswGHarchive">archive.org</a>. R.I.P.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please take this and go signing those updates]]></title>
    <link href="http://filippo.io/please-take-this-and-go-signing-those-updates/"/>
    <updated>2012-12-19T20:47:00-05:00</updated>
    <id>http://filippo.io/please-take-this-and-go-signing-those-updates</id>
    <content type="html"><![CDATA[<p>If your program does any sort of self-updating, it is <em>fundamental</em> that you <strong>check the update payload integrity</strong>. And no, fetching it over HTTPS might <a href="http://docs.python.org/2/library/urllib2.html">not</a> <a href="http://docs.python.org/3.3/library/urllib.request.html">be</a> <a href="http://www.rubyinside.com/how-to-cure-nethttps-risky-default-https-behavior-4010.html">enough</a>.</p>

<p>Otherwise, anyone who can tamper with the traffic of your users, like anyone on their same network, or their ISP, can trivially get <strong>code execution</strong> by modifying the update while your program downloads it. And yes, <a href="http://www.infobytesec.com/down/isr-evilgrade-Readme.txt">it is exploited in the wild and it is easy</a>.</p>

<p>The common way to sign something is to use RSA, but you might not want to rely on <em>yet another external dependency</em>, with God knows which license…<br />
Then, <strong>take this</strong>! It’s a drop-in, <em>zero-dependency</em> <strong>RSA signature verifying function</strong> that run on Python 2.4+ (seriously) and… it’s in the Public Domain (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>), it’s yours.</p>

<p><div><script src='https://gist.github.com/4340076.js?file=rsa_verify.py'></script>
<noscript><pre><code>def rsa_verify(message, signature, key):
    from struct import pack
    from hashlib import sha256 # You'll need the backport for 2.4 http://code.krypto.org/python/hashlib/
    from sys import version_info
    def b(x):
        if version_info[0] == 2: return x
        else: return x.encode('latin1')
    assert(type(message) == type(b('')))
    block_size = 0
    n = key[0]
    while n:
        block_size += 1
        n &gt;&gt;= 8
    signature = pow(int(signature, 16), key[1], key[0])
    raw_bytes = []
    while signature:
        raw_bytes.insert(0, pack(&quot;B&quot;, signature &amp; 0xFF))
        signature &gt;&gt;= 8
    signature = (block_size - len(raw_bytes)) * b('\x00') + b('').join(raw_bytes)
    if signature[0:2] != b('\x00\x01'): return False
    signature = signature[2:]
    if not b('\x00') in signature: return False
    signature = signature[signature.index(b('\x00'))+1:]
    if not signature.startswith(b('\x30\x31\x30\x0D\x06\x09\x60\x86\x48\x01\x65\x03\x04\x02\x01\x05\x00\x04\x20')): return False
    signature = signature[19:]
    if signature != sha256(message).digest(): return False
    return True</code></pre></noscript></div>
</p>

<p><a href="https://gist.github.com/4340076">Here</a> are the instructions on how to generate your private and public keys and how to sign new updates. Don’t worry, it’s all really easy; if you happen to encounter any issues, shoot me a mail at <code>filippo.valsorda -&gt; gmail.com</code>!</p>

<p>I am sufficiently proficient only in Python, so if any C, Perl, PHP or Brainfuck guru wants to show up and contribute the same function in another language, it would be awesome!</p>

<p>Now you don’t have any excuses anymore (at least you Python devs): <strong>go signing your updates</strong>!<br />
(And maybe also <a href="https://www.twitter.com/FiloSottile">following me on Twitter</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send a HEAD request in Python]]></title>
    <link href="http://filippo.io/send-a-head-request-in-python/"/>
    <updated>2012-03-18T17:53:00-04:00</updated>
    <id>http://filippo.io/send-a-head-request-in-python</id>
    <content type="html"><![CDATA[<p>There are a lot of questions on this topic around the web and common answers are to use <code>httplib</code>, that however is a really-low level library, or to use <code>urllib2</code>, but a lot of people complains about it returning to <code>GET</code> if following a redirect.</p>

<p>Here is my <code>urllib2</code> solution, written looking at the code of <code>urllib2.HTTPRedirectHandler</code> and subclassing it in order to make it keep using the <code>HeadRequest</code>.</p>

<p><div><script src='https://gist.github.com/2077204.js?file=HEAD-request.py'></script>
<noscript><pre><code>import urllib2

class HeadRequest(urllib2.Request):
    def get_method(self):
        return &quot;HEAD&quot;

class HEADRedirectHandler(urllib2.HTTPRedirectHandler):
    &quot;&quot;&quot;
    Subclass the HTTPRedirectHandler to make it use our 
    HeadRequest also on the redirected URL
    &quot;&quot;&quot;
    def redirect_request(self, req, fp, code, msg, headers, newurl): 
        if code in (301, 302, 303, 307):
            newurl = newurl.replace(' ', '%20') 
            return HeadRequest(newurl, 
                               headers=req.headers, 
                               origin_req_host=req.get_origin_req_host(), 
                               unverifiable=True) 
        else: 
            raise urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp)

# Build our opener with the HEADRedirectHandler
opener = urllib2.OpenerDirector() 
for handler in [urllib2.HTTPHandler, urllib2.HTTPDefaultErrorHandler,
                HEADRedirectHandler,
                urllib2.HTTPErrorProcessor, urllib2.HTTPSHandler]:
    opener.add_handler(handler())

response = opener.open(HeadRequest(url))

print response.geturl()
print response.info()</code></pre></noscript></div>
</p>

<p>For example, here is a fast URL un-shortener (redirect follower) realized with the method above (and a fallback).</p>

<p><div><script src='https://gist.github.com/2077115.js?file=redirect-follower.py'></script>
<noscript><pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys
import urllib2

# This script uses HEAD requests (with fallback in case of 405) 
# to follow the redirect path up to the real URL
# (c) 2012 Filippo Valsorda - FiloSottile
# Released under the GPL license

class HeadRequest(urllib2.Request):
    def get_method(self):
        return &quot;HEAD&quot;

class HEADRedirectHandler(urllib2.HTTPRedirectHandler):
    &quot;&quot;&quot;
    Subclass the HTTPRedirectHandler to make it use our 
    HeadRequest also on the redirected URL
    &quot;&quot;&quot;
    def redirect_request(self, req, fp, code, msg, headers, newurl): 
        if code in (301, 302, 303, 307):
            newurl = newurl.replace(' ', '%20') 
            newheaders = dict((k,v) for k,v in req.headers.items()
                              if k.lower() not in (&quot;content-length&quot;, &quot;content-type&quot;))
            return HeadRequest(newurl, 
                               headers=newheaders,
                               origin_req_host=req.get_origin_req_host(), 
                               unverifiable=True) 
        else: 
            raise urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp) 
            
class HTTPMethodFallback(urllib2.BaseHandler):
    &quot;&quot;&quot;
    Fallback to GET if HEAD is not allowed (405 HTTP error)
    &quot;&quot;&quot;
    def http_error_405(self, req, fp, code, msg, headers): 
        fp.read()
        fp.close()

        newheaders = dict((k,v) for k,v in req.headers.items()
                          if k.lower() not in (&quot;content-length&quot;, &quot;content-type&quot;))
        return self.parent.open(urllib2.Request(req.get_full_url(), 
                                         headers=newheaders, 
                                         origin_req_host=req.get_origin_req_host(), 
                                         unverifiable=True))

# Build our opener
opener = urllib2.OpenerDirector() 
for handler in [urllib2.HTTPHandler, urllib2.HTTPDefaultErrorHandler,
                HTTPMethodFallback, HEADRedirectHandler,
                urllib2.HTTPErrorProcessor, urllib2.HTTPSHandler]:
    opener.add_handler(handler())

response = opener.open(HeadRequest(sys.argv[1]))

print response.geturl()</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
