#!/bin/sh
set -e

# Images are stored in the images/ folder, named like frood.2024123101.{efi,img}
# where the last two digits are an increasing counter.

latest_image() {
    ls -1 images | sort | tail -n 1 | sed 's/\.[^.]*$//'
}

next_image() {
    current_date=$(date +%Y%m%d)
    counter=1
    while [ -e "images/frood.${current_date}$(printf %02d $counter).efi" ]; do
        counter=$((counter + 1))
    done
    echo "frood.${current_date}$(printf %02d $counter)"
}

fixup_image() {
    current_date=$(date +%Y%m%d)
    counter=1
    while [ -e "images/frood.${current_date}$(printf %02d $((counter + 1))).efi" ]; do
        counter=$((counter + 1))
    done
    echo "frood.${current_date}$(printf %02d $counter)"
}

case "$1" in
    build)
        if [ "$2" = "--fixup" ]; then
            image=$(fixup_image)
        else
            image=$(next_image)
        fi
        echo "Building image $image"
        go test ./...
        docker run --privileged --platform linux/arm64/v8 --rm -it -v "$PWD":/mnt -w /root \
            -v "$(go env GOCACHE)":/root/.cache/go-build \
            -v "$(go env GOMODCACHE)":/root/go/pkg/mod \
            golang:1.24.2-alpine3.21 /mnt/frood-build.sh /mnt/images/"$image"
        ;;
    qemu)
        image=$(latest_image)
        echo "Running image $image in QEMU (terminate with Ctrl-A X," \
            "shutdown with Ctrl-A C system_powerdown)"
        if [ ! -f QEMU_EFI.fd ]; then
            docker run --platform linux/arm64/v8 --rm -v "$PWD":/mnt alpine:3.20.3 sh -c \
                'apk add --no-cache aavmf && cp /usr/share/AAVMF/QEMU_EFI.fd /mnt/'
        fi
        qemu-system-aarch64 -M virt -cpu cortex-a72 -m 4G -nographic \
            -bios QEMU_EFI.fd \
            -drive file=images/"$image.img",if=virtio,format=raw \
            -drive file=usb_disk.img,if=virtio,format=raw
        ;;
    format)
        docker run --platform linux/arm64/v8 --rm -v "$PWD":/mnt alpine:3.20.3 sh -c \
            'apk add --no-cache dosfstools && mkfs.vfat -C -i B61B19E7 /mnt/usb_disk.img $(( 128 * 1024 ))'
        ;;
    deploy)
        image=$(latest_image)
        echo "Deploying image $image"
        # Might be possible to do A/B boot with efibootmgr
        # but it's unclear if it would work on removable media.
        # https://wiki.archlinux.org/title/Unified_kernel_image#Directly_from_UEFI
        # https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface#efibootmgr
        # https://superuser.com/questions/1572963/
        rsync -Pv "images/$image.efi" root@frood:/media/usb/EFI/BOOT/BOOTAA64.EFI
        ;;
    "")
        echo "Usage: $0 <subcommand>"
        echo
        echo "Subcommands:"
        echo "  build [ --fixup ] - Build the image"
        echo "  qemu              - Run the image in QEMU"
        echo "  format            - Create a QEMU image for persistence"
        echo "  deploy            - Deploy the image to the USB stick"
        echo
        echo "Latest image: $(latest_image)"
        ;;
    *)
        echo "Error: Unknown subcommand '$1'"
        exit 1
        ;;
esac
