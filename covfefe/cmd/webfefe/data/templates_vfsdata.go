// Code generated by vfsgen; DO NOT EDIT.

// +build !dev,!generate

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 7, 2, 18, 56, 119686666, time.UTC),
		},
		"/head.html.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "head.html.tmpl",
			modTime:          time.Date(2019, 5, 8, 23, 47, 8, 109530808, time.UTC),
			uncompressedSize: 1100,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x73\xd3\x30\x10\xbd\xfb\x57\x2c\x9a\xe1\x56\x37\x71\x29\xd0\x31\x56\x18\x28\x3d\x70\x82\x61\x60\x06\x8e\x8a\xb5\xb1\x76\x2a\x4b\x46\x5a\x3b\x09\x1f\xff\x9d\xb1\x9d\x26\x71\x9a\x29\x3a\xd8\x92\xde\x6a\xf5\xde\xd3\x6e\xf1\xec\xc3\xa7\xdb\xaf\x3f\x3e\xdf\x81\xe1\xda\x2e\x92\xa2\xff\x81\x55\xae\x92\x02\x9d\x58\x24\x49\x61\x50\xe9\x45\x02\x00\x50\xd4\xc8\x0a\x4a\xa3\x42\x44\x96\xa2\xe5\x55\x7a\x23\x8e\x21\xc3\xdc\xa4\xf8\xb3\xa5\x4e\x8a\xef\xe9\xb7\x77\xe9\xad\xaf\x1b\xc5\xb4\xb4\x28\xa0\xf4\x8e\xd1\xb1\x14\x1f\xef\x24\xea\x0a\x27\x27\x9d\xaa\x51\x8a\x8e\x70\xdd\xf8\xc0\x47\xc1\x6b\xd2\x6c\xa4\xc6\x8e\x4a\x4c\x87\xc5\x05\x90\x23\x26\x65\xd3\x58\x2a\x8b\x32\xeb\x59\x0e\x99\x98\xd8\xe2\xe2\xd6\x77\x2b\x5c\x61\x31\x1b\x97\x3b\xcc\x92\xbb\x07\x13\x70\x25\x45\xcf\x32\xe6\xb3\xd9\xca\x3b\x8e\x97\x95\xf7\x95\x45\xd5\x50\xbc\x2c\x7d\x3d\x2b\x63\x7c\xbb\x52\x35\xd9\xad\x7c\x4f\xcc\x18\xfe\x7c\x51\x16\xd7\x6a\x2b\x20\xa0\x95\x22\xf2\xd6\x62\x34\x88\xbc\xbf\x76\xd8\x1a\xc5\xf4\xe3\xb2\xe7\xae\xc8\x61\x80\xdf\xfb\xcd\x7e\x0c\xec\x73\x50\x2d\xfb\x37\x13\xa0\x56\x9b\x74\x07\xbe\x9e\xcf\x9b\xcd\x14\x6d\x94\xd6\xe4\xaa\x1c\xb2\x1e\x83\xec\x65\xb3\x81\xf9\x21\xe4\x6f\xb2\x9f\x2e\xbd\xde\x9e\xdc\xd9\x6b\x4c\x47\x3d\x39\x88\x07\x29\x67\x4f\x9b\xec\xe2\x30\xbf\x7a\x32\xcf\xe8\xcc\xf9\x34\xe4\x9a\x96\x4f\x4e\xef\x25\xdc\x9c\x8a\x1b\xf2\x46\xfa\x85\xf9\x20\xec\x0c\xf8\x04\xf9\xc1\x3b\x72\x0f\xde\x5d\xcf\x9f\x4f\x31\x83\x54\x19\xce\x21\xbb\x3e\xce\x7c\x6c\x58\xcb\xec\xdd\x39\xa9\x23\xa5\xab\x47\x8f\xd1\x61\x60\x2a\x95\x4d\x95\xa5\xca\xe5\xb0\xf4\xcc\xbe\x9e\xc6\x2c\x55\x79\x5f\x05\xdf\x3a\x9d\x83\xf3\x0e\x4f\x50\x1f\x34\x86\x1c\xb2\x66\x03\xd1\x5b\xd2\x60\x7b\x96\x55\xc0\xed\xb9\xc0\x34\x28\x4d\x6d\xcc\xe1\x3f\xee\x3c\x7a\x92\x89\xef\x2f\x9a\x0d\xbc\x9a\x9a\xd0\x7f\x8b\xd9\xae\x76\x8b\xd9\xd8\xe5\x49\xd1\xd7\xd0\xae\x31\x35\x75\x50\x5a\x15\xa3\x14\xfb\x92\x16\x87\x3a\x2f\x4c\x76\xe8\x35\x93\x2d\x92\x7f\x01\x00\x00\xff\xff\xc5\x19\x1f\xc9\x4c\x04\x00\x00"),
		},
		"/home.html.tmpl": &vfsgen۰FileInfo{
			name:    "home.html.tmpl",
			modTime: time.Date(2019, 5, 8, 23, 47, 10, 395147216, time.UTC),
			content: []byte("\x7b\x7b\x74\x65\x6d\x70\x6c\x61\x74\x65\x20\x22\x68\x65\x61\x64\x2e\x68\x74\x6d\x6c\x2e\x74\x6d\x70\x6c\x22\x7d\x7d\x0a\x0a\x3c\x70\x3e\x54\x68\x65\x72\x65\x20\x61\x72\x65\x20\x7b\x7b\x2e\x7d\x7d\x20\x65\x6e\x74\x72\x69\x65\x73\x20\x69\x6e\x20\x74\x68\x65\x20\x64\x61\x74\x61\x62\x61\x73\x65\x2e\x0a"),
		},
		"/tweet_page.html.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "tweet_page.html.tmpl",
			modTime:          time.Date(2019, 7, 13, 20, 45, 50, 803696399, time.UTC),
			uncompressedSize: 732,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x5d\x6a\xeb\x30\x10\x85\x9f\xed\x55\x08\x2f\x40\x82\x24\x4f\x41\x77\xb8\x97\x5b\x0a\xed\x43\x4a\xeb\x74\x01\x8e\x3d\x41\xa1\xf2\x4f\xe5\x31\x29\x08\xef\xbd\x8c\x64\xe7\xa7\xa4\x85\xbe\x04\x74\x72\xe6\x9b\x33\xc7\xde\x13\xd6\x9d\x2d\x08\x45\x66\xb0\xa8\xa4\xa1\xda\x4a\xaa\x3b\x9b\x8d\x63\x9a\x7a\x5f\xe1\xfe\xd0\xa0\xc8\xe8\x88\x48\xac\x25\xba\x03\xef\xe5\x6b\x8f\x4e\x6e\x8a\x1a\xc7\x51\xe8\x42\x18\x87\xfb\x3f\x99\x21\xea\xfa\xb5\x52\x74\x3c\x10\xa1\x93\x65\x5b\xab\xd9\x9b\x97\x0e\xb1\x89\x13\x19\xfc\xbd\x25\x6b\x55\x40\xe0\xeb\x9d\x6d\xcb\xb7\xf7\xa1\x25\x04\xef\x8f\x07\x32\x42\xde\x0f\xd6\x6e\xf1\x83\xc6\xd1\x7b\xc9\x3f\x68\x7b\x0c\x8f\x59\xc5\xa6\x62\xc6\xc5\x6c\x84\xfd\x36\x9d\xea\xa9\xa0\xa1\xe7\xff\x1e\xee\x38\xac\xf7\xf2\xbf\xc3\x82\xb0\xfa\x47\x53\xca\x69\x5b\x9a\x6a\xb3\x80\x2d\x77\x23\x9a\xa1\xde\xa1\x13\x1c\x88\xdf\x61\x56\x2b\xb3\x00\xae\xf1\xdc\x72\x2c\x52\x44\x53\xec\x38\x1e\x18\xa7\x5e\x30\x18\xb0\xca\x43\x88\x50\xb8\x59\xc2\x24\x8b\x76\x2f\xa6\x58\x5a\x99\x25\xa4\xc9\x2d\x34\x53\x93\x19\xfb\xcc\x4d\x5c\xd0\x12\x6d\x56\x10\xc4\x6b\xd8\x0a\xd2\xe4\x3b\x5a\x32\x9f\x7b\x3a\xfb\x3a\xf4\xd7\x1d\x9c\xf8\xc6\x8a\x1f\xf2\x9e\xfb\xec\x20\x6f\x07\x57\xe2\x5a\xe8\xb2\xad\xf8\xfb\xcb\x28\x30\x22\x28\x5a\x75\xc0\x46\x87\x70\xb2\x3c\xe6\x4f\x9b\x4b\x83\x43\x48\x3f\x03\x00\x00\xff\xff\x64\xb4\x9e\xbd\xdc\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/head.html.tmpl"].(os.FileInfo),
		fs["/home.html.tmpl"].(os.FileInfo),
		fs["/tweet_page.html.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
