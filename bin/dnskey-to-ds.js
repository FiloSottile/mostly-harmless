"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return fn(new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))); } };

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) { $froundBuf[0] = f; return $froundBuf[0]; };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $internalCopy(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copy = function(dst, src, typ) {
  switch (typ.kind) {
  case $kindArray:
    $internalCopy(dst, src, 0, 0, src.length, typ.elem);
    break;
  case $kindStruct:
    for (var i = 0; i < typ.fields.length; i++) {
      var f = typ.fields[i];
      switch (f.typ.kind) {
      case $kindArray:
      case $kindStruct:
        $copy(dst[f.prop], src[f.prop], f.typ);
        continue;
      default:
        dst[f.prop] = src[f.prop];
        continue;
      }
    }
    break;
  }
};

var $internalCopy = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        $copy(dst[dstOffset + i], src[srcOffset + i], elem);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      $copy(dst[dstOffset + i], src[srcOffset + i], elem);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  $copy(clone, src, type);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; },
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $internalCopy(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $newType = function(size, kind, string, name, pkg, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindString:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { $copy(this, v, typ); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(capacity) {
      this.$val = this;
      this.$capacity = capacity;
      this.$buffer = [];
      this.$sendQueue = [];
      this.$recvQueue = [];
      this.$closed = false;
    };
    typ.keyFor = function(x) {
      if (x.$id === undefined) {
        $idCounter++;
        x.$id = $idCounter;
      }
      return String(x.$id);
    };
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
      typ.nil = new typ(0);
      typ.nil.$sendQueue = typ.nil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = function(x) {
      if (x.$id === undefined) {
        $idCounter++;
        x.$id = $idCounter;
      }
      return String(x.$id);
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { $copy(this, v, typ); };
    typ.init = function(fields) {
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindChan:
  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkg = pkg;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  typ.keyFor = typ.keyFor || $identity;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if(e.typ.typeName !== "") {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           "bool",       "", null);
var $Int           = $newType( 4, $kindInt,           "int",            "int",        "", null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, $kindUint,          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     "complex128", "", null);
var $String        = $newType( 8, $kindString,        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var string = "[" + len + "]" + elem.string;
  var typ = $arrayTypes[string];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, string, "", "", null);
    $arrayTypes[string] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, "", "", null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var paramTypes = $mapArray(params, function(p) { return p.string; });
  if (variadic) {
    paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
  }
  var string = "func(" + paramTypes.join(", ") + ")";
  if (results.length === 1) {
    string += " " + results[0].string;
  } else if (results.length > 1) {
    string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
  }
  var typ = $funcTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindFunc, string, "", "", null);
    $funcTypes[string] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var string = "interface {}";
  if (methods.length !== 0) {
    string = "interface { " + $mapArray(methods, function(m) {
      return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
    }).join("; ") + " }";
  }
  var typ = $interfaceTypes[string];
  if (typ === undefined) {
    typ = $newType(8, $kindInterface, string, "", "", null);
    $interfaceTypes[string] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", "error", "", null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $Map = function() {};
(function() {
  var names = Object.getOwnPropertyNames(Object.prototype);
  for (var i = 0; i < names.length; i++) {
    $Map.prototype[names[i]] = undefined;
  }
})();
var $mapTypes = {};
var $mapType = function(key, elem) {
  var string = "map[" + key.string + "]" + elem.string;
  var typ = $mapTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, string, "", "", null);
    $mapTypes[string] = typ;
    typ.init(key, elem);
  }
  return typ;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, "", "", null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.Slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, "", "", null);
    elem.Slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(fields) {
  var string = "struct { " + $mapArray(fields, function(f) {
    return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
  }).join("; ") + " }";
  if (fields.length === 0) {
    string = "struct {}";
  }
  var typ = $structTypes[string];
  if (typ === undefined) {
    typ = $newType(0, $kindStruct, string, "", "", function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[string] = typ;
    typ.init(fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === 1/0 || n.$real === -1/0 || n.$imag === 1/0 || n.$imag === -1/0;
  var dinf = d.$real === 1/0 || d.$real === -1/0 || d.$imag === 1/0 || d.$imag === -1/0;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(0/0, 0/0);
  }
  if (ninf && !dinf) {
    return new n.constructor(1/0, 1/0);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(0/0, 0/0);
    }
    return new n.constructor(1/0, 1/0);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    var rescheduled = false;
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        rescheduled = true;
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      $goroutine.exit = true;
      throw err;
    } finally {
      $curGoroutine = $dummyGoroutine;
      if ($goroutine.exit && !rescheduled) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep && !rescheduled) {
        $awakeGoroutines--;
        if ($awakeGoroutines === 0 && $totalGoroutines !== 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $goroutine.canBlock = true;
  $schedule($goroutine, direct);
};

var $scheduled = [], $schedulerActive = false;
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
    $schedulerActive = false;
  } finally {
    if ($schedulerActive) {
      setTimeout($runScheduled, 0);
    }
  }
};
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerActive) {
    $schedulerActive = true;
    setTimeout($runScheduled, 0);
  }
};

var $block = function() {
  if (!$curGoroutine.canBlock) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
    },
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.constructor.elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.constructor.elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      s += String.fromCharCode(r[0]);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f.pkg !== "") { /* not exported */
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $panic(new $String("cannot externalize " + t.string));
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $panic(new $String("cannot internalize js.Object, use *js.Object instead"));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $panic(new $String("cannot internalize " + t.string));
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      var timePkg = $packages["time"];
      if (timePkg) {
        return new timePkg.Time(timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000)));
      }
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = new $Map();
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    for (var i = 0; i < v.length; i++) {
      s += $encodeRune(v.charCodeAt(i));
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $panic(new $String("cannot internalize js.Object, use *js.Object instead"));
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $panic(new $String("cannot internalize " + t.string));
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", "Object", "github.com/gopherjs/gopherjs/js", function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init([{prop: "object", name: "object", pkg: "github.com/gopherjs/gopherjs/js", typ: ptrType, tag: ""}]);
	Error.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, TypeAssertionError, errorString, ptrType$5, init, GOROOT, Caller, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", "errorString", "runtime", null);
	ptrType$5 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
	};
	GOROOT = function() {
		var $ptr, goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/usr/local/Cellar/go/1.4.2/libexec";
	};
	$pkg.GOROOT = GOROOT;
	Caller = function(skip) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0; _tmp$1 = ""; _tmp$2 = 0; _tmp$3 = false; pc = _tmp; file = _tmp$1; line = _tmp$2; ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0; _tmp$5 = $internalize(parts[0], $String); _tmp$6 = $parseInt(parts[1]) >> 0; _tmp$7 = true; pc = _tmp$4; file = _tmp$5; line = _tmp$6; ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$5.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init([{prop: "interfaceString", name: "interfaceString", pkg: "runtime", typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", pkg: "runtime", typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", pkg: "runtime", typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", pkg: "runtime", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init([{prop: "s", name: "s", pkg: "errors", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, CompareAndSwapInt32, AddInt32, LoadUint32, StoreInt32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	StoreInt32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, syncSema, RWMutex, rlocker, ptrType, sliceType, chanType, ptrType$1, sliceType$1, ptrType$4, ptrType$6, sliceType$3, ptrType$7, ptrType$8, funcType, ptrType$10, funcType$1, ptrType$11, arrayType, semWaiters, allPools, runtime_Syncsemcheck, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, poolCleanup, init, indexLocal, raceEnable, init$1;
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", "Locker", "sync", null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", "Once", "sync", function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr();
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$3.nil;
			this.Mutex = new Mutex.ptr();
			this.pad = arrayType.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	syncSema = $pkg.syncSema = $newType(0, $kindStruct, "sync.syncSema", "syncSema", "sync", function(lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr();
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr();
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	chanType = $chanType($Bool, false, false);
	ptrType$1 = $ptrType($Uint32);
	sliceType$1 = $sliceType(chanType);
	ptrType$4 = $ptrType($Int32);
	ptrType$6 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(rlocker);
	ptrType$8 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$10 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$11 = $ptrType(Once);
	arrayType = $arrayType($Uint8, 128);
	runtime_Syncsemcheck = function(size) {
		var $ptr, size;
	};
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				return _r;
			/* } */ case 4:
			return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new chanType(0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			return;
		}
		awoke = false;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	raceEnable = function() {
		var $ptr;
	};
	init$1 = function() {
		var $ptr, s;
		s = $clone(new syncSema.ptr(), syncSema);
		runtime_Syncsemcheck(12);
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				raceEnable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			raceEnable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$7);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$6], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$6], false)}];
	ptrType$10.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$11.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$8.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$7.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init([{prop: "local", name: "local", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "store", name: "store", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "New", name: "New", pkg: "", typ: funcType, tag: ""}]);
	Mutex.init([{prop: "state", name: "state", pkg: "sync", typ: $Int32, tag: ""}, {prop: "sema", name: "sema", pkg: "sync", typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init([{prop: "m", name: "m", pkg: "sync", typ: Mutex, tag: ""}, {prop: "done", name: "done", pkg: "sync", typ: $Uint32, tag: ""}]);
	poolLocal.init([{prop: "private$0", name: "private", pkg: "sync", typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", pkg: "", typ: Mutex, tag: ""}, {prop: "pad", name: "pad", pkg: "sync", typ: arrayType, tag: ""}]);
	syncSema.init([{prop: "lock", name: "lock", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "head", name: "head", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", pkg: "sync", typ: $UnsafePointer, tag: ""}]);
	RWMutex.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	rlocker.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = runtime.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = new $Map();
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, WriterTo, RuneReader, RuneScanner, stringWriter, sliceType, errWhence, errOffset, WriteString, ReadAtLeast, ReadFull;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", "Writer", "io", null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", "WriterTo", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", "RuneReader", "io", null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", "RuneScanner", "io", null);
	stringWriter = $pkg.stringWriter = $newType(8, $kindInterface, "io.stringWriter", "stringWriter", "io", null);
	sliceType = $sliceType($Uint8);
	WriteString = function(w, s) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_tuple = $assertType(w, stringWriter, true); sw = _tuple[0]; ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; n = _tuple$1[0]; err = _tuple$1[1];
			return [n, err];
		/* } */ case 2:
		_r$1 = w.Write(new sliceType($stringToBytes(s))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1; n = _tuple$2[0]; err = _tuple$2[1];
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteString = WriteString;
	ReadAtLeast = function(r, buf, min) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0; _tmp$1 = $pkg.ErrShortBuffer; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; nn = _tuple[0]; err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var $ptr, _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	stringWriter.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Abs, Exp, Frexp, Inf, IsInf, IsNaN, Log, Log2, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits, abs, normalize, frexp, log2, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType([{prop: "uint32array", name: "uint32array", pkg: "math", typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", pkg: "math", typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", pkg: "math", typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Abs = function(x) {
		var $ptr, x;
		return abs(x);
	};
	$pkg.Abs = Abs;
	Exp = function(x) {
		var $ptr, x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Frexp = function(f) {
		var $ptr, _tuple, exp$1, f, frac;
		frac = 0;
		exp$1 = 0;
		_tuple = frexp(f); frac = _tuple[0]; exp$1 = _tuple[1];
		return [frac, exp$1];
	};
	$pkg.Frexp = Frexp;
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var $ptr, f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var $ptr, f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Log = function(x) {
		var $ptr, x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	Log2 = function(x) {
		var $ptr, x;
		return log2(x);
	};
	$pkg.Log2 = Log2;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	abs = function(x) {
		var $ptr, x;
		if (x < 0) {
			return -x;
		} else if (x === 0) {
			return 0;
		}
		return x;
	};
	normalize = function(x) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp$1, x, y;
		y = 0;
		exp$1 = 0;
		if (Abs(x) < 2.2250738585072014e-308) {
			_tmp = x * 4.503599627370496e+15; _tmp$1 = -52; y = _tmp; exp$1 = _tmp$1;
			return [y, exp$1];
		}
		_tmp$2 = x; _tmp$3 = 0; y = _tmp$2; exp$1 = _tmp$3;
		return [y, exp$1];
	};
	frexp = function(f) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, exp$1, f, frac, x, x$1, x$2, x$3;
		frac = 0;
		exp$1 = 0;
		if (f === 0) {
			_tmp = f; _tmp$1 = 0; frac = _tmp; exp$1 = _tmp$1;
			return [frac, exp$1];
		} else if (IsInf(f, 0) || IsNaN(f)) {
			_tmp$2 = f; _tmp$3 = 0; frac = _tmp$2; exp$1 = _tmp$3;
			return [frac, exp$1];
		}
		_tuple = normalize(f); f = _tuple[0]; exp$1 = _tuple[1];
		x = Float64bits(f);
		exp$1 = exp$1 + (((((x$1 = $shiftRightUint64(x, 52), new $Uint64(x$1.$high & 0, (x$1.$low & 2047) >>> 0)).$low >> 0) - 1023 >> 0) + 1 >> 0)) >> 0;
		x = (x$2 = new $Uint64(2146435072, 0), new $Uint64(x.$high & ~x$2.$high, (x.$low & ~x$2.$low) >>> 0));
		x = (x$3 = new $Uint64(1071644672, 0), new $Uint64(x.$high | x$3.$high, (x.$low | x$3.$low) >>> 0));
		frac = Float64frombits(x);
		return [frac, exp$1];
	};
	log2 = function(x) {
		var $ptr, _tuple, exp$1, frac, x;
		_tuple = Frexp(x); frac = _tuple[0]; exp$1 = _tuple[1];
		return Log(frac) * 1.4426950408889634 + exp$1;
	};
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr();
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, sliceType, sliceType$1, sliceType$3, _White_Space, _CaseRanges, to, IsSpace, is16, is32, isExcludingLatin, To, ToUpper, ToLower;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = d.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", "d", "unicode", null);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	sliceType$3 = $sliceType(CaseRange);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsSpace = function(r) {
		var $ptr, _ref, r;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var $ptr, off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	RangeTable.init([{prop: "R16", name: "R16", pkg: "", typ: sliceType, tag: ""}, {prop: "R32", name: "R32", pkg: "", typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", pkg: "", typ: $Int, tag: ""}]);
	Range16.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint16, tag: ""}]);
	Range32.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint32, tag: ""}]);
	CaseRange.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", pkg: "", typ: d, tag: ""}]);
	d.init($Int32, 3);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);
		$pkg.CaseRanges = _CaseRanges;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, decodeRuneInternal, decodeRuneInStringInternal, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidString;
	decodeRuneInternal = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, p, r, short$1, size;
		r = 0;
		size = 0;
		short$1 = false;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, r, s, short$1, size;
		r = 0;
		size = 0;
		short$1 = false;
		n = s.length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	FullRune = function(p) {
		var $ptr, _tuple, p, short$1;
		_tuple = decodeRuneInternal(p); short$1 = _tuple[2];
		return !short$1;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var $ptr, _tuple, p, r, size;
		r = 0;
		size = 0;
		_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tuple, r, s, size;
		r = 0;
		size = 0;
		_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 2;
		} else if (i > 1114111 || 55296 <= i && i <= 57343) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, _tuple, i, n, p, size;
		i = 0;
		n = 0;
		n = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			if (((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < 128) {
				i = i + (1) >> 0;
			} else {
				_tuple = DecodeRune($subslice(p, i)); size = _tuple[1];
				i = i + (size) >> 0;
			}
			n = n + (1) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, _i, _ref, _rune, n, s;
		n = 0;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			n = n + (1) >> 0;
			_i += _rune[1];
		}
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidString = function(s) {
		var $ptr, _i, _ref, _rune, _tuple, i, r, s, size;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if (r === 65533) {
				_tuple = DecodeRuneInString(s.substring(i)); size = _tuple[1];
				if (size === 1) {
					return false;
				}
			}
			_i += _rune[1];
		}
		return true;
	};
	$pkg.ValidString = ValidString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, Compare, makeSlice, Index, HasPrefix, HasSuffix, Map, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimRight, TrimSpace;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.runeBytes = arrayType.zero();
			this.bootstrap = arrayType$1.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.runeBytes = runeBytes_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", "readOp", "bytes", null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Compare = function(a, b) {
		var $ptr, _i, _ref, a, b, ca, cb, i;
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			ca = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i >= b.$length) {
				return 1;
			}
			cb = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			if (ca < cb) {
				return -1;
			}
			if (ca > cb) {
				return 1;
			}
			_i++;
		}
		if (a.$length < b.$length) {
			return -1;
		}
		return 0;
	};
	$pkg.Compare = Compare;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((2 * b.buf.$capacity >> 0) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((2 * b.buf.$capacity >> 0) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; m = _tuple[0]; e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; m = _tuple[0]; e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n; _tmp$3 = io.ErrShortWrite; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1;
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = io.EOF; c = _tmp; err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; r = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off)); r = _tuple[0]; n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r; _tmp$7 = n; _tmp$8 = $ifaceNil; r = _tmp$6; size = _tmp$7; err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off)); n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		_tmp = $bytesToString(slice); _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Index = function(s, sep) {
		var $ptr, c, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.Index = Index;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	HasSuffix = function(s, suffix) {
		var $ptr, s, suffix;
		return s.$length >= suffix.$length && Equal($subslice(s, (s.$length - suffix.$length >> 0)), suffix);
	};
	$pkg.HasSuffix = HasSuffix;
	Map = function(mapping, s) {
		var $ptr, _r, _tuple, b, i, mapping, maxbytes, nb, nbytes, r, rl, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; rl = $f.rl; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.$length;
		nbytes = 0;
		b = $makeSlice(sliceType, maxbytes);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.$length)) { break; } */ if(!(i < s.$length)) { $s = 2; continue; }
			wid = 1;
			r = (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; wid = _tuple[1];
			}
			_r = mapping(r); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r >= 0) {
				rl = utf8.RuneLen(r);
				if (rl < 0) {
					rl = 3;
				}
				if ((nbytes + rl >> 0) > maxbytes) {
					maxbytes = (maxbytes * 2 >> 0) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			i = i + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		return $subslice(b, 0, nbytes);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.rl = rl; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			return sliceType.nil;
		}
		return $subslice(s, i);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i)); wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return $subslice(s, 0, i);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.$length)) { break; } */ if(!(start < s.$length)) { $s = 2; continue; }
			wid = 1;
			r = (((start < 0 || start >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + start]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, start)); r = _tuple[0]; wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, f, i, r, s, size, truth, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.$length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tmp = ((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) >> 0); _tmp$1 = 1; r = _tmp; size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i)); r = _tuple[0]; size = _tuple[1];
			}
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeCutsetFunc = function(cutset) {
		var $ptr, cutset;
		return (function(r) {
			var $ptr, _i, _ref, _rune, c, r;
			_ref = cutset;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				c = _rune[0];
				if (c === r) {
					return true;
				}
				_i += _rune[1];
			}
			return false;
		});
	};
	TrimRight = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init([{prop: "buf", name: "buf", pkg: "bytes", typ: sliceType, tag: ""}, {prop: "off", name: "off", pkg: "bytes", typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", pkg: "bytes", typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", pkg: "bytes", typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", pkg: "bytes", typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, bytes, errors, js, runtime, sync, mmapper, Errno, _C_int, Timespec, Stat_t, Dirent, sliceType, sliceType$1, ptrType, sliceType$4, ptrType$10, arrayType$2, arrayType$3, arrayType$4, structType, ptrType$24, mapType, funcType, funcType$1, ptrType$28, arrayType$8, arrayType$10, arrayType$12, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, mapper, errors$1, init, printWarning, printToConsole, use, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, CloseOnExec, itoa, uitoa, ByteSliceFromString, ReadDirent, Sysctl, nametomib, ParseDirent, Getpagesize, Read, Write, sysctl, fcntl, Close, Exit, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Open, Pread, Pwrite, read, Seek, write, mmap, munmap;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr();
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", "Errno", "syscall", null);
	_C_int = $pkg._C_int = $newType(4, $kindInt32, "syscall._C_int", "_C_int", "syscall", null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = 0;
			this.Mode = 0;
			this.Nlink = 0;
			this.Ino = new $Uint64(0, 0);
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Pad_cgo_0 = arrayType$3.zero();
			this.Atimespec = new Timespec.ptr();
			this.Mtimespec = new Timespec.ptr();
			this.Ctimespec = new Timespec.ptr();
			this.Birthtimespec = new Timespec.ptr();
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Lspare = 0;
			this.Qspare = arrayType$8.zero();
			return;
		}
		this.Dev = Dev_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Ino = Ino_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Atimespec = Atimespec_;
		this.Mtimespec = Mtimespec_;
		this.Ctimespec = Ctimespec_;
		this.Birthtimespec = Birthtimespec_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Lspare = Lspare_;
		this.Qspare = Qspare_;
	});
	Dirent = $pkg.Dirent = $newType(0, $kindStruct, "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ino = new $Uint64(0, 0);
			this.Seekoff = new $Uint64(0, 0);
			this.Reclen = 0;
			this.Namlen = 0;
			this.Type = 0;
			this.Name = arrayType$10.zero();
			this.Pad_cgo_0 = arrayType$12.zero();
			return;
		}
		this.Ino = Ino_;
		this.Seekoff = Seekoff_;
		this.Reclen = Reclen_;
		this.Namlen = Namlen_;
		this.Type = Type_;
		this.Name = Name_;
		this.Pad_cgo_0 = Pad_cgo_0_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType = $ptrType($Uint8);
	sliceType$4 = $sliceType(_C_int);
	ptrType$10 = $ptrType($Uintptr);
	arrayType$2 = $arrayType($Uint8, 32);
	arrayType$3 = $arrayType($Uint8, 4);
	arrayType$4 = $arrayType(_C_int, 14);
	structType = $structType([{prop: "addr", name: "addr", pkg: "syscall", typ: $Uintptr, tag: ""}, {prop: "len", name: "len", pkg: "syscall", typ: $Int, tag: ""}, {prop: "cap", name: "cap", pkg: "syscall", typ: $Int, tag: ""}]);
	ptrType$24 = $ptrType(mmapper);
	mapType = $mapType(ptrType, sliceType);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$28 = $ptrType(Timespec);
	arrayType$8 = $arrayType($Int64, 2);
	arrayType$10 = $arrayType($Int8, 1024);
	arrayType$12 = $arrayType($Uint8, 3);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			console.log("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	runtime_envs = function() {
		var $ptr, envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? $throwRuntimeError("index out of range") : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $ptr, name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0); _tmp$4 = 0; _tmp$5 = 0; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0); _tmp$7 = 0; _tmp$8 = 13; r1 = _tmp$6; r2 = _tmp$7; err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0); _tmp$4 = 0; _tmp$5 = 13; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var $ptr, _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	copyenv = function() {
		var $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = new $Map();
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = ""; _tmp$1 = false; value = _tmp; found = _tmp$1;
			return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]); i = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			_tmp$2 = ""; _tmp$3 = false; value = _tmp$2; found = _tmp$3;
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = s.substring((i$1 + 1 >> 0)); _tmp$5 = true; value = _tmp$4; found = _tmp$5;
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = ""; _tmp$7 = false; value = _tmp$6; found = _tmp$7;
		return [value, found];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	CloseOnExec = function(fd) {
		var $ptr, fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	ByteSliceFromString = function(s) {
		var $ptr, a, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType.nil, new Errno(22)];
			}
			i = i + (1) >> 0;
		}
		a = $makeSlice(sliceType, (s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	$pkg.ByteSliceFromString = ByteSliceFromString;
	Timespec.ptr.prototype.Unix = function() {
		var $ptr, _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec; _tmp$1 = ts.Nsec; sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var $ptr, ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var $ptr, _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = new Uint8Array(8);
		_tuple = Getdirentries(fd, buf, base); n = _tuple[0]; err = _tuple[1];
		if (true && ($interfaceIsEqual(err, new Errno(22)) || $interfaceIsEqual(err, new Errno(2)))) {
			err = $ifaceNil;
		}
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	Sysctl = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, buf, err, mib, n, n$ptr, name, value, x;
		value = "";
		err = $ifaceNil;
		_tuple = nametomib(name); mib = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ""; _tmp$1 = err; value = _tmp; err = _tmp$1;
			return [value, err];
		}
		n = 0;
		err = sysctl(mib, ptrType.nil, (n$ptr || (n$ptr = new ptrType$10(function() { return n; }, function($v) { n = $v; }))), ptrType.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ""; _tmp$3 = err; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		if (n === 0) {
			_tmp$4 = ""; _tmp$5 = $ifaceNil; value = _tmp$4; err = _tmp$5;
			return [value, err];
		}
		buf = $makeSlice(sliceType, n);
		err = sysctl(mib, $indexPtr(buf.$array, buf.$offset + 0, ptrType), (n$ptr || (n$ptr = new ptrType$10(function() { return n; }, function($v) { n = $v; }))), ptrType.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = ""; _tmp$7 = err; value = _tmp$6; err = _tmp$7;
			return [value, err];
		}
		if (n > 0 && ((x = n - 1 >>> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) === 0)) {
			n = n - (1) >>> 0;
		}
		_tmp$8 = $bytesToString($subslice(buf, 0, n)); _tmp$9 = $ifaceNil; value = _tmp$8; err = _tmp$9;
		return [value, err];
	};
	$pkg.Sysctl = Sysctl;
	nametomib = function(name) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, bytes$1, err, mib, n, n$ptr, name, p;
		mib = sliceType$4.nil;
		err = $ifaceNil;
		buf = $clone(arrayType$4.zero(), arrayType$4);
		n = 48;
		p = $sliceToArray(new sliceType(buf));
		_tuple = ByteSliceFromString(name); bytes$1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = sliceType$4.nil; _tmp$1 = err; mib = _tmp; err = _tmp$1;
			return [mib, err];
		}
		err = sysctl(new sliceType$4([0, 3]), p, (n$ptr || (n$ptr = new ptrType$10(function() { return n; }, function($v) { n = $v; }))), $indexPtr(bytes$1.$array, bytes$1.$offset + 0, ptrType), (name.length >>> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = sliceType$4.nil; _tmp$3 = err; mib = _tmp$2; err = _tmp$3;
			return [mib, err];
		}
		_tmp$4 = $subslice(new sliceType$4(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))); _tmp$5 = $ifaceNil; mib = _tmp$4; err = _tmp$5;
		return [mib, err];
	};
	ParseDirent = function(buf, max, names) {
		var $ptr, _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes$1, consumed, count, dirent, max, name, names, newnames, origlen, x;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			dirent = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent.Reclen === 0) {
				buf = sliceType.nil;
				break;
			}
			buf = $subslice(buf, dirent.Reclen);
			if ((x = dirent.Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes$1 = $sliceToArray(new sliceType(dirent.Name));
			name = $bytesToString($subslice(new sliceType(bytes$1), 0, dirent.Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0; _tmp$1 = count; _tmp$2 = names; consumed = _tmp; count = _tmp$1; newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	Getpagesize = function() {
		var $ptr;
		return 4096;
	};
	$pkg.Getpagesize = Getpagesize;
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil; _tmp$1 = new Errno(22); data = _tmp; err = _tmp$1;
			return [data, err];
		}
		_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; addr = _tuple[0]; errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil; _tmp$3 = errno; data = _tmp$2; err = _tmp$3;
			return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b; _tmp$5 = $ifaceNil; data = _tmp$4; err = _tmp$5;
		return [data, err];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType) === $indexPtr(data.$array, data.$offset + 0, ptrType))) {
			err = new Errno(22);
			return err;
		}
		_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		/* */ if (!($interfaceIsEqual(errno, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(errno, $ifaceNil))) { */ case 3:
			err = errno;
			return err;
		/* } */ case 4:
		delete m.active[ptrType.keyFor(p)];
		err = $ifaceNil;
		return err;
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var $ptr, e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? $throwRuntimeError("index out of range") : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	Read = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = write(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	$pkg.Write = Write;
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var $ptr, _p0, _tuple, e1, err, mib, new$1, newlen, old, oldlen;
		err = $ifaceNil;
		_p0 = 0;
		if (mib.$length > 0) {
			_p0 = $sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.$length >>> 0), old, oldlen, new$1, newlen); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	fcntl = function(fd, cmd, arg) {
		var $ptr, _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(92, (fd >>> 0), (cmd >>> 0), (arg >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [val, err];
	};
	Close = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Exit = function(code) {
		var $ptr, code;
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	$pkg.Exit = Exit;
	Fchdir = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var $ptr, _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0)); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0); e1 = _tuple[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, (fd >>> 0), (length.$low >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Getdirentries = function(fd, buf, basep) {
		var $ptr, _p0, _tuple, basep, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.$length >>> 0), basep, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Lstat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType.nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0); e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		use(_p0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Open = function(path, mode, perm) {
		var $ptr, _p0, _tuple, _tuple$1, e1, err, fd, mode, path, perm, r0;
		fd = 0;
		err = $ifaceNil;
		_p0 = ptrType.nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, _p0, (mode >>> 0), (perm >>> 0)); r0 = _tuple$1[0]; e1 = _tuple$1[2];
		use(_p0);
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	$pkg.Open = Open;
	Pread = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Seek = function(fd, offset, whence) {
		var $ptr, _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(199, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		newoffset = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	write = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var $ptr, _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.$low >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var $ptr, _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, addr, length, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	ptrType$24.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$28.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init([{prop: "Mutex", name: "", pkg: "", typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", pkg: "syscall", typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", pkg: "syscall", typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", pkg: "syscall", typ: funcType$1, tag: ""}]);
	Timespec.init([{prop: "Sec", name: "Sec", pkg: "", typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", pkg: "", typ: $Int64, tag: ""}]);
	Stat_t.init([{prop: "Dev", name: "Dev", pkg: "", typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", pkg: "", typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", pkg: "", typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", pkg: "", typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$3, tag: ""}, {prop: "Atimespec", name: "Atimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Size", name: "Size", pkg: "", typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", pkg: "", typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", pkg: "", typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", pkg: "", typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", pkg: "", typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", pkg: "", typ: arrayType$8, tag: ""}]);
	Dirent.init([{prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Seekoff", name: "Seekoff", pkg: "", typ: $Uint64, tag: ""}, {prop: "Reclen", name: "Reclen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Namlen", name: "Namlen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $Uint8, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: arrayType$10, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$12, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr();
		envLock = new sync.RWMutex.ptr();
		env = false;
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(), new $Map(), mmap, munmap);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, Once, ptrType, funcType, ptrType$3;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", "Mutex", "github.com/gopherjs/gopherjs/nosync", function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", "Once", "github.com/gopherjs/gopherjs/nosync", function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType = $ptrType(Mutex);
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Mutex.init([{prop: "locked", name: "locked", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	Once.init([{prop: "doing", name: "doing", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Reader, sliceType, sliceType$3, ptrType$5, IndexByte, NewReader, explode, hashStr, Count, Index, IndexAny, genSplit, SplitN, Split, Join, HasPrefix, HasSuffix, Map, ToUpper, ToLower;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "strings.Reader", "Reader", "strings", function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$3 = $sliceType($String);
	ptrType$5 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Reader.ptr.prototype.Len = function() {
		var $ptr, r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return ((x$2 = (x$3 = new $Int64(0, r.s.length), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if (b.$length === 0) {
			_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copyString(b, r.s.substring($flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0; _tmp$1 = errors.New("strings.Reader.ReadAt: negative offset"); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = new $Int64(0, r.s.length), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		n = $copyString(b, r.s.substring($flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, b, err, r, x, x$1, x$2, x$3;
		b = 0;
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0; _tmp$1 = io.EOF; b = _tmp; err = _tmp$1;
			return [b, err];
		}
		b = r.s.charCodeAt($flatten64(r.i));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, 1), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [b, err];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadByte: at beginning of string");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; ch = _tmp; size = _tmp$1; err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = ((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
		c = r.s.charCodeAt($flatten64(r.i));
		if (c < 128) {
			r.i = (x$3 = r.i, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; ch = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRuneInString(r.s.substring($flatten64(r.i))); ch = _tuple[0]; size = _tuple[1];
		r.i = (x$5 = r.i, x$6 = new $Int64(0, size), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = new $Int64(0, r.prevRune);
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _ref, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_ref = whence;
		if (_ref === 0) {
			abs = offset;
		} else if (_ref === 1) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_ref === 2) {
			abs = (x$1 = new $Int64(0, r.s.length), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, m, n, r, s, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; m = $f.m; n = $f.n; r = $f.r; s = $f.s; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		s = r.s.substring($flatten64(r.i));
		_r = io.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; m = _tuple[0]; err = _tuple[1];
		if (m > s.length) {
			$panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = new $Int64(0, m);
		if (!((m === s.length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	NewReader = function(s) {
		var $ptr, s;
		return new Reader.ptr(s, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	explode = function(s, n) {
		var $ptr, _tmp, _tmp$1, _tuple, a, ch, cur, i, l, n, s, size;
		if (n === 0) {
			return sliceType$3.nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		size = 0;
		ch = 0;
		_tmp = 0; _tmp$1 = 0; i = _tmp; cur = _tmp$1;
		while (true) {
			if (!((i + 1 >> 0) < n)) { break; }
			_tuple = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple[0]; size = _tuple[1];
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0)));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur));
		}
		return a;
	};
	hashStr = function(sep) {
		var $ptr, _tmp, _tmp$1, hash, i, i$1, pow, sep, sq, x, x$1;
		hash = 0;
		i = 0;
		while (true) {
			if (!(i < sep.length)) { break; }
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	Count = function(s, sep) {
		var $ptr, _tuple, c, h, hashsep, i, i$1, i$2, lastmatch, n, pow, s, sep, x, x$1;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				if (s.charCodeAt(i) === c) {
					n = n + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < sep.length)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + (1) >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (true) {
			if (!(i$2 < s.length)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$2 = i$2 + (1) >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring((i$2 - sep.length >> 0), i$2) === sep) {
				n = n + (1) >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	$pkg.Count = Count;
	Index = function(s, sep) {
		var $ptr, _tuple, h, hashsep, i, i$1, n, pow, s, sep, x, x$1;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
			if ((h === hashsep) && s.substring((i$1 - n >> 0), i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	$pkg.Index = Index;
	IndexAny = function(s, chars) {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, c, chars, i, m, s;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.length)) { break; }
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexAny = IndexAny;
	genSplit = function(s, sep, sepSave, n) {
		var $ptr, a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$3, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	SplitN = function(s, sep, n) {
		var $ptr, n, s, sep;
		return genSplit(s, sep, 0, n);
	};
	$pkg.SplitN = SplitN;
	Split = function(s, sep) {
		var $ptr, s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(a, sep) {
		var $ptr, _i, _ref, a, b, bp, i, n, s, sep;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = sep.length * ((a.$length - 1 >> 0)) >> 0;
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	HasSuffix = function(s, suffix) {
		var $ptr, s, suffix;
		return s.length >= suffix.length && s.substring((s.length - suffix.length >> 0)) === suffix;
	};
	$pkg.HasSuffix = HasSuffix;
	Map = function(mapping, s) {
		var $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				b = $makeSlice(sliceType, maxbytes);
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = (maxbytes * 2 >> 0) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToUpper = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ToUpper }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	ptrType$5.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Reader.init([{prop: "s", name: "s", pkg: "strings", typ: $String, tag: ""}, {prop: "i", name: "i", pkg: "strings", typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "strings", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, strings, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, sliceType$2, ptrType, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, ptrType$3, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$ptr, localLoc, localLoc$ptr, localOnce, zoneinfo, badData, zoneDirs, _tuple, _r, initLocal, runtimeNano, now, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, absDate, Now, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType$1.nil;
			this.tx = sliceType$2.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(zone);
	sliceType$2 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	arrayType = $arrayType($Uint8, 32);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	ptrType$3 = $ptrType(ParseError);
	ptrType$6 = $ptrType(Time);
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new sliceType$1([new zone.ptr(localLoc.name, ($parseInt(d.getTimezoneOffset()) >> 0) * -60 >> 0, false)]);
	};
	runtimeNano = function() {
		var $ptr;
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var $ptr, _tmp, _tmp$1, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false); _tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0); sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i); _tmp$1 = 257; _tmp$2 = layout.substring((i + 7 >> 0)); prefix = _tmp; std = _tmp$1; suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i); _tmp$4 = 258; _tmp$5 = layout.substring((i + 3 >> 0)); prefix = _tmp$3; std = _tmp$4; suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i); _tmp$7 = 261; _tmp$8 = layout.substring((i + 6 >> 0)); prefix = _tmp$6; std = _tmp$7; suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i); _tmp$10 = 262; _tmp$11 = layout.substring((i + 3 >> 0)); prefix = _tmp$9; std = _tmp$10; suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i); _tmp$13 = 21; _tmp$14 = layout.substring((i + 3 >> 0)); prefix = _tmp$12; std = _tmp$13; suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i); _tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x])); _tmp$17 = layout.substring((i + 2 >> 0)); prefix = _tmp$15; std = _tmp$16; suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i); _tmp$19 = 522; _tmp$20 = layout.substring((i + 2 >> 0)); prefix = _tmp$18; std = _tmp$19; suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i); _tmp$22 = 259; _tmp$23 = layout.substring((i + 1 >> 0)); prefix = _tmp$21; std = _tmp$22; suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i); _tmp$25 = 273; _tmp$26 = layout.substring((i + 4 >> 0)); prefix = _tmp$24; std = _tmp$25; suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i); _tmp$28 = 263; _tmp$29 = layout.substring((i + 1 >> 0)); prefix = _tmp$27; std = _tmp$28; suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tmp$30 = layout.substring(0, i); _tmp$31 = 264; _tmp$32 = layout.substring((i + 2 >> 0)); prefix = _tmp$30; std = _tmp$31; suffix = _tmp$32;
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tmp$33 = layout.substring(0, i); _tmp$34 = 523; _tmp$35 = layout.substring((i + 1 >> 0)); prefix = _tmp$33; std = _tmp$34; suffix = _tmp$35;
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tmp$36 = layout.substring(0, i); _tmp$37 = 525; _tmp$38 = layout.substring((i + 1 >> 0)); prefix = _tmp$36; std = _tmp$37; suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tmp$39 = layout.substring(0, i); _tmp$40 = 527; _tmp$41 = layout.substring((i + 1 >> 0)); prefix = _tmp$39; std = _tmp$40; suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$42 = layout.substring(0, i); _tmp$43 = 531; _tmp$44 = layout.substring((i + 2 >> 0)); prefix = _tmp$42; std = _tmp$43; suffix = _tmp$44;
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$45 = layout.substring(0, i); _tmp$46 = 532; _tmp$47 = layout.substring((i + 2 >> 0)); prefix = _tmp$45; std = _tmp$46; suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$48 = layout.substring(0, i); _tmp$49 = 27; _tmp$50 = layout.substring((i + 7 >> 0)); prefix = _tmp$48; std = _tmp$49; suffix = _tmp$50;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$51 = layout.substring(0, i); _tmp$52 = 30; _tmp$53 = layout.substring((i + 9 >> 0)); prefix = _tmp$51; std = _tmp$52; suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$54 = layout.substring(0, i); _tmp$55 = 26; _tmp$56 = layout.substring((i + 5 >> 0)); prefix = _tmp$54; std = _tmp$55; suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$57 = layout.substring(0, i); _tmp$58 = 29; _tmp$59 = layout.substring((i + 6 >> 0)); prefix = _tmp$57; std = _tmp$58; suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$60 = layout.substring(0, i); _tmp$61 = 28; _tmp$62 = layout.substring((i + 3 >> 0)); prefix = _tmp$60; std = _tmp$61; suffix = _tmp$62;
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$63 = layout.substring(0, i); _tmp$64 = 23; _tmp$65 = layout.substring((i + 7 >> 0)); prefix = _tmp$63; std = _tmp$64; suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$66 = layout.substring(0, i); _tmp$67 = 25; _tmp$68 = layout.substring((i + 9 >> 0)); prefix = _tmp$66; std = _tmp$67; suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$69 = layout.substring(0, i); _tmp$70 = 22; _tmp$71 = layout.substring((i + 5 >> 0)); prefix = _tmp$69; std = _tmp$70; suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$72 = layout.substring(0, i); _tmp$73 = 24; _tmp$74 = layout.substring((i + 6 >> 0)); prefix = _tmp$72; std = _tmp$73; suffix = _tmp$74;
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$75 = layout.substring(0, i); _tmp$76 = std$1; _tmp$77 = layout.substring(j); prefix = _tmp$75; std = _tmp$76; suffix = _tmp$77;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$78 = layout; _tmp$79 = 0; _tmp$80 = ""; prefix = _tmp$78; std = _tmp$79; suffix = _tmp$80;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var $ptr, _q, _q$1, _r$1, _r$2, b, buf, n, pad, x;
		if (x < 10) {
			if (!((pad === 0))) {
				b = $append(b, pad);
			}
			return $append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = $append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = $append(b, ((48 + (_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = $clone(arrayType.zero(), arrayType);
		n = 32;
		if (x === 0) {
			return $append(b, 48);
		}
		while (true) {
			if (!(x >= 10)) { break; }
			n = n - (1) >> 0;
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (((_r$2 = x % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			x = (_q$1 = x / (10), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		n = n - (1) >> 0;
		((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = ((x + 48 >>> 0) << 24 >>> 24));
		return $appendSlice(b, $subslice(new sliceType$3(buf), n));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s); q = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0; _tmp$1 = atoiError; x = _tmp; err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x; _tmp$3 = $ifaceNil; x = _tmp$2; err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = $clone(arrayType$1.zero(), arrayType$1);
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, buf, day, hour, hr, hr$1, layout, m, max, min, month, name, offset, prefix, s, sec, std, suffix, t, y, y$1, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; buf = $f.buf; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; max = $f.max; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; y$1 = $f.y$1; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; name = _tuple$1[0]; offset = _tuple$1[1]; abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		b = sliceType$3.nil;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout); prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true); year = _tuple$3[0]; month = _tuple$3[1]; day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs); hour = _tuple$4[0]; min = _tuple$4[1]; sec = _tuple$4[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = $append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("000")));
				} else if (year < 100) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("00")));
				} else if (year < 1000) {
					b = $append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(new Month(month).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = new Month(month).String();
				b = $appendSlice(b, new sliceType$3($stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(new Weekday(absWeekday(abs)).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = new Weekday(absWeekday(abs)).String();
				b = $appendSlice(b, new sliceType$3($stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("PM")));
				} else {
					b = $appendSlice(b, new sliceType$3($stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("pm")));
				} else {
					b = $appendSlice(b, new sliceType$3($stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = $append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = $append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29) || (std === 25) || (std === 30)) {
					b = $append(b, 58);
				}
				b = appendUint(b, ((_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = $append(b, 58);
					}
					b = appendUint(b, ((_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = $appendSlice(b, new sliceType$3($stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = $append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return $bytesToString(b);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.buf = buf; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.max = max; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.y$1 = y$1; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0) * 10 >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r$1, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout; _tmp$1 = value; alayout = _tmp; avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$2 = value.substring(0, 2); _tmp$3 = value.substring(2); p = _tmp$2; value = _tmp$3;
				_tuple$3 = atoi(p); year = _tuple$3[0]; err = _tuple$3[1];
				if (year >= 69) {
					year = year + (1900) >> 0;
				} else {
					year = year + (2000) >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tmp$4 = value.substring(0, 4); _tmp$5 = value.substring(4); p = _tmp$4; value = _tmp$5;
				_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];
			} else if (_ref === 258) {
				_tuple$5 = lookup(shortMonthNames, value); month = _tuple$5[0]; value = _tuple$5[1]; err = _tuple$5[2];
			} else if (_ref === 257) {
				_tuple$6 = lookup(longMonthNames, value); month = _tuple$6[0]; value = _tuple$6[1]; err = _tuple$6[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$7 = getnum(value, std === 260); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$8 = lookup(shortDayNames, value); value = _tuple$8[1]; err = _tuple$8[2];
			} else if (_ref === 261) {
				_tuple$9 = lookup(longDayNames, value); value = _tuple$9[1]; err = _tuple$9[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$10 = getnum(value, std === 265); day = _tuple$10[0]; value = _tuple$10[1]; err = _tuple$10[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$11 = getnum(value, false); hour = _tuple$11[0]; value = _tuple$11[1]; err = _tuple$11[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$12 = getnum(value, std === 524); hour = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$13 = getnum(value, std === 526); min = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$14 = getnum(value, std === 528); sec = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$15 = nextStdChunk(layout); std = _tuple$15[1];
					std = std & (65535);
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (true) {
						if (!(n < value.length && isDigit(value, n))) { break; }
						n = n + (1) >> 0;
					}
					_tuple$16 = parseNanoseconds(value, n); nsec = _tuple$16[0]; rangeErrString = _tuple$16[1]; err = _tuple$16[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$6 = value.substring(0, 2); _tmp$7 = value.substring(2); p = _tmp$6; value = _tmp$7;
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$8 = value.substring(0, 2); _tmp$9 = value.substring(2); p = _tmp$8; value = _tmp$9;
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = $pkg.UTC;
					break;
				}
				_tmp$10 = ""; _tmp$11 = ""; _tmp$12 = ""; _tmp$13 = ""; sign = _tmp$10; hour$1 = _tmp$11; min$1 = _tmp$12; seconds = _tmp$13;
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tmp$14 = value.substring(0, 1); _tmp$15 = value.substring(1, 3); _tmp$16 = value.substring(4, 6); _tmp$17 = "00"; _tmp$18 = value.substring(6); sign = _tmp$14; hour$1 = _tmp$15; min$1 = _tmp$16; seconds = _tmp$17; value = _tmp$18;
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tmp$19 = value.substring(0, 1); _tmp$20 = value.substring(1, 3); _tmp$21 = "00"; _tmp$22 = "00"; _tmp$23 = value.substring(3); sign = _tmp$19; hour$1 = _tmp$20; min$1 = _tmp$21; seconds = _tmp$22; value = _tmp$23;
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tmp$24 = value.substring(0, 1); _tmp$25 = value.substring(1, 3); _tmp$26 = value.substring(4, 6); _tmp$27 = value.substring(7, 9); _tmp$28 = value.substring(9); sign = _tmp$24; hour$1 = _tmp$25; min$1 = _tmp$26; seconds = _tmp$27; value = _tmp$28;
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tmp$29 = value.substring(0, 1); _tmp$30 = value.substring(1, 3); _tmp$31 = value.substring(3, 5); _tmp$32 = value.substring(5, 7); _tmp$33 = value.substring(7); sign = _tmp$29; hour$1 = _tmp$30; min$1 = _tmp$31; seconds = _tmp$32; value = _tmp$33;
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tmp$34 = value.substring(0, 1); _tmp$35 = value.substring(1, 3); _tmp$36 = value.substring(3, 5); _tmp$37 = "00"; _tmp$38 = value.substring(5); sign = _tmp$34; hour$1 = _tmp$35; min$1 = _tmp$36; seconds = _tmp$37; value = _tmp$38;
				}
				_tmp$39 = 0; _tmp$40 = 0; _tmp$41 = 0; hr = _tmp$39; mm = _tmp$40; ss = _tmp$41;
				_tuple$17 = atoi(hour$1); hr = _tuple$17[0]; err = _tuple$17[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$18 = atoi(min$1); mm = _tuple$18[0]; err = _tuple$18[1];
				}
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$19 = atoi(seconds); ss = _tuple$19[0]; err = _tuple$19[1];
				}
				zoneOffset = ((((hr * 60 >> 0) + mm >> 0)) * 60 >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = $pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$20 = parseTimeZone(value); n$1 = _tuple$20[0]; ok = _tuple$20[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tmp$42 = value.substring(0, n$1); _tmp$43 = value.substring(n$1); zoneName = _tmp$42; value = _tmp$43;
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$21 = parseNanoseconds(value, ndigit); nsec = _tuple$21[0]; rangeErrString = _tuple$21[1]; err = _tuple$21[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (true) {
					if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
					i = i + (1) >> 0;
				}
				_tuple$22 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$22[0]; rangeErrString = _tuple$22[1]; err = _tuple$22[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return [_r$1, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3; name = _tuple$23[0]; offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5; offset$1 = _tuple$24[0]; ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3)); offset$1 = _tuple$25[0];
				offset$1 = offset$1 * (3600) >> 0;
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		return [_r$6, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0; _tmp$1 = false; length = _tmp; ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4; _tmp$3 = true; length = _tmp$2; ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length; _tmp$5 = true; length = _tmp$4; ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tmp$6 = 0; _tmp$7 = false; length = _tmp$6; ok = _tmp$7;
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5; _tmp$9 = true; length = _tmp$8; ok = _tmp$9;
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4; _tmp$11 = true; length = _tmp$10; ok = _tmp$11;
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tmp$12 = 3; _tmp$13 = true; length = _tmp$12; ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0; _tmp$15 = false; length = _tmp$14; ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1)); x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes)); ns = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = ns * (10) >> 0;
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low >= 3435973835))) {
				_tmp = new $Int64(0, 0); _tmp$1 = ""; _tmp$2 = errLeadingInt; x = _tmp; rem = _tmp$1; err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			i = i + (1) >> 0;
		}
		_tmp$3 = x; _tmp$4 = s.substring(i); _tmp$5 = $ifaceNil; x = _tmp$3; rem = _tmp$4; err = _tmp$5;
		return [x, rem, err];
	};
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2; offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2; name = _tuple$1[0]; offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		return [year, month, day];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r$1, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; year = _tuple$1[0];
		return year;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r$1, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; month = _tuple$1[1];
		return month;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r$1, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; day = _tuple$1[2];
		return day;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r$1, _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		_r$3 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		wday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		return [hour, min, sec];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((hour * 3600 >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((min * 60 >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r$1, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; yday = _tuple$1[3];
		return yday + 1 >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = $clone(arrayType.zero(), arrayType);
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec); w = _tuple$1[0]; u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9); w = _tuple$2[0]; u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (digit.$low << 24 >>> 24) + 48 << 24 >>> 24);
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w; _tmp$1 = v; nw = _tmp; nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24);
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		u = $clone(u, Time);
		t = $clone(this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		_r$2 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; hour = _tuple$2[0]; min = _tuple$2[1]; sec = _tuple$2[2];
		_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		return _r$3;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		return [year, month, day, yday];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	Now = function() {
		var $ptr, _tuple$1, nsec, sec;
		_tuple$1 = now(); sec = _tuple$1[0]; nsec = _tuple$1[1];
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);
	};
	$pkg.Now = Now;
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = $clone(this, Time);
		_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; name = _tuple$1[0]; offset = _tuple$1[1];
		return [name, offset];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		offsetMin = 0;
		/* */ if (t.Location() === utcLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Location() === utcLoc) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; offset = _tuple$1[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = ((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0) * 60 >> 0;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.loc = utcLoc;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; localoff = _tuple$1[1];
			/* */ if (offset === localoff) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (offset === localoff) { */ case 5:
				t.loc = $pkg.Local;
				$s = 7; continue;
			/* } else { */ case 6:
				t.loc = FixedZone("", offset);
			/* } */ case 7:
		/* } */ case 3:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r$1, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r$1, _r$2, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (y < 0 || y >= 10000) { */ case 2:
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		/* } */ case 3:
		_r$2 = t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return [new sliceType$3($stringToBytes(_r$2)), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r$1, _r$2, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (y < 0 || y >= 10000) { */ case 2:
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		/* } */ case 3:
		_r$2 = t.Format("2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return [new sliceType$3($stringToBytes(_r$2)), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + ((n * base >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - ((n$1 * base >> 0)) >> 0;
		}
		_tmp = hi; _tmp$1 = lo; nhi = _tmp; nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12); year = _tuple$1[0]; m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000); sec = _tuple$2[0]; nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60); min = _tuple$3[0]; sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60); hour = _tuple$4[0]; min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24); day = _tuple$5[0]; hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, (((hour * 3600 >> 0) + (min * 60 >> 0) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$6 = _r$1; offset = _tuple$6[1]; start = _tuple$6[3]; end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
			utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
			/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 4; continue; }
			/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 4:
				_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$7 = _r$2; offset = _tuple$7[1];
				$s = 6; continue;
			/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 5:
				_r$3 = loc.lookup(end); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$8 = _r$3; offset = _tuple$8[1];
			/* } */ case 6:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0; _tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low); u0x = _tmp; u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0; _tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low)); u0x = _tmp$2; u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0; _tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low); u0x = _tmp$4; u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		return l;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1.name;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType$1([new zone.ptr(name, offset, false)]), new sliceType$2([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2; nam = _tuple$1[0]; offset$1 = _tuple$1[1]; isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1; _tmp$1 = isDST$1; _tmp$2 = true; offset = _tmp; isDST = _tmp$1; ok = _tmp$2;
					return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset; _tmp$4 = zone$2.isDST; _tmp$5 = true; offset = _tmp$3; isDST = _tmp$4; ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init([{prop: "Layout", name: "Layout", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", pkg: "", typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", pkg: "", typ: $String, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	Time.init([{prop: "sec", name: "sec", pkg: "time", typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", pkg: "time", typ: $Int32, tag: ""}, {prop: "loc", name: "loc", pkg: "time", typ: ptrType$1, tag: ""}]);
	Location.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "zone", name: "zone", pkg: "time", typ: sliceType$1, tag: ""}, {prop: "tx", name: "tx", pkg: "time", typ: sliceType$2, tag: ""}, {prop: "cacheStart", name: "cacheStart", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", pkg: "time", typ: ptrType, tag: ""}]);
	zone.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "offset", name: "offset", pkg: "time", typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", pkg: "time", typ: $Bool, tag: ""}]);
	zoneTrans.init([{prop: "when", name: "when", pkg: "time", typ: $Int64, tag: ""}, {prop: "index", name: "index", pkg: "time", typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", pkg: "time", typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", pkg: "time", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr();
		localOnce = new nosync.Once.ptr();
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType$1.nil, sliceType$2.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO"); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new sliceType(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, arrayType, ptrType$11, funcType$1, ptrType$12, ptrType$14, ptrType$15, errFinished, lstat, useSyscallwd, supportsCloseOnExec, runtime_args, init, NewSyscallError, IsNotExist, isNotExist, Open, fixCount, sigpipe, syscallMode, NewFile, epipecheck, OpenFile, Lstat, basename, init$1, useSyscallwdDarwin, init$2, Exit, fileInfoFromStat, timespecToTime, init$3, Getpagesize;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", "LinkError", "os", function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", "File", "os", function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$11.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", "file", "os", function(fd_, name_, dirinfo_, nepipe_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType.nil;
			this.nepipe = 0;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nepipe = nepipe_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$1.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr();
			this.sys = $ifaceNil;
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(dirInfo);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType(FileInfo);
	ptrType$2 = $ptrType(File);
	ptrType$3 = $ptrType(PathError);
	ptrType$4 = $ptrType(LinkError);
	arrayType = $arrayType($Uint8, 32);
	ptrType$11 = $ptrType(file);
	funcType$1 = $funcType([ptrType$11], [$error], false);
	ptrType$12 = $ptrType($Int32);
	ptrType$14 = $ptrType(fileStat);
	ptrType$15 = $ptrType(SyscallError);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType.nil) {
			f.file.dirinfo = new dirInfo.ptr();
			f.file.dirinfo.buf = $makeSlice(sliceType$1, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]); d.nbuf = _tuple[0]; errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names; _tmp$1 = NewSyscallError("readdirent", errno); names = _tmp; err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0; _tmp$3 = 0; nb = _tmp$2; nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names); nb = _tuple$2[0]; nc = _tuple$2[1]; names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names; _tmp$5 = io.EOF; names = _tmp$4; err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names; _tmp$7 = $ifaceNil; names = _tmp$6; err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, f, fi, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; fi = $f.fi; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = sliceType$2.nil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; fi = _tuple[0]; err = _tuple[1];
		return [fi, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.fi = fi; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = sliceType.nil; _tmp$1 = $pkg.ErrInvalid; names = _tmp; err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n); names = _tuple[0]; err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return e.Op + " " + e.Path + ": " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return e.Syscall + ": " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var $ptr, err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	isNotExist = function(err) {
		var $ptr, _ref, err, pe, pe$1, pe$2;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			pe$1 = _ref.$val;
			err = pe$1.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			pe$2 = _ref.$val;
			err = pe$2.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off); m = _tuple[0]; e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off); m = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = new $Int64(0, 0); _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence); r = _tuple[0]; e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = new PathError.ptr("seek", f.file.name, e); ret = _tmp$2; err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r; _tmp$5 = $ifaceNil; ret = _tmp$4; err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, ret, s;
		ret = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.Write(new sliceType$1($stringToBytes(s))); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	Open = function(name) {
		var $ptr, _tuple, err, file$1, name;
		file$1 = ptrType$2.nil;
		err = $ifaceNil;
		_tuple = OpenFile(name, 0, 0); file$1 = _tuple[0]; err = _tuple[1];
		return [file$1, err];
	};
	$pkg.Open = Open;
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	sigpipe = function() {
		$panic("Native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, f, mode;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, f, gid, uid;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, f, size;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, err, f;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			err = $pkg.ErrInvalid;
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$2.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $ptr, f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType$2.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType.nil, 0));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$11, "close")));
		return f;
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32))) {
			if (atomic.AddInt32((file$1.$ptr_nepipe || (file$1.$ptr_nepipe = new ptrType$12(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1))), 1) >= 10) {
				sigpipe();
			}
		} else {
			atomic.StoreInt32((file$1.$ptr_nepipe || (file$1.$ptr_nepipe = new ptrType$12(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1))), 0);
		}
	};
	OpenFile = function(name, flag, perm) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, e, err, file$1, flag, name, perm, r;
		file$1 = ptrType$2.nil;
		err = $ifaceNil;
		_tuple = syscall.Open(name, flag | 16777216, syscallMode(perm)); r = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = ptrType$2.nil; _tmp$1 = new PathError.ptr("open", name, e); file$1 = _tmp; err = _tmp$1;
			return [file$1, err];
		}
		if (!supportsCloseOnExec) {
			syscall.CloseOnExec(r);
		}
		_tmp$2 = NewFile((r >>> 0), name); _tmp$3 = $ifaceNil; file$1 = _tmp$2; err = _tmp$3;
		return [file$1, err];
	};
	$pkg.OpenFile = OpenFile;
	File.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$11.nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.Stat = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err, f, fi, stat;
		fi = $ifaceNil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = $ifaceNil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		stat = $clone(new syscall.Stat_t.ptr(), syscall.Stat_t);
		err = syscall.Fstat(f.file.fd, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = $ifaceNil; _tmp$3 = new PathError.ptr("stat", f.file.name, err); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		_tmp$4 = fileInfoFromStat(stat, f.file.name); _tmp$5 = $ifaceNil; fi = _tmp$4; err = _tmp$5;
		return [fi, err];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Lstat = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, err, fi, name, stat;
		fi = $ifaceNil;
		err = $ifaceNil;
		stat = $clone(new syscall.Stat_t.ptr(), syscall.Stat_t);
		err = syscall.Lstat(name, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $ifaceNil; _tmp$1 = new PathError.ptr("lstat", name, err); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tmp$2 = fileInfoFromStat(stat, name); _tmp$3 = $ifaceNil; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n); names = _tuple[0]; err = _tuple[1];
		fi = $makeSlice(sliceType$2, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = lstat(dirname + "/" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; fip = _tuple$1[0]; lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi; _tmp$1 = lerr; fi = _tmp; err = _tmp$1;
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = fi; _tmp$3 = err; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, b, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		while (true) {
			bcap = b;
			if (true && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]); m = _tuple[0]; err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (true && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var $ptr, i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		var $ptr;
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var $ptr, err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	init$2 = function() {
		var $ptr;
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var $ptr, code;
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	fileInfoFromStat = function(st, name) {
		var $ptr, _ref, fs, name, st;
		fs = new fileStat.ptr(basename(name), st.Size, 0, $clone(timespecToTime(st.Mtimespec), time.Time), st);
		fs.mode = (((st.Mode & 511) >>> 0) >>> 0);
		_ref = (st.Mode & 61440) >>> 0;
		if (_ref === 24576 || _ref === 57344) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_ref === 8192) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_ref === 16384) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_ref === 4096) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_ref === 40960) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_ref === 32768) {
		} else if (_ref === 49152) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((st.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((st.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((st.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
		return fs;
	};
	timespecToTime = function(ts) {
		var $ptr, ts;
		ts = $clone(ts, syscall.Timespec);
		return time.Unix(ts.Sec, ts.Nsec);
	};
	init$3 = function() {
		var $ptr, _i, _ref, _rune, _tuple, err, i, osver;
		_tuple = syscall.Sysctl("kern.osrelease"); osver = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return;
		}
		i = 0;
		_ref = osver;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			if (!((osver.charCodeAt(i) === 46))) {
				_i += _rune[1];
				continue;
			}
			_i += _rune[1];
		}
		if (i > 2 || (i === 2) && osver.charCodeAt(0) >= 49 && osver.charCodeAt(1) >= 49) {
			supportsCloseOnExec = true;
		}
	};
	Getpagesize = function() {
		var $ptr;
		return syscall.Getpagesize();
	};
	$pkg.Getpagesize = Getpagesize;
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = $clone(arrayType.zero(), arrayType);
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$1(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$15.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];
	ptrType$11.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$14.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	SyscallError.init([{prop: "Syscall", name: "Syscall", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	LinkError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Old", name: "Old", pkg: "", typ: $String, tag: ""}, {prop: "New", name: "New", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	File.init([{prop: "file", name: "", pkg: "os", typ: ptrType$11, tag: ""}]);
	file.init([{prop: "fd", name: "fd", pkg: "os", typ: $Int, tag: ""}, {prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", pkg: "os", typ: ptrType, tag: ""}, {prop: "nepipe", name: "nepipe", pkg: "os", typ: $Int32, tag: ""}]);
	dirInfo.init([{prop: "buf", name: "buf", pkg: "os", typ: sliceType$1, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "os", typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", pkg: "os", typ: $Int, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init([{prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "size", name: "size", pkg: "os", typ: $Int64, tag: ""}, {prop: "mode", name: "mode", pkg: "os", typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", pkg: "os", typ: time.Time, tag: ""}, {prop: "sys", name: "sys", pkg: "os", typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		supportsCloseOnExec = false;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		useSyscallwd = (function(param) {
			var $ptr, param;
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
		init$3();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType, arrayType, arrayType$1, ptrType$1, arrayType$2, arrayType$3, arrayType$4, arrayType$5, arrayType$6, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$ptr, float64info, float64info$ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatUint, FormatInt, Itoa, AppendInt, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType$6.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	sliceType$6 = $sliceType($Uint8);
	ptrType = $ptrType(NumError);
	arrayType = $arrayType($Uint8, 24);
	arrayType$1 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$2 = $arrayType($Uint8, 3);
	arrayType$3 = $arrayType($Uint8, 50);
	arrayType$4 = $arrayType($Uint8, 65);
	arrayType$5 = $arrayType($Uint8, 4);
	arrayType$6 = $arrayType($Uint8, 800);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	equalIgnoreCase = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1); _tmp$1 = true; f = _tmp; ok = _tmp$1;
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN(); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1); _tmp$7 = true; f = _tmp$6; ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var $ptr, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c === 46) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits; _tmp$1 = overflow; b = _tmp; overflow = _tmp$1;
		return [b, overflow];
		/* */ $s = -1; case -1: } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp])); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2]))); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val); _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bitSize, err, err1, err1$1, f, f1, f1$1, s;
		f = 0;
		err = $ifaceNil;
		if (bitSize === 32) {
			_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];
			_tmp = f1; _tmp$1 = err1; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s); f1$1 = _tuple$1[0]; err1$1 = _tuple$1[1];
		_tmp$2 = f1$1; _tmp$3 = err1$1; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var $ptr, base, x;
		if (base < 2) {
			return new $Uint64(0, 0);
		}
		return (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
	};
	ParseUint = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, s0, v, x, x$1, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); cutoff = _tmp; maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		s0 = s;
		/* */ if (s.length < 1) { $s = 1; continue; }
		/* */ if (2 <= base && base <= 36) { $s = 2; continue; }
		/* */ if (base === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (s.length < 1) { */ case 1:
			err = $pkg.ErrSyntax;
			/* goto Error */ $s = 6; continue;
			$s = 5; continue;
		/* } else if (2 <= base && base <= 36) { */ case 2:
			$s = 5; continue;
		/* } else if (base === 0) { */ case 3:
			/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 7; continue; }
			/* */ if (s.charCodeAt(0) === 48) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 7:
				base = 16;
				s = s.substring(2);
				/* */ if (s.length < 1) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (s.length < 1) { */ case 11:
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 6; continue;
				/* } */ case 12:
				$s = 10; continue;
			/* } else if (s.charCodeAt(0) === 48) { */ case 8:
				base = 8;
				$s = 10; continue;
			/* } else { */ case 9:
				base = 10;
			/* } */ case 10:
			$s = 5; continue;
		/* } else { */ case 4:
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ $s = 6; continue;
		/* } */ case 5:
		n = new $Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x.$high - 0, x.$low - 1));
		i = 0;
		/* while (true) { */ case 13:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 14; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* */ if (48 <= d && d <= 57) { $s = 15; continue; }
			/* */ if (97 <= d && d <= 122) { $s = 16; continue; }
			/* */ if (65 <= d && d <= 90) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (48 <= d && d <= 57) { */ case 15:
				v = d - 48 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (97 <= d && d <= 122) { */ case 16:
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (65 <= d && d <= 90) { */ case 17:
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else { */ case 18:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 19:
			/* */ if ((v >> 0) >= base) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((v >> 0) >= base) { */ case 20:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 21:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 22:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 23:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$1 = new $Uint64(0, v), new $Uint64(n.$high + x$1.$high, n.$low + x$1.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 24:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 25:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* Error: */ case 6:
		_tmp$4 = n; _tmp$5 = new NumError.ptr("ParseUint", s0, err); n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0); _tmp$1 = syntaxError("ParseInt", s); i = _tmp; err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize); un = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0); _tmp$3 = err; i = _tmp$2; err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)); _tmp$5 = rangeError("ParseInt", s0); i = _tmp$4; err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low)); _tmp$7 = rangeError("ParseInt", s0); i = _tmp$6; err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n; _tmp$9 = $ifaceNil; i = _tmp$8; err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, i, i64, s;
		i = 0;
		err = $ifaceNil;
		_tuple = ParseInt(s, 10, 0); i64 = _tuple[0]; err = _tuple[1];
		_tmp = ((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0); _tmp$1 = err; i = _tmp; err = _tmp$1;
		return [i, err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = $clone(arrayType.zero(), arrayType);
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }
					n = n * 10 >> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0);
			n = ((n * 10 >> 0) + c >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >> 0);
			dig = (n >> $min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (n >> $min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 27)) { break; }
				leftShift(a, 27);
				k = k - (27) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -27)) { break; }
				rightShift(a, 27);
				k = k + (27) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = (x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr();
		upper = new extFloat.ptr();
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat); _tmp$1 = $clone(f, extFloat); $copy(lower, _tmp, extFloat); $copy(upper, _tmp$1, extFloat);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		$copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg), extFloat);
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			$copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg), extFloat);
		} else {
			$copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg), extFloat);
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant; _tmp$1 = f.exp; mant = _tmp; exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant; _tmp$3 = exp; f.mant = _tmp$2; f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = $clone(g, extFloat);
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32); _tmp$1 = new $Uint64(0, (f.mant.$low >>> 0)); fhi = _tmp; flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32); _tmp$3 = new $Uint64(0, (g.mant.$low >>> 0)); ghi = _tmp$2; glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = (((-46 - f.exp >> 0)) * 28 >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + (i * 8 >> 0) >> 0)); _tmp$1 = i; exp10 = _tmp; index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, nonAsciiName, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(); exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		nonAsciiName = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0; _tmp$1 = new $Uint64(0, 1); i = _tmp; pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$5 = (pow10.$low >>> 0), (((integer >>> 16 << 16) * x$5 >>> 0) + (integer << 16 >>> 16) * x$5) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = $clone(arrayType$1.zero(), arrayType$1);
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$6 = d.d, x$7 = i$1 - pos >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				nonAsciiName = $mul64(nonAsciiName, (new $Uint64(0, 10)));
				if ((x$8 = $mul64(new $Uint64(0, 2), nonAsciiName), x$9 = $shiftLeft64(new $Uint64(0, 1), shift), (x$8.$high > x$9.$high || (x$8.$high === x$9.$high && x$8.$low > x$9.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$10 = d.d, ((nd < 0 || nd >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$11 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$11.$high, fraction.$low - x$11.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$12 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$12.$high | fraction.$high, (x$12.$low | fraction.$low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$13 = d.d, ((i$2 < 0 || i$2 >= x$13.$length) ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var $ptr, d, den, i, nonAsciiName, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), nonAsciiName), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + nonAsciiName.$high, num.$low + nonAsciiName.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - nonAsciiName.$high, num.$low - nonAsciiName.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = (x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = $clone(arrayType.zero(), arrayType);
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd; _tmp$1 = nd; d.nd = _tmp; d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0; _tmp$3 = new $Uint64(0, 1); i$1 = _tmp$2; pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - ((x$19 = (pow$1.$low >>> 0), (((digit >>> 16 << 16) * x$19 >>> 0) + (digit << 16 >>> 16) * x$19) >>> 0)) >>> 0;
			currentDiff = (x$20 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$20.$high + fraction.$high, x$20.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$21 = d.d, x$22 = d.nd, ((x$22 < 0 || x$22 >= x$21.$length) ? $throwRuntimeError("index out of range") : x$21.$array[x$21.$offset + x$22] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$23 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$23.$high, fraction.$low - x$23.$low));
			if ((x$24 = $mul64(allowance, multiplier), (fraction.$high < x$24.$high || (fraction.$high === x$24.$high && fraction.$low < x$24.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = (x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _ref, _ref$1, _ref$2, _ref$3, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, new sliceType$6($stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = $clone(_tuple[0], extFloat); upper = $clone(_tuple[1], extFloat);
			buf = $clone(arrayType$1.zero(), arrayType$1);
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + (1) >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = $clone(arrayType.zero(), arrayType);
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _ref, _ref$1, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _ref, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, digs, prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, _tmp, _tmp$1, _tmp$2, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (332 * ((d.dp - d.nd >> 0)) >> 0) >= (100 * ((exp - (flt.mantbits >> 0) >> 0)) >> 0)) {
			return;
		}
		upper = new decimal.ptr();
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr();
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; l = _tmp; m = _tmp$1; u = _tmp$2;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			} else {
				l = 48;
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _r, _ref, buf, ch, d, dst, exp, fmt, i, i$1, m, neg, prec, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (true) {
				if (!(i < m)) { break; }
				dst = $append(dst, (x$1 = d.d, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])));
				i = i + (1) >> 0;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		buf = $clone(arrayType$2.zero(), arrayType$2);
		i$1 = 3;
		while (true) {
			if (!(exp >= 10)) { break; }
			i$1 = i$1 - (1) >> 0;
			((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24));
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - (1) >> 0;
		((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24));
		_ref = i$1;
		if (_ref === 0) {
			dst = $append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = $append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = $append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, i$1, j, neg, prec, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (true) {
				if (!(i < d.dp && i < d.nd)) { break; }
				dst = $append(dst, (x = d.d, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
				i = i + (1) >> 0;
			}
			while (true) {
				if (!(i < d.dp)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i$1 = 0;
			while (true) {
				if (!(i$1 < prec)) { break; }
				ch = 48;
				j = d.dp + i$1 >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x$1 = d.d, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				}
				dst = $append(dst, ch);
				i$1 = i$1 + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _q, _r, buf, dst, esign, exp, flt, mant, n, neg, w, x;
		buf = $clone(arrayType$3.zero(), arrayType$3);
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (true) {
			if (!(exp > 0 || n < 1)) { break; }
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24));
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		w = w - (1) >> 0;
		((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = esign);
		w = w - (1) >> 0;
		((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 112);
		n = 0;
		while (true) {
			if (!((mant.$high > 0 || (mant.$high === 0 && mant.$low > 0)) || n < 1)) { break; }
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = ((x = $div64(mant, new $Uint64(0, 10), true), new $Uint64(x.$high + 0, x.$low + 48)).$low << 24 >>> 24));
			mant = $div64(mant, (new $Uint64(0, 10)), false);
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $appendSlice(dst, $subslice(new sliceType$6(buf), w));
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, i, base, false, false); s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false); s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true); dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, s, s$1, u, x, x$1, x$2, x$3;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = $clone(arrayType$4.zero(), arrayType$4);
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 100)))) { break; }
				i = i - (2) >> 0;
				q = $div64(u, new $Uint64(0, 100), false);
				j = ((x = $mul64(q, new $Uint64(0, 100)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
				(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError("index out of range") : a[x$1] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j)));
				(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError("index out of range") : a[x$2] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j)));
				u = q;
			}
			if ((u.$high > 0 || (u.$high === 0 && u.$low >= 10))) {
				i = i - (1) >> 0;
				q$1 = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$3 = $mul64(q$1, new $Uint64(0, 10)), new $Uint64(u.$high - x$3.$high, u.$low - x$3.$low)).$low >>> 0)));
				u = q$1;
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(($div64(u, b$1, true).$low >>> 0)));
					u = $div64(u, (b$1), false);
				}
			}
		}
		i = i - (1) >> 0;
		((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var $ptr, ASCIIonly, _q, _ref, _tuple, buf, n, quote, r, runeTmp, s, s$1, s$2, width;
		runeTmp = $clone(arrayType$5.zero(), arrayType$5);
		buf = $makeSlice(sliceType$6, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\x")));
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\x")));
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\u")));
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\u")));
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\U")));
					s$2 = 28;
					while (true) {
						if (!(s$2 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, false);
	};
	$pkg.Quote = Quote;
	QuoteToASCII = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, true);
	};
	$pkg.QuoteToASCII = QuoteToASCII;
	QuoteRune = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, false);
	};
	$pkg.QuoteRune = QuoteRune;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRune(r))));
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	QuoteRuneToASCII = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, true);
	};
	$pkg.QuoteRuneToASCII = QuoteRuneToASCII;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRuneToASCII(r))));
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; wid = _tuple[1];
			s = s.substring(wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0; _tmp$1 = true; v = _tmp; ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0; _tmp$3 = true; v = _tmp$2; ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0; _tmp$5 = true; v = _tmp$4; ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
			_tmp = r; _tmp$1 = true; _tmp$2 = s.substring(size); _tmp$3 = $ifaceNil; value = _tmp; multibyte = _tmp$1; tail = _tmp$2; err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0); _tmp$5 = false; _tmp$6 = s.substring(1); _tmp$7 = $ifaceNil; value = _tmp$4; multibyte = _tmp$5; tail = _tmp$6; err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (true) {
				if (!(j < n)) { break; }
				_tuple$1 = unhex(s.charCodeAt(j)); x = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + (1) >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (true) {
				if (!(j$1 < 2)) { break; }
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + (1) >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _q, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err, err$1, multibyte, n, n$1, quote, r, runeTmp, s, size, ss, t;
		t = "";
		err = $ifaceNil;
		n = s.length;
		if (n < 2) {
			_tmp = ""; _tmp$1 = $pkg.ErrSyntax; t = _tmp; err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = ""; _tmp$3 = $pkg.ErrSyntax; t = _tmp$2; err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = ""; _tmp$5 = $pkg.ErrSyntax; t = _tmp$4; err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s; _tmp$7 = $ifaceNil; t = _tmp$6; err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = ""; _tmp$9 = $pkg.ErrSyntax; t = _tmp$8; err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = ""; _tmp$11 = $pkg.ErrSyntax; t = _tmp$10; err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tmp$12 = s; _tmp$13 = $ifaceNil; t = _tmp$12; err = _tmp$13;
				return [t, err];
			} else if (_ref === 39) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s; _tmp$15 = $ifaceNil; t = _tmp$14; err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = $clone(arrayType$5.zero(), arrayType$5);
		buf = $makeSlice(sliceType$6, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote); c = _tuple$1[0]; multibyte = _tuple$1[1]; ss = _tuple$1[2]; err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = ""; _tmp$17 = err$1; t = _tmp$16; err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = ""; _tmp$19 = $pkg.ErrSyntax; t = _tmp$18; err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf); _tmp$21 = $ifaceNil; t = _tmp$20; err = _tmp$21;
		return [t, err];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16); _tmp$1 = isPrint16; _tmp$2 = isNotPrint16; rr = _tmp; isPrint = _tmp$1; isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0); _tmp$4 = isPrint32; _tmp$5 = isNotPrint32; rr$1 = _tmp$3; isPrint$1 = _tmp$4; isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init([{prop: "Func", name: "Func", pkg: "", typ: $String, tag: ""}, {prop: "Num", name: "Num", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	decimal.init([{prop: "d", name: "d", pkg: "strconv", typ: arrayType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", pkg: "strconv", typ: $Bool, tag: ""}]);
	leftCheat.init([{prop: "delta", name: "delta", pkg: "strconv", typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", pkg: "strconv", typ: $String, tag: ""}]);
	extFloat.init([{prop: "mant", name: "mant", pkg: "strconv", typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	floatInfo.init([{prop: "mantbits", name: "mantbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "bias", name: "bias", pkg: "strconv", typ: $Int, tag: ""}]);
	decimalSlice.init([{prop: "d", name: "d", pkg: "strconv", typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2226, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8381, 8400, 8432, 8448, 8585, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42929, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43871, 43876, 43877, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65069, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42654, 42895, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70088, 70093, 70093, 70096, 70106, 70113, 70132, 70144, 70205, 70320, 70378, 70384, 70393, 70401, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71113, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74648, 74752, 74868, 77824, 78894, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127788, 127792, 127869, 127872, 127950, 127956, 127991, 128000, 128330, 128336, 128578, 128581, 128719, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 4626, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62719, 62842, 62884]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, ptrType$1, sliceType$1, ptrType$3, funcType$1, sliceType$2, ptrType$4, arrayType$1, ptrType$5, ptrType$6, sliceType$3, sliceType$4, sliceType$5, sliceType$6, structType$5, sliceType$7, ptrType$7, arrayType$2, structType$6, ptrType$8, sliceType$8, ptrType$9, sliceType$9, sliceType$10, ptrType$10, ptrType$11, ptrType$12, sliceType$11, sliceType$12, ptrType$13, ptrType$18, sliceType$14, sliceType$15, funcType$3, funcType$4, funcType$5, arrayType$3, ptrType$21, initialized, stringPtrMap, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newStringPtr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, memmove, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, DeepEqual, deepValueEqualJs, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_, zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.hash = 0;
			this._$2 = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gc = arrayType$1.zero();
			this.string = ptrType$5.nil;
			this.uncommonType = ptrType$6.nil;
			this.ptrToThis = ptrType$1.nil;
			this.zero = 0;
			return;
		}
		this.size = size_;
		this.hash = hash_;
		this._$2 = _$2_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gc = gc_;
		this.string = string_;
		this.uncommonType = uncommonType_;
		this.ptrToThis = ptrToThis_;
		this.zero = zero_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", "typeAlg", "reflect", function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.mtyp = ptrType$1.nil;
			this.typ = ptrType$1.nil;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.mtyp = mtyp_;
		this.typ = typ_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.methods = sliceType$3.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.dotdotdot = false;
			this.in$2 = sliceType$4.nil;
			this.out = sliceType$4.nil;
			return;
		}
		this.rtype = rtype_;
		this.dotdotdot = dotdotdot_;
		this.in$2 = in$2_;
		this.out = out_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.typ = ptrType$1.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.methods = sliceType$5.nil;
			return;
		}
		this.rtype = rtype_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$5.nil;
			this.pkgPath = ptrType$5.nil;
			this.typ = ptrType$1.nil;
			this.tag = ptrType$5.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
		this.tag = tag_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr();
			this.fields = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr();
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$11.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$13.nil;
			this.index = sliceType$11.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", "Value", "reflect", function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.itab = ptrType$8.nil;
			this.word = 0;
			return;
		}
		this.itab = itab_;
		this.word = word_;
	});
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$1], [ptrType$3], true);
	sliceType$2 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	arrayType$1 = $arrayType($UnsafePointer, 2);
	ptrType$5 = $ptrType($String);
	ptrType$6 = $ptrType(uncommonType);
	sliceType$3 = $sliceType(method);
	sliceType$4 = $sliceType(ptrType$1);
	sliceType$5 = $sliceType(imethod);
	sliceType$6 = $sliceType(structField);
	structType$5 = $structType([{prop: "str", name: "str", pkg: "reflect", typ: $String, tag: ""}]);
	sliceType$7 = $sliceType(Value);
	ptrType$7 = $ptrType(nonEmptyInterface);
	arrayType$2 = $arrayType($UnsafePointer, 100000);
	structType$6 = $structType([{prop: "ityp", name: "ityp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "link", name: "link", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "bad", name: "bad", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "unused", name: "unused", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "fun", name: "fun", pkg: "reflect", typ: arrayType$2, tag: ""}]);
	ptrType$8 = $ptrType(structType$6);
	sliceType$8 = $sliceType(ptrType$3);
	ptrType$9 = $ptrType($Uint8);
	sliceType$9 = $sliceType(sliceType$1);
	sliceType$10 = $sliceType(arrayType$1);
	ptrType$10 = $ptrType(method);
	ptrType$11 = $ptrType(interfaceType);
	ptrType$12 = $ptrType(imethod);
	sliceType$11 = $sliceType($Int);
	sliceType$12 = $sliceType(fieldScan);
	ptrType$13 = $ptrType(structType);
	ptrType$18 = $ptrType($UnsafePointer);
	sliceType$14 = $sliceType($Uint8);
	sliceType$15 = $sliceType($Int32);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer, $Uintptr], [$Bool], false);
	arrayType$3 = $arrayType($Uintptr, 2);
	ptrType$21 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil, arrayType$1.zero(), ptrType$5.nil, ptrType$6.nil, ptrType$1.nil, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(ptrType$5.nil, ptrType$5.nil, sliceType$3.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil, ptrType$1.nil, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(), false, sliceType$4.nil, sliceType$4.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(), sliceType$5.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(), sliceType$6.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil, ptrType$5.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, params, reflectFields, reflectMethods, results, rt, t, typ;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, arrayType$1.zero(), newStringPtr(typ.string), ptrType$6.nil, ptrType$1.nil, 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!($internalize(typ.typeName, $String) === "") || !(($parseInt(methodSet.length) === 0))) {
				reflectMethods = $makeSlice(sliceType$3, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					t = m.typ;
					$copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newStringPtr(m.name), newStringPtr(m.pkg), reflectType(t), reflectType($funcType(new ($global.Array)(typ).concat(t.params), t.results, t.variadic)), 0, 0), method);
					_i++;
				}
				rt.uncommonType = new uncommonType.ptr(newStringPtr(typ.typeName), newStringPtr(typ.pkg), reflectMethods);
				rt.uncommonType.jsType = typ;
			}
			_ref$1 = rt.Kind();
			if (_ref$1 === 17) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_ref$1 === 18) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(), reflectType(typ.elem), (dir >>> 0)));
			} else if (_ref$1 === 19) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$4, $parseInt(params.length));
				_ref$2 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$2.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$4, $parseInt(results.length));
				_ref$3 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$3.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), !!(typ.variadic), in$1, out));
			} else if (_ref$1 === 20) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$5, $parseInt(methods.length));
				_ref$4 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$4.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					$copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newStringPtr(m$1.name), newStringPtr(m$1.pkg), reflectType(m$1.typ)), imethod);
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), imethods));
			} else if (_ref$1 === 21) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0));
			} else if (_ref$1 === 22) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(), reflectType(typ.elem)));
			} else if (_ref$1 === 23) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(), reflectType(typ.elem)));
			} else if (_ref$1 === 25) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$6, $parseInt(fields.length));
				_ref$5 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$5.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					$copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr(newStringPtr(f.name), newStringPtr(f.pkg), reflectType(f.typ), newStringPtr(f.tag), (i$4 >>> 0)), structField);
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	newStringPtr = function(strObj) {
		var $ptr, _entry, _key, _tuple, c, ok, ptr, str, str$ptr, strObj;
		c = $clone(new structType$5.ptr(), structType$5);
		c.str = strObj;
		str = c.str;
		if (str === "") {
			return ptrType$5.nil;
		}
		_tuple = (_entry = stringPtrMap[$String.keyFor(str)], _entry !== undefined ? [_entry.v, true] : [ptrType$5.nil, false]); ptr = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			ptr = (str$ptr || (str$ptr = new ptrType$5(function() { return str; }, function($v) { str = $v; })));
			_key = str; (stringPtrMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: ptr };
		}
		return ptr;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 64) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			return _r$2.zero();
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil, arrayType$1.zero(), ptrType$5.nil, ptrType$6.nil, ptrType$1.nil, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _ref, typ;
		_ref = typ.Kind();
		if (_ref === 25) {
			return new (jsType(typ).ptr)();
		} else if (_ref === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _r, _ref, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.Kind();
		if (_ref === 3) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_ref === 4) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if (_ref === 2 || _ref === 5) {
			ptr.$set((bits.$low >> 0));
		} else if (_ref === 6) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_ref === 8) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_ref === 9) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if (_ref === 7 || _ref === 10 || _ref === 12) {
			ptr.$set((bits.$low >>> 0));
		} else if (_ref === 11) {
			ptr.$set(bits);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	memmove = function(adst, asrc, n) {
		var $ptr, adst, asrc, n;
		adst.$set(asrc.$get());
	};
	mapaccess = function(t, m, key) {
		var $ptr, entry, k, key, m, t;
		k = $internalize(jsType(t.Key()).keyFor(key.$get()), $String);
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		kv = key.$get();
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, k, key, m, t;
		k = $internalize(jsType(t.Key()).keyFor(key.$get()), $String);
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		srcVal = v.object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		val = null;
		_r$1 = typ.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		k = _r$1;
		_ref = k;
		/* */ if (_ref === 18) { $s = 5; continue; }
		/* */ if (_ref === 23) { $s = 6; continue; }
		/* */ if (_ref === 22) { $s = 7; continue; }
		/* */ if (_ref === 25) { $s = 8; continue; }
		/* */ if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* switch (0) { default: if (_ref === 18) { */ case 5:
			val = new (jsType(typ))();
			$s = 11; continue;
		/* } else if (_ref === 23) { */ case 6:
			slice = new (jsType(typ))(srcVal.$array);
			slice.$offset = srcVal.$offset;
			slice.$length = srcVal.$length;
			slice.$capacity = srcVal.$capacity;
			val = $newDataPointer(slice, jsType(PtrTo(typ)));
			$s = 11; continue;
		/* } else if (_ref === 22) { */ case 7:
			_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 25) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$3 === 25) { */ case 12:
				_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
					val = srcVal;
					/* break; */ $s = 11; continue;
				/* } */ case 17:
				val = new (jsType(typ))();
				_arg = val;
				_arg$1 = srcVal;
				_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$2 = _r$5;
				$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 11; continue;
			/* } */ case 13:
			val = new (jsType(typ))(srcVal.$get, srcVal.$set);
			$s = 11; continue;
		/* } else if (_ref === 25) { */ case 8:
			val = new (jsType(typ).ptr)();
			copyStruct(val, srcVal, typ);
			$s = 11; continue;
		/* } else if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { */ case 9:
			val = v.ptr;
			$s = 11; continue;
		/* } else { */ case 10:
			$panic(new ValueError.ptr("reflect.Convert", k));
		/* } } */ case 11:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		return new Value.ptr(_r$6, val, (((v.flag & 96) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var $ptr, fn, i, iface, m, m$1, op, prop, rcvr, rcvrtype, t, tt, ut, v, x, x$1;
		rcvrtype = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(m.pkgPath === ptrType$5.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $pointerOfStructConversion(v.ptr, ptrType$7);
			if (iface.itab === ptrType$8.nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			prop = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ptrType$6.nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(m$1.pkgPath === ptrType$5.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 32) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.object());
		}
		return v.object();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		v = v;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); fn[0] = _tuple[2];
		rcvr[0] = v.object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = $makeFunc((function(fn, rcvr) { return function(arguments$1) {
			var $ptr, arguments$1;
			return fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8));
		}; })(fn, rcvr));
		_r = v.Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return new Value.ptr(_r, fv, (((v.flag & 32) >>> 0) | 19) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _ref, t;
		t = this;
		_ref = t.Kind();
		if (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _r, _r$1, _r$2, _ref, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_ref = t.Kind();
		/* */ if (_ref === 19 || _ref === 23 || _ref === 21) { $s = 1; continue; }
		/* */ if (_ref === 17) { $s = 2; continue; }
		/* */ if (_ref === 25) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 19 || _ref === 23 || _ref === 21) { */ case 1:
			return false;
			$s = 4; continue;
		/* } else if (_ref === 17) { */ case 2:
			_r = t.Elem().Comparable(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 4; continue;
		/* } else if (_ref === 25) { */ case 3:
			i = 0;
			/* while (true) { */ case 6:
				/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 7; continue; }
				_r$1 = t.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!_r$2) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!_r$2) { */ case 8:
					return false;
				/* } */ case 9:
				i = i + (1) >> 0;
			/* } */ $s = 6; continue; case 7:
		/* } */ case 4:
		return true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	uncommonType.ptr.prototype.Method = function(i) {
		var $ptr, fl, fn, i, m, mt, p, prop, t, x;
		m = new Method.ptr();
		t = this;
		if (t === ptrType$6.nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!(p.name === ptrType$5.nil)) {
			m.Name = p.name.$get();
		}
		fl = 19;
		if (!(p.pkgPath === ptrType$5.nil)) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (32)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		prop = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = $makeFunc((function(arguments$1) {
			var $ptr, arguments$1, rcvr;
			rcvr = (0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]);
			return rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8));
		}));
		m.Func = new Value.ptr(mt, fn, fl);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _ref, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				_ref = v.typ.Kind();
				switch (0) { default: if (_ref === 11 || _ref === 6) {
					val = new (jsType(v.typ))(val.$high, val.$low);
				} else if (_ref === 15 || _ref === 16) {
					val = new (jsType(v.typ))(val.$real, val.$imag);
				} else if (_ref === 23) {
					if (val === val.constructor.nil) {
						val = jsType(v.typ).nil;
						break;
					}
					newVal = new (jsType(v.typ))(val.$array);
					newVal.$offset = val.$offset;
					newVal.$length = val.$length;
					newVal.$capacity = val.$capacity;
					val = newVal;
				} }
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = v.typ;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); t = _tuple[1]; fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.object();
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type(); _tmp$1 = t.In(i); xt = _tmp; targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = slice.Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = _r$8.Set(x$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$7, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = arg.assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = _r$10.object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$1([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
		_ref$2 = nout;
		/* */ if (_ref$2 === 0) { $s = 28; continue; }
		/* */ if (_ref$2 === 1) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (_ref$2 === 0) { */ case 28:
			return sliceType$7.nil;
			$s = 31; continue;
		/* } else if (_ref$2 === 1) { */ case 29:
			_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			return new sliceType$7([$clone(_r$14, Value)]);
			$s = 31; continue;
		/* } else { */ case 30:
			ret = $makeSlice(sliceType$7, nout);
			_ref$3 = ret;
			_i$2 = 0;
			/* while (true) { */ case 33:
				/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 34; continue; }
				i$3 = _i$2;
				_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 35; case 35: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = _r$15);
				_i$2++;
			/* } */ $s = 33; continue; case 34:
			return ret;
		/* } */ case 31:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			return v.typ.Len();
		} else if (_ref === 18 || _ref === 23) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _r, _ref, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		/* */ if (_ref === 20) { $s = 1; continue; }
		/* */ if (_ref === 22) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 20) { */ case 1:
			val = v.object();
			if (val === $ifaceNil) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			typ = reflectType(val.constructor);
			_r = makeValue(typ, val.$val, (v.flag & 32) >>> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 4; continue;
		/* } else if (_ref === 22) { */ case 2:
			if (v.IsNil()) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			val$1 = v.object();
			tt = v.typ.kindType;
			fl = (((((v.flag & 32) >>> 0) | 64) >>> 0) | 128) >>> 0;
			fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
			return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
			$s = 4; continue;
		/* } else { */ case 3:
			$panic(new ValueError.ptr("reflect.Value.Elem", k));
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (v.flag & 224) >>> 0;
		if (!(field.pkgPath === ptrType$5.nil)) {
			fl = (fl | (32)) >>> 0;
		}
		fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
		tag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).tag;
		/* */ if (!(tag === ptrType$5.nil) && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === ptrType$5.nil) && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag.$get());
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = v.object().object;
						return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (name === "js") {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _r, _r$1, _ref, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		/* */ if (_ref === 17) { $s = 1; continue; }
		/* */ if (_ref === 23) { $s = 2; continue; }
		/* */ if (_ref === 24) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 17) { */ case 1:
			tt = v.typ.kindType;
			if (i[0] < 0 || i[0] > (tt.len >> 0)) {
				$panic(new $String("reflect: array index out of range"));
			}
			typ[0] = tt.elem;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
			a[0] = v.ptr;
			/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 6:
				return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
					var $ptr;
					return wrapJsObject(typ[0], a[0][i[0]]);
				}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
					var $ptr, x;
					a[0][i[0]] = unwrapJsObject(typ[0], x);
				}; })(a, a$1, c, i, typ, typ$1)), fl);
			/* } */ case 7:
			_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 5; continue;
		/* } else if (_ref === 23) { */ case 2:
			s = v.object();
			if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
				$panic(new $String("reflect: slice index out of range"));
			}
			tt$1 = v.typ.kindType;
			typ$1[0] = tt$1.elem;
			fl$1 = (192 | ((v.flag & 32) >>> 0)) >>> 0;
			fl$1 = (fl$1 | ((typ$1[0].Kind() >>> 0))) >>> 0;
			i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
			a$1[0] = s.$array;
			/* */ if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 9:
				return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
					var $ptr;
					return wrapJsObject(typ$1[0], a$1[0][i[0]]);
				}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
					var $ptr, x;
					a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
				}; })(a, a$1, c, i, typ, typ$1)), fl$1);
			/* } */ case 10:
			_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
			$s = 5; continue;
		/* } else if (_ref === 24) { */ case 3:
			str = v.ptr.$get();
			if (i[0] < 0 || i[0] >= str.length) {
				$panic(new $String("reflect: string index out of range"));
			}
			fl$2 = (((v.flag & 32) >>> 0) | 8) >>> 0;
			c[0] = str.charCodeAt(i[0]);
			return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 64) >>> 0);
			$s = 5; continue;
		/* } else { */ case 4:
			$panic(new ValueError.ptr("reflect.Value.Index", k));
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 22 || _ref === 23) {
			return v.object() === jsType(v.typ).nil;
		} else if (_ref === 19) {
			return v.object() === $throwNilPointerError;
		} else if (_ref === 21) {
			return v.object() === false;
		} else if (_ref === 20) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17 || _ref === 24) {
			return $parseInt(v.object().length);
		} else if (_ref === 23) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_ref === 18) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_ref === 21) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 26) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_ref === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_ref === 23) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _r, _r$1, _ref, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 64) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 64) >>> 0) === 0))) { */ case 2:
			_ref = v.typ.Kind();
			/* */ if (_ref === 17) { $s = 4; continue; }
			/* */ if (_ref === 20) { $s = 5; continue; }
			/* */ if (_ref === 25) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_ref === 17) { */ case 4:
				$copy(v.ptr, x.ptr, jsType(v.typ));
				$s = 8; continue;
			/* } else if (_ref === 20) { */ case 5:
				_r$1 = valueInterface(x, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				v.ptr.$set(_r$1);
				$s = 8; continue;
			/* } else if (_ref === 25) { */ case 6:
				copyStruct(v.ptr, x.ptr, v.typ);
				$s = 8; continue;
			/* } else { */ case 7:
				v.ptr.$set(x.object());
			/* } */ case 8:
			return;
		/* } */ case 3:
		v.ptr = x.ptr;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _r, _r$1, _ref, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		/* */ if (_ref === 17) { $s = 1; continue; }
		/* */ if (_ref === 23) { $s = 2; continue; }
		/* */ if (_ref === 24) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 17) { */ case 1:
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
			$s = 5; continue;
		/* } else if (_ref === 23) { */ case 2:
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
			$s = 5; continue;
		/* } else if (_ref === 24) { */ case 3:
			str = v.ptr.$get();
			if (i < 0 || j < i || j > str.length) {
				$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
			}
			_r = ValueOf(new $String(str.substring(i, j))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 5; continue;
		/* } else { */ case 4:
			$panic(new ValueError.ptr("reflect.Value.Slice", kind));
		/* } */ case 5:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 32) >>> 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _r, _ref, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 32) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$9([new sliceType$1([new $jsObjectPtr(ch)])]);
		if (nb) {
			comms = $append(comms, new sliceType$1([]));
		}
		_r = selectHelper(new sliceType$1([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false; _tmp$1 = false; selected = _tmp; received = _tmp$1;
			return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true; _tmp$3 = !!(recvRes[1]); selected = _tmp$2; received = _tmp$3;
		return [selected, received];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$9([new sliceType$1([new $jsObjectPtr(ch), new $jsObjectPtr(val.$get())])]);
		if (nb) {
			comms = $append(comms, new sliceType$1([]));
		}
		_r = selectHelper(new sliceType$1([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			return false;
		}
		return true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	DeepEqual = function(a1, a2) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, a1, a2, i1, i2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; a1 = $f.a1; a2 = $f.a2; i1 = $f.i1; i2 = $f.i2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i1 = a1;
		i2 = a2;
		if (i1 === i2) {
			return true;
		}
		if (i1 === null || i2 === null || !(i1.constructor === i2.constructor)) {
			return false;
		}
		_r = ValueOf(a1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = ValueOf(a2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = _r$1;
		_arg$2 = sliceType$10.nil;
		_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DeepEqual }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.a1 = a1; $f.a2 = a2; $f.i1 = i1; $f.i2 = i2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DeepEqual = DeepEqual;
	deepValueEqualJs = function(v1, v2, visited) {
		var $ptr, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, entry, i, i$1, k, keys, n, n$1, v1, v2, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; entry = $f.entry; i = $f.i; i$1 = $f.i$1; k = $f.k; keys = $f.keys; n = $f.n; n$1 = $f.n$1; v1 = $f.v1; v2 = $f.v2; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = v2;
		v1 = v1;
		if (!v1.IsValid() || !v2.IsValid()) {
			return !v1.IsValid() && !v2.IsValid();
		}
		if (!($interfaceIsEqual(v1.Type(), v2.Type()))) {
			return false;
		}
		_ref = v1.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 25) {
			_ref$1 = visited;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				entry = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), arrayType$1);
				if (v1.ptr === entry[0] && v2.ptr === entry[1]) {
					return true;
				}
				_i++;
			}
			visited = $append(visited, $toNativeArray($kindUnsafePointer, [v1.ptr, v2.ptr]));
		}
		_ref$2 = v1.Kind();
		/* */ if (_ref$2 === 17 || _ref$2 === 23) { $s = 1; continue; }
		/* */ if (_ref$2 === 20) { $s = 2; continue; }
		/* */ if (_ref$2 === 22) { $s = 3; continue; }
		/* */ if (_ref$2 === 25) { $s = 4; continue; }
		/* */ if (_ref$2 === 21) { $s = 5; continue; }
		/* */ if (_ref$2 === 19) { $s = 6; continue; }
		/* */ if (_ref$2 === 26) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_ref$2 === 17 || _ref$2 === 23) { */ case 1:
			if (v1.Kind() === 23) {
				if (!(v1.IsNil() === v2.IsNil())) {
					return false;
				}
				if (v1.object() === v2.object()) {
					return true;
				}
			}
			n = v1.Len();
			if (!((n === v2.Len()))) {
				return false;
			}
			i = 0;
			/* while (true) { */ case 9:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 10; continue; }
				_r = v1.Index(i); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg = _r;
				_r$1 = v2.Index(i); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_arg$1 = _r$1;
				_arg$2 = visited;
				_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!_r$2) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!_r$2) { */ case 11:
					return false;
				/* } */ case 12:
				i = i + (1) >> 0;
			/* } */ $s = 9; continue; case 10:
			return true;
			$s = 8; continue;
		/* } else if (_ref$2 === 20) { */ case 2:
			if (v1.IsNil() || v2.IsNil()) {
				return v1.IsNil() && v2.IsNil();
			}
			_r$3 = v1.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$3 = _r$3;
			_r$4 = v2.Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$4 = _r$4;
			_arg$5 = visited;
			_r$5 = deepValueEqualJs(_arg$3, _arg$4, _arg$5); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			return _r$5;
			$s = 8; continue;
		/* } else if (_ref$2 === 22) { */ case 3:
			_r$6 = v1.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$6 = _r$6;
			_r$7 = v2.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg$7 = _r$7;
			_arg$8 = visited;
			_r$8 = deepValueEqualJs(_arg$6, _arg$7, _arg$8); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			return _r$8;
			$s = 8; continue;
		/* } else if (_ref$2 === 25) { */ case 4:
			n$1 = v1.NumField();
			i$1 = 0;
			/* while (true) { */ case 22:
				/* if (!(i$1 < n$1)) { break; } */ if(!(i$1 < n$1)) { $s = 23; continue; }
				_r$9 = v1.Field(i$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$9 = _r$9;
				_r$10 = v2.Field(i$1); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$10 = _r$10;
				_arg$11 = visited;
				_r$11 = deepValueEqualJs(_arg$9, _arg$10, _arg$11); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* */ if (!_r$11) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!_r$11) { */ case 24:
					return false;
				/* } */ case 25:
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 22; continue; case 23:
			return true;
			$s = 8; continue;
		/* } else if (_ref$2 === 21) { */ case 5:
			if (!(v1.IsNil() === v2.IsNil())) {
				return false;
			}
			if (v1.object() === v2.object()) {
				return true;
			}
			_r$12 = v1.MapKeys(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			keys = _r$12;
			if (!((keys.$length === v2.Len()))) {
				return false;
			}
			_ref$3 = keys;
			_i$1 = 0;
			/* while (true) { */ case 30:
				/* if (!(_i$1 < _ref$3.$length)) { break; } */ if(!(_i$1 < _ref$3.$length)) { $s = 31; continue; }
				k = ((_i$1 < 0 || _i$1 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$1]);
				_r$13 = v1.MapIndex(k); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$12 = _r$13;
				_r$14 = v2.MapIndex(k); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$13 = _r$14;
				_arg$14 = visited;
				_r$15 = deepValueEqualJs(_arg$12, _arg$13, _arg$14); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ if (!_r$15) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (!_r$15) { */ case 32:
					return false;
				/* } */ case 33:
				_i$1++;
			/* } */ $s = 30; continue; case 31:
			return true;
			$s = 8; continue;
		/* } else if (_ref$2 === 19) { */ case 6:
			return v1.IsNil() && v2.IsNil();
			$s = 8; continue;
		/* } else if (_ref$2 === 26) { */ case 7:
			return v1.object() === v2.object();
		/* } */ case 8:
		_r$16 = valueInterface(v1, false); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = valueInterface(v2, false); /* */ $s = 38; case 38: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		return !!($interfaceIsEqual(_r$16, _r$17));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: deepValueEqualJs }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.entry = entry; $f.i = i; $f.i$1 = i$1; $f.k = k; $f.keys = keys; $f.n = n; $f.n$1 = n$1; $f.v1 = v1; $f.v2 = v2; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.ptr.prototype.uncommon = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$6.nil || t.pkgPath === ptrType$5.nil) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$6.nil || t.name === ptrType$5.nil) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (t.size >> 0) * 8 >> 0;
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$6.nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr();
		ok = false;
		t = this;
		if (t === ptrType$6.nil) {
			return [m, ok];
		}
		p = ptrType$10.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(p.name === ptrType$5.nil) && p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, i, m, t, tt;
		m = new Method.ptr();
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			$copy(m, tt.Method(i), Method);
			return m;
		}
		$copy(m, t.uncommonType.Method(i), Method);
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, _tuple$1, m, name, ok, t, tt;
		m = new Method.ptr();
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name); $copy(m, _tuple[0], Method); ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name); $copy(m, _tuple$1[0], Method); ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _ref, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, name, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _ref, d;
		d = this.$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, t, x;
		m = new Method.ptr();
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!(p.pkgPath === ptrType$5.nil)) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr();
		ok = false;
		t = this;
		if (t === ptrType$11.nil) {
			return [m, ok];
		}
		p = ptrType$12.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, i, key, name, qvalue, tag, value;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, p, t, t$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; p = $f.p; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr();
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		/* */ if (!(p.name === ptrType$5.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.name === ptrType$5.nil)) { */ case 1:
			f.Name = p.name.$get();
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!(p.pkgPath === ptrType$5.nil)) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!(p.tag === ptrType$5.nil)) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new sliceType$11([i]);
		return f;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr();
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$copy(f, _r$4, StructField);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return f;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _map, _map$1, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _map = $f._map; _map$1 = $f._map$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr();
		ok = false;
		t = this;
		current = new sliceType$12([]);
		next = new sliceType$12([new fieldScan.ptr(t, sliceType$11.nil)]);
		nextCount = false;
		visited = (_map = new $Map(), _map);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key$1 = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$1)] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					/* */ if (!(f.name === ptrType$5.nil)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(f.name === ptrType$5.nil)) { */ case 9:
						fname = f.name.$get();
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$13.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false); _tmp$3 = false; $copy(result, _tmp$2, StructField); ok = _tmp$3;
							return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$copy(result, _r$2, StructField);
						result.Index = sliceType$11.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[ptrType$13.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$2)] = { k: _key$2, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new $Map(), _map$1);
					}
					_key$4 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$4)] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[ptrType$13.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$5)] = { k: _key$5, v: 2 };
					}
					index = sliceType$11.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return [result, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._map = _map; $f._map$1 = _map$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name = $f.name; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		f = new StructField.ptr();
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				/* */ if (tf.name === ptrType$5.nil) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tf.name === ptrType$5.nil) { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tf.name.$get() === name[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tf.name.$get() === name[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField); _tmp$1 = true; $copy(f, _tmp, StructField); present = _tmp$1;
					return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name) { return function(s) {
			var $ptr, s;
			return s === name[0];
		}; })(name)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; $copy(f, _tuple[0], StructField); present = _tuple[1];
		return [f, present];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name = name; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		return implements$1($assertType(u, ptrType$1), t);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return !(_r === $throwNilPointerError);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if (vm.name === tm.name && vm.pkgPath === tm.pkgPath && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ptrType$6.nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (true) {
			if (!(j$1 < v$1.methods.$length)) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if (vm$1.name === tm$1.name && vm$1.pkgPath === tm$1.pkgPath && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var $ptr, T, V, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.kindType;
			v = V.kindType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				typ = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!(tf.name === vf.name) && (tf.name === ptrType$5.nil || vf.name === ptrType$5.nil || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!(tf.pkgPath === vf.pkgPath) && (tf.pkgPath === ptrType$5.nil || vf.pkgPath === ptrType$5.nil || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(tf.tag === vf.tag) && (tf.tag === ptrType$5.nil || vf.tag === ptrType$5.nil || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 128) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 32) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 128) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 160) >>> 0) === 128;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_ref === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!(v.Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = v.Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		return v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, _r$1, _tuple, f, name, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name = $f.name; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; f = $clone(_tuple[0], StructField); ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name = name; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; f = $clone(_tuple[0], StructField); ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return v.ptr.$get();
		} else if (_ref === 14) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _ref, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 2) {
			return new $Int64(0, p.$get());
		} else if (_ref === 3) {
			return new $Int64(0, p.$get());
		} else if (_ref === 4) {
			return new $Int64(0, p.$get());
		} else if (_ref === 5) {
			return new $Int64(0, p.$get());
		} else if (_ref === 6) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 32) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		return i;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(20);
		return v.ptr;
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 32) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			memmove(c, e, typ.size);
			return new Value.ptr(typ, c, (fl | 64) >>> 0);
		} else {
			return new Value.ptr(typ, e.$get(), fl);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 32) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$7, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				memmove(c, key, keyType.size);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 64) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return $subslice(a, 0, i);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 96) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 256) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, m, name, ok, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name); m = $clone(_tuple[0], Method); ok = _tuple[1];
		if (!ok) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_ref === 16) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _ref, bitSize, k, trunc, v, x, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _ref, bitSize, k, trunc, v, x, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr();
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; x = _tuple[0]; ok = _tuple[1];
		return [x, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr();
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (64)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; selected = _tuple[0]; ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return [val, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		x = x;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 64) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		return selected;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_ref === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			v.ptr.$set($fround(x));
		} else if (_ref === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_ref === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_ref === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 64) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_ref === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_ref === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 11) {
			v.ptr.$set(x);
		} else if (_ref === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _r, _ref, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 0) {
			return "<invalid Value>";
		} else if (_ref === 24) {
			return v.ptr.$get();
		}
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return "<" + _r + " Value>";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr();
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; x = _tuple[0]; ok = _tuple[1];
		return [x, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 256) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ptrType$6.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _ref, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 7) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 8) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 9) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 10) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 11) {
			return p.$get();
		} else if (_ref === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var $ptr, _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return new Value.ptr(_r$1, ptr, fl);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		/* */ if (directlyAssignable(dst, v.typ)) { $s = 4; continue; }
		/* */ if (implements$1(dst, v.typ)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (directlyAssignable(dst, v.typ)) { */ case 4:
			v.typ = dst;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
			return new Value.ptr(dst, v.ptr, fl);
			$s = 6; continue;
		/* } else if (implements$1(dst, v.typ)) { */ case 5:
			if (target === 0) {
				target = unsafe_New(dst);
			}
			_r$1 = valueInterface(v, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			x = _r$1;
			if (dst.NumMethod() === 0) {
				target.$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.ptr(dst, target, 84);
		/* } */ case 6:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		return _r$4;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = src.Kind();
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 1; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 2; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 3; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 4; continue; }
		/* */ if (_ref === 24) { $s = 5; continue; }
		/* */ if (_ref === 23) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 1:
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
			$s = 7; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 2:
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
			$s = 7; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 3:
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
			$s = 7; continue;
		/* } else if (_ref === 15 || _ref === 16) { */ case 4:
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
			$s = 7; continue;
		/* } else if (_ref === 24) { */ case 5:
			if (!(dst.Kind() === 23)) { _v = false; $s = 10; continue s; }
			_r = dst.Elem().PkgPath(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === ""; case 10:
			/* */ if (_v) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_v) { */ case 8:
				_r$1 = dst.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_ref$5 = _r$1;
				/* */ if (_ref$5 === 8) { $s = 13; continue; }
				/* */ if (_ref$5 === 5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_ref$5 === 8) { */ case 13:
					return cvtStringBytes;
					$s = 15; continue;
				/* } else if (_ref$5 === 5) { */ case 14:
					return cvtStringRunes;
				/* } */ case 15:
			/* } */ case 9:
			$s = 7; continue;
		/* } else if (_ref === 23) { */ case 6:
			if (!(dst.Kind() === 24)) { _v$1 = false; $s = 18; continue s; }
			_r$2 = src.Elem().PkgPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v$1 = _r$2 === ""; case 18:
			/* */ if (_v$1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_v$1) { */ case 16:
				_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_ref$6 = _r$3;
				/* */ if (_ref$6 === 8) { $s = 21; continue; }
				/* */ if (_ref$6 === 5) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_ref$6 === 8) { */ case 21:
					return cvtBytesString;
					$s = 23; continue;
				/* } else if (_ref$6 === 5) { */ case 22:
					return cvtRunesString;
				/* } */ case 23:
			/* } */ case 17:
		/* } */ case 7:
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$4 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 4) {
			ptr.$set($fround(v));
		} else if (_ref === 8) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 8) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_ref === 16) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		ret.SetString(v);
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;
		return ret;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 32) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 32) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeComplex((v.flag & 32) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$14($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 32) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$15($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		return new Value.ptr(_r$4, target, (((((v.flag & 32) >>> 0) | 64) >>> 0) | 20) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 32) >>> 0))) >>> 0;
			return ret;
		/* } */ case 2:
		_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$13.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$7], [sliceType$7], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$14], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$15], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$7], [sliceType$7], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$7], [sliceType$7], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$3], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$14], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$15], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$21.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	mapIter.init([{prop: "t", name: "t", pkg: "reflect", typ: Type, tag: ""}, {prop: "m", name: "m", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "i", name: "i", pkg: "reflect", typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}]);
	rtype.init([{prop: "size", name: "size", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", pkg: "reflect", typ: $Uint32, tag: ""}, {prop: "_$2", name: "_", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "align", name: "align", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", pkg: "reflect", typ: ptrType$4, tag: ""}, {prop: "gc", name: "gc", pkg: "reflect", typ: arrayType$1, tag: ""}, {prop: "string", name: "string", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "uncommonType", name: "", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "zero", name: "zero", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	typeAlg.init([{prop: "hash", name: "hash", pkg: "reflect", typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", pkg: "reflect", typ: funcType$5, tag: ""}]);
	method.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "mtyp", name: "mtyp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ifn", name: "ifn", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "tfn", name: "tfn", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	uncommonType.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$3, tag: ""}]);
	arrayType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "len", name: "len", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	chanType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	funcType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"func\""}, {prop: "dotdotdot", name: "dotdotdot", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "in$2", name: "in", pkg: "reflect", typ: sliceType$4, tag: ""}, {prop: "out", name: "out", pkg: "reflect", typ: sliceType$4, tag: ""}]);
	imethod.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	interfaceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"interface\""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$5, tag: ""}]);
	mapType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", pkg: "reflect", typ: $Uint16, tag: ""}]);
	ptrType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	sliceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	structField.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "tag", name: "tag", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "offset", name: "offset", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	structType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"struct\""}, {prop: "fields", name: "fields", pkg: "reflect", typ: sliceType$6, tag: ""}]);
	Method.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Func", name: "Func", pkg: "", typ: Value, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: $Int, tag: ""}]);
	StructField.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Anonymous", name: "Anonymous", pkg: "", typ: $Bool, tag: ""}]);
	fieldScan.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$13, tag: ""}, {prop: "index", name: "index", pkg: "reflect", typ: sliceType$11, tag: ""}]);
	Value.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", pkg: "reflect", typ: flag, tag: ""}]);
	ValueError.init([{prop: "Method", name: "Method", pkg: "", typ: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: Kind, tag: ""}]);
	nonEmptyInterface.init([{prop: "itab", name: "itab", pkg: "reflect", typ: ptrType$8, tag: ""}, {prop: "word", name: "word", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = false;
		stringPtrMap = new $Map();
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		kindNames = new sliceType$2(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		jsObjectPtr = reflectType($jsObjectPtr);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, ScanState, scanError, ss, ssave, sliceType, sliceType$1, arrayType, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$5, arrayType$1, arrayType$2, ptrType$25, funcType, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, _r, _r$1, init, doPrec, newPrinter, Fprintf, Sprintf, Errorf, Fprint, Sprint, Sprintln, getField, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", "fmtFlags", "fmt", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.unicode = false;
			this.uniQuote = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.unicode = unicode_;
		this.uniQuote = uniQuote_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.intbuf = arrayType$2.zero();
			this.buf = ptrType$1.nil;
			this.wid = 0;
			this.prec = 0;
			this.fmtFlags = new fmtFlags.ptr();
			return;
		}
		this.intbuf = intbuf_;
		this.buf = buf_;
		this.wid = wid_;
		this.prec = prec_;
		this.fmtFlags = fmtFlags_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.n = 0;
			this.panicking = false;
			this.erroring = false;
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr();
			this.reordered = false;
			this.goodArgNum = false;
			this.runeBuf = arrayType$1.zero();
			this.fmt = new fmt.ptr();
			return;
		}
		this.n = n_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.runeBuf = runeBuf_;
		this.fmt = fmt_;
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, "fmt.runeUnreader", "runeUnreader", "fmt", null);
	ScanState = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", "ScanState", "fmt", null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rr = $ifaceNil;
			this.buf = buffer.nil;
			this.peekRune = 0;
			this.prevRune = 0;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr();
			return;
		}
		this.rr = rr_;
		this.buf = buf_;
		this.peekRune = peekRune_;
		this.prevRune = prevRune_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	arrayType = $arrayType($Uint16, 2);
	sliceType$2 = $sliceType(arrayType);
	ptrType = $ptrType(pp);
	ptrType$1 = $ptrType(buffer);
	ptrType$2 = $ptrType(reflect.rtype);
	ptrType$5 = $ptrType(ss);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint8, 65);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	init = function() {
		var $ptr, i;
		i = 0;
		while (true) {
			if (!(i < 65)) { break; }
			((i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48);
			((i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32);
			i = i + (1) >> 0;
		}
	};
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		$copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false), fmtFlags);
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.computePadding = function(width) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth, padding, rightWidth, w, width;
		padding = sliceType.nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.fmtFlags.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.fmtFlags.zero) {
				_tmp = padZeroBytes; _tmp$1 = w; _tmp$2 = 0; padding = _tmp; leftWidth = _tmp$1; rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes; _tmp$4 = w; _tmp$5 = 0; padding = _tmp$3; leftWidth = _tmp$4; rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes; _tmp$7 = 0; _tmp$8 = w; padding = _tmp$6; leftWidth = _tmp$7; rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.ptr.prototype.writePadding = function(n, padding) {
		var $ptr, f, m, n, padding;
		f = this;
		while (true) {
			if (!(n > 0)) { break; }
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, _tuple, b, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCount(b)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, _tuple, f, left, padding, right, s;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.integer = function(a, base, signedness, digits) {
		var $ptr, _ref, _ref$1, a, base, buf, digits, f, i, j, negative, next, prec, runeWidth, signedness, ua, width, width$1, x, x$1, x$2, x$3;
		f = this;
		if (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		buf = $subslice(new sliceType(f.intbuf), 0);
		if (f.fmtFlags.widPresent) {
			width = f.wid;
			if ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
			if (width > 65) {
				buf = $makeSlice(sliceType, width);
			}
		}
		negative = signedness && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			f.fmtFlags.zero = false;
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		_ref = base;
		if ((_ref.$high === 0 && _ref.$low === 10)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(ua, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24));
				ua = next;
			}
		} else if ((_ref.$high === 0 && _ref.$low === 16)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0))));
				ua = $shiftRightUint64(ua, (4));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 8)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (3));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 2)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_ref$1 = base;
			if ((_ref$1.$high === 0 && _ref$1.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if ((_ref$1.$high === 0 && _ref$1.$low === 16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24);
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (f.fmtFlags.unicode) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		if (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32);
			j = j + (1) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, n, s, x;
		f = this;
		n = b.$length;
		if (b === sliceType.nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			if (i > 0 && f.fmtFlags.space) {
				buf = $append(buf, 32);
			}
			if (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === sliceType.nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < s.length) {
			s = s.substring(0, f.prec);
		}
		f.fmt_sbx(s, sliceType.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < b.$length) {
			b = $subslice(b, 0, f.prec);
		}
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, f, quoted, s;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.fmtFlags.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, c, f, quoted;
		f = this;
		quoted = sliceType.nil;
		if (f.fmtFlags.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		var $ptr, def, f;
		if (f.fmtFlags.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $ptr, f, n, num, prec, v, verb, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new sliceType(f.intbuf), 0, 1), v, verb, prec, n);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (math.IsInf(v, 0)) {
			if (f.fmtFlags.zero) {
				$deferred.push([(function() {
					var $ptr;
					f.fmtFlags.zero = true;
				}), []]);
				f.fmtFlags.zero = false;
			}
		}
		if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
			if (f.fmtFlags.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.fmtFlags.plus || v < 0) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
			f.pad(num);
			return;
		}
		if (f.fmtFlags.plus || ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.ptr.prototype.fmt_e64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.ptr.prototype.fmt_E64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.ptr.prototype.fmt_f64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.ptr.prototype.fmt_g64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.ptr.prototype.fmt_G64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.ptr.prototype.fmt_fb64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.ptr.prototype.fmt_e32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.ptr.prototype.fmt_E32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.ptr.prototype.fmt_f32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.ptr.prototype.fmt_g32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.ptr.prototype.fmt_G32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.ptr.prototype.fmt_fb32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.ptr.prototype.fmt_c64 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.ptr.prototype.fmt_c128 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var $ptr, _ref, f, i, j, oldPlus, oldSpace, oldWid, r, size, verb;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.fmtFlags.plus;
		oldSpace = f.fmtFlags.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_ref === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_ref === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if (_ref === 102 || _ref === 70) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_ref === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_ref === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.fmtFlags.plus = true;
			f.fmtFlags.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.fmtFlags.space = oldSpace;
		f.fmtFlags.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), new buffer($stringToBytes(s))));
		_tmp = s.length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var $ptr, _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = $assertType(_r$2, ptrType);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		return p;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid; _tmp$1 = p.fmt.fmtFlags.widPresent; wid = _tmp; ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec; _tmp$1 = p.fmt.fmtFlags.precPresent; prec = _tmp; ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _ref, b, p;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.fmtFlags.minus;
		} else if (_ref === 43) {
			return p.fmt.fmtFlags.plus;
		} else if (_ref === 35) {
			return p.fmt.fmtFlags.sharp;
		} else if (_ref === 32) {
			return p.fmt.fmtFlags.space;
		} else if (_ref === 48) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.add = function(c) {
		var $ptr, c, p;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tuple, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		_tuple = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3; n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Sprintf = function(format, a) {
		var $ptr, _r$2, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r$2, _r$3, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = errors.New(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		return _r$3;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3; n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Sprint = function(a) {
		var $ptr, _r$2, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Sprintln = function(a) {
		var $ptr, _r$2, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var $ptr, _r$2, _r$3, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r$2 = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		val = _r$2;
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:
			_r$3 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
		/* } */ case 3:
		return val;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0; _tmp$1 = false; _tmp$2 = end; num = _tmp; isnum = _tmp$1; newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			num = (num * 10 >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r$2, _r$3, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		p = this;
		if (!v.IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r$2 = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 1; continue; }
		/* */ if (p.value.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 1:
			_r$2 = reflect.TypeOf(p.arg).String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(61);
			_r$4 = p.printArg(p.arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$s = 4; continue;
		/* } else if (p.value.IsValid()) { */ case 2:
			_r$5 = p.value.Type().String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			p.add(61);
			_r$7 = p.printValue(p.value, 118, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			$s = 4; continue;
		/* } else { */ case 3:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
		/* } */ case 4:
		p.add(41);
		p.erroring = false;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 116 || _ref === 118) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_ref === 116 || _ref === 118) { */ case 1:
			p.fmt.fmt_boolean(v);
			$s = 3; continue;
		/* } else { */ case 2:
			$r = p.badVerb(verb); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmtC = function(c) {
		var $ptr, c, p, r, w, x;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new sliceType(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new sliceType(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.ptr.prototype.fmtInt64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 99) { $s = 2; continue; }
		/* */ if (_ref === 100 || _ref === 118) { $s = 3; continue; }
		/* */ if (_ref === 111) { $s = 4; continue; }
		/* */ if (_ref === 113) { $s = 5; continue; }
		/* */ if (_ref === 120) { $s = 6; continue; }
		/* */ if (_ref === 85) { $s = 7; continue; }
		/* */ if (_ref === 88) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 99) { */ case 2:
			p.fmtC(v);
			$s = 10; continue;
		/* } else if (_ref === 100 || _ref === 118) { */ case 3:
			p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 111) { */ case 4:
			p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 113) { */ case 5:
			/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 11:
				p.fmt.fmt_qc(v);
				$s = 13; continue;
			/* } else { */ case 12:
				$r = p.badVerb(verb); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$s = 10; continue;
		/* } else if (_ref === 120) { */ case 6:
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
			$s = 10; continue;
		/* } else if (_ref === 85) { */ case 7:
			p.fmtUnicode(v);
			$s = 10; continue;
		/* } else if (_ref === 88) { */ case 8:
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
			$s = 10; continue;
		/* } else { */ case 9:
			$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInt64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtUnicode = function(v) {
		var $ptr, p, prec, precPresent, sharp, v;
		p = this;
		precPresent = p.fmt.fmtFlags.precPresent;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.fmtFlags.precPresent = true;
		}
		p.fmt.fmtFlags.unicode = true;
		p.fmt.fmtFlags.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.fmtFlags.unicode = false;
		p.fmt.fmtFlags.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.fmtFlags.precPresent = precPresent;
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.ptr.prototype.fmtUint64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 99) { $s = 2; continue; }
		/* */ if (_ref === 100) { $s = 3; continue; }
		/* */ if (_ref === 118) { $s = 4; continue; }
		/* */ if (_ref === 111) { $s = 5; continue; }
		/* */ if (_ref === 113) { $s = 6; continue; }
		/* */ if (_ref === 120) { $s = 7; continue; }
		/* */ if (_ref === 88) { $s = 8; continue; }
		/* */ if (_ref === 85) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 99) { */ case 2:
			p.fmtC(new $Int64(v.$high, v.$low));
			$s = 11; continue;
		/* } else if (_ref === 100) { */ case 3:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 118) { */ case 4:
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			}
			$s = 11; continue;
		/* } else if (_ref === 111) { */ case 5:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 113) { */ case 6:
			/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 12:
				p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
				$s = 14; continue;
			/* } else { */ case 13:
				$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$s = 11; continue;
		/* } else if (_ref === 120) { */ case 7:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
			$s = 11; continue;
		/* } else if (_ref === 88) { */ case 8:
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
			$s = 11; continue;
		/* } else if (_ref === 85) { */ case 9:
			p.fmtUnicode(new $Int64(v.$high, v.$low));
			$s = 11; continue;
		/* } else { */ case 10:
			$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtUint64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };
	pp.ptr.prototype.fmtFloat32 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 101) { $s = 2; continue; }
		/* */ if (_ref === 69) { $s = 3; continue; }
		/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }
		/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }
		/* */ if (_ref === 71) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.fmt_fb32(v);
			$s = 8; continue;
		/* } else if (_ref === 101) { */ case 2:
			p.fmt.fmt_e32(v);
			$s = 8; continue;
		/* } else if (_ref === 69) { */ case 3:
			p.fmt.fmt_E32(v);
			$s = 8; continue;
		/* } else if (_ref === 102 || _ref === 70) { */ case 4:
			p.fmt.fmt_f32(v);
			$s = 8; continue;
		/* } else if (_ref === 103 || _ref === 118) { */ case 5:
			p.fmt.fmt_g32(v);
			$s = 8; continue;
		/* } else if (_ref === 71) { */ case 6:
			p.fmt.fmt_G32(v);
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat32 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.ptr.prototype.fmtFloat64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98) { $s = 1; continue; }
		/* */ if (_ref === 101) { $s = 2; continue; }
		/* */ if (_ref === 69) { $s = 3; continue; }
		/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }
		/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }
		/* */ if (_ref === 71) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref === 98) { */ case 1:
			p.fmt.fmt_fb64(v);
			$s = 8; continue;
		/* } else if (_ref === 101) { */ case 2:
			p.fmt.fmt_e64(v);
			$s = 8; continue;
		/* } else if (_ref === 69) { */ case 3:
			p.fmt.fmt_E64(v);
			$s = 8; continue;
		/* } else if (_ref === 102 || _ref === 70) { */ case 4:
			p.fmt.fmt_f64(v);
			$s = 8; continue;
		/* } else if (_ref === 103 || _ref === 118) { */ case 5:
			p.fmt.fmt_g64(v);
			$s = 8; continue;
		/* } else if (_ref === 71) { */ case 6:
			p.fmt.fmt_G64(v);
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.ptr.prototype.fmtComplex64 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }
		/* */ if (_ref === 118) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:
			p.fmt.fmt_c64(v, verb);
			$s = 4; continue;
		/* } else if (_ref === 118) { */ case 2:
			p.fmt.fmt_c64(v, 103);
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.ptr.prototype.fmtComplex128 = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }
		/* */ if (_ref === 118) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:
			p.fmt.fmt_c128(v, verb);
			$s = 4; continue;
		/* } else if (_ref === 118) { */ case 2:
			p.fmt.fmt_c128(v, 103);
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex128 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _ref, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = verb;
		/* */ if (_ref === 118) { $s = 1; continue; }
		/* */ if (_ref === 115) { $s = 2; continue; }
		/* */ if (_ref === 120) { $s = 3; continue; }
		/* */ if (_ref === 88) { $s = 4; continue; }
		/* */ if (_ref === 113) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_ref === 118) { */ case 1:
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
			$s = 7; continue;
		/* } else if (_ref === 115) { */ case 2:
			p.fmt.fmt_s(v);
			$s = 7; continue;
		/* } else if (_ref === 120) { */ case 3:
			p.fmt.fmt_sx(v, "0123456789abcdef");
			$s = 7; continue;
		/* } else if (_ref === 88) { */ case 4:
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
			$s = 7; continue;
		/* } else if (_ref === 113) { */ case 5:
			p.fmt.fmt_q(v);
			$s = 7; continue;
		/* } else { */ case 6:
			$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {
		var $ptr, _i, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, c, depth, i, p, typ, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; depth = $f.depth; i = $f.i; p = $f.p; typ = $f.typ; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ((verb === 118) || (verb === 100)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((verb === 118) || (verb === 100)) { */ case 1:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 3:
				/* */ if (v === sliceType.nil) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (v === sliceType.nil) { */ case 6:
					/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 8:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("[]byte(nil)");
						$s = 10; continue;
					/* } else { */ case 9:
						_r$2 = typ.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					/* } */ case 10:
					return;
				/* } */ case 7:
				/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 13:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(bytesBytes);
					$s = 15; continue;
				/* } else { */ case 14:
					_r$4 = typ.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				/* } */ case 15:
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 5:
			_ref = v;
			_i = 0;
			/* while (true) { */ case 18:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$6 = p.printArg(new $Uint8(c), 118, depth + 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_i++;
			/* } */ $s = 18; continue; case 19:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			return;
		/* } */ case 2:
		_ref$1 = verb;
		/* */ if (_ref$1 === 115) { $s = 21; continue; }
		/* */ if (_ref$1 === 120) { $s = 22; continue; }
		/* */ if (_ref$1 === 88) { $s = 23; continue; }
		/* */ if (_ref$1 === 113) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_ref$1 === 115) { */ case 21:
			p.fmt.fmt_s($bytesToString(v));
			$s = 26; continue;
		/* } else if (_ref$1 === 120) { */ case 22:
			p.fmt.fmt_bx(v, "0123456789abcdef");
			$s = 26; continue;
		/* } else if (_ref$1 === 88) { */ case 23:
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
			$s = 26; continue;
		/* } else if (_ref$1 === 113) { */ case 24:
			p.fmt.fmt_q($bytesToString(v));
			$s = 26; continue;
		/* } else { */ case 25:
			$r = p.badVerb(verb); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 26:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.depth = depth; $f.i = i; $f.p = p; $f.typ = typ; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _r$2, _r$3, _ref, _ref$1, p, u, use0x64, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; p = $f.p; u = $f.u; use0x64 = $f.use0x64; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		use0x64 = true;
		_ref = verb;
		/* */ if (_ref === 112 || _ref === 118) { $s = 1; continue; }
		/* */ if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 112 || _ref === 118) { */ case 1:
			$s = 4; continue;
		/* } else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { */ case 2:
			use0x64 = false;
			$s = 4; continue;
		/* } else { */ case 3:
			$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 4:
		u = 0;
		_ref$1 = value.Kind();
		/* */ if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { */ case 6:
			u = value.Pointer();
			$s = 8; continue;
		/* } else { */ case 7:
			$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 8:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 10; continue; }
		/* */ if ((verb === 118) && (u === 0)) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 10:
			p.add(40);
			_r$2 = value.Type().String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(41);
			p.add(40);
			if (u === 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
			$s = 13; continue;
		/* } else if ((verb === 118) && (u === 0)) { */ case 11:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			$s = 13; continue;
		/* } else { */ case 12:
			/* */ if (use0x64) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (use0x64) { */ case 16:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 18; continue;
			/* } else { */ case 17:
				$r = p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.p = p; $f.u = u; $f.use0x64 = use0x64; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r$2, _r$3, arg, err, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r$2 = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			/* */ if ((v.Kind() === 22) && v.IsNil()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((v.Kind() === 22) && v.IsNil()) { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				return;
			/* } */ case 5:
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
			p.add(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(panicBytes);
			p.panicking = true;
			_r$3 = p.printArg(err, 118, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.clearSpecialFlags = function() {
		var $ptr, p, plusV, sharpV;
		plusV = false;
		sharpV = false;
		p = this;
		plusV = p.fmt.fmtFlags.plusV;
		if (plusV) {
			p.fmt.fmtFlags.plus = true;
			p.fmt.fmtFlags.plusV = false;
		}
		sharpV = p.fmt.fmtFlags.sharpV;
		if (sharpV) {
			p.fmt.fmtFlags.sharp = true;
			p.fmt.fmtFlags.sharpV = false;
		}
		return [plusV, sharpV];
	};
	pp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };
	pp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {
		var $ptr, p, plusV, sharpV;
		p = this;
		if (plusV) {
			p.fmt.fmtFlags.plus = false;
			p.fmt.fmtFlags.plusV = true;
		}
		if (sharpV) {
			p.fmt.fmtFlags.sharp = false;
			p.fmt.fmtFlags.sharpV = true;
		}
	};
	pp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };
	pp.ptr.prototype.handleMethods = function(verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, depth, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; depth = $f.depth; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true); formatter = _tuple[0]; ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			_tuple$1 = p.clearSpecialFlags();
			$deferred.push([$methodVal(p, "restoreSpecialFlags"), [_tuple$1[0], _tuple$1[1]]]);
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$2 = $assertType(p.arg, GoStringer, true); stringer = _tuple$2[0]; ok$1 = _tuple$2[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r$2 = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r$2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
			_ref = verb;
			/* */ if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { */ case 11:
				_ref$1 = p.arg;
				/* */ if ($assertType(_ref$1, $error, true)[1]) { $s = 13; continue; }
				/* */ if ($assertType(_ref$1, Stringer, true)[1]) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if ($assertType(_ref$1, $error, true)[1]) { */ case 13:
					v = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					_r$3 = v.Error(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = p.printArg(new $String(_r$3), verb, depth); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					return handled;
					$s = 15; continue;
				/* } else if ($assertType(_ref$1, Stringer, true)[1]) { */ case 14:
					v$1 = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					_r$5 = v$1.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = p.printArg(new $String(_r$5), verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					return handled;
				/* } */ case 15:
			/* } */ case 12:
		/* } */ case 6:
		handled = false;
		return handled;
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.depth = depth; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };
	pp.ptr.prototype.printArg = function(arg, verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, arg, depth, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, handled, p, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; depth = $f.depth; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; handled = $f.handled; p = $f.p; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				p.fmt.pad(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
		_ref = verb;
		/* */ if (_ref === 84) { $s = 7; continue; }
		/* */ if (_ref === 112) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 84) { */ case 7:
			_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			wasString = false;
			return wasString;
			$s = 9; continue;
		/* } else if (_ref === 112) { */ case 8:
			_r$4 = reflect.ValueOf(arg); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.fmtPointer(_r$4, verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = false;
			return wasString;
		/* } */ case 9:
		_ref$1 = arg;
		/* */ if ($assertType(_ref$1, $Bool, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref$1, $Float32, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref$1, $Float64, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref$1, $Complex64, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref$1, $Complex128, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref$1, $Int, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref$1, $Int8, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref$1, $Int16, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref$1, $Int32, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref$1, $Int64, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref$1, $Uint, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref$1, $Uint8, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref$1, $Uint16, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref$1, $Uint32, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref$1, $Uint64, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref$1, $Uintptr, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref$1, sliceType, true)[1]) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if ($assertType(_ref$1, $Bool, true)[1]) { */ case 14:
			f = _ref$1.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Float32, true)[1]) { */ case 15:
			f$1 = _ref$1.$val;
			$r = p.fmtFloat32(f$1, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Float64, true)[1]) { */ case 16:
			f$2 = _ref$1.$val;
			$r = p.fmtFloat64(f$2, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Complex64, true)[1]) { */ case 17:
			f$3 = _ref$1.$val;
			$r = p.fmtComplex64(f$3, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Complex128, true)[1]) { */ case 18:
			f$4 = _ref$1.$val;
			$r = p.fmtComplex128(f$4, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int, true)[1]) { */ case 19:
			f$5 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$5), verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int8, true)[1]) { */ case 20:
			f$6 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$6), verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int16, true)[1]) { */ case 21:
			f$7 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$7), verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int32, true)[1]) { */ case 22:
			f$8 = _ref$1.$val;
			$r = p.fmtInt64(new $Int64(0, f$8), verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Int64, true)[1]) { */ case 23:
			f$9 = _ref$1.$val;
			$r = p.fmtInt64(f$9, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint, true)[1]) { */ case 24:
			f$10 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$10), verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint8, true)[1]) { */ case 25:
			f$11 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$11), verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint16, true)[1]) { */ case 26:
			f$12 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$12), verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint32, true)[1]) { */ case 27:
			f$13 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$13), verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uint64, true)[1]) { */ case 28:
			f$14 = _ref$1.$val;
			$r = p.fmtUint64(f$14, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $Uintptr, true)[1]) { */ case 29:
			f$15 = _ref$1.$val;
			$r = p.fmtUint64(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 30:
			f$16 = _ref$1.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = (verb === 115) || (verb === 118);
			$s = 33; continue;
		/* } else if ($assertType(_ref$1, sliceType, true)[1]) { */ case 31:
			f$17 = _ref$1.$val;
			$r = p.fmtBytes(f$17, verb, $ifaceNil, depth); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = verb === 115;
			$s = 33; continue;
		/* } else { */ case 32:
			f$18 = _ref$1;
			_r$5 = p.handleMethods(verb, depth); /* */ $s = 52; case 52: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			handled = _r$5;
			/* */ if (handled) { $s = 53; continue; }
			/* */ $s = 54; continue;
			/* if (handled) { */ case 53:
				wasString = false;
				return wasString;
			/* } */ case 54:
			_r$6 = reflect.ValueOf(arg); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = p.printReflectValue(_r$6, verb, depth); /* */ $s = 56; case 56: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			wasString = _r$7;
			return wasString;
		/* } */ case 33:
		p.arg = $ifaceNil;
		return wasString;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.handled = handled; $f.p = p; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, depth, handled, p, value, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; depth = $f.depth; handled = $f.handled; p = $f.p; value = $f.value; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
		_ref = verb;
		/* */ if (_ref === 84) { $s = 7; continue; }
		/* */ if (_ref === 112) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === 84) { */ case 7:
			_r$2 = value.Type().String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			wasString = false;
			return wasString;
			$s = 9; continue;
		/* } else if (_ref === 112) { */ case 8:
			$r = p.fmtPointer(value, verb); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = false;
			return wasString;
		/* } */ case 9:
		p.arg = $ifaceNil;
		/* */ if (value.CanInterface()) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (value.CanInterface()) { */ case 13:
			_r$4 = value.Interface(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			p.arg = _r$4;
		/* } */ case 14:
		_r$5 = p.handleMethods(verb, depth); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		handled = _r$5;
		/* */ if (handled) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (handled) { */ case 17:
			wasString = false;
			return wasString;
		/* } */ case 18:
		_r$6 = p.printReflectValue(value, verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		wasString = _r$6;
		return wasString;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.depth = depth; $f.handled = handled; $f.p = p; $f.value = value; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	pp.ptr.prototype.printReflectValue = function(value, verb, depth) {
		var $ptr, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _v, a, bytes, depth, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value, value$1, verb, wasString, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _v = $f._v; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; f$1 = $f.f$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; key = $f.key; keys = $f.keys; oldValue = $f.oldValue; p = $f.p; t = $f.t; typ = $f.typ; v = $f.v; v$1 = $f.v$1; value = $f.value; value$1 = $f.value$1; verb = $f.verb; wasString = $f.wasString; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		oldValue = p.value;
		p.value = value;
		f = value;
		_ref = f.Kind();
		/* */ if (_ref === 1) { $s = 1; continue; }
		/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 2; continue; }
		/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 3; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 4; continue; }
		/* */ if (_ref === 15 || _ref === 16) { $s = 5; continue; }
		/* */ if (_ref === 24) { $s = 6; continue; }
		/* */ if (_ref === 21) { $s = 7; continue; }
		/* */ if (_ref === 25) { $s = 8; continue; }
		/* */ if (_ref === 20) { $s = 9; continue; }
		/* */ if (_ref === 17 || _ref === 23) { $s = 10; continue; }
		/* */ if (_ref === 22) { $s = 11; continue; }
		/* */ if (_ref === 18 || _ref === 19 || _ref === 26) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* switch (0) { default: if (_ref === 1) { */ case 1:
			$r = p.fmtBool(f.Bool(), verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 2:
			$r = p.fmtInt64(f.Int(), verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 3:
			$r = p.fmtUint64(f.Uint(), verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 4:
			_r$2 = f.Type().Size(); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 4) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_r$2 === 4) { */ case 18:
				$r = p.fmtFloat32($fround(f.Float()), verb); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 20; continue;
			/* } else { */ case 19:
				$r = p.fmtFloat64(f.Float(), verb); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 20:
			$s = 14; continue;
		/* } else if (_ref === 15 || _ref === 16) { */ case 5:
			_r$3 = f.Type().Size(); /* */ $s = 27; case 27: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 8) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (_r$3 === 8) { */ case 24:
				$r = p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 26; continue;
			/* } else { */ case 25:
				$r = p.fmtComplex128(f.Complex(), verb); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 26:
			$s = 14; continue;
		/* } else if (_ref === 24) { */ case 6:
			_r$4 = f.String(); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.fmtString(_r$4, verb); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 21) { */ case 7:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 32:
				_r$5 = f.Type().String(); /* */ $s = 35; case 35: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 36; case 36: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				if (f.IsNil()) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
					/* break; */ $s = 14; continue;
				}
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				$s = 34; continue;
			/* } else { */ case 33:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(mapBytes);
			/* } */ case 34:
			_r$7 = f.MapKeys(); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			keys = _r$7;
			_ref$1 = keys;
			_i = 0;
			/* while (true) { */ case 38:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 39; continue; }
				i = _i;
				key = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$8 = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 40; case 40: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
				_r$9 = f.MapIndex(key); /* */ $s = 41; case 41: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = p.printValue(_r$9, verb, depth + 1 >> 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				_i++;
			/* } */ $s = 38; continue; case 39:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			$s = 14; continue;
		/* } else if (_ref === 25) { */ case 8:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 43; continue; }
			/* */ $s = 44; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 43:
				_r$11 = value.Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$11); /* */ $s = 46; case 46: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
			/* } */ case 44:
			p.add(123);
			v = f;
			t = v.Type();
			i$1 = 0;
			/* while (true) { */ case 47:
				/* if (!(i$1 < v.NumField())) { break; } */ if(!(i$1 < v.NumField())) { $s = 48; continue; }
				if (i$1 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 49:
					_r$13 = t.Field(i$1); /* */ $s = 51; case 51: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					f$1 = $clone(_r$13, reflect.StructField);
					/* */ if (!(f$1.Name === "")) { $s = 52; continue; }
					/* */ $s = 53; continue;
					/* if (!(f$1.Name === "")) { */ case 52:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(f$1.Name);
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					/* } */ case 53:
				/* } */ case 50:
				_r$14 = getField(v, i$1); /* */ $s = 54; case 54: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$15 = p.printValue(_r$14, verb, depth + 1 >> 0); /* */ $s = 55; case 55: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 47; continue; case 48:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			$s = 14; continue;
		/* } else if (_ref === 20) { */ case 9:
			_r$16 = f.Elem(); /* */ $s = 56; case 56: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value$1 = _r$16;
			/* */ if (!value$1.IsValid()) { $s = 57; continue; }
			/* */ $s = 58; continue;
			/* if (!value$1.IsValid()) { */ case 57:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 60; continue; }
				/* */ $s = 61; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 60:
					_r$17 = f.Type().String(); /* */ $s = 63; case 63: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$18 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$17); /* */ $s = 64; case 64: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$18;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					$s = 62; continue;
				/* } else { */ case 61:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				/* } */ case 62:
				$s = 59; continue;
			/* } else { */ case 58:
				_r$19 = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 65; case 65: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				wasString = _r$19;
			/* } */ case 59:
			$s = 14; continue;
		/* } else if (_ref === 17 || _ref === 23) { */ case 10:
			typ = f.Type();
			_r$20 = typ.Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_r$21 = _r$20.Kind(); /* */ $s = 70; case 70: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			if (!(_r$21 === 8)) { _v = false; $s = 68; continue s; }
			_r$22 = typ.Elem(); /* */ $s = 71; case 71: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_v = $interfaceIsEqual(_r$22, byteType) || (verb === 115) || (verb === 113) || (verb === 120); case 68:
			/* */ if (_v) { $s = 66; continue; }
			/* */ $s = 67; continue;
			/* if (_v) { */ case 66:
				bytes = sliceType.nil;
				/* */ if (f.Kind() === 23) { $s = 72; continue; }
				/* */ if (f.CanAddr()) { $s = 73; continue; }
				/* */ $s = 74; continue;
				/* if (f.Kind() === 23) { */ case 72:
					_r$23 = f.Bytes(); /* */ $s = 76; case 76: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					bytes = _r$23;
					$s = 75; continue;
				/* } else if (f.CanAddr()) { */ case 73:
					_r$24 = f.Slice(0, f.Len()); /* */ $s = 77; case 77: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = _r$24.Bytes(); /* */ $s = 78; case 78: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					bytes = _r$25;
					$s = 75; continue;
				/* } else { */ case 74:
					bytes = $makeSlice(sliceType, f.Len());
					_ref$2 = bytes;
					_i$1 = 0;
					/* while (true) { */ case 79:
						/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 80; continue; }
						i$2 = _i$1;
						_r$26 = f.Index(i$2); /* */ $s = 81; case 81: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						_r$27 = _r$26.Uint(); /* */ $s = 82; case 82: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (_r$27.$low << 24 >>> 24));
						_i$1++;
					/* } */ $s = 79; continue; case 80:
				/* } */ case 75:
				$r = p.fmtBytes(bytes, verb, typ, depth); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wasString = verb === 115;
				/* break; */ $s = 14; continue;
			/* } */ case 67:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 84; continue; }
			/* */ $s = 85; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 84:
				_r$28 = value.Type().String(); /* */ $s = 87; case 87: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$28); /* */ $s = 88; case 88: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$29;
				if ((f.Kind() === 23) && f.IsNil()) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
					/* break; */ $s = 14; continue;
				}
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				$s = 86; continue;
			/* } else { */ case 85:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 86:
			i$3 = 0;
			/* while (true) { */ case 89:
				/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 90; continue; }
				if (i$3 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$30 = f.Index(i$3); /* */ $s = 91; case 91: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$31 = p.printValue(_r$30, verb, depth + 1 >> 0); /* */ $s = 92; case 92: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$31;
				i$3 = i$3 + (1) >> 0;
			/* } */ $s = 89; continue; case 90:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			$s = 14; continue;
		/* } else if (_ref === 22) { */ case 11:
			v$1 = f.Pointer();
			/* */ if (!((v$1 === 0)) && (depth === 0)) { $s = 93; continue; }
			/* */ $s = 94; continue;
			/* if (!((v$1 === 0)) && (depth === 0)) { */ case 93:
				_r$32 = f.Elem(); /* */ $s = 95; case 95: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				a = _r$32;
				_ref$3 = a.Kind();
				/* */ if (_ref$3 === 17 || _ref$3 === 23) { $s = 96; continue; }
				/* */ if (_ref$3 === 25) { $s = 97; continue; }
				/* */ if (_ref$3 === 21) { $s = 98; continue; }
				/* */ $s = 99; continue;
				/* if (_ref$3 === 17 || _ref$3 === 23) { */ case 96:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$33 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 100; case 100: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					_r$33;
					/* break BigSwitch; */ $s = 14; continue s;
					$s = 99; continue;
				/* } else if (_ref$3 === 25) { */ case 97:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$34 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 101; case 101: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					_r$34;
					/* break BigSwitch; */ $s = 14; continue s;
					$s = 99; continue;
				/* } else if (_ref$3 === 21) { */ case 98:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
					_r$35 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					_r$35;
					/* break BigSwitch; */ $s = 14; continue s;
				/* } */ case 99:
			/* } */ case 94:
			$r = p.fmtPointer(value, verb); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_ref === 18 || _ref === 19 || _ref === 26) { */ case 12:
			$r = p.fmtPointer(value, verb); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else { */ case 13:
			$r = p.unknownType(f); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } } */ case 14:
		p.value = oldValue;
		wasString = wasString;
		return wasString;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printReflectValue }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._v = _v; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.key = key; $f.keys = keys; $f.oldValue = oldValue; $f.p = p; $f.t = t; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.wasString = wasString; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _tuple, a, argNum, isInt, newArgNum, num;
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		if (argNum < a.$length) {
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true); num = _tuple[0]; isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp = 0; _tmp$1 = i + 1 >> 0; _tmp$2 = false; index = _tmp; wid = _tmp$1; ok = _tmp$2;
					return [index, wid, ok];
				}
				_tmp$3 = width - 1 >> 0; _tmp$4 = i + 1 >> 0; _tmp$5 = true; index = _tmp$3; wid = _tmp$4; ok = _tmp$5;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = 0; _tmp$7 = 1; _tmp$8 = false; index = _tmp$6; wid = _tmp$7; ok = _tmp$8;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum; _tmp$1 = i; _tmp$2 = false; newArgNum = _tmp; newi = _tmp$1; found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i)); index = _tuple[0]; wid = _tuple[1]; ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index; _tmp$4 = i + wid >> 0; _tmp$5 = true; newArgNum = _tmp$3; newi = _tmp$4; found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum; _tmp$7 = i + wid >> 0; _tmp$8 = true; newArgNum = _tmp$6; newi = _tmp$7; found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, arg$1, argNum, c, end, format, i, lasti, p, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; arg$1 = $f.arg$1; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; lasti = $f.lasti; p = $f.p; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (true) {
				if (!(i < end)) { break; }
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.fmtFlags.sharp = true;
				} else if (_ref === 48) {
					p.fmt.fmtFlags.zero = true;
				} else if (_ref === 43) {
					p.fmt.fmtFlags.plus = true;
				} else if (_ref === 45) {
					p.fmt.fmtFlags.minus = true;
				} else if (_ref === 32) {
					p.fmt.fmtFlags.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + (1) >> 0;
				_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.fmtFlags.widPresent = _tuple$1[1]; argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.fmtFlags.widPresent = _tuple$2[1]; i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + (1) >> 0;
					_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.fmtFlags.precPresent = _tuple$4[1]; argNum = _tuple$4[2];
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.fmtFlags.precPresent = _tuple$5[1]; i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];
			}
			/* */ if (i >= end) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i >= end) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(noVerbBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];
			i = i + (w) >> 0;
			/* */ if (c === 37) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (c === 37) { */ case 5:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			/* */ if (!p.goodArgNum) { $s = 7; continue; }
			/* */ if (argNum >= a.$length) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!p.goodArgNum) { */ case 7:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badIndexBytes);
				/* continue; */ $s = 1; continue;
				$s = 9; continue;
			/* } else if (argNum >= a.$length) { */ case 8:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(missingBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			if (c === 118) {
				if (p.fmt.fmtFlags.sharp) {
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.sharpV = true;
				}
				if (p.fmt.fmtFlags.plus) {
					p.fmt.fmtFlags.plus = false;
					p.fmt.fmtFlags.plusV = true;
				}
			}
			_r$2 = p.printArg(arg, c, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 11:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(extraBytes);
			/* while (true) { */ case 13:
				/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 14; continue; }
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				/* */ if (!($interfaceIsEqual(arg$1, $ifaceNil))) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!($interfaceIsEqual(arg$1, $ifaceNil))) { */ case 15:
					_r$3 = reflect.TypeOf(arg$1).String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				/* } */ case 16:
				_r$5 = p.printArg(arg$1, 118, 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				if ((argNum + 1 >> 0) < a.$length) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 12:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.arg$1 = arg$1; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.lasti = lasti; $f.p = p; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var $ptr, _r$2, _r$3, _v, a, addnewline, addspace, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; a = $f.a; addnewline = $f.addnewline; addspace = $f.addspace; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		argNum = 0;
		/* while (true) { */ case 1:
			/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 2; continue; }
			p.fmt.clearflags();
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			/* */ if (argNum > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (argNum > 0) { */ case 3:
				if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 5; continue s; }
				_r$2 = reflect.TypeOf(arg).Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 24; case 5:
				isString = _v;
				if (addspace || !isString && !prevString) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
				}
			/* } */ case 4:
			_r$3 = p.printArg(arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			prevString = _r$3;
			argNum = argNum + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (addnewline) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.a = a; $f.addnewline = addnewline; $f.addspace = addspace; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0; _tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune"); n = _tmp; err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_r$2 = s.rr.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0; _tmp$1 = false; wid = _tmp; ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid; _tmp$3 = true; wid = _tmp$2; ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r$2 = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; r = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r$2, _tuple, ok, s, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; ok = $f.ok; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true); u = _tuple[0]; ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = u.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			s.peekRune = s.prevRune;
		/* } */ case 3:
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.ok = ok; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r$2, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true); se = $clone(_tuple[0], scanError); ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r$2 = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tok = _r$2;
		return [tok, err[0]];
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		old = $clone(old, ssave);
		s = this;
		if (old.validSave) {
			$copy(s.ssave, old, ssave);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r$2, _r$3, _r$4, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r$2 = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$3 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$4 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r$2, _r$3, _r$4, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r$2 = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$3 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$3) { */ case 7:
				_r$4 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		return (x = s.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r$2, _r$3, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		return indexRune(ok, r) >= 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "computePadding", name: "computePadding", pkg: "fmt", typ: $funcType([$Int], [sliceType, $Int, $Int], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int, sliceType], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "integer", name: "integer", pkg: "fmt", typ: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "formatFloat", name: "formatFloat", pkg: "fmt", typ: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: "fmt_e64", name: "fmt_e64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_E64", name: "fmt_E64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_f64", name: "fmt_f64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_g64", name: "fmt_g64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_G64", name: "fmt_G64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_fb64", name: "fmt_fb64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_e32", name: "fmt_e32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_E32", name: "fmt_E32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_f32", name: "fmt_f32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_g32", name: "fmt_g32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_G32", name: "fmt_G32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_fb32", name: "fmt_fb32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_c64", name: "fmt_c64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmt_c128", name: "fmt_c128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmt_complex", name: "fmt_complex", pkg: "fmt", typ: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$error], false)}];
	ptrType.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "add", name: "add", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtInt64", name: "fmtInt64", pkg: "fmt", typ: $funcType([$Int64, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtUint64", name: "fmtUint64", pkg: "fmt", typ: $funcType([$Uint64, $Int32], [], false)}, {prop: "fmtFloat32", name: "fmtFloat32", pkg: "fmt", typ: $funcType([$Float32, $Int32], [], false)}, {prop: "fmtFloat64", name: "fmtFloat64", pkg: "fmt", typ: $funcType([$Float64, $Int32], [], false)}, {prop: "fmtComplex64", name: "fmtComplex64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmtComplex128", name: "fmtComplex128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType, $Int32, reflect.Type, $Int], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "clearSpecialFlags", name: "clearSpecialFlags", pkg: "fmt", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "restoreSpecialFlags", name: "restoreSpecialFlags", pkg: "fmt", typ: $funcType([$Bool, $Bool], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "printReflectValue", name: "printReflectValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$1, $Bool, $Bool], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexDigit", name: "hexDigit", pkg: "fmt", typ: $funcType([$Int32], [$Int], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];
	fmtFlags.init([{prop: "widPresent", name: "widPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "minus", name: "minus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plus", name: "plus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "space", name: "space", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "unicode", name: "unicode", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "uniQuote", name: "uniQuote", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "zero", name: "zero", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", pkg: "fmt", typ: $Bool, tag: ""}]);
	fmt.init([{prop: "intbuf", name: "intbuf", pkg: "fmt", typ: arrayType$2, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: ptrType$1, tag: ""}, {prop: "wid", name: "wid", pkg: "fmt", typ: $Int, tag: ""}, {prop: "prec", name: "prec", pkg: "fmt", typ: $Int, tag: ""}, {prop: "fmtFlags", name: "", pkg: "fmt", typ: fmtFlags, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init([{prop: "n", name: "n", pkg: "fmt", typ: $Int, tag: ""}, {prop: "panicking", name: "panicking", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "arg", name: "arg", pkg: "fmt", typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", pkg: "fmt", typ: reflect.Value, tag: ""}, {prop: "reordered", name: "reordered", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "runeBuf", name: "runeBuf", pkg: "fmt", typ: arrayType$1, tag: ""}, {prop: "fmt", name: "fmt", pkg: "fmt", typ: fmt, tag: ""}]);
	runeUnreader.init([{prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	ScanState.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}]);
	scanError.init([{prop: "err", name: "err", pkg: "fmt", typ: $error, tag: ""}]);
	ss.init([{prop: "rr", name: "rr", pkg: "fmt", typ: io.RuneReader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "peekRune", name: "peekRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "count", name: "count", pkg: "fmt", typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "ssave", name: "", pkg: "fmt", typ: ssave, tag: ""}]);
	ssave.init([{prop: "validSave", name: "validSave", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "limit", name: "limit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", pkg: "fmt", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		padZeroBytes = $makeSlice(sliceType, 65);
		padSpaceBytes = $makeSlice(sliceType, 65);
		trueBytes = new sliceType($stringToBytes("true"));
		falseBytes = new sliceType($stringToBytes("false"));
		commaSpaceBytes = new sliceType($stringToBytes(", "));
		nilAngleBytes = new sliceType($stringToBytes("<nil>"));
		nilParenBytes = new sliceType($stringToBytes("(nil)"));
		nilBytes = new sliceType($stringToBytes("nil"));
		mapBytes = new sliceType($stringToBytes("map["));
		percentBangBytes = new sliceType($stringToBytes("%!"));
		missingBytes = new sliceType($stringToBytes("(MISSING)"));
		badIndexBytes = new sliceType($stringToBytes("(BADINDEX)"));
		panicBytes = new sliceType($stringToBytes("(PANIC="));
		extraBytes = new sliceType($stringToBytes("%!(EXTRA "));
		irparenBytes = new sliceType($stringToBytes("i)"));
		bytesBytes = new sliceType($stringToBytes("[]byte{"));
		badWidthBytes = new sliceType($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new sliceType($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new sliceType($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new pp.ptr();
		}));
		_r = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		intBits = _r;
		_r$1 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		uintptrBits = _r$1;
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$2([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new ss.ptr();
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, sliceType, ptrType, sliceType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", "Reader", "bufio", function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	NewReaderSize = function(rd, size) {
		var $ptr, _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true); b = _tuple[0]; ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr();
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var $ptr, rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var $ptr, b, buf, r;
		b = this;
		$copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1), Reader);
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var $ptr, _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; n = _tuple[0]; err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				return;
			}
			if (n > 0) {
				return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var $ptr, b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var $ptr, avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		if (n > b.buf.$length) {
			return [sliceType.nil, $pkg.ErrBufferFull];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.$ptr = $ptr; $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0; _tmp$1 = b.readErr(); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = b.readErr(); n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; n = _tuple[0]; b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = ((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >> 0);
					b.lastRuneSize = -1;
				}
				_tmp$4 = n; _tmp$5 = b.readErr(); n = _tmp$4; err = _tmp$5;
				return [n, err];
			/* } */ case 4:
			$r = b.fill(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (b.r === b.w) {
				_tmp$6 = 0; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
				return [n, err];
			}
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) >> 0);
		b.lastRuneSize = -1;
		_tmp$8 = n; _tmp$9 = $ifaceNil; n = _tmp$8; err = _tmp$9;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; b = $f.b; c = $f.c; err = $f.err; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp = 0; _tmp$1 = b.readErr(); c = _tmp; err = _tmp$1;
				return [c, err];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = (c >> 0);
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.b = b; $f.c = c; $f.err = err; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = (b.lastByte << 24 >>> 24)));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = b.readErr(); r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		_tmp$3 = ((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0); _tmp$4 = 1; r = _tmp$3; size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w)); r = _tuple[0]; size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) >> 0);
		b.lastRuneSize = size;
		_tmp$5 = r; _tmp$6 = size; _tmp$7 = $ifaceNil; r = _tmp$5; size = _tmp$6; err = _tmp$7;
		return [r, size, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var $ptr, b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = (((i$1 < 0 || i$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + i$1]) >> 0);
			b.lastRuneSize = -1;
		}
		return [line, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.$ptr = $ptr; $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; line = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line; _tmp$1 = true; _tmp$2 = $ifaceNil; line = _tmp; isPrefix = _tmp$1; err = _tmp$2;
			return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		return [line, isPrefix, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, line, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; line = $f.line; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; frag = _tuple[0]; e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		_tmp = buf$1; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, bytes$1, delim, err, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = "";
		err = $ifaceNil;
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; bytes$1 = _tuple[0]; err = _tuple[1];
		line = $bytesToString(bytes$1);
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true); r = _tuple$1[0]; ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1; m = _tuple$2[0]; err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true); w$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2; m$1 = _tuple$4[0]; err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n; _tmp$3 = err$2; n = _tmp$2; err = _tmp$3;
			return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3; m$2 = _tuple$5[0]; err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = err$3; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var $ptr, _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		return [new $Int64(0, n), err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Reader.init([{prop: "buf", name: "buf", pkg: "bufio", typ: sliceType, tag: ""}, {prop: "rd", name: "rd", pkg: "bufio", typ: io.Reader, tag: ""}, {prop: "r", name: "r", pkg: "bufio", typ: $Int, tag: ""}, {prop: "w", name: "w", pkg: "bufio", typ: $Int, tag: ""}, {prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", pkg: "bufio", typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", pkg: "bufio", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash, sliceType;
	io = $packages["io"];
	Hash = $pkg.Hash = $newType(8, $kindInterface, "hash.Hash", "Hash", "hash", null);
	sliceType = $sliceType($Uint8);
	Hash.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto"] = (function() {
	var $pkg = {}, $init, hash, io, strconv, Hash, PublicKey, PrivateKey, Signer, SignerOpts, sliceType, funcType, sliceType$1, digestSizes, hashes, RegisterHash;
	hash = $packages["hash"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	Hash = $pkg.Hash = $newType(4, $kindUint, "crypto.Hash", "Hash", "crypto", null);
	PublicKey = $pkg.PublicKey = $newType(8, $kindInterface, "crypto.PublicKey", "PublicKey", "crypto", null);
	PrivateKey = $pkg.PrivateKey = $newType(8, $kindInterface, "crypto.PrivateKey", "PrivateKey", "crypto", null);
	Signer = $pkg.Signer = $newType(8, $kindInterface, "crypto.Signer", "Signer", "crypto", null);
	SignerOpts = $pkg.SignerOpts = $newType(8, $kindInterface, "crypto.SignerOpts", "SignerOpts", "crypto", null);
	sliceType = $sliceType($Uint8);
	funcType = $funcType([], [hash.Hash], false);
	sliceType$1 = $sliceType(funcType);
	Hash.prototype.HashFunc = function() {
		var $ptr, h;
		h = this.$val;
		return h;
	};
	$ptrType(Hash).prototype.HashFunc = function() { return new Hash(this.$get()).HashFunc(); };
	Hash.prototype.Size = function() {
		var $ptr, h;
		h = this.$val;
		if (h > 0 && h < 14) {
			return (((h < 0 || h >= digestSizes.$length) ? $throwRuntimeError("index out of range") : digestSizes.$array[digestSizes.$offset + h]) >> 0);
		}
		$panic(new $String("crypto: Size of unknown hash function"));
	};
	$ptrType(Hash).prototype.Size = function() { return new Hash(this.$get()).Size(); };
	Hash.prototype.New = function() {
		var $ptr, _r, f, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this.$val;
		/* */ if (h > 0 && h < 14) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (h > 0 && h < 14) { */ case 1:
			f = ((h < 0 || h >= hashes.$length) ? $throwRuntimeError("index out of range") : hashes.$array[hashes.$offset + h]);
			/* */ if (!(f === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(f === $throwNilPointerError)) { */ case 3:
				_r = f(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				return _r;
			/* } */ case 4:
		/* } */ case 2:
		$panic(new $String("crypto: requested hash function #" + strconv.Itoa((h >> 0)) + " is unavailable"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Hash.prototype.New }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Hash).prototype.New = function() { return new Hash(this.$get()).New(); };
	Hash.prototype.Available = function() {
		var $ptr, h;
		h = this.$val;
		return h < 14 && !(((h < 0 || h >= hashes.$length) ? $throwRuntimeError("index out of range") : hashes.$array[hashes.$offset + h]) === $throwNilPointerError);
	};
	$ptrType(Hash).prototype.Available = function() { return new Hash(this.$get()).Available(); };
	RegisterHash = function(h, f) {
		var $ptr, f, h;
		if (h >= 14) {
			$panic(new $String("crypto: RegisterHash of unknown hash function"));
		}
		((h < 0 || h >= hashes.$length) ? $throwRuntimeError("index out of range") : hashes.$array[hashes.$offset + h] = f);
	};
	$pkg.RegisterHash = RegisterHash;
	Hash.methods = [{prop: "HashFunc", name: "HashFunc", pkg: "", typ: $funcType([], [Hash], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([], [hash.Hash], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Bool], false)}];
	PublicKey.init([]);
	PrivateKey.init([]);
	Signer.init([{prop: "Public", name: "Public", pkg: "", typ: $funcType([], [PublicKey], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([io.Reader, sliceType, SignerOpts], [sliceType, $error], false)}]);
	SignerOpts.init([{prop: "HashFunc", name: "HashFunc", pkg: "", typ: $funcType([], [Hash], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		digestSizes = new sliceType([0, 16, 16, 20, 28, 32, 48, 64, 36, 20, 28, 32, 48, 64]);
		hashes = $makeSlice(sliceType$1, 14);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Rand, lockedSource, rngSource, sliceType, ptrType$1, ptrType$2, arrayType, ptrType$3, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, Int, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", "Source", "math/rand", null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", "Rand", "math/rand", function(src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			return;
		}
		this.src = src_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", "lockedSource", "math/rand", function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr();
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", "rngSource", "math/rand", function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	sliceType = $sliceType($Int);
	ptrType$1 = $ptrType(Rand);
	ptrType$2 = $ptrType(lockedSource);
	arrayType = $arrayType($Int64, 607);
	ptrType$3 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = j * ((i < 0 || i >= we.length) ? $throwRuntimeError("index out of range") : we[i]);
			if (j < ((i < 0 || i >= ke.length) ? $throwRuntimeError("index out of range") : ke[i])) {
				return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError("index out of range") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]))))) < $fround(math.Exp(-x))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError("index out of range") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]))))) < $fround(math.Exp(-x))) { */ case 8:
				return x;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var $ptr, i;
		if (i < 0) {
			return (-i >>> 0);
		}
		return (i >>> 0);
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = (_r >> 0);
			i = j & 127;
			x = j * ((i < 0 || i >= wn.length) ? $throwRuntimeError("index out of range") : wn[i]);
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? $throwRuntimeError("index out of range") : kn[i])) {
				return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					return 3.442619855899 + x;
				}
				return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError("index out of range") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError("index out of range") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { */ case 12:
				return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var $ptr, rng, seed;
		rng = $clone(new rngSource.ptr(), rngSource);
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var $ptr, src;
		return new Rand.ptr(src);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var $ptr, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return ($shiftRightInt64(_r, 31).$low >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Int31 = function() {
		var $ptr, _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return ((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var $ptr, _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = (_r.$low >>> 0);
		return (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var $ptr, _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = (x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), new $Uint64(n.$high, n.$low), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low));
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 5:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }
			_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 5; continue; case 6:
		return $div64(v, n, true);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = ((2147483647 - (_r$1 = 2147483648 % (n >>> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0);
		_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 5:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }
			_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 5; continue; case 6:
		return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var $ptr, _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n((n >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return (_r >> 0);
		/* } */ case 2:
		_r$1 = r.Int63n(new $Int64(0, n)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return ((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $flatten64(_r) / 9.223372036854776e+18;
		if (f === 1) {
			f = 0;
		}
		return f;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = $fround(_r);
		if (f === 1) {
			f = 0;
		}
		return f;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var $ptr, _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return m;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Int = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = globalRand.Int(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Int = Int;
	lockedSource.ptr.prototype.Int63 = function() {
		var $ptr, _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		return n;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var $ptr, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	seedrand = function(x) {
		var $ptr, _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ((((48271 >>> 16 << 16) * lo >> 0) + (48271 << 16 >>> 16) * lo) >> 0) - ((((3399 >>> 16 << 16) * hi >> 0) + (3399 << 16 >>> 16) * hi) >> 0) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var $ptr, i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = ((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0);
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64(new $Int64(0, x$1), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64(new $Int64(0, x$1), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = new $Int64(0, x$1), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? $throwRuntimeError("index out of range") : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i] = new $Int64(u.$high & 2147483647, (u.$low & 4294967295) >>> 0)));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var $ptr, rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$7 = (x = (x$1 = (x$2 = rng.vec, x$3 = rng.feed, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])), x$4 = (x$5 = rng.vec, x$6 = rng.tap, ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[x$6])), new $Int64(x$1.$high + x$4.$high, x$1.$low + x$4.$low)), new $Int64(x.$high & 2147483647, (x.$low & 4294967295) >>> 0));
		(x$8 = rng.vec, x$9 = rng.feed, ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9] = x$7));
		return x$7;
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	ptrType$1.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}];
	ptrType$2.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}];
	ptrType$3.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Rand.init([{prop: "src", name: "src", pkg: "math/rand", typ: Source, tag: ""}]);
	lockedSource.init([{prop: "lk", name: "lk", pkg: "math/rand", typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", pkg: "math/rand", typ: Source, tag: ""}]);
	rngSource.init([{prop: "tap", name: "tap", pkg: "math/rand", typ: $Int, tag: ""}, {prop: "feed", name: "feed", pkg: "math/rand", typ: $Int, tag: ""}, {prop: "vec", name: "vec", pkg: "math/rand", typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(1173834291, 3952672746), new $Int64(1081821761, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(669549340, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(492609478, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(772864846, 3467012610), new $Int64(2006957225, 2344407434), new $Int64(402115761, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(1178782866, 520164395), new $Int64(555910815, 1341358184), new $Int64(632398609, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(60039534, 998951326), new $Int64(1535158725, 1364957564), new $Int64(63173359, 4090230633), new $Int64(649454641, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(1038377625, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(1035966148, 3922894967), new $Int64(810508934, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(1053232044, 433121399), new $Int64(2451824, 4162580594), new $Int64(2010221076, 4132415622), new $Int64(611252600, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(1522878809, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(1863677552, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(79673492, 3430061722), new $Int64(663048513, 3820169661), new $Int64(481498454, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(1295374591, 2472200560), new $Int64(1587026100, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(1972496813, 95608918), new $Int64(392686347, 3690479145), new $Int64(941912722, 1397922290), new $Int64(988169623, 1516129515), new $Int64(1827305493, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(194013850, 1336785672), new $Int64(2102397034, 4131677129), new $Int64(755205548, 4246329084), new $Int64(1004983461, 3788585631), new $Int64(2081005363, 3080389532), new $Int64(1501045284, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(1628305930, 2276716302), new $Int64(1779030508, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(634572984, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(1213226718, 4159821533), new $Int64(2070861710, 1894661), new $Int64(1472989750, 1156868282), new $Int64(348271067, 776219088), new $Int64(1646054810, 2425634259), new $Int64(1716021749, 680510161), new $Int64(1573220192, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(1821788136, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(7834944, 1232604732), new $Int64(309412934, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(521080809, 3589632480), new $Int64(1198416575, 864579159), new $Int64(208735487, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(403198876, 100794388), new $Int64(956062190, 2991674471), new $Int64(1938816907, 2224662036), new $Int64(1973824487, 977097250), new $Int64(1351320195, 726419512), new $Int64(1964023751, 1747974366), new $Int64(1394388465, 1556430604), new $Int64(1097991433, 1080776742), new $Int64(1761636690, 280794874), new $Int64(117767733, 919835643), new $Int64(1180474222, 3434019658), new $Int64(196069168, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(879802240, 2724693469), new $Int64(547796833, 598827710), new $Int64(300924196, 3452273442), new $Int64(2071705424, 649274915), new $Int64(1346182319, 2585724112), new $Int64(636549385, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(2094573470, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(2022678706, 681540375), new $Int64(1375448925, 537050586), new $Int64(182715304, 315246468), new $Int64(226402871, 849323088), new $Int64(1262421183, 45543944), new $Int64(1201038398, 2319052083), new $Int64(2106775454, 3613090841), new $Int64(560472520, 2992171180), new $Int64(1765620479, 2068244785), new $Int64(917538188, 4239862634), new $Int64(777927839, 3892253031), new $Int64(720683925, 958186149), new $Int64(1724185863, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(267722611, 2764496274), new $Int64(341003118, 4196182374), new $Int64(1080717893, 550964545), new $Int64(818747069, 420611474), new $Int64(222653272, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(780007692, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(419862118, 281976339), new $Int64(574970164, 3619802330), new $Int64(1715552825, 3084554784), new $Int64(882872465, 4129772886), new $Int64(43084605, 1680378557), new $Int64(525521057, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(211654685, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(1312620086, 3958162143), new $Int64(920972075, 2773705983), new $Int64(1876039582, 225908689), new $Int64(963748535, 908216283), new $Int64(1541787429, 3574646075), new $Int64(319760557, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(1546084160, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(908474287, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(1594236910, 807894872), new $Int64(366158341, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(671241040, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(988084219, 1906263026), new $Int64(475781207, 3904421704), new $Int64(1523946520, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(404732502, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(1917039957, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(1990909507, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(1257737460, 209092916), new $Int64(1899814242, 1242699167), new $Int64(1433653252, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(949899753, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(201241205, 1766109365), new $Int64(700596547, 3257093788), new $Int64(1962768719, 2365720207), new $Int64(93384808, 3742754173), new $Int64(1689098413, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(1313222695, 3573511231), new $Int64(1392911121, 1760299077), new $Int64(771856457, 2260779833), new $Int64(1281464374, 1452805722), new $Int64(917811730, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(172616216, 500935732), new $Int64(1403501753, 676580929), new $Int64(581571365, 1184984890), new $Int64(1455515235, 1271474274), new $Int64(318728910, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(94256461, 1488599718), new $Int64(966951817, 3408913763), new $Int64(60951736, 2501050084), new $Int64(1272353200, 1639124157), new $Int64(138001144, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(1982239940, 3414355209), new $Int64(1355154361, 2275136352), new $Int64(89709303, 2151835223), new $Int64(1216338715, 1654534827), new $Int64(1467562197, 377892833), new $Int64(1664767638, 660204544), new $Int64(85706799, 390828249), new $Int64(725310955, 3402783878), new $Int64(678849488, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(2079333076, 2452299106), new $Int64(1251318826, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(952516517, 182675323), new $Int64(548928884, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(1295624457, 3622207527), new $Int64(338126939, 432729309), new $Int64(480013522, 2391914317), new $Int64(297925497, 235747924), new $Int64(2120733629, 3088823825), new $Int64(1402403853, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(1406657158, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(1482330167, 1583624461), new $Int64(1261660694, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(76914806, 2207265429), new $Int64(260686035, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(1791233343, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(201728503, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(1195302398, 286492130), new $Int64(2045622690, 2795735007), new $Int64(1431753082, 3703961339), new $Int64(1999047161, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(482063550, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(1396904208, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(1399463792, 3573129983), new $Int64(1256901817, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(193076235, 268782709), new $Int64(1145360145, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(1235864944, 2205342611), new $Int64(1474779655, 1411666394), new $Int64(619028749, 677744900), new $Int64(270855115, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(1029966689, 1082141470), new $Int64(377371856, 4046134367), new $Int64(51415528, 2142943655), new $Int64(1897659315, 3124627521), new $Int64(998228909, 219992939), new $Int64(1068692697, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(1621625642, 1647770243), new $Int64(111523943, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(100152742, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(154500578, 2011457303), new $Int64(796460974, 3057425772), new $Int64(667839456, 81484597), new $Int64(465502760, 3646681560), new $Int64(775020923, 635548515), new $Int64(602489502, 2508044581), new $Int64(353263531, 1014917157), new $Int64(719992433, 3214891315), new $Int64(852684611, 959582252), new $Int64(226415134, 3347040449), new $Int64(1784615552, 4102971975), new $Int64(397887437, 4078022210), new $Int64(1610679822, 2851767182), new $Int64(749162636, 1540160644), new $Int64(598384772, 1057290595), new $Int64(2034890660, 3907769253), new $Int64(579300318, 4248952684), new $Int64(1092907599, 132554364), new $Int64(1061621234, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(1064490251, 2230939180), new $Int64(342915576, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(1418222537, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(1034385958, 3188942166), new $Int64(2073003539, 350070824), new $Int64(144881592, 61758415), new $Int64(1405659422, 3492950336), new $Int64(117440928, 3093818430), new $Int64(1693893113, 2962480613), new $Int64(235432940, 3154871160), new $Int64(511005079, 3228564679), new $Int64(610731502, 888276216), new $Int64(1200780674, 3574998604), new $Int64(870415268, 1967526716), new $Int64(591335707, 1554691298), new $Int64(574459414, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(279882768, 3764362170), new $Int64(492091056, 266611402), new $Int64(1754227768, 2047856075), new $Int64(1146757215, 21444105), new $Int64(1198058894, 3065563181), new $Int64(1915064845, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(1661896145, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(1552335120, 2036813414), new $Int64(152606527, 3105536507), new $Int64(13954645, 3396176938), new $Int64(1426081645, 1377154485), new $Int64(2085644467, 3807014186), new $Int64(543009040, 3710110597), new $Int64(396058129, 916420443), new $Int64(734556788, 2103831255), new $Int64(381322154, 717331943), new $Int64(572884752, 3550505941), new $Int64(45939673, 378749927), new $Int64(149867929, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(1107028706, 1407468696), new $Int64(469292398, 970098704), new $Int64(1862426162, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(842317902, 3916463034), new $Int64(1758884993, 3474113316), new $Int64(1036101639, 316544223), new $Int64(373738757, 1650844677), new $Int64(1240292229, 4267565603), new $Int64(1077208624, 2501167616), new $Int64(626831785, 3929401789), new $Int64(56122796, 337170252), new $Int64(1186981558, 2061966842), new $Int64(1843292800, 2508461464), new $Int64(206012532, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(1145186199, 2887126398), new $Int64(700372314, 296561685), new $Int64(700300844, 3729960077), new $Int64(575172304, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(1041887929, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(498390553, 2145871984), new $Int64(564717933, 3565480803), new $Int64(578829821, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(2050927384, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(304003901, 2087477361), new $Int64(381315848, 2407950639), new $Int64(851258090, 3942568569), new $Int64(923583198, 4088074412), new $Int64(723260036, 2964773675), new $Int64(1473561819, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(542912908, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(1116124348, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(1293910447, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(1351896723, 2500816079), new $Int64(1657235204, 514015239), new $Int64(1377565129, 543520454), new $Int64(107706923, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(644556607, 3166972343), new $Int64(372256200, 1517638666), new $Int64(1212207984, 173466846), new $Int64(1451709187, 4241513471), new $Int64(733932806, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(1236582087, 1539634186), new $Int64(1551526350, 178241987), new $Int64(2034206012, 182168164), new $Int64(1044953189, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(32803926, 1732699140), new $Int64(1726425903, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(638124245, 2228431183), new $Int64(1337169671, 3554678728), new $Int64(1396494601, 173470263), new $Int64(2061597383, 3848297795), new $Int64(1220546671, 246236185), new $Int64(163293187, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(1548631747, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(240999859, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(1475638791, 3375313137), new $Int64(503615608, 881302957), new $Int64(638698903, 2514186393), new $Int64(443860803, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(208500981, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(2058057389, 2884561259), new $Int64(1341742553, 2456511185), new $Int64(983726246, 561175414), new $Int64(427994085, 432588903), new $Int64(885133709, 4059399550), new $Int64(2054387382, 1075014784), new $Int64(413651020, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(989129637, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(409904655, 3870530098), new $Int64(1662989391, 1717789158), new $Int64(1914486492, 1153452491), new $Int64(1157059232, 3948827651), new $Int64(790338018, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(762206335, 1202710438), new $Int64(1582574611, 2072216740), new $Int64(705690639, 2066751068), new $Int64(33900336, 173902580), new $Int64(1405499842, 142459001), new $Int64(172391592, 1889151926), new $Int64(1648540523, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(68662295, 2953948865), new $Int64(1826544975, 4041040923), new $Int64(204965672, 592046130), new $Int64(1441840008, 384297211), new $Int64(95834184, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(444060402, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(1804436145, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(1849156454, 2675874918), new $Int64(316128071, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(1283216186, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(56149435, 306752547), new $Int64(720795581, 2162363077), new $Int64(2090431015, 2767224719), new $Int64(675859549, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(403352367, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(353777175, 1240875658), new $Int64(1232590226, 2577342868), new $Int64(1146185433, 4136853496), new $Int64(670368674, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(1970921600, 371758825), new $Int64(1706420536, 1528834084), new $Int64(2075795018, 1504757260), new $Int64(685663576, 699052551), new $Int64(1641940109, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(), NewSource(new $Int64(0, 1))));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/big"] = (function() {
	var $pkg = {}, $init, binary, errors, fmt, nosync, io, math, rand, strings, Word, Int, nat, divisor, arrayType, structType, sliceType, sliceType$1, ptrType, sliceType$2, ptrType$1, sliceType$3, arrayType$1, ptrType$2, ptrType$4, intOne, natOne, natTwo, karatsubaThreshold, leafSize, cacheBase10, deBruijn32Lookup, deBruijn64Lookup, mulWW, divWW, addVV, subVV, addVW, subVW, shlVU, shrVU, mulAddVWW, addMulVVW, divWVW, bitLen, addWW_g, subWW_g, mulWW_g, mulAddWWW_g, bitLen_g, leadingZeros, divWW_g, addVV_g, subVV_g, addVW_g, subVW_g, shlVU_g, shrVU_g, mulAddVWW_g, addMulVVW_g, divWVW_g, NewInt, charset, writeMultiple, low64, basicMul, karatsubaAdd, karatsubaSub, karatsuba, alias, addAt, max, karatsubaLen, hexValue, divisors, trailingZeroBits, greaterThan;
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	rand = $packages["math/rand"];
	strings = $packages["strings"];
	Word = $pkg.Word = $newType(4, $kindUintptr, "big.Word", "Word", "math/big", null);
	Int = $pkg.Int = $newType(0, $kindStruct, "big.Int", "Int", "math/big", function(neg_, abs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.neg = false;
			this.abs = nat.nil;
			return;
		}
		this.neg = neg_;
		this.abs = abs_;
	});
	nat = $pkg.nat = $newType(12, $kindSlice, "big.nat", "nat", "math/big", null);
	divisor = $pkg.divisor = $newType(0, $kindStruct, "big.divisor", "divisor", "math/big", function(bbb_, nbits_, ndigits_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bbb = nat.nil;
			this.nbits = 0;
			this.ndigits = 0;
			return;
		}
		this.bbb = bbb_;
		this.nbits = nbits_;
		this.ndigits = ndigits_;
	});
	arrayType = $arrayType(divisor, 64);
	structType = $structType([{prop: "Mutex", name: "", pkg: "", typ: nosync.Mutex, tag: ""}, {prop: "table", name: "table", pkg: "math/big", typ: arrayType, tag: ""}]);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType(Word);
	ptrType = $ptrType(Int);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Word);
	sliceType$3 = $sliceType(divisor);
	arrayType$1 = $arrayType(nat, 16);
	ptrType$2 = $ptrType(nat);
	ptrType$4 = $ptrType(rand.Rand);
	mulWW = function(x, y) {
		var $ptr, _tuple, x, y, z0, z1;
		z1 = 0;
		z0 = 0;
		_tuple = mulWW_g(x, y); z1 = _tuple[0]; z0 = _tuple[1];
		return [z1, z0];
	};
	divWW = function(x1, x0, y) {
		var $ptr, _tuple, q, r, x0, x1, y;
		q = 0;
		r = 0;
		_tuple = divWW_g(x1, x0, y); q = _tuple[0]; r = _tuple[1];
		return [q, r];
	};
	addVV = function(z, x, y) {
		var $ptr, c, x, y, z;
		c = 0;
		c = addVV_g(z, x, y);
		return c;
	};
	subVV = function(z, x, y) {
		var $ptr, c, x, y, z;
		c = 0;
		c = subVV_g(z, x, y);
		return c;
	};
	addVW = function(z, x, y) {
		var $ptr, c, x, y, z;
		c = 0;
		c = addVW_g(z, x, y);
		return c;
	};
	subVW = function(z, x, y) {
		var $ptr, c, x, y, z;
		c = 0;
		c = subVW_g(z, x, y);
		return c;
	};
	shlVU = function(z, x, s) {
		var $ptr, c, s, x, z;
		c = 0;
		c = shlVU_g(z, x, s);
		return c;
	};
	shrVU = function(z, x, s) {
		var $ptr, c, s, x, z;
		c = 0;
		c = shrVU_g(z, x, s);
		return c;
	};
	mulAddVWW = function(z, x, y, r) {
		var $ptr, c, r, x, y, z;
		c = 0;
		c = mulAddVWW_g(z, x, y, r);
		return c;
	};
	addMulVVW = function(z, x, y) {
		var $ptr, c, x, y, z;
		c = 0;
		c = addMulVVW_g(z, x, y);
		return c;
	};
	divWVW = function(z, xn, x, y) {
		var $ptr, r, x, xn, y, z;
		r = 0;
		r = divWVW_g(z, xn, x, y);
		return r;
	};
	bitLen = function(x) {
		var $ptr, n, x;
		n = 0;
		n = bitLen_g(x);
		return n;
	};
	addWW_g = function(x, y, c) {
		var $ptr, c, x, y, yc, z0, z1;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x + yc >>> 0;
		if (z0 < x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	subWW_g = function(x, y, c) {
		var $ptr, c, x, y, yc, z0, z1;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x - yc >>> 0;
		if (z0 > x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	mulWW_g = function(x, y) {
		var $ptr, t, w0, w1, w2, x, x0, x1, y, y0, y1, z0, z1;
		z1 = 0;
		z0 = 0;
		x0 = (x & 65535) >>> 0;
		x1 = x >>> 16 >>> 0;
		y0 = (y & 65535) >>> 0;
		y1 = y >>> 16 >>> 0;
		w0 = (((x0 >>> 16 << 16) * y0 >>> 0) + (x0 << 16 >>> 16) * y0) >>> 0;
		t = ((((x1 >>> 16 << 16) * y0 >>> 0) + (x1 << 16 >>> 16) * y0) >>> 0) + (w0 >>> 16 >>> 0) >>> 0;
		w1 = (t & 65535) >>> 0;
		w2 = t >>> 16 >>> 0;
		w1 = w1 + (((((x0 >>> 16 << 16) * y1 >>> 0) + (x0 << 16 >>> 16) * y1) >>> 0)) >>> 0;
		z1 = (((((x1 >>> 16 << 16) * y1 >>> 0) + (x1 << 16 >>> 16) * y1) >>> 0) + w2 >>> 0) + (w1 >>> 16 >>> 0) >>> 0;
		z0 = (((x >>> 16 << 16) * y >>> 0) + (x << 16 >>> 16) * y) >>> 0;
		return [z1, z0];
	};
	mulAddWWW_g = function(x, y, c) {
		var $ptr, _tuple, c, x, y, z0, z1, zz0;
		z1 = 0;
		z0 = 0;
		_tuple = mulWW(x, y); z1 = _tuple[0]; zz0 = _tuple[1];
		z0 = zz0 + c >>> 0;
		if (z0 < zz0) {
			z1 = z1 + (1) >>> 0;
		}
		return [z1, z0];
	};
	bitLen_g = function(x) {
		var $ptr, n, x, y, y$1, y$2, y$3;
		n = 0;
		while (true) {
			if (!(x >= 32768)) { break; }
			n = n + (16) >> 0;
			x = (y = (16), y < 32 ? (x >>> y) : 0) >>> 0;
		}
		if (x >= 128) {
			x = (y$1 = (8), y$1 < 32 ? (x >>> y$1) : 0) >>> 0;
			n = n + (8) >> 0;
		}
		if (x >= 8) {
			x = (y$2 = (4), y$2 < 32 ? (x >>> y$2) : 0) >>> 0;
			n = n + (4) >> 0;
		}
		if (x >= 2) {
			x = (y$3 = (2), y$3 < 32 ? (x >>> y$3) : 0) >>> 0;
			n = n + (2) >> 0;
		}
		if (x >= 1) {
			n = n + (1) >> 0;
		}
		return n;
	};
	leadingZeros = function(x) {
		var $ptr, x;
		return ((32 - bitLen(x) >> 0) >>> 0);
	};
	divWW_g = function(u1, u0, v) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, _tmp$2, _tmp$3, q, q0, q1, r, rhat, s, u0, u1, un0, un1, un10, un21, un32, v, vn0, vn1, y, y$1, y$2, y$3, y$4;
		q = 0;
		r = 0;
		if (u1 >= v) {
			_tmp = 4294967295; _tmp$1 = 4294967295; q = _tmp; r = _tmp$1;
			return [q, r];
		}
		s = leadingZeros(v);
		v = (y = (s), y < 32 ? (v << y) : 0) >>> 0;
		vn1 = v >>> 16 >>> 0;
		vn0 = (v & 65535) >>> 0;
		un32 = (((y$1 = s, y$1 < 32 ? (u1 << y$1) : 0) >>> 0) | ((y$2 = ((32 - s >>> 0)), y$2 < 32 ? (u0 >>> y$2) : 0) >>> 0)) >>> 0;
		un10 = (y$3 = s, y$3 < 32 ? (u0 << y$3) : 0) >>> 0;
		un1 = un10 >>> 16 >>> 0;
		un0 = (un10 & 65535) >>> 0;
		q1 = (_q = un32 / vn1, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un32 - ((((q1 >>> 16 << 16) * vn1 >>> 0) + (q1 << 16 >>> 16) * vn1) >>> 0) >>> 0;
		while (true) {
			if (!(q1 >= 65536 || ((((q1 >>> 16 << 16) * vn0 >>> 0) + (q1 << 16 >>> 16) * vn0) >>> 0) > (((((65536 >>> 16 << 16) * rhat >>> 0) + (65536 << 16 >>> 16) * rhat) >>> 0) + un1 >>> 0))) { break; }
			q1 = q1 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		un21 = (((((un32 >>> 16 << 16) * 65536 >>> 0) + (un32 << 16 >>> 16) * 65536) >>> 0) + un1 >>> 0) - ((((q1 >>> 16 << 16) * v >>> 0) + (q1 << 16 >>> 16) * v) >>> 0) >>> 0;
		q0 = (_q$1 = un21 / vn1, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un21 - ((((q0 >>> 16 << 16) * vn1 >>> 0) + (q0 << 16 >>> 16) * vn1) >>> 0) >>> 0;
		while (true) {
			if (!(q0 >= 65536 || ((((q0 >>> 16 << 16) * vn0 >>> 0) + (q0 << 16 >>> 16) * vn0) >>> 0) > (((((65536 >>> 16 << 16) * rhat >>> 0) + (65536 << 16 >>> 16) * rhat) >>> 0) + un0 >>> 0))) { break; }
			q0 = q0 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		_tmp$2 = ((((q1 >>> 16 << 16) * 65536 >>> 0) + (q1 << 16 >>> 16) * 65536) >>> 0) + q0 >>> 0; _tmp$3 = (y$4 = s, y$4 < 32 ? ((((((((un21 >>> 16 << 16) * 65536 >>> 0) + (un21 << 16 >>> 16) * 65536) >>> 0) + un0 >>> 0) - ((((q0 >>> 16 << 16) * v >>> 0) + (q0 << 16 >>> 16) * v) >>> 0) >>> 0)) >>> y$4) : 0) >>> 0; q = _tmp$2; r = _tmp$3;
		return [q, r];
	};
	addVV_g = function(z, x, y) {
		var $ptr, _i, _ref, _tuple, c, i, x, y, z;
		c = 0;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = addWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]), c); c = _tuple[0]; ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1]);
			_i++;
		}
		return c;
	};
	subVV_g = function(z, x, y) {
		var $ptr, _i, _ref, _tuple, c, i, x, y, z;
		c = 0;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = subWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]), c); c = _tuple[0]; ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1]);
			_i++;
		}
		return c;
	};
	addVW_g = function(z, x, y) {
		var $ptr, _i, _ref, _tuple, c, i, x, y, z;
		c = 0;
		c = y;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = addWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), c, 0); c = _tuple[0]; ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1]);
			_i++;
		}
		return c;
	};
	subVW_g = function(z, x, y) {
		var $ptr, _i, _ref, _tuple, c, i, x, y, z;
		c = 0;
		c = y;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = subWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), c, 0); c = _tuple[0]; ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1]);
			_i++;
		}
		return c;
	};
	shlVU_g = function(z, x, s) {
		var $ptr, c, i, n, nonAsciiName, s, w, w1, x, x$1, x$2, y, y$1, y$2, y$3, z;
		c = 0;
		n = z.$length;
		if (n > 0) {
			nonAsciiName = 32 - s >>> 0;
			w1 = (x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			c = (y = nonAsciiName, y < 32 ? (w1 >>> y) : 0) >>> 0;
			i = n - 1 >> 0;
			while (true) {
				if (!(i > 0)) { break; }
				w = w1;
				w1 = (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$2]));
				((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((y$1 = s, y$1 < 32 ? (w << y$1) : 0) >>> 0) | ((y$2 = nonAsciiName, y$2 < 32 ? (w1 >>> y$2) : 0) >>> 0)) >>> 0);
				i = i - (1) >> 0;
			}
			(0 >= z.$length ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = (y$3 = s, y$3 < 32 ? (w1 << y$3) : 0) >>> 0);
		}
		return c;
	};
	shrVU_g = function(z, x, s) {
		var $ptr, c, i, n, nonAsciiName, s, w, w1, x, x$1, x$2, y, y$1, y$2, y$3, z;
		c = 0;
		n = z.$length;
		if (n > 0) {
			nonAsciiName = 32 - s >>> 0;
			w1 = (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]);
			c = (y = nonAsciiName, y < 32 ? (w1 << y) : 0) >>> 0;
			i = 0;
			while (true) {
				if (!(i < (n - 1 >> 0))) { break; }
				w = w1;
				w1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
				((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((y$1 = s, y$1 < 32 ? (w >>> y$1) : 0) >>> 0) | ((y$2 = nonAsciiName, y$2 < 32 ? (w1 << y$2) : 0) >>> 0)) >>> 0);
				i = i + (1) >> 0;
			}
			(x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + x$2] = (y$3 = s, y$3 < 32 ? (w1 >>> y$3) : 0) >>> 0));
		}
		return c;
	};
	mulAddVWW_g = function(z, x, y, r) {
		var $ptr, _i, _ref, _tuple, c, i, r, x, y, z;
		c = 0;
		c = r;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), y, c); c = _tuple[0]; ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1]);
			_i++;
		}
		return c;
	};
	addMulVVW_g = function(z, x, y) {
		var $ptr, _i, _ref, _tuple, _tuple$1, c, i, x, y, z, z0, z1;
		c = 0;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), y, ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i])); z1 = _tuple[0]; z0 = _tuple[1];
			_tuple$1 = addWW_g(z0, c, 0); c = _tuple$1[0]; ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple$1[1]);
			c = c + (z1) >>> 0;
			_i++;
		}
		return c;
	};
	divWVW_g = function(z, xn, x, y) {
		var $ptr, _tuple, i, r, x, xn, y, z;
		r = 0;
		r = xn;
		i = z.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			_tuple = divWW_g(r, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), y); ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[0]); r = _tuple[1];
			i = i - (1) >> 0;
		}
		return r;
	};
	Int.ptr.prototype.Sign = function() {
		var $ptr, x;
		x = this;
		if (x.abs.$length === 0) {
			return 0;
		}
		if (x.neg) {
			return -1;
		}
		return 1;
	};
	Int.prototype.Sign = function() { return this.$val.Sign(); };
	Int.ptr.prototype.SetInt64 = function(x) {
		var $ptr, neg, x, z;
		z = this;
		neg = false;
		if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
			neg = true;
			x = new $Int64(-x.$high, -x.$low);
		}
		z.abs = z.abs.setUint64(new $Uint64(x.$high, x.$low));
		z.neg = neg;
		return z;
	};
	Int.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Int.ptr.prototype.SetUint64 = function(x) {
		var $ptr, x, z;
		z = this;
		z.abs = z.abs.setUint64(x);
		z.neg = false;
		return z;
	};
	Int.prototype.SetUint64 = function(x) { return this.$val.SetUint64(x); };
	NewInt = function(x) {
		var $ptr, x;
		return new Int.ptr().SetInt64(x);
	};
	$pkg.NewInt = NewInt;
	Int.ptr.prototype.Set = function(x) {
		var $ptr, x, z;
		z = this;
		if (!(z === x)) {
			z.abs = z.abs.set(x.abs);
			z.neg = x.neg;
		}
		return z;
	};
	Int.prototype.Set = function(x) { return this.$val.Set(x); };
	Int.ptr.prototype.Bits = function() {
		var $ptr, x, x$1;
		x = this;
		return (x$1 = x.abs, $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	Int.prototype.Bits = function() { return this.$val.Bits(); };
	Int.ptr.prototype.SetBits = function(abs) {
		var $ptr, abs, z;
		z = this;
		z.abs = $subslice(new nat(abs.$array), abs.$offset, abs.$offset + abs.$length).norm();
		z.neg = false;
		return z;
	};
	Int.prototype.SetBits = function(abs) { return this.$val.SetBits(abs); };
	Int.ptr.prototype.Abs = function(x) {
		var $ptr, x, z;
		z = this;
		z.Set(x);
		z.neg = false;
		return z;
	};
	Int.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Int.ptr.prototype.Neg = function(x) {
		var $ptr, x, z;
		z = this;
		z.Set(x);
		z.neg = z.abs.$length > 0 && !z.neg;
		return z;
	};
	Int.prototype.Neg = function(x) { return this.$val.Neg(x); };
	Int.ptr.prototype.Add = function(x, y) {
		var $ptr, neg, x, y, z;
		z = this;
		neg = x.neg;
		if (x.neg === y.neg) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Int.ptr.prototype.Sub = function(x, y) {
		var $ptr, neg, x, y, z;
		z = this;
		neg = x.neg;
		if (!(x.neg === y.neg)) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Int.ptr.prototype.Mul = function(x, y) {
		var $ptr, x, y, z;
		z = this;
		z.abs = z.abs.mul(x.abs, y.abs);
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Int.ptr.prototype.MulRange = function(a, b) {
		var $ptr, _tmp, _tmp$1, a, b, neg, x, x$1, z;
		z = this;
		if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.SetInt64(new $Int64(0, 1));
		} else if ((a.$high < 0 || (a.$high === 0 && a.$low <= 0)) && (b.$high > 0 || (b.$high === 0 && b.$low >= 0))) {
			return z.SetInt64(new $Int64(0, 0));
		}
		neg = false;
		if ((a.$high < 0 || (a.$high === 0 && a.$low < 0))) {
			neg = (x = (x$1 = new $Int64(b.$high - a.$high, b.$low - a.$low), new $Int64(x$1.$high & 0, (x$1.$low & 1) >>> 0)), (x.$high === 0 && x.$low === 0));
			_tmp = new $Int64(-b.$high, -b.$low); _tmp$1 = new $Int64(-a.$high, -a.$low); a = _tmp; b = _tmp$1;
		}
		z.abs = z.abs.mulRange(new $Uint64(a.$high, a.$low), new $Uint64(b.$high, b.$low));
		z.neg = neg;
		return z;
	};
	Int.prototype.MulRange = function(a, b) { return this.$val.MulRange(a, b); };
	Int.ptr.prototype.Binomial = function(n, k) {
		var $ptr, _tmp, _tmp$1, a, b, k, n, x, z;
		z = this;
		_tmp = $clone(new Int.ptr(), Int); _tmp$1 = $clone(new Int.ptr(), Int); a = $clone(_tmp, Int); b = $clone(_tmp$1, Int);
		a.MulRange((x = new $Int64(n.$high - k.$high, n.$low - k.$low), new $Int64(x.$high + 0, x.$low + 1)), n);
		b.MulRange(new $Int64(0, 1), k);
		return z.Quo(a, b);
	};
	Int.prototype.Binomial = function(n, k) { return this.$val.Binomial(n, k); };
	Int.ptr.prototype.Quo = function(x, y) {
		var $ptr, _tuple, x, y, z;
		z = this;
		_tuple = z.abs.div(nat.nil, x.abs, y.abs); z.abs = _tuple[0];
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	Int.ptr.prototype.Rem = function(x, y) {
		var $ptr, _tuple, x, y, z;
		z = this;
		_tuple = nat.nil.div(z.abs, x.abs, y.abs); z.abs = _tuple[1];
		z.neg = z.abs.$length > 0 && x.neg;
		return z;
	};
	Int.prototype.Rem = function(x, y) { return this.$val.Rem(x, y); };
	Int.ptr.prototype.QuoRem = function(x, y, r) {
		var $ptr, _tmp, _tmp$1, _tuple, r, x, y, z;
		z = this;
		_tuple = z.abs.div(r.abs, x.abs, y.abs); z.abs = _tuple[0]; r.abs = _tuple[1];
		_tmp = z.abs.$length > 0 && !(x.neg === y.neg); _tmp$1 = r.abs.$length > 0 && x.neg; z.neg = _tmp; r.neg = _tmp$1;
		return [z, r];
	};
	Int.prototype.QuoRem = function(x, y, r) { return this.$val.QuoRem(x, y, r); };
	Int.ptr.prototype.Div = function(x, y) {
		var $ptr, r, x, y, y_neg, z;
		z = this;
		y_neg = y.neg;
		r = $clone(new Int.ptr(), Int);
		z.QuoRem(x, y, r);
		if (r.neg) {
			if (y_neg) {
				z.Add(z, intOne);
			} else {
				z.Sub(z, intOne);
			}
		}
		return z;
	};
	Int.prototype.Div = function(x, y) { return this.$val.Div(x, y); };
	Int.ptr.prototype.Mod = function(x, y) {
		var $ptr, q, x, y, y0, z;
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr().Set(y);
		}
		q = $clone(new Int.ptr(), Int);
		q.QuoRem(x, y, z);
		if (z.neg) {
			if (y0.neg) {
				z.Sub(z, y0);
			} else {
				z.Add(z, y0);
			}
		}
		return z;
	};
	Int.prototype.Mod = function(x, y) { return this.$val.Mod(x, y); };
	Int.ptr.prototype.DivMod = function(x, y, m) {
		var $ptr, m, x, y, y0, z;
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr().Set(y);
		}
		z.QuoRem(x, y, m);
		if (m.neg) {
			if (y0.neg) {
				z.Add(z, intOne);
				m.Sub(m, y0);
			} else {
				z.Sub(z, intOne);
				m.Add(m, y0);
			}
		}
		return [z, m];
	};
	Int.prototype.DivMod = function(x, y, m) { return this.$val.DivMod(x, y, m); };
	Int.ptr.prototype.Cmp = function(y) {
		var $ptr, r, x, y;
		r = 0;
		x = this;
		if (x.neg === y.neg) {
			r = x.abs.cmp(y.abs);
			if (x.neg) {
				r = -r;
			}
		} else if (x.neg) {
			r = -1;
		} else {
			r = 1;
		}
		return r;
	};
	Int.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Int.ptr.prototype.String = function() {
		var $ptr, x;
		x = this;
		if (x === ptrType.nil) {
			return "<nil>";
		} else if (x.neg) {
			return "-" + x.abs.decimalString();
		}
		return x.abs.decimalString();
	};
	Int.prototype.String = function() { return this.$val.String(); };
	charset = function(ch) {
		var $ptr, _ref, ch;
		_ref = ch;
		if (_ref === 98) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 2);
		} else if (_ref === 111) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 8);
		} else if (_ref === 100 || _ref === 115 || _ref === 118) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 10);
		} else if (_ref === 120) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 16);
		} else if (_ref === 88) {
			return "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".substring(0, 16);
		}
		return "";
	};
	writeMultiple = function(s, text, count) {
		var $ptr, _r, b, count, s, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; count = $f.count; s = $f.s; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (text.length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (text.length > 0) { */ case 1:
			b = new sliceType($stringToBytes(text));
			/* while (true) { */ case 3:
				/* if (!(count > 0)) { break; } */ if(!(count > 0)) { $s = 4; continue; }
				_r = s.Write(b); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				count = count - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeMultiple }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.count = count; $f.s = s; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.ptr.prototype.Format = function(s, ch) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tuple, _tuple$1, ch, cs, d, digits, left, length, precision, precisionSet, prefix, right, s, sign, width, widthSet, x, zeroes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ch = $f.ch; cs = $f.cs; d = $f.d; digits = $f.digits; left = $f.left; length = $f.length; precision = $f.precision; precisionSet = $f.precisionSet; prefix = $f.prefix; right = $f.right; s = $f.s; sign = $f.sign; width = $f.width; widthSet = $f.widthSet; x = $f.x; zeroes = $f.zeroes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		cs = charset(ch);
		/* */ if (cs === "") { $s = 1; continue; }
		/* */ if (x === ptrType.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (cs === "") { */ case 1:
			_r = fmt.Fprintf(s, "%%!%c(big.Int=%s)", new sliceType$2([new $Int32(ch), new $String(x.String())])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			return;
			$s = 3; continue;
		/* } else if (x === ptrType.nil) { */ case 2:
			_r$1 = fmt.Fprint(s, new sliceType$2([new $String("<nil>")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			return;
		/* } */ case 3:
		sign = "";
		/* */ if (x.neg) { $s = 6; continue; }
		_r$2 = s.Flag(43); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 7; continue; }
		_r$3 = s.Flag(32); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (x.neg) { */ case 6:
			sign = "-";
			$s = 9; continue;
		/* } else if (_r$2) { */ case 7:
			sign = "+";
			$s = 9; continue;
		/* } else if (_r$3) { */ case 8:
			sign = " ";
		/* } */ case 9:
		prefix = "";
		_r$4 = s.Flag(35); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_r$4) { */ case 12:
			_ref = ch;
			if (_ref === 111) {
				prefix = "0";
			} else if (_ref === 120) {
				prefix = "0x";
			} else if (_ref === 88) {
				prefix = "0X";
			}
		/* } */ case 13:
		digits = x.abs.string(cs);
		left = 0;
		zeroes = 0;
		right = 0;
		_r$5 = s.Precision(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple = _r$5; precision = _tuple[0]; precisionSet = _tuple[1];
		if (precisionSet) {
			if (digits.length < precision) {
				zeroes = precision - digits.length >> 0;
			} else if (digits === "0" && (precision === 0)) {
				return;
			}
		}
		length = ((sign.length + prefix.length >> 0) + zeroes >> 0) + digits.length >> 0;
		_r$6 = s.Width(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6; width = _tuple$1[0]; widthSet = _tuple$1[1];
		/* */ if (widthSet && length < width) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (widthSet && length < width) { */ case 17:
			d = width - length >> 0;
			_r$7 = s.Flag(45); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 19; continue; }
			_r$8 = s.Flag(48); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (_r$8 && !precisionSet) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (_r$7) { */ case 19:
				right = d;
				$s = 22; continue;
			/* } else if (_r$8 && !precisionSet) { */ case 20:
				zeroes = d;
				$s = 22; continue;
			/* } else { */ case 21:
				left = d;
			/* } */ case 22:
		/* } */ case 18:
		$r = writeMultiple(s, " ", left); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, sign, 1); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, prefix, 1); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, "0", zeroes); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, digits, 1); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, " ", right); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ch = ch; $f.cs = cs; $f.d = d; $f.digits = digits; $f.left = left; $f.length = length; $f.precision = precision; $f.precisionSet = precisionSet; $f.prefix = prefix; $f.right = right; $f.s = s; $f.sign = sign; $f.width = width; $f.widthSet = widthSet; $f.x = x; $f.zeroes = zeroes; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Format = function(s, ch) { return this.$val.Format(s, ch); };
	Int.ptr.prototype.scan = function(r, base) {
		var $ptr, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, base, ch, err, neg, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; ch = $f.ch; err = $f.err; neg = $f.neg; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = r.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; ch = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, 0, err];
		}
		neg = false;
		_ref = ch;
		/* */ if (_ref === 45) { $s = 2; continue; }
		/* */ if (_ref === 43) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 45) { */ case 2:
			neg = true;
			$s = 5; continue;
		/* } else if (_ref === 43) { */ case 3:
			$s = 5; continue;
		/* } else { */ case 4:
			_r$1 = r.UnreadRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 5:
		_r$2 = z.abs.scan(r, base); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; z.abs = _tuple$1[0]; base = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, base, err];
		}
		z.neg = z.abs.$length > 0 && neg;
		return [z, base, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.scan }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.ch = ch; $f.err = err; $f.neg = neg; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.scan = function(r, base) { return this.$val.scan(r, base); };
	Int.ptr.prototype.Scan = function(s, ch) {
		var $ptr, _r, _ref, _tuple, base, ch, err, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; base = $f.base; ch = $f.ch; err = $f.err; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		$r = s.SkipSpace(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		base = 0;
		_ref = ch;
		if (_ref === 98) {
			base = 2;
		} else if (_ref === 111) {
			base = 8;
		} else if (_ref === 100) {
			base = 10;
		} else if (_ref === 120 || _ref === 88) {
			base = 16;
		} else if (_ref === 115 || _ref === 118) {
		} else {
			return errors.New("Int.Scan: invalid verb");
		}
		_r = z.scan(s, base); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; err = _tuple[2];
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Scan }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.base = base; $f.ch = ch; $f.err = err; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	low64 = function(z) {
		var $ptr, v, x, x$1, x$2, z;
		if (z.$length === 0) {
			return new $Uint64(0, 0);
		}
		v = (x = (0 >= z.$length ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0]), new $Uint64(0, x.constructor === Number ? x : 1));
		if (true && z.$length > 1) {
			v = (x$1 = $shiftLeft64((x$2 = (1 >= z.$length ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1]), new $Uint64(0, x$2.constructor === Number ? x$2 : 1)), 32), new $Uint64(v.$high | x$1.$high, (v.$low | x$1.$low) >>> 0));
		}
		return v;
	};
	Int.ptr.prototype.Int64 = function() {
		var $ptr, v, x, x$1;
		x = this;
		v = (x$1 = low64(x.abs), new $Int64(x$1.$high, x$1.$low));
		if (x.neg) {
			v = new $Int64(-v.$high, -v.$low);
		}
		return v;
	};
	Int.prototype.Int64 = function() { return this.$val.Int64(); };
	Int.ptr.prototype.Uint64 = function() {
		var $ptr, x;
		x = this;
		return low64(x.abs);
	};
	Int.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Int.ptr.prototype.SetString = function(s, base) {
		var $ptr, _r, _tuple, _tuple$1, base, err, r, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; r = $f.r; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		r = strings.NewReader(s);
		_r = z.scan(r, base); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, false];
		}
		_tuple$1 = r.ReadRune(); err = _tuple$1[2];
		if (!($interfaceIsEqual(err, io.EOF))) {
			return [ptrType.nil, false];
		}
		return [z, true];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.SetString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.r = r; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.SetString = function(s, base) { return this.$val.SetString(s, base); };
	Int.ptr.prototype.SetBytes = function(buf) {
		var $ptr, buf, z;
		z = this;
		z.abs = z.abs.setBytes(buf);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBytes = function(buf) { return this.$val.SetBytes(buf); };
	Int.ptr.prototype.Bytes = function() {
		var $ptr, buf, x;
		x = this;
		buf = $makeSlice(sliceType, (x.abs.$length * 4 >> 0));
		return $subslice(buf, x.abs.bytes(buf));
	};
	Int.prototype.Bytes = function() { return this.$val.Bytes(); };
	Int.ptr.prototype.BitLen = function() {
		var $ptr, x;
		x = this;
		return x.abs.bitLen();
	};
	Int.prototype.BitLen = function() { return this.$val.BitLen(); };
	Int.ptr.prototype.Exp = function(x, y, m) {
		var $ptr, m, mWords, x, y, yWords, z;
		z = this;
		yWords = nat.nil;
		if (!y.neg) {
			yWords = y.abs;
		}
		mWords = nat.nil;
		if (!(m === ptrType.nil)) {
			mWords = m.abs;
		}
		z.abs = z.abs.expNN(x.abs, yWords, mWords);
		z.neg = z.abs.$length > 0 && x.neg && yWords.$length > 0 && ((((0 >= yWords.$length ? $throwRuntimeError("index out of range") : yWords.$array[yWords.$offset + 0]) & 1) >>> 0) === 1);
		if (z.neg && mWords.$length > 0) {
			z.abs = z.abs.sub(mWords, z.abs);
			z.neg = false;
		}
		return z;
	};
	Int.prototype.Exp = function(x, y, m) { return this.$val.Exp(x, y, m); };
	Int.ptr.prototype.GCD = function(x, y, a, b) {
		var $ptr, A, B, X, Y, _tmp, _tmp$1, _tuple, a, b, lastX, lastY, q, r, temp, x, y, z;
		z = this;
		if (a.Sign() <= 0 || b.Sign() <= 0) {
			z.SetInt64(new $Int64(0, 0));
			if (!(x === ptrType.nil)) {
				x.SetInt64(new $Int64(0, 0));
			}
			if (!(y === ptrType.nil)) {
				y.SetInt64(new $Int64(0, 0));
			}
			return z;
		}
		if (x === ptrType.nil && y === ptrType.nil) {
			return z.binaryGCD(a, b);
		}
		A = new Int.ptr().Set(a);
		B = new Int.ptr().Set(b);
		X = new Int.ptr();
		Y = new Int.ptr().SetInt64(new $Int64(0, 1));
		lastX = new Int.ptr().SetInt64(new $Int64(0, 1));
		lastY = new Int.ptr();
		q = new Int.ptr();
		temp = new Int.ptr();
		while (true) {
			if (!(B.abs.$length > 0)) { break; }
			r = new Int.ptr();
			_tuple = q.QuoRem(A, B, r); q = _tuple[0]; r = _tuple[1];
			_tmp = B; _tmp$1 = r; A = _tmp; B = _tmp$1;
			temp.Set(X);
			X.Mul(X, q);
			X.neg = !X.neg;
			X.Add(X, lastX);
			lastX.Set(temp);
			temp.Set(Y);
			Y.Mul(Y, q);
			Y.neg = !Y.neg;
			Y.Add(Y, lastY);
			lastY.Set(temp);
		}
		if (!(x === ptrType.nil)) {
			$copy(x, lastX, Int);
		}
		if (!(y === ptrType.nil)) {
			$copy(y, lastY, Int);
		}
		$copy(z, A, Int);
		return z;
	};
	Int.prototype.GCD = function(x, y, a, b) { return this.$val.GCD(x, y, a, b); };
	Int.ptr.prototype.binaryGCD = function(a, b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, k, t, u, v, vk, x, z;
		z = this;
		u = z;
		v = new Int.ptr();
		if (a.abs.$length > b.abs.$length) {
			u.Set(b);
			v.Rem(a, b);
		} else if (a.abs.$length < b.abs.$length) {
			u.Set(a);
			v.Rem(b, a);
		} else {
			u.Set(a);
			v.Set(b);
		}
		if (v.abs.$length === 0) {
			return u;
		}
		k = u.abs.trailingZeroBits();
		vk = v.abs.trailingZeroBits();
		if (vk < k) {
			k = vk;
		}
		u.Rsh(u, k);
		v.Rsh(v, k);
		t = new Int.ptr();
		if (!(((((x = u.abs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) & 1) >>> 0) === 0))) {
			t.Neg(v);
		} else {
			t.Set(u);
		}
		while (true) {
			if (!(t.abs.$length > 0)) { break; }
			t.Rsh(t, t.abs.trailingZeroBits());
			if (t.neg) {
				_tmp = t; _tmp$1 = v; v = _tmp; t = _tmp$1;
				v.neg = v.abs.$length > 0 && !v.neg;
			} else {
				_tmp$2 = t; _tmp$3 = u; u = _tmp$2; t = _tmp$3;
			}
			t.Sub(u, v);
		}
		return z.Lsh(u, k);
	};
	Int.prototype.binaryGCD = function(a, b) { return this.$val.binaryGCD(a, b); };
	Int.ptr.prototype.ProbablyPrime = function(n) {
		var $ptr, _r, _v, n, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; n = $f.n; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (!(!x.neg)) { _v = false; $s = 1; continue s; }
		_r = x.abs.probablyPrime(n); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.ProbablyPrime }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.n = n; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.ProbablyPrime = function(n) { return this.$val.ProbablyPrime(n); };
	Int.ptr.prototype.Rand = function(rnd, n) {
		var $ptr, _r, n, rnd, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; rnd = $f.rnd; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.neg = false;
		if (n.neg || (n.abs.$length === 0)) {
			z.abs = nat.nil;
			return z;
		}
		_r = z.abs.random(rnd, n.abs, n.abs.bitLen()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.abs = _r;
		return z;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Rand }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.rnd = rnd; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Rand = function(rnd, n) { return this.$val.Rand(rnd, n); };
	Int.ptr.prototype.ModInverse = function(g, n) {
		var $ptr, d, g, n, z;
		z = this;
		d = $clone(new Int.ptr(), Int);
		d.GCD(z, ptrType.nil, g, n);
		if (z.neg) {
			z.Add(z, n);
		}
		return z;
	};
	Int.prototype.ModInverse = function(g, n) { return this.$val.ModInverse(g, n); };
	Int.ptr.prototype.Lsh = function(x, n) {
		var $ptr, n, x, z;
		z = this;
		z.abs = z.abs.shl(x.abs, n);
		z.neg = x.neg;
		return z;
	};
	Int.prototype.Lsh = function(x, n) { return this.$val.Lsh(x, n); };
	Int.ptr.prototype.Rsh = function(x, n) {
		var $ptr, n, t, x, z;
		z = this;
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.shr(t, n);
			z.abs = t.add(t, natOne);
			z.neg = true;
			return z;
		}
		z.abs = z.abs.shr(x.abs, n);
		z.neg = false;
		return z;
	};
	Int.prototype.Rsh = function(x, n) { return this.$val.Rsh(x, n); };
	Int.ptr.prototype.Bit = function(i) {
		var $ptr, i, t, x, x$1;
		x = this;
		if (i === 0) {
			if (x.abs.$length > 0) {
				return ((((x$1 = x.abs, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) >>> 0);
			}
			return 0;
		}
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = nat.nil.sub(x.abs, natOne);
			return (t.bit((i >>> 0)) ^ 1) >>> 0;
		}
		return x.abs.bit((i >>> 0));
	};
	Int.prototype.Bit = function(i) { return this.$val.Bit(i); };
	Int.ptr.prototype.SetBit = function(x, i, b) {
		var $ptr, b, i, t, x, z;
		z = this;
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.setBit(t, (i >>> 0), (b ^ 1) >>> 0);
			z.abs = t.add(t, natOne);
			z.neg = z.abs.$length > 0;
			return z;
		}
		z.abs = z.abs.setBit(x.abs, (i >>> 0), b);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBit = function(x, i, b) { return this.$val.SetBit(x, i, b); };
	Int.ptr.prototype.And = function(x, y) {
		var $ptr, _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.or(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.and(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y; _tmp$1 = x; x = _tmp; y = _tmp$1;
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.andNot(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.And = function(x, y) { return this.$val.And(x, y); };
	Int.ptr.prototype.AndNot = function(x, y) {
		var $ptr, x, x1, x1$1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.andNot(y1, x1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.andNot(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			x1$1 = nat.nil.sub(x.abs, natOne);
			z.abs = z.abs.add(z.abs.or(x1$1, y.abs), natOne);
			z.neg = true;
			return z;
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.and(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.AndNot = function(x, y) { return this.$val.AndNot(x, y); };
	Int.ptr.prototype.Or = function(x, y) {
		var $ptr, _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.and(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.or(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y; _tmp$1 = x; x = _tmp; y = _tmp$1;
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.andNot(y1$1, x.abs), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Or = function(x, y) { return this.$val.Or(x, y); };
	Int.ptr.prototype.Xor = function(x, y) {
		var $ptr, _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.xor(x1, y1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.xor(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y; _tmp$1 = x; x = _tmp; y = _tmp$1;
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.xor(x.abs, y1$1), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Xor = function(x, y) { return this.$val.Xor(x, y); };
	Int.ptr.prototype.Not = function(x) {
		var $ptr, x, z;
		z = this;
		if (x.neg) {
			z.abs = z.abs.sub(x.abs, natOne);
			z.neg = false;
			return z;
		}
		z.abs = z.abs.add(x.abs, natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Not = function(x) { return this.$val.Not(x); };
	Int.ptr.prototype.GobEncode = function() {
		var $ptr, b, buf, i, x;
		x = this;
		if (x === ptrType.nil) {
			return [sliceType.nil, $ifaceNil];
		}
		buf = $makeSlice(sliceType, (1 + (x.abs.$length * 4 >> 0) >> 0));
		i = x.abs.bytes(buf) - 1 >> 0;
		b = 2;
		if (x.neg) {
			b = (b | (1)) >>> 0;
		}
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = b);
		return [$subslice(buf, i), $ifaceNil];
	};
	Int.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Int.ptr.prototype.GobDecode = function(buf) {
		var $ptr, _r, _r$1, b, buf, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; b = $f.b; buf = $f.buf; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			$copy(z, new Int.ptr(false, nat.nil), Int);
			return $ifaceNil;
		}
		b = (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]);
		/* */ if (!(((b >>> 1 << 24 >>> 24) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((b >>> 1 << 24 >>> 24) === 1))) { */ case 1:
			_r = fmt.Sprintf("Int.GobDecode: encoding version %d not supported", new sliceType$2([new $Uint8((b >>> 1 << 24 >>> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = errors.New(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
		/* } */ case 2:
		z.neg = !((((b & 1) >>> 0) === 0));
		z.abs = z.abs.setBytes($subslice(buf, 1));
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.buf = buf; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Int.ptr.prototype.MarshalJSON = function() {
		var $ptr, z;
		z = this;
		return [new sliceType($stringToBytes(z.String())), $ifaceNil];
	};
	Int.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Int.ptr.prototype.UnmarshalJSON = function(text) {
		var $ptr, _r, _r$1, _tuple, ok, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; ok = $f.ok; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.SetString($bytesToString(text), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$1 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Int", new sliceType$2([text])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
		/* } */ case 3:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.ok = ok; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.UnmarshalJSON = function(text) { return this.$val.UnmarshalJSON(text); };
	Int.ptr.prototype.MarshalText = function() {
		var $ptr, _tmp, _tmp$1, err, text, z;
		text = sliceType.nil;
		err = $ifaceNil;
		z = this;
		_tmp = new sliceType($stringToBytes(z.String())); _tmp$1 = $ifaceNil; text = _tmp; err = _tmp$1;
		return [text, err];
	};
	Int.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Int.ptr.prototype.UnmarshalText = function(text) {
		var $ptr, _r, _r$1, _tuple, ok, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; ok = $f.ok; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.SetString($bytesToString(text), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$1 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Int", new sliceType$2([text])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
		/* } */ case 3:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.ok = ok; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	nat.prototype.clear = function() {
		var $ptr, _i, _ref, i, z;
		z = this;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = 0);
			_i++;
		}
	};
	$ptrType(nat).prototype.clear = function() { return this.$get().clear(); };
	nat.prototype.norm = function() {
		var $ptr, i, x, z;
		z = this;
		i = z.$length;
		while (true) {
			if (!(i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + x])) === 0))) { break; }
			i = i - (1) >> 0;
		}
		return $subslice(z, 0, i);
	};
	$ptrType(nat).prototype.norm = function() { return this.$get().norm(); };
	nat.prototype.make = function(n) {
		var $ptr, n, z;
		z = this;
		if (n <= z.$capacity) {
			return $subslice(z, 0, n);
		}
		return $makeSlice(nat, n, (n + 4 >> 0));
	};
	$ptrType(nat).prototype.make = function(n) { return this.$get().make(n); };
	nat.prototype.setWord = function(x) {
		var $ptr, x, z;
		z = this;
		if (x === 0) {
			return z.make(0);
		}
		z = z.make(1);
		(0 >= z.$length ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = x);
		return z;
	};
	$ptrType(nat).prototype.setWord = function(x) { return this.$get().setWord(x); };
	nat.prototype.setUint64 = function(x) {
		var $ptr, _i, _ref, i, n, t, w, x, x$1, z;
		z = this;
		w = (x.$low >>> 0);
		if ((x$1 = new $Uint64(0, w.constructor === Number ? w : 1), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			return z.setWord(w);
		}
		n = 0;
		t = x;
		while (true) {
			if (!((t.$high > 0 || (t.$high === 0 && t.$low > 0)))) { break; }
			n = n + (1) >> 0;
			t = $shiftRightUint64(t, (32));
		}
		z = z.make(n);
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (new $Uint64(x.$high & 0, (x.$low & 4294967295) >>> 0).$low >>> 0));
			x = $shiftRightUint64(x, (32));
			_i++;
		}
		return z;
	};
	$ptrType(nat).prototype.setUint64 = function(x) { return this.$get().setUint64(x); };
	nat.prototype.set = function(x) {
		var $ptr, x, z;
		z = this;
		z = z.make(x.$length);
		$copySlice(z, x);
		return z;
	};
	$ptrType(nat).prototype.set = function(x) { return this.$get().set(x); };
	nat.prototype.add = function(x, y) {
		var $ptr, c, m, n, x, x$1, x$2, x$3, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.add(y, x);
		} else if (m === 0) {
			return z.make(0);
		} else if (n === 0) {
			return z.set(x);
		}
		z = z.make(m + 1 >> 0);
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length), $subslice(new sliceType$1(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = addVW((x$2 = $subslice(z, n, m), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		((m < 0 || m >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + m] = c);
		return z.norm();
	};
	$ptrType(nat).prototype.add = function(x, y) { return this.$get().add(x, y); };
	nat.prototype.sub = function(x, y) {
		var $ptr, c, m, n, x, x$1, x$2, x$3, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			$panic(new $String("underflow"));
		} else if (m === 0) {
			return z.make(0);
		} else if (n === 0) {
			return z.set(x);
		}
		z = z.make(m);
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length), $subslice(new sliceType$1(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = subVW((x$2 = $subslice(z, n), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		if (!((c === 0))) {
			$panic(new $String("underflow"));
		}
		return z.norm();
	};
	$ptrType(nat).prototype.sub = function(x, y) { return this.$get().sub(x, y); };
	nat.prototype.cmp = function(y) {
		var $ptr, i, m, n, r, x, y;
		r = 0;
		x = this;
		m = x.$length;
		n = y.$length;
		if (!((m === n)) || (m === 0)) {
			if (m < n) {
				r = -1;
			} else if (m > n) {
				r = 1;
			}
			return r;
		}
		i = m - 1 >> 0;
		while (true) {
			if (!(i > 0 && (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) === ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])))) { break; }
			i = i - (1) >> 0;
		}
		if (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) < ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) {
			r = -1;
		} else if (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) > ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) {
			r = 1;
		}
		return r;
	};
	$ptrType(nat).prototype.cmp = function(y) { return this.$get().cmp(y); };
	nat.prototype.mulAddWW = function(x, y, r) {
		var $ptr, m, r, x, x$1, y, z;
		z = this;
		m = x.$length;
		if ((m === 0) || (y === 0)) {
			return z.setWord(r);
		}
		z = z.make(m + 1 >> 0);
		((m < 0 || m >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + m] = mulAddVWW((x$1 = $subslice(z, 0, m), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length), y, r));
		return z.norm();
	};
	$ptrType(nat).prototype.mulAddWW = function(x, y, r) { return this.$get().mulAddWW(x, y, r); };
	basicMul = function(z, x, y) {
		var $ptr, _i, _ref, d, i, x, x$1, x$2, y, z;
		$subslice(z, 0, (x.$length + y.$length >> 0)).clear();
		_ref = y;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((d === 0))) {
				(x$2 = x.$length + i >> 0, ((x$2 < 0 || x$2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + x$2] = addMulVVW((x$1 = $subslice(z, i, (i + x.$length >> 0)), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length), d)));
			}
			_i++;
		}
	};
	karatsubaAdd = function(z, x, n) {
		var $ptr, c, n, x, x$1, x$2, x$3, z;
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			addVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsubaSub = function(z, x, n) {
		var $ptr, c, n, x, x$1, x$2, x$3, z;
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			subVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsuba = function(z, x, y) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, n, n2, p, r, s, x, x0, x1, xd, y, y0, y1, yd, z;
		n = y.$length;
		if (!(((n & 1) === 0)) || n < karatsubaThreshold || n < 2) {
			basicMul(z, x, y);
			return;
		}
		n2 = n >> 1 >> 0;
		_tmp = $subslice(x, n2); _tmp$1 = $subslice(x, 0, n2); x1 = _tmp; x0 = _tmp$1;
		_tmp$2 = $subslice(y, n2); _tmp$3 = $subslice(y, 0, n2); y1 = _tmp$2; y0 = _tmp$3;
		karatsuba(z, x0, y0);
		karatsuba($subslice(z, n), x1, y1);
		s = 1;
		xd = $subslice(z, (2 * n >> 0), ((2 * n >> 0) + n2 >> 0));
		if (!((subVV($subslice(new sliceType$1(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new sliceType$1(x1.$array), x1.$offset, x1.$offset + x1.$length), $subslice(new sliceType$1(x0.$array), x0.$offset, x0.$offset + x0.$length)) === 0))) {
			s = -s;
			subVV($subslice(new sliceType$1(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new sliceType$1(x0.$array), x0.$offset, x0.$offset + x0.$length), $subslice(new sliceType$1(x1.$array), x1.$offset, x1.$offset + x1.$length));
		}
		yd = $subslice(z, ((2 * n >> 0) + n2 >> 0), (3 * n >> 0));
		if (!((subVV($subslice(new sliceType$1(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new sliceType$1(y0.$array), y0.$offset, y0.$offset + y0.$length), $subslice(new sliceType$1(y1.$array), y1.$offset, y1.$offset + y1.$length)) === 0))) {
			s = -s;
			subVV($subslice(new sliceType$1(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new sliceType$1(y1.$array), y1.$offset, y1.$offset + y1.$length), $subslice(new sliceType$1(y0.$array), y0.$offset, y0.$offset + y0.$length));
		}
		p = $subslice(z, (n * 3 >> 0));
		karatsuba(p, xd, yd);
		r = $subslice(z, (n * 4 >> 0));
		$copySlice(r, $subslice(z, 0, (n * 2 >> 0)));
		karatsubaAdd($subslice(z, n2), r, n);
		karatsubaAdd($subslice(z, n2), $subslice(r, n), n);
		if (s > 0) {
			karatsubaAdd($subslice(z, n2), p, n);
		} else {
			karatsubaSub($subslice(z, n2), p, n);
		}
	};
	alias = function(x, y) {
		var $ptr, x, x$1, x$2, y;
		return x.$capacity > 0 && y.$capacity > 0 && (x$1 = $subslice(x, 0, x.$capacity), $indexPtr(x$1.$array, x$1.$offset + (x.$capacity - 1 >> 0), ptrType$1)) === (x$2 = $subslice(y, 0, y.$capacity), $indexPtr(x$2.$array, x$2.$offset + (y.$capacity - 1 >> 0), ptrType$1));
	};
	addAt = function(z, x, i) {
		var $ptr, c, i, j, n, x, x$1, x$2, x$3, x$4, z;
		n = x.$length;
		if (n > 0) {
			c = addVV((x$1 = $subslice(z, i, (i + n >> 0)), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (x$2 = $subslice(z, i), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));
			if (!((c === 0))) {
				j = i + n >> 0;
				if (j < z.$length) {
					addVW((x$3 = $subslice(z, j), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = $subslice(z, j), $subslice(new sliceType$1(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), c);
				}
			}
		}
	};
	max = function(x, y) {
		var $ptr, x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	karatsubaLen = function(n) {
		var $ptr, i, n, y;
		i = 0;
		while (true) {
			if (!(n > karatsubaThreshold)) { break; }
			n = (n >> $min((1), 31)) >> 0;
			i = i + (1) >>> 0;
		}
		return (y = i, y < 32 ? (n << y) : 0) >> 0;
	};
	nat.prototype.mul = function(x, y) {
		var $ptr, i, k, m, n, t, x, x0, x0$1, xi, y, y0, y0$1, y1, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.mul(y, x);
		} else if ((m === 0) || (n === 0)) {
			return z.make(0);
		} else if (n === 1) {
			return z.mulAddWW(x, (0 >= y.$length ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0]), 0);
		}
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if (n < karatsubaThreshold) {
			z = z.make(m + n >> 0);
			basicMul(z, x, y);
			return z.norm();
		}
		k = karatsubaLen(n);
		x0 = $subslice(x, 0, k);
		y0 = $subslice(y, 0, k);
		z = z.make(max(6 * k >> 0, m + n >> 0));
		karatsuba(z, x0, y0);
		z = $subslice(z, 0, (m + n >> 0));
		$subslice(z, (2 * k >> 0)).clear();
		if (k < n || !((m === n))) {
			t = nat.nil;
			x0$1 = x0.norm();
			y1 = $subslice(y, k);
			t = t.mul(x0$1, y1);
			addAt(z, t, k);
			y0$1 = y0.norm();
			i = k;
			while (true) {
				if (!(i < x.$length)) { break; }
				xi = $subslice(x, i);
				if (xi.$length > k) {
					xi = $subslice(xi, 0, k);
				}
				xi = xi.norm();
				t = t.mul(xi, y0$1);
				addAt(z, t, i);
				t = t.mul(xi, y1);
				addAt(z, t, i + k >> 0);
				i = i + (k) >> 0;
			}
		}
		return z.norm();
	};
	$ptrType(nat).prototype.mul = function(x, y) { return this.$get().mul(x, y); };
	nat.prototype.mulRange = function(a, b) {
		var $ptr, a, b, m, x, z;
		z = this;
		if ((a.$high === 0 && a.$low === 0)) {
			return z.setUint64(new $Uint64(0, 0));
		} else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.setUint64(new $Uint64(0, 1));
		} else if ((a.$high === b.$high && a.$low === b.$low)) {
			return z.setUint64(a);
		} else if ((x = new $Uint64(a.$high + 0, a.$low + 1), (x.$high === b.$high && x.$low === b.$low))) {
			return z.mul(nat.nil.setUint64(a), nat.nil.setUint64(b));
		}
		m = $div64((new $Uint64(a.$high + b.$high, a.$low + b.$low)), new $Uint64(0, 2), false);
		return z.mul(nat.nil.mulRange(a, m), nat.nil.mulRange(new $Uint64(m.$high + 0, m.$low + 1), b));
	};
	$ptrType(nat).prototype.mulRange = function(a, b) { return this.$get().mulRange(a, b); };
	nat.prototype.divW = function(x, y) {
		var $ptr, m, q, r, x, y, z;
		q = nat.nil;
		r = 0;
		z = this;
		m = x.$length;
		if (y === 0) {
			$panic(new $String("division by zero"));
		} else if (y === 1) {
			q = z.set(x);
			return [q, r];
		} else if (m === 0) {
			q = z.make(0);
			return [q, r];
		}
		z = z.make(m);
		r = divWVW($subslice(new sliceType$1(z.$array), z.$offset, z.$offset + z.$length), 0, $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length), y);
		q = z.norm();
		return [q, r];
	};
	$ptrType(nat).prototype.divW = function(x, y) { return this.$get().divW(x, y); };
	nat.prototype.div = function(z2, u, v) {
		var $ptr, _tuple, _tuple$1, q, r, r2, u, v, z, z2;
		q = nat.nil;
		r = nat.nil;
		z = this;
		if (v.$length === 0) {
			$panic(new $String("division by zero"));
		}
		if (u.cmp(v) < 0) {
			q = z.make(0);
			r = z2.set(u);
			return [q, r];
		}
		if (v.$length === 1) {
			r2 = 0;
			_tuple = z.divW(u, (0 >= v.$length ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0])); q = _tuple[0]; r2 = _tuple[1];
			r = z2.setWord(r2);
			return [q, r];
		}
		_tuple$1 = z.divLarge(z2, u, v); q = _tuple$1[0]; r = _tuple$1[1];
		return [q, r];
	};
	$ptrType(nat).prototype.div = function(z2, u, v) { return this.$get().div(z2, u, v); };
	nat.prototype.divLarge = function(u, uIn, v) {
		var $ptr, _index, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, c, c$1, j, m, n, prevRhat, q, qhat, qhatv, r, rhat, shift, u, uIn, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x2, z;
		q = nat.nil;
		r = nat.nil;
		z = this;
		n = v.$length;
		m = uIn.$length - n >> 0;
		if (alias(z, uIn) || alias(z, v)) {
			z = nat.nil;
		}
		q = z.make(m + 1 >> 0);
		qhatv = $makeSlice(nat, (n + 1 >> 0));
		if (alias(u, uIn) || alias(u, v)) {
			u = nat.nil;
		}
		u = u.make(uIn.$length + 1 >> 0);
		u.clear();
		shift = leadingZeros((x = n - 1 >> 0, ((x < 0 || x >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x])));
		if (shift > 0) {
			v1 = $makeSlice(nat, n);
			shlVU($subslice(new sliceType$1(v1.$array), v1.$offset, v1.$offset + v1.$length), $subslice(new sliceType$1(v.$array), v.$offset, v.$offset + v.$length), shift);
			v = v1;
		}
		(x$2 = uIn.$length, ((x$2 < 0 || x$2 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$2] = shlVU((x$1 = $subslice(u, 0, uIn.$length), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(uIn.$array), uIn.$offset, uIn.$offset + uIn.$length), shift)));
		j = m;
		while (true) {
			if (!(j >= 0)) { break; }
			qhat = 4294967295;
			if (!(((x$3 = j + n >> 0, ((x$3 < 0 || x$3 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$3])) === (x$4 = n - 1 >> 0, ((x$4 < 0 || x$4 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$4]))))) {
				rhat = 0;
				_tuple = divWW((x$5 = j + n >> 0, ((x$5 < 0 || x$5 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$5])), (x$6 = (j + n >> 0) - 1 >> 0, ((x$6 < 0 || x$6 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$6])), (x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$7]))); qhat = _tuple[0]; rhat = _tuple[1];
				_tuple$1 = mulWW(qhat, (x$8 = n - 2 >> 0, ((x$8 < 0 || x$8 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$8]))); x1 = _tuple$1[0]; x2 = _tuple$1[1];
				while (true) {
					if (!(greaterThan(x1, x2, rhat, (x$9 = (j + n >> 0) - 2 >> 0, ((x$9 < 0 || x$9 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$9]))))) { break; }
					qhat = qhat - (1) >>> 0;
					prevRhat = rhat;
					rhat = rhat + ((x$10 = n - 1 >> 0, ((x$10 < 0 || x$10 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$10]))) >>> 0;
					if (rhat < prevRhat) {
						break;
					}
					_tuple$2 = mulWW(qhat, (x$11 = n - 2 >> 0, ((x$11 < 0 || x$11 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$11]))); x1 = _tuple$2[0]; x2 = _tuple$2[1];
				}
			}
			((n < 0 || n >= qhatv.$length) ? $throwRuntimeError("index out of range") : qhatv.$array[qhatv.$offset + n] = mulAddVWW((x$12 = $subslice(qhatv, 0, n), $subslice(new sliceType$1(x$12.$array), x$12.$offset, x$12.$offset + x$12.$length)), $subslice(new sliceType$1(v.$array), v.$offset, v.$offset + v.$length), qhat, 0));
			c = subVV((x$13 = $subslice(u, j, (j + qhatv.$length >> 0)), $subslice(new sliceType$1(x$13.$array), x$13.$offset, x$13.$offset + x$13.$length)), (x$14 = $subslice(u, j), $subslice(new sliceType$1(x$14.$array), x$14.$offset, x$14.$offset + x$14.$length)), $subslice(new sliceType$1(qhatv.$array), qhatv.$offset, qhatv.$offset + qhatv.$length));
			if (!((c === 0))) {
				c$1 = addVV((x$15 = $subslice(u, j, (j + n >> 0)), $subslice(new sliceType$1(x$15.$array), x$15.$offset, x$15.$offset + x$15.$length)), (x$16 = $subslice(u, j), $subslice(new sliceType$1(x$16.$array), x$16.$offset, x$16.$offset + x$16.$length)), $subslice(new sliceType$1(v.$array), v.$offset, v.$offset + v.$length));
				_index = j + n >> 0;
				((_index < 0 || _index >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + _index] = ((_index < 0 || _index >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + _index]) + (c$1) >>> 0);
				qhat = qhat - (1) >>> 0;
			}
			((j < 0 || j >= q.$length) ? $throwRuntimeError("index out of range") : q.$array[q.$offset + j] = qhat);
			j = j - (1) >> 0;
		}
		q = q.norm();
		shrVU($subslice(new sliceType$1(u.$array), u.$offset, u.$offset + u.$length), $subslice(new sliceType$1(u.$array), u.$offset, u.$offset + u.$length), shift);
		r = u.norm();
		_tmp = q; _tmp$1 = r; q = _tmp; r = _tmp$1;
		return [q, r];
	};
	$ptrType(nat).prototype.divLarge = function(u, uIn, v) { return this.$get().divLarge(u, uIn, v); };
	nat.prototype.bitLen = function() {
		var $ptr, i, x;
		x = this;
		i = x.$length - 1 >> 0;
		if (i >= 0) {
			return (i * 32 >> 0) + bitLen(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) >> 0;
		}
		return 0;
	};
	$ptrType(nat).prototype.bitLen = function() { return this.$get().bitLen(); };
	hexValue = function(ch) {
		var $ptr, ch, d;
		d = 37;
		if (48 <= ch && ch <= 57) {
			d = ((ch - 48 >> 0) >> 0);
		} else if (97 <= ch && ch <= 122) {
			d = (((ch - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= ch && ch <= 90) {
			d = (((ch - 65 >> 0) + 10 >> 0) >> 0);
		}
		return (d >>> 0);
	};
	nat.prototype.scan = function(r, base) {
		var $ptr, _q, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, b, base, bb, ch, d, dd, err, max$1, r, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; b = $f.b; base = $f.base; bb = $f.bb; ch = $f.ch; d = $f.d; dd = $f.dd; err = $f.err; max$1 = $f.max$1; r = $f.r; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (base < 0 || (base === 1) || 36 < base) {
			return [z, 0, errors.New("illegal number base")];
		}
		_r = r.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; ch = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [z, 0, err];
		}
		b = (base >>> 0);
		/* */ if (base === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (base === 0) { */ case 2:
			b = 10;
			/* */ if (ch === 48) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (ch === 48) { */ case 4:
				_r$1 = r.ReadRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1; ch = _tuple$1[0]; err = _tuple$1[2];
				_ref = err;
				/* */ if ($interfaceIsEqual(_ref, $ifaceNil)) { $s = 7; continue; }
				/* */ if ($interfaceIsEqual(_ref, io.EOF)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ($interfaceIsEqual(_ref, $ifaceNil)) { */ case 7:
					b = 8;
					_ref$1 = ch;
					if (_ref$1 === 120 || _ref$1 === 88) {
						b = 16;
					} else if (_ref$1 === 98 || _ref$1 === 66) {
						b = 2;
					}
					/* */ if ((b === 2) || (b === 16)) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if ((b === 2) || (b === 16)) { */ case 11:
						_r$2 = r.ReadRune(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_tuple$2 = _r$2; ch = _tuple$2[0]; err = _tuple$2[2];
						/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 14:
							return [z, 0, err];
						/* } */ case 15:
					/* } */ case 12:
					$s = 10; continue;
				/* } else if ($interfaceIsEqual(_ref, io.EOF)) { */ case 8:
					return [z.make(0), 10, $ifaceNil];
					$s = 10; continue;
				/* } else { */ case 9:
					return [z, 10, err];
				/* } */ case 10:
			/* } */ case 5:
		/* } */ case 3:
		z = z.make(0);
		bb = 1;
		dd = 0;
		max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 16:
			d = hexValue(ch);
			/* */ if (d >= b) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (d >= b) { */ case 18:
				_r$3 = r.UnreadRune(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				/* break; */ $s = 17; continue;
			/* } */ case 19:
			if (bb <= max$1) {
				bb = (x = b, (((bb >>> 16 << 16) * x >>> 0) + (bb << 16 >>> 16) * x) >>> 0);
				dd = ((((dd >>> 16 << 16) * b >>> 0) + (dd << 16 >>> 16) * b) >>> 0) + d >>> 0;
			} else {
				z = z.mulAddWW(z, bb, dd);
				bb = b;
				dd = d;
			}
			_r$4 = r.ReadRune(); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$3 = _r$4; ch = _tuple$3[0]; err = _tuple$3[2];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 22:
				if (!($interfaceIsEqual(err, io.EOF))) {
					return [z, (b >> 0), err];
				}
				/* break; */ $s = 17; continue;
			/* } */ case 23:
		/* } */ $s = 16; continue; case 17:
		if (bb > 1) {
			z = z.mulAddWW(z, bb, dd);
		} else if ((base === 0) && (b === 8)) {
			return [z, 10, $ifaceNil];
		} else if (!((base === 0)) || !((b === 8))) {
			return [z, (b >> 0), errors.New("syntax error scanning number")];
		}
		return [z.norm(), (b >> 0), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: nat.prototype.scan }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.b = b; $f.base = base; $f.bb = bb; $f.ch = ch; $f.d = d; $f.dd = dd; $f.err = err; $f.max$1 = max$1; $f.r = r; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.scan = function(r, base) { return this.$get().scan(r, base); };
	nat.prototype.decimalString = function() {
		var $ptr, x;
		x = this;
		return x.string("0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 10));
	};
	$ptrType(nat).prototype.decimalString = function() { return this.$get().decimalString(); };
	nat.prototype.string = function(charset$1) {
		var $ptr, _q, b, bb, charset$1, i, k, mask, max$1, nbits, ndigits, q, s, shift, table, w, x, x$1, y, y$1, y$2, y$3, y$4, zero;
		x = this;
		b = (charset$1.length >>> 0);
		if (b < 2 || false) {
			$panic(new $String("illegal base"));
		} else if (x.$length === 0) {
			return $encodeRune(charset$1.charCodeAt(0));
		}
		i = (x.bitLen() / math.Log2(b) >> 0) + 1 >> 0;
		s = $makeSlice(sliceType, i);
		if (b === ((b & (-b >>> 0)) >>> 0)) {
			shift = trailingZeroBits(b);
			mask = ((y = shift, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0;
			w = (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]);
			nbits = 32;
			k = 1;
			while (true) {
				if (!(k < x.$length)) { break; }
				while (true) {
					if (!(nbits >= shift)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt(((w & mask) >>> 0)));
					w = (y$1 = (shift), y$1 < 32 ? (w >>> y$1) : 0) >>> 0;
					nbits = nbits - (shift) >>> 0;
				}
				if (nbits === 0) {
					w = ((k < 0 || k >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + k]);
					nbits = 32;
				} else {
					w = (w | (((y$2 = nbits, y$2 < 32 ? (((k < 0 || k >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + k]) << y$2) : 0) >>> 0))) >>> 0;
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt(((w & mask) >>> 0)));
					w = (y$3 = ((shift - nbits >>> 0)), y$3 < 32 ? (((k < 0 || k >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + k]) >>> y$3) : 0) >>> 0;
					nbits = 32 - ((shift - nbits >>> 0)) >>> 0;
				}
				k = k + (1) >> 0;
			}
			while (true) {
				if (!(nbits >= 0 && !((w === 0)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt(((w & mask) >>> 0)));
				w = (y$4 = (shift), y$4 < 32 ? (w >>> y$4) : 0) >>> 0;
				nbits = nbits - (shift) >>> 0;
			}
		} else {
			bb = b;
			ndigits = 1;
			max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			while (true) {
				if (!(bb <= max$1)) { break; }
				ndigits = ndigits + (1) >> 0;
				bb = (x$1 = b, (((bb >>> 16 << 16) * x$1 >>> 0) + (bb << 16 >>> 16) * x$1) >>> 0);
			}
			table = divisors(x.$length, b, ndigits, bb);
			q = nat.nil.set(x);
			q.convertWords(s, charset$1, b, ndigits, bb, table);
			i = 0;
			zero = charset$1.charCodeAt(0);
			while (true) {
				if (!(((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === zero)) { break; }
				i = i + (1) >> 0;
			}
		}
		return $bytesToString($subslice(s, i));
	};
	$ptrType(nat).prototype.string = function(charset$1) { return this.$get().string(charset$1); };
	nat.prototype.convertWords = function(s, charset$1, b, ndigits, bb, table) {
		var $ptr, _q, _q$1, _r, _tuple, _tuple$1, _tuple$2, b, bb, charset$1, h, i, index, j, j$1, maxLength, minLength, ndigits, q, r, r$1, s, t, table, x, zero;
		q = this;
		if (!(table === sliceType$3.nil)) {
			r = nat.nil;
			index = table.$length - 1 >> 0;
			while (true) {
				if (!(q.$length > leafSize)) { break; }
				maxLength = q.bitLen();
				minLength = maxLength >> 1 >> 0;
				while (true) {
					if (!(index > 0 && (x = index - 1 >> 0, ((x < 0 || x >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x])).nbits > minLength)) { break; }
					index = index - (1) >> 0;
				}
				if (((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).nbits >= maxLength && ((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).bbb.cmp(q) >= 0) {
					index = index - (1) >> 0;
					if (index < 0) {
						$panic(new $String("internal inconsistency"));
					}
				}
				_tuple = q.div(r, q, ((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).bbb); q = _tuple[0]; r = _tuple[1];
				h = s.$length - ((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).ndigits >> 0;
				r.convertWords($subslice(s, h), charset$1, b, ndigits, bb, $subslice(table, 0, index));
				s = $subslice(s, 0, h);
			}
		}
		i = s.$length;
		r$1 = 0;
		if (b === 10) {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$1 = q.divW(q, bb); q = _tuple$1[0]; r$1 = _tuple$1[1];
				j = 0;
				while (true) {
					if (!(j < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					t = (_q = r$1 / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
					((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt((((r$1 - (t << 3 >>> 0) >>> 0) - t >>> 0) - t >>> 0)));
					r$1 = t;
					j = j + (1) >> 0;
				}
			}
		} else {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$2 = q.divW(q, bb); q = _tuple$2[0]; r$1 = _tuple$2[1];
				j$1 = 0;
				while (true) {
					if (!(j$1 < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt((_r = r$1 % b, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
					r$1 = (_q$1 = r$1 / (b), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
					j$1 = j$1 + (1) >> 0;
				}
			}
		}
		zero = charset$1.charCodeAt(0);
		while (true) {
			if (!(i > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = zero);
		}
	};
	$ptrType(nat).prototype.convertWords = function(s, charset$1, b, ndigits, bb, table) { return this.$get().convertWords(s, charset$1, b, ndigits, bb, table); };
	nat.prototype.expWW = function(x, y) {
		var $ptr, x, y, z;
		z = this;
		return z.expNN(nat.nil.setWord(x), nat.nil.setWord(y), nat.nil);
	};
	$ptrType(nat).prototype.expWW = function(x, y) { return this.$get().expWW(x, y); };
	divisors = function(m, b, ndigits, bb) {
		var $ptr, b, bb, i, k, larger, m, ndigits, table, words, x, x$1, x$2, x$3, y;
		if ((leafSize === 0) || m <= leafSize) {
			return sliceType$3.nil;
		}
		k = 1;
		words = leafSize;
		while (true) {
			if (!(words < (m >> 1 >> 0) && k < 64)) { break; }
			k = k + (1) >> 0;
			words = (y = (1), y < 32 ? (words << y) : 0) >> 0;
		}
		table = sliceType$3.nil;
		if (b === 10) {
			cacheBase10.Mutex.Lock();
			table = $subslice(new sliceType$3(cacheBase10.table), 0, k);
		} else {
			table = $makeSlice(sliceType$3, k);
		}
		if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x])).ndigits === 0) {
			larger = nat.nil;
			i = 0;
			while (true) {
				if (!(i < k)) { break; }
				if (((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits === 0) {
					if (i === 0) {
						(0 >= table.$length ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]).bbb = nat.nil.expWW(bb, (leafSize >>> 0));
						(0 >= table.$length ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]).ndigits = ndigits * leafSize >> 0;
					} else {
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb = nat.nil.mul((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x$1])).bbb, (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x$2])).bbb);
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits = 2 * (x$3 = i - 1 >> 0, ((x$3 < 0 || x$3 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x$3])).ndigits >> 0;
					}
					larger = nat.nil.set(((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb);
					while (true) {
						if (!(mulAddVWW($subslice(new sliceType$1(larger.$array), larger.$offset, larger.$offset + larger.$length), $subslice(new sliceType$1(larger.$array), larger.$offset, larger.$offset + larger.$length), b, 0) === 0)) { break; }
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb = ((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb.set(larger);
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits = ((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits + (1) >> 0;
					}
					((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).nbits = ((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb.bitLen();
				}
				i = i + (1) >> 0;
			}
		}
		if (b === 10) {
			cacheBase10.Mutex.Unlock();
		}
		return table;
	};
	trailingZeroBits = function(x) {
		var $ptr, x, x$1, x$2, x$3, x$4;
		if (32 === 32) {
			return ((x$1 = ((x$2 = ((x & (-x >>> 0)) >>> 0), (((x$2 >>> 16 << 16) * 125613361 >>> 0) + (x$2 << 16 >>> 16) * 125613361) >>> 0)) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32Lookup.$length) ? $throwRuntimeError("index out of range") : deBruijn32Lookup.$array[deBruijn32Lookup.$offset + x$1])) >>> 0);
		} else if (32 === 64) {
			return ((x$3 = ((x$4 = ((x & (-x >>> 0)) >>> 0), (((x$4 >>> 16 << 16) * 3033172745 >>> 0) + (x$4 << 16 >>> 16) * 3033172745) >>> 0)) >>> 58 >>> 0, ((x$3 < 0 || x$3 >= deBruijn64Lookup.$length) ? $throwRuntimeError("index out of range") : deBruijn64Lookup.$array[deBruijn64Lookup.$offset + x$3])) >>> 0);
		} else {
			$panic(new $String("unknown word size"));
		}
	};
	nat.prototype.trailingZeroBits = function() {
		var $ptr, i, x;
		x = this;
		if (x.$length === 0) {
			return 0;
		}
		i = 0;
		while (true) {
			if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) === 0)) { break; }
			i = i + (1) >>> 0;
		}
		return (i * 32 >>> 0) + trailingZeroBits(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) >>> 0;
	};
	$ptrType(nat).prototype.trailingZeroBits = function() { return this.$get().trailingZeroBits(); };
	nat.prototype.shl = function(x, s) {
		var $ptr, _q, _r, m, n, s, x, x$1, z;
		z = this;
		m = x.$length;
		if (m === 0) {
			return z.make(0);
		}
		n = m + ((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0) >> 0;
		z = z.make(n + 1 >> 0);
		((n < 0 || n >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + n] = shlVU((x$1 = $subslice(z, (n - m >> 0), n), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length), (_r = s % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		$subslice(z, 0, (n - m >> 0)).clear();
		return z.norm();
	};
	$ptrType(nat).prototype.shl = function(x, s) { return this.$get().shl(x, s); };
	nat.prototype.shr = function(x, s) {
		var $ptr, _q, _r, m, n, s, x, x$1, z;
		z = this;
		m = x.$length;
		n = m - ((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0) >> 0;
		if (n <= 0) {
			return z.make(0);
		}
		z = z.make(n);
		shrVU($subslice(new sliceType$1(z.$array), z.$offset, z.$offset + z.$length), (x$1 = $subslice(x, (m - n >> 0)), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (_r = s % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		return z.norm();
	};
	$ptrType(nat).prototype.shr = function(x, s) { return this.$get().shr(x, s); };
	nat.prototype.setBit = function(x, i, b) {
		var $ptr, _q, _r, _ref, b, i, j, m, n, x, y, z;
		z = this;
		j = ((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		m = (y = ((_r = i % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0;
		n = x.$length;
		_ref = b;
		if (_ref === 0) {
			z = z.make(n);
			$copySlice(z, x);
			if (j >= n) {
				return z;
			}
			((j < 0 || j >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + j] = (((j < 0 || j >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + j]) & ~(m)) >>> 0);
			return z.norm();
		} else if (_ref === 1) {
			if (j >= n) {
				z = z.make(j + 1 >> 0);
				$subslice(z, n).clear();
			} else {
				z = z.make(n);
			}
			$copySlice(z, x);
			((j < 0 || j >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + j] = (((j < 0 || j >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + j]) | (m)) >>> 0);
			return z;
		}
		$panic(new $String("set bit is not 0 or 1"));
	};
	$ptrType(nat).prototype.setBit = function(x, i, b) { return this.$get().setBit(x, i, b); };
	nat.prototype.bit = function(i) {
		var $ptr, _q, _r, i, j, y, z;
		z = this;
		j = ((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		if (j >= z.$length) {
			return 0;
		}
		return (((((y = ((_r = i % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (((j < 0 || j >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + j]) >>> y) : 0) >>> 0) & 1) >>> 0) >>> 0);
	};
	$ptrType(nat).prototype.bit = function(i) { return this.$get().bit(i); };
	nat.prototype.and = function(x, y) {
		var $ptr, i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m > n) {
			m = n;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < m)) { break; }
			((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) & ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) >>> 0);
			i = i + (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.and = function(x, y) { return this.$get().and(x, y); };
	nat.prototype.andNot = function(x, y) {
		var $ptr, i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (n > m) {
			n = m;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) & ~((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) >>> 0);
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(x, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.andNot = function(x, y) { return this.$get().andNot(x, y); };
	nat.prototype.or = function(x, y) {
		var $ptr, _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m; _tmp$1 = n; n = _tmp; m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) | ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) >>> 0);
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.or = function(x, y) { return this.$get().or(x, y); };
	nat.prototype.xor = function(x, y) {
		var $ptr, _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m; _tmp$1 = n; n = _tmp; m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) >>> 0);
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.xor = function(x, y) { return this.$get().xor(x, y); };
	greaterThan = function(x1, x2, y1, y2) {
		var $ptr, x1, x2, y1, y2;
		return x1 > y1 || (x1 === y1) && x2 > y2;
	};
	nat.prototype.modW = function(d) {
		var $ptr, d, q, r, x;
		r = 0;
		x = this;
		q = nat.nil;
		q = q.make(x.$length);
		r = divWVW($subslice(new sliceType$1(q.$array), q.$offset, q.$offset + q.$length), 0, $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length), d);
		return r;
	};
	$ptrType(nat).prototype.modW = function(d) { return this.$get().modW(d); };
	nat.prototype.random = function(rand$1, limit, n) {
		var $ptr, _i, _i$1, _index, _r, _r$1, _r$2, _r$3, _ref, _ref$1, bitLengthOfMSW, i, i$1, limit, mask, n, rand$1, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _index = $f._index; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; bitLengthOfMSW = $f.bitLengthOfMSW; i = $f.i; i$1 = $f.i$1; limit = $f.limit; mask = $f.mask; n = $f.n; rand$1 = $f.rand$1; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (alias(z, limit)) {
			z = nat.nil;
		}
		z = z.make(limit.$length);
		bitLengthOfMSW = ((_r = n % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0);
		if (bitLengthOfMSW === 0) {
			bitLengthOfMSW = 32;
		}
		mask = ((((y = bitLengthOfMSW, y < 32 ? (1 << y) : 0) >>> 0)) - 1 >>> 0);
		/* while (true) { */ case 1:
			/* */ if (32 === 32) { $s = 3; continue; }
			/* */ if (32 === 64) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (32 === 32) { */ case 3:
				_ref = z;
				_i = 0;
				/* while (true) { */ case 7:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
					i = _i;
					_r$1 = rand$1.Uint32(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (_r$1 >>> 0));
					_i++;
				/* } */ $s = 7; continue; case 8:
				$s = 6; continue;
			/* } else if (32 === 64) { */ case 4:
				_ref$1 = z;
				_i$1 = 0;
				/* while (true) { */ case 10:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 11; continue; }
					i$1 = _i$1;
					_r$2 = rand$1.Uint32(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = rand$1.Uint32(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					((i$1 < 0 || i$1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i$1] = ((_r$2 >>> 0) | ((_r$3 >>> 0) << 32 >>> 0)) >>> 0);
					_i$1++;
				/* } */ $s = 10; continue; case 11:
				$s = 6; continue;
			/* } else { */ case 5:
				$panic(new $String("unknown word size"));
			/* } */ case 6:
			_index = limit.$length - 1 >> 0;
			((_index < 0 || _index >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + _index] = (((_index < 0 || _index >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + _index]) & (mask)) >>> 0);
			if (z.cmp(limit) < 0) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return z.norm();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: nat.prototype.random }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._index = _index; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitLengthOfMSW = bitLengthOfMSW; $f.i = i; $f.i$1 = i$1; $f.limit = limit; $f.mask = mask; $f.n = n; $f.rand$1 = rand$1; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.random = function(rand$1, limit, n) { return this.$get().random(rand$1, limit, n); };
	nat.prototype.expNN = function(x, y, m) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, i, j, j$1, m, q, r, shift, v, w, x, x$1, y, y$1, y$2, y$3, z, zz;
		z = this;
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if ((m.$length === 1) && ((0 >= m.$length ? $throwRuntimeError("index out of range") : m.$array[m.$offset + 0]) === 1)) {
			return z.setWord(0);
		}
		if (y.$length === 0) {
			return z.setWord(1);
		}
		if (!((m.$length === 0))) {
			z = z.make(m.$length);
		}
		z = z.set(x);
		if (x.$length > 1 && y.$length > 1 && m.$length > 0) {
			return z.expNNWindowed(x, y, m);
		}
		v = (x$1 = y.$length - 1 >> 0, ((x$1 < 0 || x$1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + x$1]));
		shift = leadingZeros(v) + 1 >>> 0;
		v = (y$1 = (shift), y$1 < 32 ? (v << y$1) : 0) >>> 0;
		q = nat.nil;
		w = 32 - (shift >> 0) >> 0;
		_tmp = nat.nil; _tmp$1 = nat.nil; zz = _tmp; r = _tmp$1;
		j = 0;
		while (true) {
			if (!(j < w)) { break; }
			zz = zz.mul(z, z);
			_tmp$2 = z; _tmp$3 = zz; zz = _tmp$2; z = _tmp$3;
			if (!((((v & 2147483648) >>> 0) === 0))) {
				zz = zz.mul(z, x);
				_tmp$4 = z; _tmp$5 = zz; zz = _tmp$4; z = _tmp$5;
			}
			if (!((m.$length === 0))) {
				_tuple = zz.div(r, z, m); zz = _tuple[0]; r = _tuple[1];
				_tmp$6 = q; _tmp$7 = z; _tmp$8 = zz; _tmp$9 = r; zz = _tmp$6; r = _tmp$7; q = _tmp$8; z = _tmp$9;
			}
			v = (y$2 = (1), y$2 < 32 ? (v << y$2) : 0) >>> 0;
			j = j + (1) >> 0;
		}
		i = y.$length - 2 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			v = ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]);
			j$1 = 0;
			while (true) {
				if (!(j$1 < 32)) { break; }
				zz = zz.mul(z, z);
				_tmp$10 = z; _tmp$11 = zz; zz = _tmp$10; z = _tmp$11;
				if (!((((v & 2147483648) >>> 0) === 0))) {
					zz = zz.mul(z, x);
					_tmp$12 = z; _tmp$13 = zz; zz = _tmp$12; z = _tmp$13;
				}
				if (!((m.$length === 0))) {
					_tuple$1 = zz.div(r, z, m); zz = _tuple$1[0]; r = _tuple$1[1];
					_tmp$14 = q; _tmp$15 = z; _tmp$16 = zz; _tmp$17 = r; zz = _tmp$14; r = _tmp$15; q = _tmp$16; z = _tmp$17;
				}
				v = (y$3 = (1), y$3 < 32 ? (v << y$3) : 0) >>> 0;
				j$1 = j$1 + (1) >> 0;
			}
			i = i - (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.expNN = function(x, y, m) { return this.$get().expNN(x, y, m); };
	nat.prototype.expNNWindowed = function(x, y, m) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, i, i$1, j, m, p, p1, p2, powers, r, x, x$1, y, y$1, yi, z, zz;
		z = this;
		_tmp = nat.nil; _tmp$1 = nat.nil; zz = _tmp; r = _tmp$1;
		powers = $clone(arrayType$1.zero(), arrayType$1);
		powers[0] = natOne;
		powers[1] = x;
		i = 2;
		while (true) {
			if (!(i < 16)) { break; }
			_tmp$2 = $indexPtr(powers, (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ptrType$2); _tmp$3 = $indexPtr(powers, i, ptrType$2); _tmp$4 = $indexPtr(powers, (i + 1 >> 0), ptrType$2); p2 = _tmp$2; p = _tmp$3; p1 = _tmp$4;
			p.$set(p.mul(p2.$get(), p2.$get()));
			_tuple = zz.div(r, p.$get(), m); zz = _tuple[0]; r = _tuple[1];
			_tmp$5 = r; _tmp$6 = p.$get(); p.$set(_tmp$5); r = _tmp$6;
			p1.$set(p1.mul(p.$get(), x));
			_tuple$1 = zz.div(r, p1.$get(), m); zz = _tuple$1[0]; r = _tuple$1[1];
			_tmp$7 = r; _tmp$8 = p1.$get(); p1.$set(_tmp$7); r = _tmp$8;
			i = i + (2) >> 0;
		}
		z = z.setWord(1);
		i$1 = y.$length - 1 >> 0;
		while (true) {
			if (!(i$1 >= 0)) { break; }
			yi = ((i$1 < 0 || i$1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i$1]);
			j = 0;
			while (true) {
				if (!(j < 32)) { break; }
				if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) {
					zz = zz.mul(z, z);
					_tmp$9 = z; _tmp$10 = zz; zz = _tmp$9; z = _tmp$10;
					_tuple$2 = zz.div(r, z, m); zz = _tuple$2[0]; r = _tuple$2[1];
					_tmp$11 = r; _tmp$12 = z; z = _tmp$11; r = _tmp$12;
					zz = zz.mul(z, z);
					_tmp$13 = z; _tmp$14 = zz; zz = _tmp$13; z = _tmp$14;
					_tuple$3 = zz.div(r, z, m); zz = _tuple$3[0]; r = _tuple$3[1];
					_tmp$15 = r; _tmp$16 = z; z = _tmp$15; r = _tmp$16;
					zz = zz.mul(z, z);
					_tmp$17 = z; _tmp$18 = zz; zz = _tmp$17; z = _tmp$18;
					_tuple$4 = zz.div(r, z, m); zz = _tuple$4[0]; r = _tuple$4[1];
					_tmp$19 = r; _tmp$20 = z; z = _tmp$19; r = _tmp$20;
					zz = zz.mul(z, z);
					_tmp$21 = z; _tmp$22 = zz; zz = _tmp$21; z = _tmp$22;
					_tuple$5 = zz.div(r, z, m); zz = _tuple$5[0]; r = _tuple$5[1];
					_tmp$23 = r; _tmp$24 = z; z = _tmp$23; r = _tmp$24;
				}
				zz = zz.mul(z, (x$1 = yi >>> 28 >>> 0, ((x$1 < 0 || x$1 >= powers.length) ? $throwRuntimeError("index out of range") : powers[x$1])));
				_tmp$25 = z; _tmp$26 = zz; zz = _tmp$25; z = _tmp$26;
				_tuple$6 = zz.div(r, z, m); zz = _tuple$6[0]; r = _tuple$6[1];
				_tmp$27 = r; _tmp$28 = z; z = _tmp$27; r = _tmp$28;
				yi = (y$1 = (4), y$1 < 32 ? (yi << y$1) : 0) >>> 0;
				j = j + (4) >> 0;
			}
			i$1 = i$1 - (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.expNNWindowed = function(x, y, m) { return this.$get().expNNWindowed(x, y, m); };
	nat.prototype.probablyPrime = function(reps) {
		var $ptr, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tuple, i, j, k, n, nm1, nm3, nm3Len, q, quotient, r, rand$1, reps, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; i = $f.i; j = $f.j; k = $f.k; n = $f.n; nm1 = $f.nm1; nm3 = $f.nm3; nm3Len = $f.nm3Len; q = $f.q; quotient = $f.quotient; r = $f.r; rand$1 = $f.rand$1; reps = $f.reps; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		if (n.$length === 0) {
			return false;
		}
		if (n.$length === 1) {
			if ((0 >= n.$length ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]) < 2) {
				return false;
			}
			if ((_r = (0 >= n.$length ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) {
				return (0 >= n.$length ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]) === 2;
			}
			_ref = (0 >= n.$length ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]);
			if (_ref === 3 || _ref === 5 || _ref === 7 || _ref === 11 || _ref === 13 || _ref === 17 || _ref === 19 || _ref === 23 || _ref === 29 || _ref === 31 || _ref === 37 || _ref === 41 || _ref === 43 || _ref === 47 || _ref === 53) {
				return true;
			}
		}
		r = 0;
		if (32 === 32) {
			r = n.modW(3234846615);
		} else if (32 === 64) {
			r = n.modW(820596253);
		} else {
			$panic(new $String("Unknown word size"));
		}
		if (((_r$1 = r % 3, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$2 = r % 5, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$3 = r % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$4 = r % 11, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$5 = r % 13, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$6 = r % 17, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$7 = r % 19, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$8 = r % 23, _r$8 === _r$8 ? _r$8 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$9 = r % 29, _r$9 === _r$9 ? _r$9 : $throwRuntimeError("integer divide by zero")) === 0)) {
			return false;
		}
		nm1 = nat.nil.sub(n, natOne);
		k = nm1.trailingZeroBits();
		q = nat.nil.shr(nm1, k);
		nm3 = nat.nil.sub(nm1, natTwo);
		rand$1 = rand.New(rand.NewSource((x = (0 >= n.$length ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]), new $Int64(0, x.constructor === Number ? x : 1))));
		_tmp = nat.nil; _tmp$1 = nat.nil; _tmp$2 = nat.nil; x$1 = _tmp; y = _tmp$1; quotient = _tmp$2;
		nm3Len = nm3.bitLen();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < reps)) { break; } */ if(!(i < reps)) { $s = 2; continue; }
			_r$10 = x$1.random(rand$1, nm3, nm3Len); /* */ $s = 3; case 3: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			x$1 = _r$10;
			x$1 = x$1.add(x$1, natTwo);
			y = y.expNN(x$1, q, n);
			if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) {
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			}
			j = 1;
			while (true) {
				if (!(j < k)) { break; }
				y = y.mul(y, y);
				_tuple = quotient.div(y, y, n); quotient = _tuple[0]; y = _tuple[1];
				if (y.cmp(nm1) === 0) {
					i = i + (1) >> 0;
					/* continue NextRandom; */ $s = 1; continue s;
				}
				if (y.cmp(natOne) === 0) {
					return false;
				}
				j = j + (1) >>> 0;
			}
			return false;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: nat.prototype.probablyPrime }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.i = i; $f.j = j; $f.k = k; $f.n = n; $f.nm1 = nm1; $f.nm3 = nm3; $f.nm3Len = nm3Len; $f.q = q; $f.quotient = quotient; $f.r = r; $f.rand$1 = rand$1; $f.reps = reps; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.probablyPrime = function(reps) { return this.$get().probablyPrime(reps); };
	nat.prototype.bytes = function(buf) {
		var $ptr, _i, _ref, buf, d, i, j, y, z;
		i = 0;
		z = this;
		i = buf.$length;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < 4)) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (d << 24 >>> 24));
				d = (y = (8), y < 32 ? (d >>> y) : 0) >>> 0;
				j = j + (1) >> 0;
			}
			_i++;
		}
		while (true) {
			if (!(i < buf.$length && (((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 0))) { break; }
			i = i + (1) >> 0;
		}
		return i;
	};
	$ptrType(nat).prototype.bytes = function(buf) { return this.$get().bytes(buf); };
	nat.prototype.setBytes = function(buf) {
		var $ptr, _q, buf, d, i, k, s, x, y, z;
		z = this;
		z = z.make((_q = (((buf.$length + 4 >> 0) - 1 >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		k = 0;
		s = 0;
		d = 0;
		i = buf.$length;
		while (true) {
			if (!(i > 0)) { break; }
			d = (d | (((y = s, y < 32 ? (((x = i - 1 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) >>> 0) << y) : 0) >>> 0))) >>> 0;
			s = s + (8) >>> 0;
			if (s === 32) {
				((k < 0 || k >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + k] = d);
				k = k + (1) >> 0;
				s = 0;
				d = 0;
			}
			i = i - (1) >> 0;
		}
		if (k < z.$length) {
			((k < 0 || k >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + k] = d);
		}
		return z.norm();
	};
	$ptrType(nat).prototype.setBytes = function(buf) { return this.$get().setBytes(buf); };
	ptrType.methods = [{prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([$Uint64], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "SetBits", name: "SetBits", pkg: "", typ: $funcType([sliceType$1], [ptrType], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "MulRange", name: "MulRange", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType], false)}, {prop: "Binomial", name: "Binomial", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Rem", name: "Rem", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "QuoRem", name: "QuoRem", pkg: "", typ: $funcType([ptrType, ptrType, ptrType], [ptrType, ptrType], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Mod", name: "Mod", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "DivMod", name: "DivMod", pkg: "", typ: $funcType([ptrType, ptrType, ptrType], [ptrType, ptrType], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([fmt.State, $Int32], [], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.RuneScanner, $Int], [ptrType, $Int, $error], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String, $Int], [ptrType, $Bool], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType], [ptrType], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "BitLen", name: "BitLen", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Exp", name: "Exp", pkg: "", typ: $funcType([ptrType, ptrType, ptrType], [ptrType], false)}, {prop: "GCD", name: "GCD", pkg: "", typ: $funcType([ptrType, ptrType, ptrType, ptrType], [ptrType], false)}, {prop: "binaryGCD", name: "binaryGCD", pkg: "math/big", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "ProbablyPrime", name: "ProbablyPrime", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Rand", name: "Rand", pkg: "", typ: $funcType([ptrType$4, ptrType], [ptrType], false)}, {prop: "ModInverse", name: "ModInverse", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Lsh", name: "Lsh", pkg: "", typ: $funcType([ptrType, $Uint], [ptrType], false)}, {prop: "Rsh", name: "Rsh", pkg: "", typ: $funcType([ptrType, $Uint], [ptrType], false)}, {prop: "Bit", name: "Bit", pkg: "", typ: $funcType([$Int], [$Uint], false)}, {prop: "SetBit", name: "SetBit", pkg: "", typ: $funcType([ptrType, $Int, $Uint], [ptrType], false)}, {prop: "And", name: "And", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "AndNot", name: "AndNot", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Or", name: "Or", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Xor", name: "Xor", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Not", name: "Not", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	nat.methods = [{prop: "clear", name: "clear", pkg: "math/big", typ: $funcType([], [], false)}, {prop: "norm", name: "norm", pkg: "math/big", typ: $funcType([], [nat], false)}, {prop: "make", name: "make", pkg: "math/big", typ: $funcType([$Int], [nat], false)}, {prop: "setWord", name: "setWord", pkg: "math/big", typ: $funcType([Word], [nat], false)}, {prop: "setUint64", name: "setUint64", pkg: "math/big", typ: $funcType([$Uint64], [nat], false)}, {prop: "set", name: "set", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "add", name: "add", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "sub", name: "sub", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "cmp", name: "cmp", pkg: "math/big", typ: $funcType([nat], [$Int], false)}, {prop: "mulAddWW", name: "mulAddWW", pkg: "math/big", typ: $funcType([nat, Word, Word], [nat], false)}, {prop: "mul", name: "mul", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "mulRange", name: "mulRange", pkg: "math/big", typ: $funcType([$Uint64, $Uint64], [nat], false)}, {prop: "divW", name: "divW", pkg: "math/big", typ: $funcType([nat, Word], [nat, Word], false)}, {prop: "div", name: "div", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "divLarge", name: "divLarge", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "bitLen", name: "bitLen", pkg: "math/big", typ: $funcType([], [$Int], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.RuneScanner, $Int], [nat, $Int, $error], false)}, {prop: "decimalString", name: "decimalString", pkg: "math/big", typ: $funcType([], [$String], false)}, {prop: "string", name: "string", pkg: "math/big", typ: $funcType([$String], [$String], false)}, {prop: "convertWords", name: "convertWords", pkg: "math/big", typ: $funcType([sliceType, $String, Word, $Int, Word, sliceType$3], [], false)}, {prop: "expWW", name: "expWW", pkg: "math/big", typ: $funcType([Word, Word], [nat], false)}, {prop: "trailingZeroBits", name: "trailingZeroBits", pkg: "math/big", typ: $funcType([], [$Uint], false)}, {prop: "shl", name: "shl", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "shr", name: "shr", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "setBit", name: "setBit", pkg: "math/big", typ: $funcType([nat, $Uint, $Uint], [nat], false)}, {prop: "bit", name: "bit", pkg: "math/big", typ: $funcType([$Uint], [$Uint], false)}, {prop: "and", name: "and", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "andNot", name: "andNot", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "or", name: "or", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "xor", name: "xor", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "modW", name: "modW", pkg: "math/big", typ: $funcType([Word], [Word], false)}, {prop: "random", name: "random", pkg: "math/big", typ: $funcType([ptrType$4, nat, $Int], [nat], false)}, {prop: "expNN", name: "expNN", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "expNNWindowed", name: "expNNWindowed", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "probablyPrime", name: "probablyPrime", pkg: "math/big", typ: $funcType([$Int], [$Bool], false)}, {prop: "bytes", name: "bytes", pkg: "math/big", typ: $funcType([sliceType], [$Int], false)}, {prop: "setBytes", name: "setBytes", pkg: "math/big", typ: $funcType([sliceType], [nat], false)}];
	Int.init([{prop: "neg", name: "neg", pkg: "math/big", typ: $Bool, tag: ""}, {prop: "abs", name: "abs", pkg: "math/big", typ: nat, tag: ""}]);
	nat.init(Word);
	divisor.init([{prop: "bbb", name: "bbb", pkg: "math/big", typ: nat, tag: ""}, {prop: "nbits", name: "nbits", pkg: "math/big", typ: $Int, tag: ""}, {prop: "ndigits", name: "ndigits", pkg: "math/big", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = binary.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		cacheBase10 = new structType.ptr();
		natOne = new nat([1]);
		intOne = new Int.ptr(false, natOne);
		natTwo = new nat([2]);
		karatsubaThreshold = 40;
		leafSize = 8;
		deBruijn32Lookup = new sliceType([0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64Lookup = new sliceType([0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/dsa"] = (function() {
	var $pkg = {}, $init, errors, io, big, Parameters, PublicKey, PrivateKey, sliceType, ptrType, GenerateParameters, GenerateKey, Verify;
	errors = $packages["errors"];
	io = $packages["io"];
	big = $packages["math/big"];
	Parameters = $pkg.Parameters = $newType(0, $kindStruct, "dsa.Parameters", "Parameters", "crypto/dsa", function(P_, Q_, G_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.P = ptrType.nil;
			this.Q = ptrType.nil;
			this.G = ptrType.nil;
			return;
		}
		this.P = P_;
		this.Q = Q_;
		this.G = G_;
	});
	PublicKey = $pkg.PublicKey = $newType(0, $kindStruct, "dsa.PublicKey", "PublicKey", "crypto/dsa", function(Parameters_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Parameters = new Parameters.ptr();
			this.Y = ptrType.nil;
			return;
		}
		this.Parameters = Parameters_;
		this.Y = Y_;
	});
	PrivateKey = $pkg.PrivateKey = $newType(0, $kindStruct, "dsa.PrivateKey", "PrivateKey", "crypto/dsa", function(PublicKey_, X_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PublicKey = new PublicKey.ptr();
			this.X = ptrType.nil;
			return;
		}
		this.PublicKey = PublicKey_;
		this.X = X_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(big.Int);
	GenerateParameters = function(params, rand, sizes) {
		var $ptr, L, N, _index, _index$1, _q, _q$1, _r, _r$1, _r$2, _r$3, _ref, _tmp, _tmp$1, _tuple, _tuple$1, e, err, g, h, i, one, p, pBytes, params, pm1, q, qBytes, rand, rem, sizes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; L = $f.L; N = $f.N; _index = $f._index; _index$1 = $f._index$1; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; err = $f.err; g = $f.g; h = $f.h; i = $f.i; one = $f.one; p = $f.p; pBytes = $f.pBytes; params = $f.params; pm1 = $f.pm1; q = $f.q; qBytes = $f.qBytes; rand = $f.rand; rem = $f.rem; sizes = $f.sizes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_tmp = 0; _tmp$1 = 0; L = _tmp; N = _tmp$1;
		_ref = sizes;
		if (_ref === 0) {
			L = 1024;
			N = 160;
		} else if (_ref === 1) {
			L = 2048;
			N = 224;
		} else if (_ref === 2) {
			L = 2048;
			N = 256;
		} else if (_ref === 3) {
			L = 3072;
			N = 256;
		} else {
			err = errors.New("crypto/dsa: invalid ParameterSizes");
			return err;
		}
		qBytes = $makeSlice(sliceType, (_q = N / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		pBytes = $makeSlice(sliceType, (_q$1 = L / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
		q = new big.Int.ptr();
		p = new big.Int.ptr();
		rem = new big.Int.ptr();
		one = new big.Int.ptr();
		one.SetInt64(new $Int64(0, 1));
		/* while (true) { */ case 1:
			_r = io.ReadFull(rand, qBytes); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_index = qBytes.$length - 1 >> 0;
			((_index < 0 || _index >= qBytes.$length) ? $throwRuntimeError("index out of range") : qBytes.$array[qBytes.$offset + _index] = (((_index < 0 || _index >= qBytes.$length) ? $throwRuntimeError("index out of range") : qBytes.$array[qBytes.$offset + _index]) | (1)) >>> 0);
			(0 >= qBytes.$length ? $throwRuntimeError("index out of range") : qBytes.$array[qBytes.$offset + 0] = ((0 >= qBytes.$length ? $throwRuntimeError("index out of range") : qBytes.$array[qBytes.$offset + 0]) | (128)) >>> 0);
			q.SetBytes(qBytes);
			_r$1 = q.ProbablyPrime(64); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$1) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			i = 0;
			/* while (true) { */ case 7:
				/* if (!(i < (4 * L >> 0))) { break; } */ if(!(i < (4 * L >> 0))) { $s = 8; continue; }
				_r$2 = io.ReadFull(rand, pBytes); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2; err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				_index$1 = pBytes.$length - 1 >> 0;
				((_index$1 < 0 || _index$1 >= pBytes.$length) ? $throwRuntimeError("index out of range") : pBytes.$array[pBytes.$offset + _index$1] = (((_index$1 < 0 || _index$1 >= pBytes.$length) ? $throwRuntimeError("index out of range") : pBytes.$array[pBytes.$offset + _index$1]) | (1)) >>> 0);
				(0 >= pBytes.$length ? $throwRuntimeError("index out of range") : pBytes.$array[pBytes.$offset + 0] = ((0 >= pBytes.$length ? $throwRuntimeError("index out of range") : pBytes.$array[pBytes.$offset + 0]) | (128)) >>> 0);
				p.SetBytes(pBytes);
				rem.Mod(p, q);
				rem.Sub(rem, one);
				p.Sub(p, rem);
				/* */ if (p.BitLen() < L) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (p.BitLen() < L) { */ case 10:
					i = i + (1) >> 0;
					/* continue; */ $s = 7; continue;
				/* } */ case 11:
				_r$3 = p.ProbablyPrime(64); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (!_r$3) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!_r$3) { */ case 12:
					i = i + (1) >> 0;
					/* continue; */ $s = 7; continue;
				/* } */ case 13:
				params.P = p;
				params.Q = q;
				/* break GeneratePrimes; */ $s = 2; continue s;
			/* } */ $s = 7; continue; case 8:
		/* } */ $s = 1; continue; case 2:
		h = new big.Int.ptr();
		h.SetInt64(new $Int64(0, 2));
		g = new big.Int.ptr();
		pm1 = new big.Int.ptr().Sub(p, one);
		e = new big.Int.ptr().Div(pm1, q);
		while (true) {
			g.Exp(h, e, p);
			if (g.Cmp(one) === 0) {
				h.Add(h, one);
				continue;
			}
			params.G = g;
			return err;
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GenerateParameters }; } $f.$ptr = $ptr; $f.L = L; $f.N = N; $f._index = _index; $f._index$1 = _index$1; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.err = err; $f.g = g; $f.h = h; $f.i = i; $f.one = one; $f.p = p; $f.pBytes = pBytes; $f.params = params; $f.pm1 = pm1; $f.q = q; $f.qBytes = qBytes; $f.rand = rand; $f.rem = rem; $f.sizes = sizes; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenerateParameters = GenerateParameters;
	GenerateKey = function(priv, rand) {
		var $ptr, _q, _r, _tuple, err, priv, rand, x, xBytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tuple = $f._tuple; err = $f.err; priv = $f.priv; rand = $f.rand; x = $f.x; xBytes = $f.xBytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (priv.PublicKey.Parameters.P === ptrType.nil || priv.PublicKey.Parameters.Q === ptrType.nil || priv.PublicKey.Parameters.G === ptrType.nil) {
			return errors.New("crypto/dsa: parameters not set up before generating key");
		}
		x = new big.Int.ptr();
		xBytes = $makeSlice(sliceType, (_q = priv.PublicKey.Parameters.Q.BitLen() / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		/* while (true) { */ case 1:
			_r = io.ReadFull(rand, xBytes); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			x.SetBytes(xBytes);
			if (!((x.Sign() === 0)) && x.Cmp(priv.PublicKey.Parameters.Q) < 0) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		priv.X = x;
		priv.PublicKey.Y = new big.Int.ptr();
		priv.PublicKey.Y.Exp(priv.PublicKey.Parameters.G, x, priv.PublicKey.Parameters.P);
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GenerateKey }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.priv = priv; $f.rand = rand; $f.x = x; $f.xBytes = xBytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenerateKey = GenerateKey;
	Verify = function(pub, hash, r, s) {
		var $ptr, hash, n, pub, r, s, u1, u2, v, w, z;
		if (r.Sign() < 1 || r.Cmp(pub.Parameters.Q) >= 0) {
			return false;
		}
		if (s.Sign() < 1 || s.Cmp(pub.Parameters.Q) >= 0) {
			return false;
		}
		w = new big.Int.ptr().ModInverse(s, pub.Parameters.Q);
		n = pub.Parameters.Q.BitLen();
		if (!(((n & 7) === 0))) {
			return false;
		}
		z = new big.Int.ptr().SetBytes(hash);
		u1 = new big.Int.ptr().Mul(z, w);
		u1.Mod(u1, pub.Parameters.Q);
		u2 = w.Mul(r, w);
		u2.Mod(u2, pub.Parameters.Q);
		v = u1.Exp(pub.Parameters.G, u1, pub.Parameters.P);
		u2.Exp(pub.Y, u2, pub.Parameters.P);
		v.Mul(v, u2);
		v.Mod(v, pub.Parameters.P);
		v.Mod(v, pub.Parameters.Q);
		return v.Cmp(r) === 0;
	};
	$pkg.Verify = Verify;
	Parameters.init([{prop: "P", name: "P", pkg: "", typ: ptrType, tag: ""}, {prop: "Q", name: "Q", pkg: "", typ: ptrType, tag: ""}, {prop: "G", name: "G", pkg: "", typ: ptrType, tag: ""}]);
	PublicKey.init([{prop: "Parameters", name: "", pkg: "", typ: Parameters, tag: ""}, {prop: "Y", name: "Y", pkg: "", typ: ptrType, tag: ""}]);
	PrivateKey.init([{prop: "PublicKey", name: "", pkg: "", typ: PublicKey, tag: ""}, {prop: "X", name: "X", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidPublicKey = errors.New("crypto/dsa: invalid public key");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/elliptic"] = (function() {
	var $pkg = {}, $init, io, big, sync, Curve, CurveParams, p224Curve, p224FieldElement, p224LargeFieldElement, p256Curve, ptrType, ptrType$1, sliceType, sliceType$1, arrayType, arrayType$1, arrayType$2, arrayType$3, arrayType$4, arrayType$5, arrayType$6, initonce, p384, p521, p224, p224P, p224ZeroModP31, p224ZeroModP63, p256, p256RInverse, p256One, p256One$ptr, p256Precomputed, p256Zero31, zForAffine, Unmarshal, initAll, initP384, initP521, P256, P384, P521, initP224, P224, p224IsZero, p224Add, p224Sub, p224Mul, p224Square, p224ReduceLarge, p224Reduce, p224Invert, p224Contract, p224AddJacobian, p224DoubleJacobian, p224CopyConditional, p224ScalarMult, p224ToAffine, get28BitsFromEnd, p224FromBig, p224ToBig, initP256, p256GetScalar, nonZeroToAllOnes, p256ReduceCarry, p256Sum, p256Diff, p256ReduceDegree, p256Square, p256Mul, p256Assign, p256Invert, p256Scalar3, p256Scalar4, p256Scalar8, p256PointDouble, p256PointAddMixed, p256PointAdd, p256CopyConditional, p256SelectAffinePoint, p256SelectJacobianPoint, p256GetBit, p256ScalarBaseMult, p256PointToAffine, p256ToAffine, p256ScalarMult, p256FromBig, p256ToBig;
	io = $packages["io"];
	big = $packages["math/big"];
	sync = $packages["sync"];
	Curve = $pkg.Curve = $newType(8, $kindInterface, "elliptic.Curve", "Curve", "crypto/elliptic", null);
	CurveParams = $pkg.CurveParams = $newType(0, $kindStruct, "elliptic.CurveParams", "CurveParams", "crypto/elliptic", function(P_, N_, B_, Gx_, Gy_, BitSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.P = ptrType$1.nil;
			this.N = ptrType$1.nil;
			this.B = ptrType$1.nil;
			this.Gx = ptrType$1.nil;
			this.Gy = ptrType$1.nil;
			this.BitSize = 0;
			return;
		}
		this.P = P_;
		this.N = N_;
		this.B = B_;
		this.Gx = Gx_;
		this.Gy = Gy_;
		this.BitSize = BitSize_;
	});
	p224Curve = $pkg.p224Curve = $newType(0, $kindStruct, "elliptic.p224Curve", "p224Curve", "crypto/elliptic", function(CurveParams_, gx_, gy_, b_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CurveParams = ptrType.nil;
			this.gx = p224FieldElement.zero();
			this.gy = p224FieldElement.zero();
			this.b = p224FieldElement.zero();
			return;
		}
		this.CurveParams = CurveParams_;
		this.gx = gx_;
		this.gy = gy_;
		this.b = b_;
	});
	p224FieldElement = $pkg.p224FieldElement = $newType(32, $kindArray, "elliptic.p224FieldElement", "p224FieldElement", "crypto/elliptic", null);
	p224LargeFieldElement = $pkg.p224LargeFieldElement = $newType(120, $kindArray, "elliptic.p224LargeFieldElement", "p224LargeFieldElement", "crypto/elliptic", null);
	p256Curve = $pkg.p256Curve = $newType(0, $kindStruct, "elliptic.p256Curve", "p256Curve", "crypto/elliptic", function(CurveParams_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CurveParams = ptrType.nil;
			return;
		}
		this.CurveParams = CurveParams_;
	});
	ptrType = $ptrType(CurveParams);
	ptrType$1 = $ptrType(big.Int);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 28);
	arrayType$1 = $arrayType($Uint8, 32);
	arrayType$2 = $arrayType($Uint32, 9);
	arrayType$3 = $arrayType($Uint64, 17);
	arrayType$4 = $arrayType($Uint32, 18);
	arrayType$5 = $arrayType(arrayType$2, 3);
	arrayType$6 = $arrayType(arrayType$5, 16);
	CurveParams.ptr.prototype.Params = function() {
		var $ptr, curve;
		curve = this;
		return curve;
	};
	CurveParams.prototype.Params = function() { return this.$val.Params(); };
	CurveParams.ptr.prototype.IsOnCurve = function(x, y) {
		var $ptr, curve, threeX, x, x3, y, y2;
		curve = this;
		y2 = new big.Int.ptr().Mul(y, y);
		y2.Mod(y2, curve.P);
		x3 = new big.Int.ptr().Mul(x, x);
		x3.Mul(x3, x);
		threeX = new big.Int.ptr().Lsh(x, 1);
		threeX.Add(threeX, x);
		x3.Sub(x3, threeX);
		x3.Add(x3, curve.B);
		x3.Mod(x3, curve.P);
		return x3.Cmp(y2) === 0;
	};
	CurveParams.prototype.IsOnCurve = function(x, y) { return this.$val.IsOnCurve(x, y); };
	zForAffine = function(x, y) {
		var $ptr, x, y, z;
		z = new big.Int.ptr();
		if (!((x.Sign() === 0)) || !((y.Sign() === 0))) {
			z.SetInt64(new $Int64(0, 1));
		}
		return z;
	};
	CurveParams.ptr.prototype.affineFromJacobian = function(x, y, z) {
		var $ptr, _tmp, _tmp$1, curve, x, xOut, y, yOut, z, zinv, zinvsq;
		xOut = ptrType$1.nil;
		yOut = ptrType$1.nil;
		curve = this;
		if (z.Sign() === 0) {
			_tmp = new big.Int.ptr(); _tmp$1 = new big.Int.ptr(); xOut = _tmp; yOut = _tmp$1;
			return [xOut, yOut];
		}
		zinv = new big.Int.ptr().ModInverse(z, curve.P);
		zinvsq = new big.Int.ptr().Mul(zinv, zinv);
		xOut = new big.Int.ptr().Mul(x, zinvsq);
		xOut.Mod(xOut, curve.P);
		zinvsq.Mul(zinvsq, zinv);
		yOut = new big.Int.ptr().Mul(y, zinvsq);
		yOut.Mod(yOut, curve.P);
		return [xOut, yOut];
	};
	CurveParams.prototype.affineFromJacobian = function(x, y, z) { return this.$val.affineFromJacobian(x, y, z); };
	CurveParams.ptr.prototype.Add = function(x1, y1, x2, y2) {
		var $ptr, _tuple, curve, x1, x2, y1, y2, z1, z2;
		curve = this;
		z1 = zForAffine(x1, y1);
		z2 = zForAffine(x2, y2);
		_tuple = curve.addJacobian(x1, y1, z1, x2, y2, z2);
		return curve.affineFromJacobian(_tuple[0], _tuple[1], _tuple[2]);
	};
	CurveParams.prototype.Add = function(x1, y1, x2, y2) { return this.$val.Add(x1, y1, x2, y2); };
	CurveParams.ptr.prototype.addJacobian = function(x1, y1, z1, x2, y2, z2) {
		var $ptr, _tmp, _tmp$1, _tmp$2, curve, h, i, j, r, s1, s2, u1, u2, v, x1, x2, x3, xEqual, y1, y2, y3, yEqual, z1, z1z1, z2, z2z2, z3;
		curve = this;
		_tmp = new big.Int.ptr(); _tmp$1 = new big.Int.ptr(); _tmp$2 = new big.Int.ptr(); x3 = _tmp; y3 = _tmp$1; z3 = _tmp$2;
		if (z1.Sign() === 0) {
			x3.Set(x2);
			y3.Set(y2);
			z3.Set(z2);
			return [x3, y3, z3];
		}
		if (z2.Sign() === 0) {
			x3.Set(x1);
			y3.Set(y1);
			z3.Set(z1);
			return [x3, y3, z3];
		}
		z1z1 = new big.Int.ptr().Mul(z1, z1);
		z1z1.Mod(z1z1, curve.P);
		z2z2 = new big.Int.ptr().Mul(z2, z2);
		z2z2.Mod(z2z2, curve.P);
		u1 = new big.Int.ptr().Mul(x1, z2z2);
		u1.Mod(u1, curve.P);
		u2 = new big.Int.ptr().Mul(x2, z1z1);
		u2.Mod(u2, curve.P);
		h = new big.Int.ptr().Sub(u2, u1);
		xEqual = h.Sign() === 0;
		if (h.Sign() === -1) {
			h.Add(h, curve.P);
		}
		i = new big.Int.ptr().Lsh(h, 1);
		i.Mul(i, i);
		j = new big.Int.ptr().Mul(h, i);
		s1 = new big.Int.ptr().Mul(y1, z2);
		s1.Mul(s1, z2z2);
		s1.Mod(s1, curve.P);
		s2 = new big.Int.ptr().Mul(y2, z1);
		s2.Mul(s2, z1z1);
		s2.Mod(s2, curve.P);
		r = new big.Int.ptr().Sub(s2, s1);
		if (r.Sign() === -1) {
			r.Add(r, curve.P);
		}
		yEqual = r.Sign() === 0;
		if (xEqual && yEqual) {
			return curve.doubleJacobian(x1, y1, z1);
		}
		r.Lsh(r, 1);
		v = new big.Int.ptr().Mul(u1, i);
		x3.Set(r);
		x3.Mul(x3, x3);
		x3.Sub(x3, j);
		x3.Sub(x3, v);
		x3.Sub(x3, v);
		x3.Mod(x3, curve.P);
		y3.Set(r);
		v.Sub(v, x3);
		y3.Mul(y3, v);
		s1.Mul(s1, j);
		s1.Lsh(s1, 1);
		y3.Sub(y3, s1);
		y3.Mod(y3, curve.P);
		z3.Add(z1, z2);
		z3.Mul(z3, z3);
		z3.Sub(z3, z1z1);
		z3.Sub(z3, z2z2);
		z3.Mul(z3, h);
		z3.Mod(z3, curve.P);
		return [x3, y3, z3];
	};
	CurveParams.prototype.addJacobian = function(x1, y1, z1, x2, y2, z2) { return this.$val.addJacobian(x1, y1, z1, x2, y2, z2); };
	CurveParams.ptr.prototype.Double = function(x1, y1) {
		var $ptr, _tuple, curve, x1, y1, z1;
		curve = this;
		z1 = zForAffine(x1, y1);
		_tuple = curve.doubleJacobian(x1, y1, z1);
		return curve.affineFromJacobian(_tuple[0], _tuple[1], _tuple[2]);
	};
	CurveParams.prototype.Double = function(x1, y1) { return this.$val.Double(x1, y1); };
	CurveParams.ptr.prototype.doubleJacobian = function(x, y, z) {
		var $ptr, alpha, alpha2, beta, beta8, curve, delta, gamma, x, x3, y, y3, z, z3;
		curve = this;
		delta = new big.Int.ptr().Mul(z, z);
		delta.Mod(delta, curve.P);
		gamma = new big.Int.ptr().Mul(y, y);
		gamma.Mod(gamma, curve.P);
		alpha = new big.Int.ptr().Sub(x, delta);
		if (alpha.Sign() === -1) {
			alpha.Add(alpha, curve.P);
		}
		alpha2 = new big.Int.ptr().Add(x, delta);
		alpha.Mul(alpha, alpha2);
		alpha2.Set(alpha);
		alpha.Lsh(alpha, 1);
		alpha.Add(alpha, alpha2);
		beta = alpha2.Mul(x, gamma);
		x3 = new big.Int.ptr().Mul(alpha, alpha);
		beta8 = new big.Int.ptr().Lsh(beta, 3);
		x3.Sub(x3, beta8);
		while (true) {
			if (!(x3.Sign() === -1)) { break; }
			x3.Add(x3, curve.P);
		}
		x3.Mod(x3, curve.P);
		z3 = new big.Int.ptr().Add(y, z);
		z3.Mul(z3, z3);
		z3.Sub(z3, gamma);
		if (z3.Sign() === -1) {
			z3.Add(z3, curve.P);
		}
		z3.Sub(z3, delta);
		if (z3.Sign() === -1) {
			z3.Add(z3, curve.P);
		}
		z3.Mod(z3, curve.P);
		beta.Lsh(beta, 2);
		beta.Sub(beta, x3);
		if (beta.Sign() === -1) {
			beta.Add(beta, curve.P);
		}
		y3 = alpha.Mul(alpha, beta);
		gamma.Mul(gamma, gamma);
		gamma.Lsh(gamma, 3);
		gamma.Mod(gamma, curve.P);
		y3.Sub(y3, gamma);
		if (y3.Sign() === -1) {
			y3.Add(y3, curve.P);
		}
		y3.Mod(y3, curve.P);
		return [x3, y3, z3];
	};
	CurveParams.prototype.doubleJacobian = function(x, y, z) { return this.$val.doubleJacobian(x, y, z); };
	CurveParams.ptr.prototype.ScalarMult = function(Bx, By, k) {
		var $ptr, Bx, By, Bz, _i, _ref, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, bitNum, byte$1, curve, k, x, y, y$1, z;
		curve = this;
		Bz = new big.Int.ptr().SetInt64(new $Int64(0, 1));
		_tmp = new big.Int.ptr(); _tmp$1 = new big.Int.ptr(); _tmp$2 = new big.Int.ptr(); x = _tmp; y = _tmp$1; z = _tmp$2;
		_ref = k;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bitNum = 0;
			while (true) {
				if (!(bitNum < 8)) { break; }
				_tuple = curve.doubleJacobian(x, y, z); x = _tuple[0]; y = _tuple[1]; z = _tuple[2];
				if (((byte$1 & 128) >>> 0) === 128) {
					_tuple$1 = curve.addJacobian(Bx, By, Bz, x, y, z); x = _tuple$1[0]; y = _tuple$1[1]; z = _tuple$1[2];
				}
				byte$1 = (y$1 = (1), y$1 < 32 ? (byte$1 << y$1) : 0) << 24 >>> 24;
				bitNum = bitNum + (1) >> 0;
			}
			_i++;
		}
		return curve.affineFromJacobian(x, y, z);
	};
	CurveParams.prototype.ScalarMult = function(Bx, By, k) { return this.$val.ScalarMult(Bx, By, k); };
	CurveParams.ptr.prototype.ScalarBaseMult = function(k) {
		var $ptr, curve, k;
		curve = this;
		return curve.ScalarMult(curve.Gx, curve.Gy, k);
	};
	CurveParams.prototype.ScalarBaseMult = function(k) { return this.$val.ScalarBaseMult(k); };
	Unmarshal = function(curve, data) {
		var $ptr, _r, byteLen, curve, data, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; byteLen = $f.byteLen; curve = $f.curve; data = $f.data; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		_r = curve.Params(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		byteLen = ((_r.BitSize + 7 >> 0)) >> 3 >> 0;
		if (!((data.$length === (1 + (2 * byteLen >> 0) >> 0)))) {
			return [x, y];
		}
		if (!(((0 >= data.$length ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) === 4))) {
			return [x, y];
		}
		x = new big.Int.ptr().SetBytes($subslice(data, 1, (1 + byteLen >> 0)));
		y = new big.Int.ptr().SetBytes($subslice(data, (1 + byteLen >> 0)));
		return [x, y];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Unmarshal }; } $f.$ptr = $ptr; $f._r = _r; $f.byteLen = byteLen; $f.curve = curve; $f.data = data; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Unmarshal = Unmarshal;
	initAll = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = initP224(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = initP256(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = initP384(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = initP521(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: initAll }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	initP384 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p384 = new CurveParams.ptr();
		_r = new big.Int.ptr().SetString("39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319", 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; p384.P = _tuple[0];
		_r$1 = new big.Int.ptr().SetString("39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643", 10); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; p384.N = _tuple$1[0];
		_r$2 = new big.Int.ptr().SetString("b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef", 16); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; p384.B = _tuple$2[0];
		_r$3 = new big.Int.ptr().SetString("aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7", 16); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3; p384.Gx = _tuple$3[0];
		_r$4 = new big.Int.ptr().SetString("3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", 16); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$4 = _r$4; p384.Gy = _tuple$4[0];
		p384.BitSize = 384;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: initP384 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	initP521 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p521 = new CurveParams.ptr();
		_r = new big.Int.ptr().SetString("6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151", 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; p521.P = _tuple[0];
		_r$1 = new big.Int.ptr().SetString("6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449", 10); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; p521.N = _tuple$1[0];
		_r$2 = new big.Int.ptr().SetString("051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00", 16); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; p521.B = _tuple$2[0];
		_r$3 = new big.Int.ptr().SetString("c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66", 16); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3; p521.Gx = _tuple$3[0];
		_r$4 = new big.Int.ptr().SetString("11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", 16); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$4 = _r$4; p521.Gy = _tuple$4[0];
		p521.BitSize = 521;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: initP521 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	P256 = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new p256.constructor.elem(p256);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: P256 }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.P256 = P256;
	P384 = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p384;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: P384 }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.P384 = P384;
	P521 = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p521;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: P521 }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.P521 = P521;
	initP224 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p224.CurveParams = new CurveParams.ptr();
		_r = new big.Int.ptr().SetString("26959946667150639794667015087019630673557916260026308143510066298881", 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; p224.CurveParams.P = _tuple[0];
		_r$1 = new big.Int.ptr().SetString("26959946667150639794667015087019625940457807714424391721682722368061", 10); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; p224.CurveParams.N = _tuple$1[0];
		_r$2 = new big.Int.ptr().SetString("b4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4", 16); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; p224.CurveParams.B = _tuple$2[0];
		_r$3 = new big.Int.ptr().SetString("b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21", 16); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3; p224.CurveParams.Gx = _tuple$3[0];
		_r$4 = new big.Int.ptr().SetString("bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34", 16); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$4 = _r$4; p224.CurveParams.Gy = _tuple$4[0];
		p224.CurveParams.BitSize = 224;
		p224FromBig(p224.gx, p224.CurveParams.Gx);
		p224FromBig(p224.gy, p224.CurveParams.Gy);
		p224FromBig(p224.b, p224.CurveParams.B);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: initP224 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	P224 = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = initonce.Do(initAll); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new p224.constructor.elem(p224);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: P224 }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.P224 = P224;
	p224Curve.ptr.prototype.Params = function() {
		var $ptr, curve;
		curve = $clone(this, p224Curve);
		return curve.CurveParams;
	};
	p224Curve.prototype.Params = function() { return this.$val.Params(); };
	p224Curve.ptr.prototype.IsOnCurve = function(bigX, bigY) {
		var $ptr, _tmp, _tmp$1, bigX, bigY, curve, i, i$1, tmp, x, x$1, x$2, x3, y;
		curve = $clone(this, p224Curve);
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); x = $clone(_tmp, p224FieldElement); y = $clone(_tmp$1, p224FieldElement);
		p224FromBig(x, bigX);
		p224FromBig(y, bigY);
		tmp = $clone(p224LargeFieldElement.zero(), p224LargeFieldElement);
		x3 = $clone(p224FieldElement.zero(), p224FieldElement);
		p224Square(x3, x, tmp);
		p224Mul(x3, x3, x, tmp);
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = (x$1 = ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]), x$2 = 3, (((x$1 >>> 16 << 16) * x$2 >>> 0) + (x$1 << 16 >>> 16) * x$2) >>> 0));
			i = i + (1) >> 0;
		}
		p224Sub(x3, x3, x);
		p224Reduce(x3);
		p224Add(x3, x3, curve.b);
		p224Contract(x3, x3);
		p224Square(y, y, tmp);
		p224Contract(y, y);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 8)) { break; }
			if (!((((i$1 < 0 || i$1 >= y.length) ? $throwRuntimeError("index out of range") : y[i$1]) === ((i$1 < 0 || i$1 >= x3.length) ? $throwRuntimeError("index out of range") : x3[i$1])))) {
				return false;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return true;
	};
	p224Curve.prototype.IsOnCurve = function(bigX, bigY) { return this.$val.IsOnCurve(bigX, bigY); };
	p224Curve.ptr.prototype.Add = function(bigX1, bigY1, bigX2, bigY2) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, bigX1, bigX2, bigY1, bigY2, x, x1, x2, x3, y, y1, y2, y3, z1, z2, z3;
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$4 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$5 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$6 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$7 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$8 = $clone(p224FieldElement.zero(), p224FieldElement); x1 = $clone(_tmp, p224FieldElement); y1 = $clone(_tmp$1, p224FieldElement); z1 = $clone(_tmp$2, p224FieldElement); x2 = $clone(_tmp$3, p224FieldElement); y2 = $clone(_tmp$4, p224FieldElement); z2 = $clone(_tmp$5, p224FieldElement); x3 = $clone(_tmp$6, p224FieldElement); y3 = $clone(_tmp$7, p224FieldElement); z3 = $clone(_tmp$8, p224FieldElement);
		p224FromBig(x1, bigX1);
		p224FromBig(y1, bigY1);
		if (!((bigX1.Sign() === 0)) || !((bigY1.Sign() === 0))) {
			z1[0] = 1;
		}
		p224FromBig(x2, bigX2);
		p224FromBig(y2, bigY2);
		if (!((bigX2.Sign() === 0)) || !((bigY2.Sign() === 0))) {
			z2[0] = 1;
		}
		p224AddJacobian(x3, y3, z3, x1, y1, z1, x2, y2, z2);
		_tuple = p224ToAffine(x3, y3, z3); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.Add = function(bigX1, bigY1, bigX2, bigY2) { return this.$val.Add(bigX1, bigY1, bigX2, bigY2); };
	p224Curve.ptr.prototype.Double = function(bigX1, bigY1) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, bigX1, bigY1, x, x1, x2, y, y1, y2, z1, z2;
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$4 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$5 = $clone(p224FieldElement.zero(), p224FieldElement); x1 = $clone(_tmp, p224FieldElement); y1 = $clone(_tmp$1, p224FieldElement); z1 = $clone(_tmp$2, p224FieldElement); x2 = $clone(_tmp$3, p224FieldElement); y2 = $clone(_tmp$4, p224FieldElement); z2 = $clone(_tmp$5, p224FieldElement);
		p224FromBig(x1, bigX1);
		p224FromBig(y1, bigY1);
		z1[0] = 1;
		p224DoubleJacobian(x2, y2, z2, x1, y1, z1);
		_tuple = p224ToAffine(x2, y2, z2); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.Double = function(bigX1, bigY1) { return this.$val.Double(bigX1, bigY1); };
	p224Curve.ptr.prototype.ScalarMult = function(bigX1, bigY1, scalar) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, bigX1, bigY1, scalar, x, x1, x2, y, y1, y2, z1, z2;
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$4 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$5 = $clone(p224FieldElement.zero(), p224FieldElement); x1 = $clone(_tmp, p224FieldElement); y1 = $clone(_tmp$1, p224FieldElement); z1 = $clone(_tmp$2, p224FieldElement); x2 = $clone(_tmp$3, p224FieldElement); y2 = $clone(_tmp$4, p224FieldElement); z2 = $clone(_tmp$5, p224FieldElement);
		p224FromBig(x1, bigX1);
		p224FromBig(y1, bigY1);
		z1[0] = 1;
		p224ScalarMult(x2, y2, z2, x1, y1, z1, scalar);
		_tuple = p224ToAffine(x2, y2, z2); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.ScalarMult = function(bigX1, bigY1, scalar) { return this.$val.ScalarMult(bigX1, bigY1, scalar); };
	p224Curve.ptr.prototype.ScalarBaseMult = function(scalar) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, curve, scalar, x, x2, y, y2, z1, z2;
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		curve = $clone(this, p224Curve);
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); z1 = $clone(_tmp, p224FieldElement); x2 = $clone(_tmp$1, p224FieldElement); y2 = $clone(_tmp$2, p224FieldElement); z2 = $clone(_tmp$3, p224FieldElement);
		z1[0] = 1;
		p224ScalarMult(x2, y2, z2, curve.gx, curve.gy, z1, scalar);
		_tuple = p224ToAffine(x2, y2, z2); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p224IsZero = function(a) {
		var $ptr, _i, _ref, _tmp, _tmp$1, a, i, isP, isZero, minimal, result, v;
		minimal = $clone(p224FieldElement.zero(), p224FieldElement);
		p224Contract(minimal, a);
		_tmp = 0; _tmp$1 = 0; isZero = _tmp; isP = _tmp$1;
		_ref = minimal;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			isZero = (isZero | (v)) >>> 0;
			isP = (isP | ((v - ((i < 0 || i >= p224P.length) ? $throwRuntimeError("index out of range") : p224P[i]) >>> 0))) >>> 0;
			_i++;
		}
		isZero = (isZero | ((isZero >>> 16 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 8 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 4 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 2 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 1 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 16 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 8 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 4 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 2 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 1 >>> 0))) >>> 0;
		result = (isZero & isP) >>> 0;
		result = (((~result >>> 0)) & 1) >>> 0;
		return result;
	};
	p224Add = function(out, a, b) {
		var $ptr, a, b, i, out;
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i])) + (b.nilCheck, ((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b[i])) >>> 0);
			i = i + (1) >> 0;
		}
	};
	p224Sub = function(out, a, b) {
		var $ptr, a, b, i, out;
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i])) + ((i < 0 || i >= p224ZeroModP31.$length) ? $throwRuntimeError("index out of range") : p224ZeroModP31.$array[p224ZeroModP31.$offset + i]) >>> 0) - (b.nilCheck, ((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b[i])) >>> 0);
			i = i + (1) >> 0;
		}
	};
	p224Mul = function(out, a, b, tmp) {
		var $ptr, _index, a, b, i, i$1, j, out, tmp, x, x$1;
		i = 0;
		while (true) {
			if (!(i < 15)) { break; }
			tmp.nilCheck, ((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = new $Uint64(0, 0));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < 8)) { break; }
			j = 0;
			while (true) {
				if (!(j < 8)) { break; }
				_index = i$1 + j >> 0;
				tmp.nilCheck, ((_index < 0 || _index >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[_index] = (x = (tmp.nilCheck, ((_index < 0 || _index >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[_index])), x$1 = $mul64(new $Uint64(0, (a.nilCheck, ((i$1 < 0 || i$1 >= a.length) ? $throwRuntimeError("index out of range") : a[i$1]))), new $Uint64(0, (b.nilCheck, ((j < 0 || j >= b.length) ? $throwRuntimeError("index out of range") : b[j])))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low)));
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		p224ReduceLarge(out, tmp);
	};
	p224Square = function(out, a, tmp) {
		var $ptr, _index, _index$1, a, i, i$1, j, out, r, tmp, x, x$1, x$2, x$3;
		i = 0;
		while (true) {
			if (!(i < 15)) { break; }
			tmp.nilCheck, ((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = new $Uint64(0, 0));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < 8)) { break; }
			j = 0;
			while (true) {
				if (!(j <= i$1)) { break; }
				r = $mul64(new $Uint64(0, (a.nilCheck, ((i$1 < 0 || i$1 >= a.length) ? $throwRuntimeError("index out of range") : a[i$1]))), new $Uint64(0, (a.nilCheck, ((j < 0 || j >= a.length) ? $throwRuntimeError("index out of range") : a[j]))));
				if (i$1 === j) {
					_index = i$1 + j >> 0;
					tmp.nilCheck, ((_index < 0 || _index >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[_index] = (x = (tmp.nilCheck, ((_index < 0 || _index >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[_index])), x$1 = r, new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low)));
				} else {
					_index$1 = i$1 + j >> 0;
					tmp.nilCheck, ((_index$1 < 0 || _index$1 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[_index$1] = (x$2 = (tmp.nilCheck, ((_index$1 < 0 || _index$1 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[_index$1])), x$3 = $shiftLeft64(r, 1), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)));
				}
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		p224ReduceLarge(out, tmp);
	};
	p224ReduceLarge = function(out, in$1) {
		var $ptr, _index, _index$1, _index$2, _index$3, i, i$1, i$2, in$1, out, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i] = (x = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])), x$1 = ((i < 0 || i >= p224ZeroModP63.length) ? $throwRuntimeError("index out of range") : p224ZeroModP63[i]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low)));
			i = i + (1) >> 0;
		}
		i$1 = 14;
		while (true) {
			if (!(i$1 >= 8)) { break; }
			_index = i$1 - 8 >> 0;
			in$1.nilCheck, ((_index < 0 || _index >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index] = (x$2 = (in$1.nilCheck, ((_index < 0 || _index >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index])), x$3 = (in$1.nilCheck, ((i$1 < 0 || i$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$1])), new $Uint64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)));
			_index$1 = i$1 - 5 >> 0;
			in$1.nilCheck, ((_index$1 < 0 || _index$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index$1] = (x$4 = (in$1.nilCheck, ((_index$1 < 0 || _index$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index$1])), x$5 = $shiftLeft64(((x$6 = (in$1.nilCheck, ((i$1 < 0 || i$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$1])), new $Uint64(x$6.$high & 0, (x$6.$low & 65535) >>> 0))), 12), new $Uint64(x$4.$high + x$5.$high, x$4.$low + x$5.$low)));
			_index$2 = i$1 - 4 >> 0;
			in$1.nilCheck, ((_index$2 < 0 || _index$2 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index$2] = (x$7 = (in$1.nilCheck, ((_index$2 < 0 || _index$2 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index$2])), x$8 = $shiftRightUint64((in$1.nilCheck, ((i$1 < 0 || i$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$1])), 16), new $Uint64(x$7.$high + x$8.$high, x$7.$low + x$8.$low)));
			i$1 = i$1 - (1) >> 0;
		}
		in$1.nilCheck, in$1[8] = new $Uint64(0, 0);
		i$2 = 1;
		while (true) {
			if (!(i$2 < 8)) { break; }
			_index$3 = i$2 + 1 >> 0;
			in$1.nilCheck, ((_index$3 < 0 || _index$3 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index$3] = (x$9 = (in$1.nilCheck, ((_index$3 < 0 || _index$3 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[_index$3])), x$10 = $shiftRightUint64((in$1.nilCheck, ((i$2 < 0 || i$2 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$2])), 28), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low)));
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = ((x$11 = (in$1.nilCheck, ((i$2 < 0 || i$2 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$2])), new $Uint64(x$11.$high & 0, (x$11.$low & 268435455) >>> 0)).$low >>> 0));
			i$2 = i$2 + (1) >> 0;
		}
		in$1.nilCheck, in$1[0] = (x$12 = (in$1.nilCheck, in$1[0]), x$13 = (in$1.nilCheck, in$1[8]), new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		out.nilCheck, out[3] = (out.nilCheck, out[3]) + ((((x$14 = (in$1.nilCheck, in$1[8]), new $Uint64(x$14.$high & 0, (x$14.$low & 65535) >>> 0)).$low >>> 0) << 12 >>> 0)) >>> 0;
		out.nilCheck, out[4] = (out.nilCheck, out[4]) + (($shiftRightUint64((in$1.nilCheck, in$1[8]), 16).$low >>> 0)) >>> 0;
		out.nilCheck, out[0] = ((x$15 = (in$1.nilCheck, in$1[0]), new $Uint64(x$15.$high & 0, (x$15.$low & 268435455) >>> 0)).$low >>> 0);
		out.nilCheck, out[1] = (out.nilCheck, out[1]) + (((x$16 = $shiftRightUint64((in$1.nilCheck, in$1[0]), 28), new $Uint64(x$16.$high & 0, (x$16.$low & 268435455) >>> 0)).$low >>> 0)) >>> 0;
		out.nilCheck, out[2] = (out.nilCheck, out[2]) + (($shiftRightUint64((in$1.nilCheck, in$1[0]), 56).$low >>> 0)) >>> 0;
	};
	p224Reduce = function(a) {
		var $ptr, _index, a, i, mask$1, top, y;
		i = 0;
		while (true) {
			if (!(i < 7)) { break; }
			_index = i + 1 >> 0;
			a.nilCheck, ((_index < 0 || _index >= a.length) ? $throwRuntimeError("index out of range") : a[_index] = (a.nilCheck, ((_index < 0 || _index >= a.length) ? $throwRuntimeError("index out of range") : a[_index])) + (((a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i])) >>> 28 >>> 0)) >>> 0);
			a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = ((a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i])) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		top = (a.nilCheck, a[7]) >>> 28 >>> 0;
		a.nilCheck, a[7] = ((a.nilCheck, a[7]) & (268435455)) >>> 0;
		mask$1 = top;
		mask$1 = (mask$1 | ((mask$1 >>> 2 >>> 0))) >>> 0;
		mask$1 = (mask$1 | ((mask$1 >>> 1 >>> 0))) >>> 0;
		mask$1 = (y = (31), y < 32 ? (mask$1 << y) : 0) >>> 0;
		mask$1 = (((mask$1 >> 0) >> 31 >> 0) >>> 0);
		a.nilCheck, a[0] = (a.nilCheck, a[0]) - (top) >>> 0;
		a.nilCheck, a[3] = (a.nilCheck, a[3]) + ((top << 12 >>> 0)) >>> 0;
		a.nilCheck, a[3] = (a.nilCheck, a[3]) - (((1 & mask$1) >>> 0)) >>> 0;
		a.nilCheck, a[2] = (a.nilCheck, a[2]) + (((mask$1 & 268435455) >>> 0)) >>> 0;
		a.nilCheck, a[1] = (a.nilCheck, a[1]) + (((mask$1 & 268435455) >>> 0)) >>> 0;
		a.nilCheck, a[0] = (a.nilCheck, a[0]) + (((mask$1 & 268435456) >>> 0)) >>> 0;
	};
	p224Invert = function(out, in$1) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, c, f1, f2, f3, f4, i, i$1, i$2, i$3, i$4, i$5, i$6, in$1, out;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); f1 = $clone(_tmp, p224FieldElement); f2 = $clone(_tmp$1, p224FieldElement); f3 = $clone(_tmp$2, p224FieldElement); f4 = $clone(_tmp$3, p224FieldElement);
		c = $clone(p224LargeFieldElement.zero(), p224LargeFieldElement);
		p224Square(f1, in$1, c);
		p224Mul(f1, f1, in$1, c);
		p224Square(f1, f1, c);
		p224Mul(f1, f1, in$1, c);
		p224Square(f2, f1, c);
		p224Square(f2, f2, c);
		p224Square(f2, f2, c);
		p224Mul(f1, f1, f2, c);
		p224Square(f2, f1, c);
		i = 0;
		while (true) {
			if (!(i < 5)) { break; }
			p224Square(f2, f2, c);
			i = i + (1) >> 0;
		}
		p224Mul(f2, f2, f1, c);
		p224Square(f3, f2, c);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 11)) { break; }
			p224Square(f3, f3, c);
			i$1 = i$1 + (1) >> 0;
		}
		p224Mul(f2, f3, f2, c);
		p224Square(f3, f2, c);
		i$2 = 0;
		while (true) {
			if (!(i$2 < 23)) { break; }
			p224Square(f3, f3, c);
			i$2 = i$2 + (1) >> 0;
		}
		p224Mul(f3, f3, f2, c);
		p224Square(f4, f3, c);
		i$3 = 0;
		while (true) {
			if (!(i$3 < 47)) { break; }
			p224Square(f4, f4, c);
			i$3 = i$3 + (1) >> 0;
		}
		p224Mul(f3, f3, f4, c);
		p224Square(f4, f3, c);
		i$4 = 0;
		while (true) {
			if (!(i$4 < 23)) { break; }
			p224Square(f4, f4, c);
			i$4 = i$4 + (1) >> 0;
		}
		p224Mul(f2, f4, f2, c);
		i$5 = 0;
		while (true) {
			if (!(i$5 < 6)) { break; }
			p224Square(f2, f2, c);
			i$5 = i$5 + (1) >> 0;
		}
		p224Mul(f1, f1, f2, c);
		p224Square(f1, f1, c);
		p224Mul(f1, f1, in$1, c);
		i$6 = 0;
		while (true) {
			if (!(i$6 < 97)) { break; }
			p224Square(f1, f1, c);
			i$6 = i$6 + (1) >> 0;
		}
		p224Mul(out, f1, f3, c);
	};
	p224Contract = function(out, in$1) {
		var $ptr, _index, _index$1, _index$2, _index$3, bottom3NonZero, i, i$1, i$2, i$3, i$4, in$1, mask$1, mask$2, mask$3, n, out, out3Equal, out3GT, top, top4AllOnes;
		$copySlice(new sliceType$1(out), new sliceType$1(in$1));
		i = 0;
		while (true) {
			if (!(i < 7)) { break; }
			_index = i + 1 >> 0;
			out.nilCheck, ((_index < 0 || _index >= out.length) ? $throwRuntimeError("index out of range") : out[_index] = (out.nilCheck, ((_index < 0 || _index >= out.length) ? $throwRuntimeError("index out of range") : out[_index])) + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0)) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		top = (out.nilCheck, out[7]) >>> 28 >>> 0;
		out.nilCheck, out[7] = ((out.nilCheck, out[7]) & (268435455)) >>> 0;
		out.nilCheck, out[0] = (out.nilCheck, out[0]) - (top) >>> 0;
		out.nilCheck, out[3] = (out.nilCheck, out[3]) + ((top << 12 >>> 0)) >>> 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < 3)) { break; }
			mask$1 = ((((out.nilCheck, ((i$1 < 0 || i$1 >= out.length) ? $throwRuntimeError("index out of range") : out[i$1])) >> 0) >> 31 >> 0) >>> 0);
			out.nilCheck, ((i$1 < 0 || i$1 >= out.length) ? $throwRuntimeError("index out of range") : out[i$1] = (out.nilCheck, ((i$1 < 0 || i$1 >= out.length) ? $throwRuntimeError("index out of range") : out[i$1])) + (((268435456 & mask$1) >>> 0)) >>> 0);
			_index$1 = i$1 + 1 >> 0;
			out.nilCheck, ((_index$1 < 0 || _index$1 >= out.length) ? $throwRuntimeError("index out of range") : out[_index$1] = (out.nilCheck, ((_index$1 < 0 || _index$1 >= out.length) ? $throwRuntimeError("index out of range") : out[_index$1])) - (((1 & mask$1) >>> 0)) >>> 0);
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 3;
		while (true) {
			if (!(i$2 < 7)) { break; }
			_index$2 = i$2 + 1 >> 0;
			out.nilCheck, ((_index$2 < 0 || _index$2 >= out.length) ? $throwRuntimeError("index out of range") : out[_index$2] = (out.nilCheck, ((_index$2 < 0 || _index$2 >= out.length) ? $throwRuntimeError("index out of range") : out[_index$2])) + (((out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) >>> 28 >>> 0)) >>> 0);
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = ((out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) & (268435455)) >>> 0);
			i$2 = i$2 + (1) >> 0;
		}
		top = (out.nilCheck, out[7]) >>> 28 >>> 0;
		out.nilCheck, out[7] = ((out.nilCheck, out[7]) & (268435455)) >>> 0;
		out.nilCheck, out[0] = (out.nilCheck, out[0]) - (top) >>> 0;
		out.nilCheck, out[3] = (out.nilCheck, out[3]) + ((top << 12 >>> 0)) >>> 0;
		i$3 = 0;
		while (true) {
			if (!(i$3 < 3)) { break; }
			mask$2 = ((((out.nilCheck, ((i$3 < 0 || i$3 >= out.length) ? $throwRuntimeError("index out of range") : out[i$3])) >> 0) >> 31 >> 0) >>> 0);
			out.nilCheck, ((i$3 < 0 || i$3 >= out.length) ? $throwRuntimeError("index out of range") : out[i$3] = (out.nilCheck, ((i$3 < 0 || i$3 >= out.length) ? $throwRuntimeError("index out of range") : out[i$3])) + (((268435456 & mask$2) >>> 0)) >>> 0);
			_index$3 = i$3 + 1 >> 0;
			out.nilCheck, ((_index$3 < 0 || _index$3 >= out.length) ? $throwRuntimeError("index out of range") : out[_index$3] = (out.nilCheck, ((_index$3 < 0 || _index$3 >= out.length) ? $throwRuntimeError("index out of range") : out[_index$3])) - (((1 & mask$2) >>> 0)) >>> 0);
			i$3 = i$3 + (1) >> 0;
		}
		top4AllOnes = 4294967295;
		i$4 = 4;
		while (true) {
			if (!(i$4 < 8)) { break; }
			top4AllOnes = (top4AllOnes & ((out.nilCheck, ((i$4 < 0 || i$4 >= out.length) ? $throwRuntimeError("index out of range") : out[i$4])))) >>> 0;
			i$4 = i$4 + (1) >> 0;
		}
		top4AllOnes = (top4AllOnes | (4026531840)) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 16 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 8 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 4 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 2 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 1 >>> 0))) >>> 0;
		top4AllOnes = ((((top4AllOnes << 31 >>> 0) >> 0) >> 31 >> 0) >>> 0);
		bottom3NonZero = ((((out.nilCheck, out[0]) | (out.nilCheck, out[1])) >>> 0) | (out.nilCheck, out[2])) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 16 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 8 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 4 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 2 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 1 >>> 0))) >>> 0;
		bottom3NonZero = ((((bottom3NonZero << 31 >>> 0) >> 0) >> 31 >> 0) >>> 0);
		n = (out.nilCheck, out[3]) - 268431360 >>> 0;
		out3Equal = n;
		out3Equal = (out3Equal | ((out3Equal >>> 16 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 8 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 4 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 2 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 1 >>> 0))) >>> 0;
		out3Equal = ~((((out3Equal << 31 >>> 0) >> 0) >> 31 >> 0) >>> 0) >>> 0;
		out3GT = ~(((n >> 0) >> 31 >> 0) >>> 0) >>> 0;
		mask$3 = (top4AllOnes & ((((((out3Equal & bottom3NonZero) >>> 0)) | out3GT) >>> 0))) >>> 0;
		out.nilCheck, out[0] = (out.nilCheck, out[0]) - (((1 & mask$3) >>> 0)) >>> 0;
		out.nilCheck, out[3] = (out.nilCheck, out[3]) - (((268431360 & mask$3) >>> 0)) >>> 0;
		out.nilCheck, out[4] = (out.nilCheck, out[4]) - (((268435455 & mask$3) >>> 0)) >>> 0;
		out.nilCheck, out[5] = (out.nilCheck, out[5]) - (((268435455 & mask$3) >>> 0)) >>> 0;
		out.nilCheck, out[6] = (out.nilCheck, out[6]) - (((268435455 & mask$3) >>> 0)) >>> 0;
		out.nilCheck, out[7] = (out.nilCheck, out[7]) - (((268435455 & mask$3) >>> 0)) >>> 0;
	};
	p224AddJacobian = function(x3, y3, z3, x1, y1, z1, x2, y2, z2) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, h, i, i$1, i$2, i$3, j, j$1, r, s1, s2, u1, u2, v, x1, x2, x3, xEqual, y, y$1, y1, y2, y3, yEqual, z1, z1IsZero, z1z1, z2, z2IsZero, z2z2, z3;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$4 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$5 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$6 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$7 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$8 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$9 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$10 = $clone(p224FieldElement.zero(), p224FieldElement); z1z1 = $clone(_tmp, p224FieldElement); z2z2 = $clone(_tmp$1, p224FieldElement); u1 = $clone(_tmp$2, p224FieldElement); u2 = $clone(_tmp$3, p224FieldElement); s1 = $clone(_tmp$4, p224FieldElement); s2 = $clone(_tmp$5, p224FieldElement); h = $clone(_tmp$6, p224FieldElement); i = $clone(_tmp$7, p224FieldElement); j = $clone(_tmp$8, p224FieldElement); r = $clone(_tmp$9, p224FieldElement); v = $clone(_tmp$10, p224FieldElement);
		c = $clone(p224LargeFieldElement.zero(), p224LargeFieldElement);
		z1IsZero = p224IsZero(z1);
		z2IsZero = p224IsZero(z2);
		p224Square(z1z1, z1, c);
		p224Square(z2z2, z2, c);
		p224Mul(u1, x1, z2z2, c);
		p224Mul(u2, x2, z1z1, c);
		p224Mul(s1, z2, z2z2, c);
		p224Mul(s1, y1, s1, c);
		p224Mul(s2, z1, z1z1, c);
		p224Mul(s2, y2, s2, c);
		p224Sub(h, u2, u1);
		p224Reduce(h);
		xEqual = p224IsZero(h);
		j$1 = 0;
		while (true) {
			if (!(j$1 < 8)) { break; }
			((j$1 < 0 || j$1 >= i.length) ? $throwRuntimeError("index out of range") : i[j$1] = ((j$1 < 0 || j$1 >= h.length) ? $throwRuntimeError("index out of range") : h[j$1]) << 1 >>> 0);
			j$1 = j$1 + (1) >> 0;
		}
		p224Reduce(i);
		p224Square(i, i, c);
		p224Mul(j, h, i, c);
		p224Sub(r, s2, s1);
		p224Reduce(r);
		yEqual = p224IsZero(r);
		if ((xEqual === 1) && (yEqual === 1) && (z1IsZero === 0) && (z2IsZero === 0)) {
			p224DoubleJacobian(x3, y3, z3, x1, y1, z1);
			return;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < 8)) { break; }
			((i$1 < 0 || i$1 >= r.length) ? $throwRuntimeError("index out of range") : r[i$1] = (y = (1), y < 32 ? (((i$1 < 0 || i$1 >= r.length) ? $throwRuntimeError("index out of range") : r[i$1]) << y) : 0) >>> 0);
			i$1 = i$1 + (1) >> 0;
		}
		p224Reduce(r);
		p224Mul(v, u1, i, c);
		p224Add(z1z1, z1z1, z2z2);
		p224Add(z2z2, z1, z2);
		p224Reduce(z2z2);
		p224Square(z2z2, z2z2, c);
		p224Sub(z3, z2z2, z1z1);
		p224Reduce(z3);
		p224Mul(z3, z3, h, c);
		i$2 = 0;
		while (true) {
			if (!(i$2 < 8)) { break; }
			((i$2 < 0 || i$2 >= z1z1.length) ? $throwRuntimeError("index out of range") : z1z1[i$2] = ((i$2 < 0 || i$2 >= v.length) ? $throwRuntimeError("index out of range") : v[i$2]) << 1 >>> 0);
			i$2 = i$2 + (1) >> 0;
		}
		p224Add(z1z1, j, z1z1);
		p224Reduce(z1z1);
		p224Square(x3, r, c);
		p224Sub(x3, x3, z1z1);
		p224Reduce(x3);
		i$3 = 0;
		while (true) {
			if (!(i$3 < 8)) { break; }
			((i$3 < 0 || i$3 >= s1.length) ? $throwRuntimeError("index out of range") : s1[i$3] = (y$1 = (1), y$1 < 32 ? (((i$3 < 0 || i$3 >= s1.length) ? $throwRuntimeError("index out of range") : s1[i$3]) << y$1) : 0) >>> 0);
			i$3 = i$3 + (1) >> 0;
		}
		p224Mul(s1, s1, j, c);
		p224Sub(z1z1, v, x3);
		p224Reduce(z1z1);
		p224Mul(z1z1, z1z1, r, c);
		p224Sub(y3, z1z1, s1);
		p224Reduce(y3);
		p224CopyConditional(x3, x2, z1IsZero);
		p224CopyConditional(x3, x1, z2IsZero);
		p224CopyConditional(y3, y2, z1IsZero);
		p224CopyConditional(y3, y1, z2IsZero);
		p224CopyConditional(z3, z2, z1IsZero);
		p224CopyConditional(z3, z1, z2IsZero);
	};
	p224DoubleJacobian = function(x3, y3, z3, x1, y1, z1) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, alpha, beta, c, delta, gamma, i, i$1, i$2, i$3, t, x1, x3, y, y$1, y1, y3, z1, z3;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$4 = $clone(p224FieldElement.zero(), p224FieldElement); delta = $clone(_tmp, p224FieldElement); gamma = $clone(_tmp$1, p224FieldElement); beta = $clone(_tmp$2, p224FieldElement); alpha = $clone(_tmp$3, p224FieldElement); t = $clone(_tmp$4, p224FieldElement);
		c = $clone(p224LargeFieldElement.zero(), p224LargeFieldElement);
		p224Square(delta, z1, c);
		p224Square(gamma, y1, c);
		p224Mul(beta, x1, gamma, c);
		p224Add(t, x1, delta);
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			((i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t[i] = ((i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t[i]) + ((((i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t[i]) << 1 >>> 0)) >>> 0);
			i = i + (1) >> 0;
		}
		p224Reduce(t);
		p224Sub(alpha, x1, delta);
		p224Reduce(alpha);
		p224Mul(alpha, alpha, t, c);
		p224Add(z3, y1, z1);
		p224Reduce(z3);
		p224Square(z3, z3, c);
		p224Sub(z3, z3, gamma);
		p224Reduce(z3);
		p224Sub(z3, z3, delta);
		p224Reduce(z3);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 8)) { break; }
			((i$1 < 0 || i$1 >= delta.length) ? $throwRuntimeError("index out of range") : delta[i$1] = ((i$1 < 0 || i$1 >= beta.length) ? $throwRuntimeError("index out of range") : beta[i$1]) << 3 >>> 0);
			i$1 = i$1 + (1) >> 0;
		}
		p224Reduce(delta);
		p224Square(x3, alpha, c);
		p224Sub(x3, x3, delta);
		p224Reduce(x3);
		i$2 = 0;
		while (true) {
			if (!(i$2 < 8)) { break; }
			((i$2 < 0 || i$2 >= beta.length) ? $throwRuntimeError("index out of range") : beta[i$2] = (y = (2), y < 32 ? (((i$2 < 0 || i$2 >= beta.length) ? $throwRuntimeError("index out of range") : beta[i$2]) << y) : 0) >>> 0);
			i$2 = i$2 + (1) >> 0;
		}
		p224Sub(beta, beta, x3);
		p224Reduce(beta);
		p224Square(gamma, gamma, c);
		i$3 = 0;
		while (true) {
			if (!(i$3 < 8)) { break; }
			((i$3 < 0 || i$3 >= gamma.length) ? $throwRuntimeError("index out of range") : gamma[i$3] = (y$1 = (3), y$1 < 32 ? (((i$3 < 0 || i$3 >= gamma.length) ? $throwRuntimeError("index out of range") : gamma[i$3]) << y$1) : 0) >>> 0);
			i$3 = i$3 + (1) >> 0;
		}
		p224Reduce(gamma);
		p224Mul(y3, alpha, beta, c);
		p224Sub(y3, y3, gamma);
		p224Reduce(y3);
	};
	p224CopyConditional = function(out, in$1, control) {
		var $ptr, control, i, in$1, out, y;
		control = (y = (31), y < 32 ? (control << y) : 0) >>> 0;
		control = (((control >> 0) >> 31 >> 0) >>> 0);
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) ^ (((((((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) ^ (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i]))) >>> 0)) & control) >>> 0))) >>> 0);
			i = i + (1) >> 0;
		}
	};
	p224ScalarMult = function(outX, outY, outZ, inX, inY, inZ, scalar) {
		var $ptr, _i, _ref, _tmp, _tmp$1, _tmp$2, bit, bitNum, byte$1, i, inX, inY, inZ, outX, outY, outZ, scalar, xx, y, yy, zz;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); xx = $clone(_tmp, p224FieldElement); yy = $clone(_tmp$1, p224FieldElement); zz = $clone(_tmp$2, p224FieldElement);
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			outX.nilCheck, ((i < 0 || i >= outX.length) ? $throwRuntimeError("index out of range") : outX[i] = 0);
			outY.nilCheck, ((i < 0 || i >= outY.length) ? $throwRuntimeError("index out of range") : outY[i] = 0);
			outZ.nilCheck, ((i < 0 || i >= outZ.length) ? $throwRuntimeError("index out of range") : outZ[i] = 0);
			i = i + (1) >> 0;
		}
		_ref = scalar;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bitNum = 0;
			while (true) {
				if (!(bitNum < 8)) { break; }
				p224DoubleJacobian(outX, outY, outZ, outX, outY, outZ);
				bit = ((((((y = ((7 - bitNum >>> 0)), y < 32 ? (byte$1 >>> y) : 0) << 24 >>> 24)) & 1) >>> 0) >>> 0);
				p224AddJacobian(xx, yy, zz, inX, inY, inZ, outX, outY, outZ);
				p224CopyConditional(outX, xx, bit);
				p224CopyConditional(outY, yy, bit);
				p224CopyConditional(outZ, zz, bit);
				bitNum = bitNum + (1) >>> 0;
			}
			_i++;
		}
	};
	p224ToAffine = function(x, y, z) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, isPointAtInfinity, outx, outy, tmp, x, y, z, zinv, zinvsq;
		_tmp = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$1 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$2 = $clone(p224FieldElement.zero(), p224FieldElement); _tmp$3 = $clone(p224FieldElement.zero(), p224FieldElement); zinv = $clone(_tmp, p224FieldElement); zinvsq = $clone(_tmp$1, p224FieldElement); outx = $clone(_tmp$2, p224FieldElement); outy = $clone(_tmp$3, p224FieldElement);
		tmp = $clone(p224LargeFieldElement.zero(), p224LargeFieldElement);
		isPointAtInfinity = p224IsZero(z);
		if (isPointAtInfinity === 1) {
			return [new big.Int.ptr(), new big.Int.ptr()];
		}
		p224Invert(zinv, z);
		p224Square(zinvsq, zinv, tmp);
		p224Mul(x, x, zinvsq, tmp);
		p224Mul(zinvsq, zinvsq, zinv, tmp);
		p224Mul(y, y, zinvsq, tmp);
		p224Contract(outx, x);
		p224Contract(outy, y);
		return [p224ToBig(outx), p224ToBig(outy)];
	};
	get28BitsFromEnd = function(buf, shift) {
		var $ptr, b, buf, i, l, ret, shift, x, y, y$1;
		ret = 0;
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			b = 0;
			l = buf.$length;
			if (l > 0) {
				b = (x = l - 1 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x]));
				if (!((i === 3)) || (shift === 4)) {
					buf = $subslice(buf, 0, (l - 1 >> 0));
				}
			}
			ret = (ret | (((y = shift, y < 32 ? (((y$1 = ((8 * i >>> 0)), y$1 < 32 ? ((b >>> 0) << y$1) : 0) >>> 0) >>> y) : 0) >>> 0))) >>> 0;
			i = i + (1) >>> 0;
		}
		ret = (ret & (268435455)) >>> 0;
		return [ret, buf];
	};
	p224FromBig = function(out, in$1) {
		var $ptr, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, bytes, in$1, out;
		bytes = in$1.Bytes();
		_tuple = get28BitsFromEnd(bytes, 0); out.nilCheck, out[0] = _tuple[0]; bytes = _tuple[1];
		_tuple$1 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[1] = _tuple$1[0]; bytes = _tuple$1[1];
		_tuple$2 = get28BitsFromEnd(bytes, 0); out.nilCheck, out[2] = _tuple$2[0]; bytes = _tuple$2[1];
		_tuple$3 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[3] = _tuple$3[0]; bytes = _tuple$3[1];
		_tuple$4 = get28BitsFromEnd(bytes, 0); out.nilCheck, out[4] = _tuple$4[0]; bytes = _tuple$4[1];
		_tuple$5 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[5] = _tuple$5[0]; bytes = _tuple$5[1];
		_tuple$6 = get28BitsFromEnd(bytes, 0); out.nilCheck, out[6] = _tuple$6[0]; bytes = _tuple$6[1];
		_tuple$7 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[7] = _tuple$7[0]; bytes = _tuple$7[1];
	};
	p224ToBig = function(in$1) {
		var $ptr, buf, in$1;
		buf = $clone(arrayType.zero(), arrayType);
		buf[27] = ((in$1.nilCheck, in$1[0]) << 24 >>> 24);
		buf[26] = (((in$1.nilCheck, in$1[0]) >>> 8 >>> 0) << 24 >>> 24);
		buf[25] = (((in$1.nilCheck, in$1[0]) >>> 16 >>> 0) << 24 >>> 24);
		buf[24] = (((((((((in$1.nilCheck, in$1[0]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[1]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[23] = (((in$1.nilCheck, in$1[1]) >>> 4 >>> 0) << 24 >>> 24);
		buf[22] = (((in$1.nilCheck, in$1[1]) >>> 12 >>> 0) << 24 >>> 24);
		buf[21] = (((in$1.nilCheck, in$1[1]) >>> 20 >>> 0) << 24 >>> 24);
		buf[20] = ((in$1.nilCheck, in$1[2]) << 24 >>> 24);
		buf[19] = (((in$1.nilCheck, in$1[2]) >>> 8 >>> 0) << 24 >>> 24);
		buf[18] = (((in$1.nilCheck, in$1[2]) >>> 16 >>> 0) << 24 >>> 24);
		buf[17] = (((((((((in$1.nilCheck, in$1[2]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[3]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[16] = (((in$1.nilCheck, in$1[3]) >>> 4 >>> 0) << 24 >>> 24);
		buf[15] = (((in$1.nilCheck, in$1[3]) >>> 12 >>> 0) << 24 >>> 24);
		buf[14] = (((in$1.nilCheck, in$1[3]) >>> 20 >>> 0) << 24 >>> 24);
		buf[13] = ((in$1.nilCheck, in$1[4]) << 24 >>> 24);
		buf[12] = (((in$1.nilCheck, in$1[4]) >>> 8 >>> 0) << 24 >>> 24);
		buf[11] = (((in$1.nilCheck, in$1[4]) >>> 16 >>> 0) << 24 >>> 24);
		buf[10] = (((((((((in$1.nilCheck, in$1[4]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[5]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[9] = (((in$1.nilCheck, in$1[5]) >>> 4 >>> 0) << 24 >>> 24);
		buf[8] = (((in$1.nilCheck, in$1[5]) >>> 12 >>> 0) << 24 >>> 24);
		buf[7] = (((in$1.nilCheck, in$1[5]) >>> 20 >>> 0) << 24 >>> 24);
		buf[6] = ((in$1.nilCheck, in$1[6]) << 24 >>> 24);
		buf[5] = (((in$1.nilCheck, in$1[6]) >>> 8 >>> 0) << 24 >>> 24);
		buf[4] = (((in$1.nilCheck, in$1[6]) >>> 16 >>> 0) << 24 >>> 24);
		buf[3] = (((((((((in$1.nilCheck, in$1[6]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[7]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[2] = (((in$1.nilCheck, in$1[7]) >>> 4 >>> 0) << 24 >>> 24);
		buf[1] = (((in$1.nilCheck, in$1[7]) >>> 12 >>> 0) << 24 >>> 24);
		buf[0] = (((in$1.nilCheck, in$1[7]) >>> 20 >>> 0) << 24 >>> 24);
		return new big.Int.ptr().SetBytes(new sliceType(buf));
	};
	initP256 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p256.CurveParams = new CurveParams.ptr();
		_r = new big.Int.ptr().SetString("115792089210356248762697446949407573530086143415290314195533631308867097853951", 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; p256.CurveParams.P = _tuple[0];
		_r$1 = new big.Int.ptr().SetString("115792089210356248762697446949407573529996955224135760342422259061068512044369", 10); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; p256.CurveParams.N = _tuple$1[0];
		_r$2 = new big.Int.ptr().SetString("5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b", 16); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; p256.CurveParams.B = _tuple$2[0];
		_r$3 = new big.Int.ptr().SetString("6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", 16); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3; p256.CurveParams.Gx = _tuple$3[0];
		_r$4 = new big.Int.ptr().SetString("4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5", 16); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$4 = _r$4; p256.CurveParams.Gy = _tuple$4[0];
		p256.CurveParams.BitSize = 256;
		_r$5 = new big.Int.ptr().SetString("7fffffff00000001fffffffe8000000100000000ffffffff0000000180000000", 16); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$5 = _r$5; p256RInverse = _tuple$5[0];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: initP256 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	p256Curve.ptr.prototype.Params = function() {
		var $ptr, curve;
		curve = $clone(this, p256Curve);
		return curve.CurveParams;
	};
	p256Curve.prototype.Params = function() { return this.$val.Params(); };
	p256GetScalar = function(out, in$1) {
		var $ptr, _i, _ref, i, in$1, n, out, scalarBytes, v, x;
		n = new big.Int.ptr().SetBytes(in$1);
		scalarBytes = sliceType.nil;
		if (n.Cmp(p256.CurveParams.N) >= 0) {
			n.Mod(n, p256.CurveParams.N);
			scalarBytes = n.Bytes();
		} else {
			scalarBytes = in$1;
		}
		_ref = scalarBytes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = scalarBytes.$length - ((1 + i >> 0)) >> 0, out.nilCheck, ((x < 0 || x >= out.length) ? $throwRuntimeError("index out of range") : out[x] = v));
			_i++;
		}
	};
	p256Curve.ptr.prototype.ScalarBaseMult = function(scalar) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tuple, scalar, scalarReversed, x, x1, y, y1, z1;
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		scalarReversed = $clone(arrayType$1.zero(), arrayType$1);
		p256GetScalar(scalarReversed, scalar);
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); _tmp$2 = $clone(arrayType$2.zero(), arrayType$2); x1 = $clone(_tmp, arrayType$2); y1 = $clone(_tmp$1, arrayType$2); z1 = $clone(_tmp$2, arrayType$2);
		p256ScalarBaseMult(x1, y1, z1, scalarReversed);
		_tuple = p256ToAffine(x1, y1, z1); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p256Curve.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p256Curve.ptr.prototype.ScalarMult = function(bigX, bigY, scalar) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, bigX, bigY, px, py, scalar, scalarReversed, x, x1, y, y1, z1;
		x = ptrType$1.nil;
		y = ptrType$1.nil;
		scalarReversed = $clone(arrayType$1.zero(), arrayType$1);
		p256GetScalar(scalarReversed, scalar);
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); _tmp$2 = $clone(arrayType$2.zero(), arrayType$2); _tmp$3 = $clone(arrayType$2.zero(), arrayType$2); _tmp$4 = $clone(arrayType$2.zero(), arrayType$2); px = $clone(_tmp, arrayType$2); py = $clone(_tmp$1, arrayType$2); x1 = $clone(_tmp$2, arrayType$2); y1 = $clone(_tmp$3, arrayType$2); z1 = $clone(_tmp$4, arrayType$2);
		p256FromBig(px, bigX);
		p256FromBig(py, bigY);
		p256ScalarMult(x1, y1, z1, px, py, scalarReversed);
		_tuple = p256ToAffine(x1, y1, z1); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p256Curve.prototype.ScalarMult = function(bigX, bigY, scalar) { return this.$val.ScalarMult(bigX, bigY, scalar); };
	nonZeroToAllOnes = function(x) {
		var $ptr, x;
		return ((((x - 1 >>> 0)) >>> 31 >>> 0)) - 1 >>> 0;
	};
	p256ReduceCarry = function(inout, carry) {
		var $ptr, carry, carry_mask, inout;
		carry_mask = nonZeroToAllOnes(carry);
		inout.nilCheck, inout[0] = (inout.nilCheck, inout[0]) + ((carry << 1 >>> 0)) >>> 0;
		inout.nilCheck, inout[3] = (inout.nilCheck, inout[3]) + (((268435456 & carry_mask) >>> 0)) >>> 0;
		inout.nilCheck, inout[3] = (inout.nilCheck, inout[3]) - ((carry << 11 >>> 0)) >>> 0;
		inout.nilCheck, inout[4] = (inout.nilCheck, inout[4]) + (((536870911 & carry_mask) >>> 0)) >>> 0;
		inout.nilCheck, inout[5] = (inout.nilCheck, inout[5]) + (((268435455 & carry_mask) >>> 0)) >>> 0;
		inout.nilCheck, inout[6] = (inout.nilCheck, inout[6]) + (((536870911 & carry_mask) >>> 0)) >>> 0;
		inout.nilCheck, inout[6] = (inout.nilCheck, inout[6]) - ((carry << 22 >>> 0)) >>> 0;
		inout.nilCheck, inout[7] = (inout.nilCheck, inout[7]) - (((1 & carry_mask) >>> 0)) >>> 0;
		inout.nilCheck, inout[7] = (inout.nilCheck, inout[7]) + ((carry << 25 >>> 0)) >>> 0;
	};
	p256Sum = function(out, in$1, in2) {
		var $ptr, carry, i, in$1, in2, out;
		carry = 0;
		i = 0;
		while (true) {
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) + (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (536870911)) >>> 0);
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) + (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256Diff = function(out, in$1, in2) {
		var $ptr, carry, i, in$1, in2, out;
		carry = 0;
		i = 0;
		while (true) {
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) - (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (((i < 0 || i >= p256Zero31.length) ? $throwRuntimeError("index out of range") : p256Zero31[i])) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (536870911)) >>> 0);
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) - (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (((i < 0 || i >= p256Zero31.length) ? $throwRuntimeError("index out of range") : p256Zero31[i])) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256ReduceDegree = function(out, tmp) {
		var $ptr, _index, _index$1, _index$10, _index$11, _index$12, _index$13, _index$14, _index$15, _index$16, _index$17, _index$18, _index$19, _index$2, _index$20, _index$21, _index$22, _index$23, _index$24, _index$3, _index$4, _index$5, _index$6, _index$7, _index$8, _index$9, _tmp, _tmp$1, _tmp$2, carry, i, i$1, i$2, out, tmp, tmp2, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xMask;
		tmp = $clone(tmp, arrayType$3);
		tmp2 = $clone(arrayType$4.zero(), arrayType$4);
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; carry = _tmp; x = _tmp$1; xMask = _tmp$2;
		tmp2[0] = ((tmp[0].$low >>> 0) & 536870911) >>> 0;
		tmp2[1] = (tmp[0].$low >>> 0) >>> 29 >>> 0;
		tmp2[1] = (tmp2[1] | (((((($shiftRightUint64(tmp[0], 32).$low >>> 0) << 3 >>> 0)) & 268435455) >>> 0))) >>> 0;
		tmp2[1] = tmp2[1] + ((((tmp[1].$low >>> 0) & 268435455) >>> 0)) >>> 0;
		carry = tmp2[1] >>> 28 >>> 0;
		tmp2[1] = (tmp2[1] & (268435455)) >>> 0;
		i = 2;
		while (true) {
			if (!(i < 17)) { break; }
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = (($shiftRightUint64((x$1 = i - 2 >> 0, ((x$1 < 0 || x$1 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$1])), 32).$low >>> 0)) >>> 25 >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + (((((x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$2])).$low >>> 0)) >>> 28 >>> 0)) >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + (((((($shiftRightUint64((x$3 = i - 1 >> 0, ((x$3 < 0 || x$3 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$3])), 32).$low >>> 0) << 4 >>> 0)) & 536870911) >>> 0)) >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + ((((((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i]).$low >>> 0) & 536870911) >>> 0)) >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + (carry) >>> 0);
			carry = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) >>> 29 >>> 0;
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = (((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) & (536870911)) >>> 0);
			i = i + (1) >> 0;
			if (i === 17) {
				break;
			}
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ($shiftRightUint64((x$4 = i - 2 >> 0, ((x$4 < 0 || x$4 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$4])), 32).$low >>> 0) >>> 25 >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + ((((x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$5])).$low >>> 0) >>> 29 >>> 0)) >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + ((((((($shiftRightUint64((x$6 = i - 1 >> 0, ((x$6 < 0 || x$6 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$6])), 32).$low >>> 0)) << 3 >>> 0)) & 268435455) >>> 0)) >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + ((((((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i]).$low >>> 0) & 268435455) >>> 0)) >>> 0);
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) + (carry) >>> 0);
			carry = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) >>> 28 >>> 0;
			((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = (((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		tmp2[17] = ($shiftRightUint64(tmp[15], 32).$low >>> 0) >>> 25 >>> 0;
		tmp2[17] = tmp2[17] + (((tmp[16].$low >>> 0) >>> 29 >>> 0)) >>> 0;
		tmp2[17] = tmp2[17] + ((($shiftRightUint64(tmp[16], 32).$low >>> 0) << 3 >>> 0)) >>> 0;
		tmp2[17] = tmp2[17] + (carry) >>> 0;
		i$1 = 0;
		while (true) {
			_index = i$1 + 1 >> 0;
			((_index < 0 || _index >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index] = ((_index < 0 || _index >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index]) + ((((i$1 < 0 || i$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i$1]) >>> 29 >>> 0)) >>> 0);
			x = (((i$1 < 0 || i$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i$1]) & 536870911) >>> 0;
			xMask = nonZeroToAllOnes(x);
			((i$1 < 0 || i$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i$1] = 0);
			_index$1 = i$1 + 3 >> 0;
			((_index$1 < 0 || _index$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$1] = ((_index$1 < 0 || _index$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$1]) + (((((x << 10 >>> 0)) & 268435455) >>> 0)) >>> 0);
			_index$2 = i$1 + 4 >> 0;
			((_index$2 < 0 || _index$2 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$2] = ((_index$2 < 0 || _index$2 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$2]) + (((x >>> 18 >>> 0))) >>> 0);
			_index$3 = i$1 + 6 >> 0;
			((_index$3 < 0 || _index$3 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$3] = ((_index$3 < 0 || _index$3 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$3]) + (((((x << 21 >>> 0)) & 536870911) >>> 0)) >>> 0);
			_index$4 = i$1 + 7 >> 0;
			((_index$4 < 0 || _index$4 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$4] = ((_index$4 < 0 || _index$4 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$4]) + ((x >>> 8 >>> 0)) >>> 0);
			_index$5 = i$1 + 7 >> 0;
			((_index$5 < 0 || _index$5 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$5] = ((_index$5 < 0 || _index$5 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$5]) + (((268435456 & xMask) >>> 0)) >>> 0);
			_index$6 = i$1 + 8 >> 0;
			((_index$6 < 0 || _index$6 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$6] = ((_index$6 < 0 || _index$6 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$6]) + (((((x - 1 >>> 0)) & xMask) >>> 0)) >>> 0);
			_index$7 = i$1 + 7 >> 0;
			((_index$7 < 0 || _index$7 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$7] = ((_index$7 < 0 || _index$7 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$7]) - (((((x << 24 >>> 0)) & 268435455) >>> 0)) >>> 0);
			_index$8 = i$1 + 8 >> 0;
			((_index$8 < 0 || _index$8 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$8] = ((_index$8 < 0 || _index$8 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$8]) - ((x >>> 4 >>> 0)) >>> 0);
			_index$9 = i$1 + 8 >> 0;
			((_index$9 < 0 || _index$9 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$9] = ((_index$9 < 0 || _index$9 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$9]) + (((536870912 & xMask) >>> 0)) >>> 0);
			_index$10 = i$1 + 8 >> 0;
			((_index$10 < 0 || _index$10 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$10] = ((_index$10 < 0 || _index$10 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$10]) - (x) >>> 0);
			_index$11 = i$1 + 8 >> 0;
			((_index$11 < 0 || _index$11 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$11] = ((_index$11 < 0 || _index$11 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$11]) + (((((x << 28 >>> 0)) & 536870911) >>> 0)) >>> 0);
			_index$12 = i$1 + 9 >> 0;
			((_index$12 < 0 || _index$12 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$12] = ((_index$12 < 0 || _index$12 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$12]) + (((((((x >>> 1 >>> 0)) - 1 >>> 0)) & xMask) >>> 0)) >>> 0);
			if ((i$1 + 1 >> 0) === 9) {
				break;
			}
			_index$13 = i$1 + 2 >> 0;
			((_index$13 < 0 || _index$13 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$13] = ((_index$13 < 0 || _index$13 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$13]) + (((x$7 = i$1 + 1 >> 0, ((x$7 < 0 || x$7 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$7])) >>> 28 >>> 0)) >>> 0);
			x = ((x$8 = i$1 + 1 >> 0, ((x$8 < 0 || x$8 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$8])) & 268435455) >>> 0;
			xMask = nonZeroToAllOnes(x);
			(x$9 = i$1 + 1 >> 0, ((x$9 < 0 || x$9 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$9] = 0));
			_index$14 = i$1 + 4 >> 0;
			((_index$14 < 0 || _index$14 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$14] = ((_index$14 < 0 || _index$14 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$14]) + (((((x << 11 >>> 0)) & 536870911) >>> 0)) >>> 0);
			_index$15 = i$1 + 5 >> 0;
			((_index$15 < 0 || _index$15 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$15] = ((_index$15 < 0 || _index$15 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$15]) + (((x >>> 18 >>> 0))) >>> 0);
			_index$16 = i$1 + 7 >> 0;
			((_index$16 < 0 || _index$16 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$16] = ((_index$16 < 0 || _index$16 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$16]) + (((((x << 21 >>> 0)) & 268435455) >>> 0)) >>> 0);
			_index$17 = i$1 + 8 >> 0;
			((_index$17 < 0 || _index$17 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$17] = ((_index$17 < 0 || _index$17 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$17]) + ((x >>> 7 >>> 0)) >>> 0);
			_index$18 = i$1 + 8 >> 0;
			((_index$18 < 0 || _index$18 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$18] = ((_index$18 < 0 || _index$18 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$18]) + (((536870912 & xMask) >>> 0)) >>> 0);
			_index$19 = i$1 + 9 >> 0;
			((_index$19 < 0 || _index$19 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$19] = ((_index$19 < 0 || _index$19 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$19]) + (((((x - 1 >>> 0)) & xMask) >>> 0)) >>> 0);
			_index$20 = i$1 + 8 >> 0;
			((_index$20 < 0 || _index$20 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$20] = ((_index$20 < 0 || _index$20 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$20]) - (((((x << 25 >>> 0)) & 536870911) >>> 0)) >>> 0);
			_index$21 = i$1 + 9 >> 0;
			((_index$21 < 0 || _index$21 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$21] = ((_index$21 < 0 || _index$21 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$21]) - ((x >>> 4 >>> 0)) >>> 0);
			_index$22 = i$1 + 9 >> 0;
			((_index$22 < 0 || _index$22 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$22] = ((_index$22 < 0 || _index$22 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$22]) + (((268435456 & xMask) >>> 0)) >>> 0);
			_index$23 = i$1 + 9 >> 0;
			((_index$23 < 0 || _index$23 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$23] = ((_index$23 < 0 || _index$23 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$23]) - (x) >>> 0);
			_index$24 = i$1 + 10 >> 0;
			((_index$24 < 0 || _index$24 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$24] = ((_index$24 < 0 || _index$24 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[_index$24]) + (((((x - 1 >>> 0)) & xMask) >>> 0)) >>> 0);
			i$1 = i$1 + (2) >> 0;
		}
		carry = 0;
		i$2 = 0;
		while (true) {
			if (!(i$2 < 8)) { break; }
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = (x$10 = i$2 + 9 >> 0, ((x$10 < 0 || x$10 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$10])));
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = (out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) + (carry) >>> 0);
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = (out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) + ((((((x$11 = i$2 + 10 >> 0, ((x$11 < 0 || x$11 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$11])) << 28 >>> 0)) & 536870911) >>> 0)) >>> 0);
			carry = (out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) >>> 29 >>> 0;
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = ((out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) & (536870911)) >>> 0);
			i$2 = i$2 + (1) >> 0;
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = (x$12 = i$2 + 9 >> 0, ((x$12 < 0 || x$12 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$12])) >>> 1 >>> 0);
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = (out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) + (carry) >>> 0);
			carry = (out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) >>> 28 >>> 0;
			out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = ((out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) & (268435455)) >>> 0);
			i$2 = i$2 + (1) >> 0;
		}
		out.nilCheck, out[8] = tmp2[17];
		out.nilCheck, out[8] = (out.nilCheck, out[8]) + (carry) >>> 0;
		carry = (out.nilCheck, out[8]) >>> 29 >>> 0;
		out.nilCheck, out[8] = ((out.nilCheck, out[8]) & (536870911)) >>> 0;
		p256ReduceCarry(out, carry);
	};
	p256Square = function(out, in$1) {
		var $ptr, in$1, out, tmp, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$6, x$7, x$8, x$9;
		tmp = $clone(arrayType$3.zero(), arrayType$3);
		tmp[0] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), new $Uint64(0, (in$1.nilCheck, in$1[0])));
		tmp[1] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[1])), 1)));
		tmp[2] = (x = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[2])), 1))), x$1 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[1])), 1))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		tmp[3] = (x$2 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 1))), x$3 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[2])), 1))), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		tmp[4] = (x$4 = (x$5 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), x$6 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 2))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), new $Uint64(0, (in$1.nilCheck, in$1[2]))), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		tmp[5] = (x$8 = (x$9 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), x$10 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low)), x$11 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 1))), new $Uint64(x$8.$high + x$11.$high, x$8.$low + x$11.$low));
		tmp[6] = (x$12 = (x$13 = (x$14 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), x$15 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 2))), new $Uint64(x$14.$high + x$15.$high, x$14.$low + x$15.$low)), x$16 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), new $Uint64(x$13.$high + x$16.$high, x$13.$low + x$16.$low)), x$17 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 1))), new $Uint64(x$12.$high + x$17.$high, x$12.$low + x$17.$low));
		tmp[7] = (x$18 = (x$19 = (x$20 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), x$21 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$20.$high + x$21.$high, x$20.$low + x$21.$low)), x$22 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), new $Uint64(x$19.$high + x$22.$high, x$19.$low + x$22.$low)), x$23 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), new $Uint64(x$18.$high + x$23.$high, x$18.$low + x$23.$low));
		tmp[8] = (x$24 = (x$25 = (x$26 = (x$27 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$28 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 2))), new $Uint64(x$27.$high + x$28.$high, x$27.$low + x$28.$low)), x$29 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$26.$high + x$29.$high, x$26.$low + x$29.$low)), x$30 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 2))), new $Uint64(x$25.$high + x$30.$high, x$25.$low + x$30.$low)), x$31 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), new $Uint64(0, (in$1.nilCheck, in$1[4]))), new $Uint64(x$24.$high + x$31.$high, x$24.$low + x$31.$low));
		tmp[9] = (x$32 = (x$33 = (x$34 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$35 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$34.$high + x$35.$high, x$34.$low + x$35.$low)), x$36 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$33.$high + x$36.$high, x$33.$low + x$36.$low)), x$37 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), new $Uint64(x$32.$high + x$37.$high, x$32.$low + x$37.$low));
		tmp[10] = (x$38 = (x$39 = (x$40 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$41 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 2))), new $Uint64(x$40.$high + x$41.$high, x$40.$low + x$41.$low)), x$42 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$39.$high + x$42.$high, x$39.$low + x$42.$low)), x$43 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), new $Uint64(x$38.$high + x$43.$high, x$38.$low + x$43.$low));
		tmp[11] = (x$44 = (x$45 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$46 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$45.$high + x$46.$high, x$45.$low + x$46.$low)), x$47 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$44.$high + x$47.$high, x$44.$low + x$47.$low));
		tmp[12] = (x$48 = (x$49 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$50 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 2))), new $Uint64(x$49.$high + x$50.$high, x$49.$low + x$50.$low)), x$51 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), new $Uint64(0, (in$1.nilCheck, in$1[6]))), new $Uint64(x$48.$high + x$51.$high, x$48.$low + x$51.$low));
		tmp[13] = (x$52 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$53 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$52.$high + x$53.$high, x$52.$low + x$53.$low));
		tmp[14] = (x$54 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$55 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$54.$high + x$55.$high, x$54.$low + x$55.$low));
		tmp[15] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1)));
		tmp[16] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), new $Uint64(0, (in$1.nilCheck, in$1[8])));
		p256ReduceDegree(out, tmp);
	};
	p256Mul = function(out, in$1, in2) {
		var $ptr, in$1, in2, out, tmp, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99;
		tmp = $clone(arrayType$3.zero(), arrayType$3);
		tmp[0] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), new $Uint64(0, (in2.nilCheck, in2[0])));
		tmp[1] = (x = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), x$1 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		tmp[2] = (x$2 = (x$3 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), x$4 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), x$5 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$2.$high + x$5.$high, x$2.$low + x$5.$low));
		tmp[3] = (x$6 = (x$7 = (x$8 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), x$9 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$8.$high + x$9.$high, x$8.$low + x$9.$low)), x$10 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$7.$high + x$10.$high, x$7.$low + x$10.$low)), x$11 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$6.$high + x$11.$high, x$6.$low + x$11.$low));
		tmp[4] = (x$12 = (x$13 = (x$14 = (x$15 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), x$16 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$15.$high + x$16.$high, x$15.$low + x$16.$low)), x$17 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$14.$high + x$17.$high, x$14.$low + x$17.$low)), x$18 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$13.$high + x$18.$high, x$13.$low + x$18.$low)), x$19 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$12.$high + x$19.$high, x$12.$low + x$19.$low));
		tmp[5] = (x$20 = (x$21 = (x$22 = (x$23 = (x$24 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), x$25 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$24.$high + x$25.$high, x$24.$low + x$25.$low)), x$26 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$23.$high + x$26.$high, x$23.$low + x$26.$low)), x$27 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$22.$high + x$27.$high, x$22.$low + x$27.$low)), x$28 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$21.$high + x$28.$high, x$21.$low + x$28.$low)), x$29 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$20.$high + x$29.$high, x$20.$low + x$29.$low));
		tmp[6] = (x$30 = (x$31 = (x$32 = (x$33 = (x$34 = (x$35 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), x$36 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$35.$high + x$36.$high, x$35.$low + x$36.$low)), x$37 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$34.$high + x$37.$high, x$34.$low + x$37.$low)), x$38 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$33.$high + x$38.$high, x$33.$low + x$38.$low)), x$39 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$32.$high + x$39.$high, x$32.$low + x$39.$low)), x$40 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$31.$high + x$40.$high, x$31.$low + x$40.$low)), x$41 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$30.$high + x$41.$high, x$30.$low + x$41.$low));
		tmp[7] = (x$42 = (x$43 = (x$44 = (x$45 = (x$46 = (x$47 = (x$48 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), x$49 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$48.$high + x$49.$high, x$48.$low + x$49.$low)), x$50 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$47.$high + x$50.$high, x$47.$low + x$50.$low)), x$51 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$46.$high + x$51.$high, x$46.$low + x$51.$low)), x$52 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$45.$high + x$52.$high, x$45.$low + x$52.$low)), x$53 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$44.$high + x$53.$high, x$44.$low + x$53.$low)), x$54 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$43.$high + x$54.$high, x$43.$low + x$54.$low)), x$55 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$42.$high + x$55.$high, x$42.$low + x$55.$low));
		tmp[8] = (x$56 = (x$57 = (x$58 = (x$59 = (x$60 = (x$61 = (x$62 = (x$63 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$64 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$63.$high + x$64.$high, x$63.$low + x$64.$low)), x$65 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$62.$high + x$65.$high, x$62.$low + x$65.$low)), x$66 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$61.$high + x$66.$high, x$61.$low + x$66.$low)), x$67 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$60.$high + x$67.$high, x$60.$low + x$67.$low)), x$68 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$59.$high + x$68.$high, x$59.$low + x$68.$low)), x$69 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$58.$high + x$69.$high, x$58.$low + x$69.$low)), x$70 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$57.$high + x$70.$high, x$57.$low + x$70.$low)), x$71 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$56.$high + x$71.$high, x$56.$low + x$71.$low));
		tmp[9] = (x$72 = (x$73 = (x$74 = (x$75 = (x$76 = (x$77 = (x$78 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$79 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$78.$high + x$79.$high, x$78.$low + x$79.$low)), x$80 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$77.$high + x$80.$high, x$77.$low + x$80.$low)), x$81 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$76.$high + x$81.$high, x$76.$low + x$81.$low)), x$82 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$75.$high + x$82.$high, x$75.$low + x$82.$low)), x$83 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$74.$high + x$83.$high, x$74.$low + x$83.$low)), x$84 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$73.$high + x$84.$high, x$73.$low + x$84.$low)), x$85 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$72.$high + x$85.$high, x$72.$low + x$85.$low));
		tmp[10] = (x$86 = (x$87 = (x$88 = (x$89 = (x$90 = (x$91 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$92 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$91.$high + x$92.$high, x$91.$low + x$92.$low)), x$93 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$90.$high + x$93.$high, x$90.$low + x$93.$low)), x$94 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$89.$high + x$94.$high, x$89.$low + x$94.$low)), x$95 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$88.$high + x$95.$high, x$88.$low + x$95.$low)), x$96 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$87.$high + x$96.$high, x$87.$low + x$96.$low)), x$97 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$86.$high + x$97.$high, x$86.$low + x$97.$low));
		tmp[11] = (x$98 = (x$99 = (x$100 = (x$101 = (x$102 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$103 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$102.$high + x$103.$high, x$102.$low + x$103.$low)), x$104 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$101.$high + x$104.$high, x$101.$low + x$104.$low)), x$105 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$100.$high + x$105.$high, x$100.$low + x$105.$low)), x$106 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$99.$high + x$106.$high, x$99.$low + x$106.$low)), x$107 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$98.$high + x$107.$high, x$98.$low + x$107.$low));
		tmp[12] = (x$108 = (x$109 = (x$110 = (x$111 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$112 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$111.$high + x$112.$high, x$111.$low + x$112.$low)), x$113 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$110.$high + x$113.$high, x$110.$low + x$113.$low)), x$114 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$109.$high + x$114.$high, x$109.$low + x$114.$low)), x$115 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$108.$high + x$115.$high, x$108.$low + x$115.$low));
		tmp[13] = (x$116 = (x$117 = (x$118 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$119 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$118.$high + x$119.$high, x$118.$low + x$119.$low)), x$120 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$117.$high + x$120.$high, x$117.$low + x$120.$low)), x$121 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$116.$high + x$121.$high, x$116.$low + x$121.$low));
		tmp[14] = (x$122 = (x$123 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$124 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$123.$high + x$124.$high, x$123.$low + x$124.$low)), x$125 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$122.$high + x$125.$high, x$122.$low + x$125.$low));
		tmp[15] = (x$126 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$127 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$126.$high + x$127.$high, x$126.$low + x$127.$low));
		tmp[16] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0)));
		p256ReduceDegree(out, tmp);
	};
	p256Assign = function(out, in$1) {
		var $ptr, in$1, out;
		$copy(out, in$1, arrayType$2);
	};
	p256Invert = function(out, in$1) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, e16, e2, e32, e4, e64, e8, ftmp, ftmp2, i, i$1, i$2, i$3, i$4, i$5, i$6, in$1, out;
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); ftmp = $clone(_tmp, arrayType$2); ftmp2 = $clone(_tmp$1, arrayType$2);
		_tmp$2 = $clone(arrayType$2.zero(), arrayType$2); _tmp$3 = $clone(arrayType$2.zero(), arrayType$2); _tmp$4 = $clone(arrayType$2.zero(), arrayType$2); _tmp$5 = $clone(arrayType$2.zero(), arrayType$2); _tmp$6 = $clone(arrayType$2.zero(), arrayType$2); _tmp$7 = $clone(arrayType$2.zero(), arrayType$2); e2 = $clone(_tmp$2, arrayType$2); e4 = $clone(_tmp$3, arrayType$2); e8 = $clone(_tmp$4, arrayType$2); e16 = $clone(_tmp$5, arrayType$2); e32 = $clone(_tmp$6, arrayType$2); e64 = $clone(_tmp$7, arrayType$2);
		p256Square(ftmp, in$1);
		p256Mul(ftmp, in$1, ftmp);
		p256Assign(e2, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Mul(ftmp, ftmp, e2);
		p256Assign(e4, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Mul(ftmp, ftmp, e4);
		p256Assign(e8, ftmp);
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			p256Square(ftmp, ftmp);
			i = i + (1) >> 0;
		}
		p256Mul(ftmp, ftmp, e8);
		p256Assign(e16, ftmp);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 16)) { break; }
			p256Square(ftmp, ftmp);
			i$1 = i$1 + (1) >> 0;
		}
		p256Mul(ftmp, ftmp, e16);
		p256Assign(e32, ftmp);
		i$2 = 0;
		while (true) {
			if (!(i$2 < 32)) { break; }
			p256Square(ftmp, ftmp);
			i$2 = i$2 + (1) >> 0;
		}
		p256Assign(e64, ftmp);
		p256Mul(ftmp, ftmp, in$1);
		i$3 = 0;
		while (true) {
			if (!(i$3 < 192)) { break; }
			p256Square(ftmp, ftmp);
			i$3 = i$3 + (1) >> 0;
		}
		p256Mul(ftmp2, e64, e32);
		i$4 = 0;
		while (true) {
			if (!(i$4 < 16)) { break; }
			p256Square(ftmp2, ftmp2);
			i$4 = i$4 + (1) >> 0;
		}
		p256Mul(ftmp2, ftmp2, e16);
		i$5 = 0;
		while (true) {
			if (!(i$5 < 8)) { break; }
			p256Square(ftmp2, ftmp2);
			i$5 = i$5 + (1) >> 0;
		}
		p256Mul(ftmp2, ftmp2, e8);
		i$6 = 0;
		while (true) {
			if (!(i$6 < 4)) { break; }
			p256Square(ftmp2, ftmp2);
			i$6 = i$6 + (1) >> 0;
		}
		p256Mul(ftmp2, ftmp2, e4);
		p256Square(ftmp2, ftmp2);
		p256Square(ftmp2, ftmp2);
		p256Mul(ftmp2, ftmp2, e2);
		p256Square(ftmp2, ftmp2);
		p256Square(ftmp2, ftmp2);
		p256Mul(ftmp2, ftmp2, in$1);
		p256Mul(out, ftmp2, ftmp);
	};
	p256Scalar3 = function(out) {
		var $ptr, carry, i, out, x, x$1, x$2, x$3;
		carry = 0;
		i = 0;
		while (true) {
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (x = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])), x$1 = 3, (((x >>> 16 << 16) * x$1 >>> 0) + (x << 16 >>> 16) * x$1) >>> 0));
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (536870911)) >>> 0);
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (x$2 = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])), x$3 = 3, (((x$2 >>> 16 << 16) * x$3 >>> 0) + (x$2 << 16 >>> 16) * x$3) >>> 0));
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256Scalar4 = function(out) {
		var $ptr, _tmp, _tmp$1, carry, i, nextCarry, out, y, y$1;
		_tmp = 0; _tmp$1 = 0; carry = _tmp; nextCarry = _tmp$1;
		i = 0;
		while (true) {
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 27 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (y = (2), y < 32 ? ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) << y) : 0) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (536870911)) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0)) >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (536870911)) >>> 0);
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 26 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (y$1 = (2), y$1 < 32 ? ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) << y$1) : 0) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0)) >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256Scalar8 = function(out) {
		var $ptr, _tmp, _tmp$1, carry, i, nextCarry, out, y, y$1;
		_tmp = 0; _tmp$1 = 0; carry = _tmp; nextCarry = _tmp$1;
		i = 0;
		while (true) {
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 26 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (y = (3), y < 32 ? ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) << y) : 0) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (536870911)) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0)) >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (536870911)) >>> 0);
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 25 >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (y$1 = (3), y$1 < 32 ? ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) << y$1) : 0) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) + (carry) >>> 0);
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0)) >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) & (268435455)) >>> 0);
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256PointDouble = function(xOut, yOut, zOut, x, y, z) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, alpha, beta, delta, gamma, tmp, tmp2, x, xOut, y, yOut, z, zOut;
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); _tmp$2 = $clone(arrayType$2.zero(), arrayType$2); _tmp$3 = $clone(arrayType$2.zero(), arrayType$2); _tmp$4 = $clone(arrayType$2.zero(), arrayType$2); _tmp$5 = $clone(arrayType$2.zero(), arrayType$2); delta = $clone(_tmp, arrayType$2); gamma = $clone(_tmp$1, arrayType$2); alpha = $clone(_tmp$2, arrayType$2); beta = $clone(_tmp$3, arrayType$2); tmp = $clone(_tmp$4, arrayType$2); tmp2 = $clone(_tmp$5, arrayType$2);
		p256Square(delta, z);
		p256Square(gamma, y);
		p256Mul(beta, x, gamma);
		p256Sum(tmp, x, delta);
		p256Diff(tmp2, x, delta);
		p256Mul(alpha, tmp, tmp2);
		p256Scalar3(alpha);
		p256Sum(tmp, y, z);
		p256Square(tmp, tmp);
		p256Diff(tmp, tmp, gamma);
		p256Diff(zOut, tmp, delta);
		p256Scalar4(beta);
		p256Square(xOut, alpha);
		p256Diff(xOut, xOut, beta);
		p256Diff(xOut, xOut, beta);
		p256Diff(tmp, beta, xOut);
		p256Mul(tmp, alpha, tmp);
		p256Square(tmp2, gamma);
		p256Scalar8(tmp2);
		p256Diff(yOut, tmp, tmp2);
	};
	p256PointAddMixed = function(xOut, yOut, zOut, x1, y1, z1, x2, y2) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, h, i, j, r, rr, s2, tmp, u2, v, x1, x2, xOut, y1, y2, yOut, z1, z1z1, z1z1z1, zOut;
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); _tmp$2 = $clone(arrayType$2.zero(), arrayType$2); _tmp$3 = $clone(arrayType$2.zero(), arrayType$2); _tmp$4 = $clone(arrayType$2.zero(), arrayType$2); _tmp$5 = $clone(arrayType$2.zero(), arrayType$2); _tmp$6 = $clone(arrayType$2.zero(), arrayType$2); _tmp$7 = $clone(arrayType$2.zero(), arrayType$2); _tmp$8 = $clone(arrayType$2.zero(), arrayType$2); _tmp$9 = $clone(arrayType$2.zero(), arrayType$2); _tmp$10 = $clone(arrayType$2.zero(), arrayType$2); z1z1 = $clone(_tmp, arrayType$2); z1z1z1 = $clone(_tmp$1, arrayType$2); s2 = $clone(_tmp$2, arrayType$2); u2 = $clone(_tmp$3, arrayType$2); h = $clone(_tmp$4, arrayType$2); i = $clone(_tmp$5, arrayType$2); j = $clone(_tmp$6, arrayType$2); r = $clone(_tmp$7, arrayType$2); rr = $clone(_tmp$8, arrayType$2); v = $clone(_tmp$9, arrayType$2); tmp = $clone(_tmp$10, arrayType$2);
		p256Square(z1z1, z1);
		p256Sum(tmp, z1, z1);
		p256Mul(u2, x2, z1z1);
		p256Mul(z1z1z1, z1, z1z1);
		p256Mul(s2, y2, z1z1z1);
		p256Diff(h, u2, x1);
		p256Sum(i, h, h);
		p256Square(i, i);
		p256Mul(j, h, i);
		p256Diff(r, s2, y1);
		p256Sum(r, r, r);
		p256Mul(v, x1, i);
		p256Mul(zOut, tmp, h);
		p256Square(rr, r);
		p256Diff(xOut, rr, j);
		p256Diff(xOut, xOut, v);
		p256Diff(xOut, xOut, v);
		p256Diff(tmp, v, xOut);
		p256Mul(yOut, tmp, r);
		p256Mul(tmp, y1, j);
		p256Diff(yOut, yOut, tmp);
		p256Diff(yOut, yOut, tmp);
	};
	p256PointAdd = function(xOut, yOut, zOut, x1, y1, z1, x2, y2, z2) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, h, i, j, r, rr, s1, s2, tmp, u1, u2, v, x1, x2, xOut, y1, y2, yOut, z1, z1z1, z1z1z1, z2, z2z2, z2z2z2, zOut;
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); _tmp$2 = $clone(arrayType$2.zero(), arrayType$2); _tmp$3 = $clone(arrayType$2.zero(), arrayType$2); _tmp$4 = $clone(arrayType$2.zero(), arrayType$2); _tmp$5 = $clone(arrayType$2.zero(), arrayType$2); _tmp$6 = $clone(arrayType$2.zero(), arrayType$2); _tmp$7 = $clone(arrayType$2.zero(), arrayType$2); _tmp$8 = $clone(arrayType$2.zero(), arrayType$2); _tmp$9 = $clone(arrayType$2.zero(), arrayType$2); _tmp$10 = $clone(arrayType$2.zero(), arrayType$2); _tmp$11 = $clone(arrayType$2.zero(), arrayType$2); _tmp$12 = $clone(arrayType$2.zero(), arrayType$2); _tmp$13 = $clone(arrayType$2.zero(), arrayType$2); _tmp$14 = $clone(arrayType$2.zero(), arrayType$2); z1z1 = $clone(_tmp, arrayType$2); z1z1z1 = $clone(_tmp$1, arrayType$2); z2z2 = $clone(_tmp$2, arrayType$2); z2z2z2 = $clone(_tmp$3, arrayType$2); s1 = $clone(_tmp$4, arrayType$2); s2 = $clone(_tmp$5, arrayType$2); u1 = $clone(_tmp$6, arrayType$2); u2 = $clone(_tmp$7, arrayType$2); h = $clone(_tmp$8, arrayType$2); i = $clone(_tmp$9, arrayType$2); j = $clone(_tmp$10, arrayType$2); r = $clone(_tmp$11, arrayType$2); rr = $clone(_tmp$12, arrayType$2); v = $clone(_tmp$13, arrayType$2); tmp = $clone(_tmp$14, arrayType$2);
		p256Square(z1z1, z1);
		p256Square(z2z2, z2);
		p256Mul(u1, x1, z2z2);
		p256Sum(tmp, z1, z2);
		p256Square(tmp, tmp);
		p256Diff(tmp, tmp, z1z1);
		p256Diff(tmp, tmp, z2z2);
		p256Mul(z2z2z2, z2, z2z2);
		p256Mul(s1, y1, z2z2z2);
		p256Mul(u2, x2, z1z1);
		p256Mul(z1z1z1, z1, z1z1);
		p256Mul(s2, y2, z1z1z1);
		p256Diff(h, u2, u1);
		p256Sum(i, h, h);
		p256Square(i, i);
		p256Mul(j, h, i);
		p256Diff(r, s2, s1);
		p256Sum(r, r, r);
		p256Mul(v, u1, i);
		p256Mul(zOut, tmp, h);
		p256Square(rr, r);
		p256Diff(xOut, rr, j);
		p256Diff(xOut, xOut, v);
		p256Diff(xOut, xOut, v);
		p256Diff(tmp, v, xOut);
		p256Mul(yOut, tmp, r);
		p256Mul(tmp, s1, j);
		p256Diff(yOut, yOut, tmp);
		p256Diff(yOut, yOut, tmp);
	};
	p256CopyConditional = function(out, in$1, mask$1) {
		var $ptr, i, in$1, mask$1, out, tmp;
		i = 0;
		while (true) {
			if (!(i < 9)) { break; }
			tmp = (mask$1 & ((((in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) ^ (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i]))) >>> 0))) >>> 0;
			out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) ^ (tmp)) >>> 0);
			i = i + (1) >> 0;
		}
	};
	p256SelectAffinePoint = function(xOut, yOut, table, index) {
		var $ptr, _i, _i$1, _i$2, _i$3, _ref, _ref$1, _ref$2, _ref$3, i, i$1, i$2, index, j, j$1, mask$1, table, xOut, yOut;
		_ref = xOut;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i = _i;
			xOut.nilCheck, ((i < 0 || i >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i] = 0);
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 9)) { break; }
			i$1 = _i$1;
			yOut.nilCheck, ((i$1 < 0 || i$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$1] = 0);
			_i$1++;
		}
		i$2 = 1;
		while (true) {
			if (!(i$2 < 16)) { break; }
			mask$1 = (i$2 ^ index) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 2 >>> 0))) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 1 >>> 0))) >>> 0;
			mask$1 = (mask$1 & (1)) >>> 0;
			mask$1 = mask$1 - (1) >>> 0;
			_ref$2 = xOut;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < 9)) { break; }
				j = _i$2;
				xOut.nilCheck, ((j < 0 || j >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[j] = ((xOut.nilCheck, ((j < 0 || j >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[j])) | ((((0 >= table.$length ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]) & mask$1) >>> 0))) >>> 0);
				table = $subslice(table, 1);
				_i$2++;
			}
			_ref$3 = yOut;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < 9)) { break; }
				j$1 = _i$3;
				yOut.nilCheck, ((j$1 < 0 || j$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[j$1] = ((yOut.nilCheck, ((j$1 < 0 || j$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[j$1])) | ((((0 >= table.$length ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]) & mask$1) >>> 0))) >>> 0);
				table = $subslice(table, 1);
				_i$3++;
			}
			i$2 = i$2 + (1) >>> 0;
		}
	};
	p256SelectJacobianPoint = function(xOut, yOut, zOut, table, index) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, i, i$1, i$2, i$3, index, j, j$1, j$2, mask$1, table, x, x$1, x$2, xOut, yOut, zOut;
		_ref = xOut;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i = _i;
			xOut.nilCheck, ((i < 0 || i >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i] = 0);
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 9)) { break; }
			i$1 = _i$1;
			yOut.nilCheck, ((i$1 < 0 || i$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$1] = 0);
			_i$1++;
		}
		_ref$2 = zOut;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < 9)) { break; }
			i$2 = _i$2;
			zOut.nilCheck, ((i$2 < 0 || i$2 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[i$2] = 0);
			_i$2++;
		}
		i$3 = 1;
		while (true) {
			if (!(i$3 < 16)) { break; }
			mask$1 = (i$3 ^ index) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 2 >>> 0))) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 1 >>> 0))) >>> 0;
			mask$1 = (mask$1 & (1)) >>> 0;
			mask$1 = mask$1 - (1) >>> 0;
			_ref$3 = xOut;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < 9)) { break; }
				j = _i$3;
				xOut.nilCheck, ((j < 0 || j >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[j] = ((xOut.nilCheck, ((j < 0 || j >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[j])) | ((((x = (table.nilCheck, ((i$3 < 0 || i$3 >= table.length) ? $throwRuntimeError("index out of range") : table[i$3]))[0], ((j < 0 || j >= x.length) ? $throwRuntimeError("index out of range") : x[j])) & mask$1) >>> 0))) >>> 0);
				_i$3++;
			}
			_ref$4 = yOut;
			_i$4 = 0;
			while (true) {
				if (!(_i$4 < 9)) { break; }
				j$1 = _i$4;
				yOut.nilCheck, ((j$1 < 0 || j$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[j$1] = ((yOut.nilCheck, ((j$1 < 0 || j$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[j$1])) | ((((x$1 = (table.nilCheck, ((i$3 < 0 || i$3 >= table.length) ? $throwRuntimeError("index out of range") : table[i$3]))[1], ((j$1 < 0 || j$1 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[j$1])) & mask$1) >>> 0))) >>> 0);
				_i$4++;
			}
			_ref$5 = zOut;
			_i$5 = 0;
			while (true) {
				if (!(_i$5 < 9)) { break; }
				j$2 = _i$5;
				zOut.nilCheck, ((j$2 < 0 || j$2 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[j$2] = ((zOut.nilCheck, ((j$2 < 0 || j$2 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[j$2])) | ((((x$2 = (table.nilCheck, ((i$3 < 0 || i$3 >= table.length) ? $throwRuntimeError("index out of range") : table[i$3]))[2], ((j$2 < 0 || j$2 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[j$2])) & mask$1) >>> 0))) >>> 0);
				_i$5++;
			}
			i$3 = i$3 + (1) >>> 0;
		}
	};
	p256GetBit = function(scalar, bit) {
		var $ptr, bit, scalar, x, y;
		return ((((((y = (((bit & 7) >>> 0)), y < 32 ? (((x = bit >>> 3 >>> 0, (scalar.nilCheck, ((x < 0 || x >= scalar.length) ? $throwRuntimeError("index out of range") : scalar[x])))) >>> y) : 0) << 24 >>> 24)) & 1) >>> 0) >>> 0);
	};
	p256ScalarBaseMult = function(xOut, yOut, zOut, scalar) {
		var $ptr, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, bit0, bit1, bit2, bit3, i, i$1, i$2, i$3, index, j, mask$1, nIsInfinityMask, pIsNoninfiniteMask, px, py, scalar, tableOffset, tx, ty, tz, xOut, yOut, zOut;
		nIsInfinityMask = 4294967295;
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; pIsNoninfiniteMask = _tmp; mask$1 = _tmp$1; tableOffset = _tmp$2;
		_tmp$3 = $clone(arrayType$2.zero(), arrayType$2); _tmp$4 = $clone(arrayType$2.zero(), arrayType$2); _tmp$5 = $clone(arrayType$2.zero(), arrayType$2); _tmp$6 = $clone(arrayType$2.zero(), arrayType$2); _tmp$7 = $clone(arrayType$2.zero(), arrayType$2); px = $clone(_tmp$3, arrayType$2); py = $clone(_tmp$4, arrayType$2); tx = $clone(_tmp$5, arrayType$2); ty = $clone(_tmp$6, arrayType$2); tz = $clone(_tmp$7, arrayType$2);
		_ref = xOut;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i = _i;
			xOut.nilCheck, ((i < 0 || i >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i] = 0);
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 9)) { break; }
			i$1 = _i$1;
			yOut.nilCheck, ((i$1 < 0 || i$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$1] = 0);
			_i$1++;
		}
		_ref$2 = zOut;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < 9)) { break; }
			i$2 = _i$2;
			zOut.nilCheck, ((i$2 < 0 || i$2 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[i$2] = 0);
			_i$2++;
		}
		i$3 = 0;
		while (true) {
			if (!(i$3 < 32)) { break; }
			if (!((i$3 === 0))) {
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
			}
			tableOffset = 0;
			j = 0;
			while (true) {
				if (!(j <= 32)) { break; }
				bit0 = p256GetBit(scalar, (31 - i$3 >>> 0) + j >>> 0);
				bit1 = p256GetBit(scalar, (95 - i$3 >>> 0) + j >>> 0);
				bit2 = p256GetBit(scalar, (159 - i$3 >>> 0) + j >>> 0);
				bit3 = p256GetBit(scalar, (223 - i$3 >>> 0) + j >>> 0);
				index = (((((bit0 | ((bit1 << 1 >>> 0))) >>> 0) | ((bit2 << 2 >>> 0))) >>> 0) | ((bit3 << 3 >>> 0))) >>> 0;
				p256SelectAffinePoint(px, py, $subslice(new sliceType$1(p256Precomputed), tableOffset), index);
				tableOffset = tableOffset + (270) >>> 0;
				p256PointAddMixed(tx, ty, tz, xOut, yOut, zOut, px, py);
				p256CopyConditional(xOut, px, nIsInfinityMask);
				p256CopyConditional(yOut, py, nIsInfinityMask);
				p256CopyConditional(zOut, p256One, nIsInfinityMask);
				pIsNoninfiniteMask = nonZeroToAllOnes(index);
				mask$1 = (pIsNoninfiniteMask & (~nIsInfinityMask >>> 0)) >>> 0;
				p256CopyConditional(xOut, tx, mask$1);
				p256CopyConditional(yOut, ty, mask$1);
				p256CopyConditional(zOut, tz, mask$1);
				nIsInfinityMask = (nIsInfinityMask & ((~pIsNoninfiniteMask >>> 0))) >>> 0;
				j = j + (32) >>> 0;
			}
			i$3 = i$3 + (1) >>> 0;
		}
	};
	p256PointToAffine = function(xOut, yOut, x, y, z) {
		var $ptr, _tmp, _tmp$1, x, xOut, y, yOut, z, zInv, zInvSq;
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); zInv = $clone(_tmp, arrayType$2); zInvSq = $clone(_tmp$1, arrayType$2);
		p256Invert(zInv, z);
		p256Square(zInvSq, zInv);
		p256Mul(xOut, x, zInvSq);
		p256Mul(zInv, zInv, zInvSq);
		p256Mul(yOut, y, zInv);
	};
	p256ToAffine = function(x, y, z) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, x, xOut, xx, y, yOut, yy, z;
		xOut = ptrType$1.nil;
		yOut = ptrType$1.nil;
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); xx = $clone(_tmp, arrayType$2); yy = $clone(_tmp$1, arrayType$2);
		p256PointToAffine(xx, yy, x, y, z);
		_tmp$2 = p256ToBig(xx); _tmp$3 = p256ToBig(yy); xOut = _tmp$2; yOut = _tmp$3;
		return [xOut, yOut];
	};
	p256ScalarMult = function(xOut, yOut, zOut, x, y, scalar) {
		var $ptr, _i, _i$1, _i$2, _q, _q$1, _q$2, _q$3, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, i, i$1, i$2, i$3, i$4, index, mask$1, nIsInfinityMask, pIsNoninfiniteMask, precomp, px, py, pz, scalar, tx, ty, tz, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, xOut, y, y$1, yOut, zOut;
		_tmp = $clone(arrayType$2.zero(), arrayType$2); _tmp$1 = $clone(arrayType$2.zero(), arrayType$2); _tmp$2 = $clone(arrayType$2.zero(), arrayType$2); _tmp$3 = $clone(arrayType$2.zero(), arrayType$2); _tmp$4 = $clone(arrayType$2.zero(), arrayType$2); _tmp$5 = $clone(arrayType$2.zero(), arrayType$2); px = $clone(_tmp, arrayType$2); py = $clone(_tmp$1, arrayType$2); pz = $clone(_tmp$2, arrayType$2); tx = $clone(_tmp$3, arrayType$2); ty = $clone(_tmp$4, arrayType$2); tz = $clone(_tmp$5, arrayType$2);
		precomp = $clone(arrayType$6.zero(), arrayType$6);
		_tmp$6 = 0; _tmp$7 = 0; _tmp$8 = 0; _tmp$9 = 0; nIsInfinityMask = _tmp$6; index = _tmp$7; pIsNoninfiniteMask = _tmp$8; mask$1 = _tmp$9;
		$copy(precomp[1][0], x, arrayType$2);
		$copy(precomp[1][1], y, arrayType$2);
		$copy(precomp[1][2], p256One, arrayType$2);
		i = 2;
		while (true) {
			if (!(i < 16)) { break; }
			p256PointDouble(((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[0], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[1], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[2], (x$1 = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$1]))[0], (x$2 = (_q$1 = i / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$2 < 0 || x$2 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$2]))[1], (x$3 = (_q$2 = i / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$3 < 0 || x$3 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$3]))[2]);
			p256PointAddMixed((x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$4]))[0], (x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$5]))[1], (x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$6]))[2], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[0], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[1], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[2], x, y);
			i = i + (2) >> 0;
		}
		_ref = xOut;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i$1 = _i;
			xOut.nilCheck, ((i$1 < 0 || i$1 >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i$1] = 0);
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 9)) { break; }
			i$2 = _i$1;
			yOut.nilCheck, ((i$2 < 0 || i$2 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$2] = 0);
			_i$1++;
		}
		_ref$2 = zOut;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < 9)) { break; }
			i$3 = _i$2;
			zOut.nilCheck, ((i$3 < 0 || i$3 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[i$3] = 0);
			_i$2++;
		}
		nIsInfinityMask = 4294967295;
		i$4 = 0;
		while (true) {
			if (!(i$4 < 64)) { break; }
			if (!((i$4 === 0))) {
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
			}
			index = ((x$7 = 31 - (_q$3 = i$4 / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0, (scalar.nilCheck, ((x$7 < 0 || x$7 >= scalar.length) ? $throwRuntimeError("index out of range") : scalar[x$7]))) >>> 0);
			if (((i$4 & 1)) === 1) {
				index = (index & (15)) >>> 0;
			} else {
				index = (y$1 = (4), y$1 < 32 ? (index >>> y$1) : 0) >>> 0;
			}
			p256SelectJacobianPoint(px, py, pz, precomp, index);
			p256PointAdd(tx, ty, tz, xOut, yOut, zOut, px, py, pz);
			p256CopyConditional(xOut, px, nIsInfinityMask);
			p256CopyConditional(yOut, py, nIsInfinityMask);
			p256CopyConditional(zOut, pz, nIsInfinityMask);
			pIsNoninfiniteMask = nonZeroToAllOnes(index);
			mask$1 = (pIsNoninfiniteMask & (~nIsInfinityMask >>> 0)) >>> 0;
			p256CopyConditional(xOut, tx, mask$1);
			p256CopyConditional(yOut, ty, mask$1);
			p256CopyConditional(zOut, tz, mask$1);
			nIsInfinityMask = (nIsInfinityMask & ((~pIsNoninfiniteMask >>> 0))) >>> 0;
			i$4 = i$4 + (1) >> 0;
		}
	};
	p256FromBig = function(out, in$1) {
		var $ptr, bits, bits$1, i, in$1, out, tmp;
		tmp = new big.Int.ptr().Lsh(in$1, 257);
		tmp.Mod(tmp, p256.CurveParams.P);
		i = 0;
		while (true) {
			if (!(i < 9)) { break; }
			bits = tmp.Bits();
			if (bits.$length > 0) {
				out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (((0 >= bits.$length ? $throwRuntimeError("index out of range") : bits.$array[bits.$offset + 0]) >>> 0) & 536870911) >>> 0);
			} else {
				out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = 0);
			}
			tmp.Rsh(tmp, 29);
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			bits$1 = tmp.Bits();
			if (bits$1.$length > 0) {
				out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (((0 >= bits$1.$length ? $throwRuntimeError("index out of range") : bits$1.$array[bits$1.$offset + 0]) >>> 0) & 268435455) >>> 0);
			} else {
				out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = 0);
			}
			tmp.Rsh(tmp, 28);
			i = i + (1) >> 0;
		}
	};
	p256ToBig = function(in$1) {
		var $ptr, _tmp, _tmp$1, i, in$1, result, tmp;
		_tmp = new big.Int.ptr(); _tmp$1 = new big.Int.ptr(); result = _tmp; tmp = _tmp$1;
		result.SetInt64(new $Int64(0, (in$1.nilCheck, in$1[8])));
		i = 7;
		while (true) {
			if (!(i >= 0)) { break; }
			if (((i & 1)) === 0) {
				result.Lsh(result, 29);
			} else {
				result.Lsh(result, 28);
			}
			tmp.SetInt64(new $Int64(0, (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i]))));
			result.Add(result, tmp);
			i = i - (1) >> 0;
		}
		result.Mul(result, p256RInverse);
		result.Mod(result, p256.CurveParams.P);
		return result;
	};
	ptrType.methods = [{prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "IsOnCurve", name: "IsOnCurve", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [$Bool], false)}, {prop: "affineFromJacobian", name: "affineFromJacobian", pkg: "crypto/elliptic", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "addJacobian", name: "addJacobian", pkg: "crypto/elliptic", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1, ptrType$1], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "doubleJacobian", name: "doubleJacobian", pkg: "crypto/elliptic", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1, ptrType$1], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType], [ptrType$1, ptrType$1], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}];
	p224Curve.methods = [{prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "IsOnCurve", name: "IsOnCurve", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [$Bool], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType], [ptrType$1, ptrType$1], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}];
	p256Curve.methods = [{prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType], [ptrType$1, ptrType$1], false)}];
	Curve.init([{prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Double", name: "Double", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "IsOnCurve", name: "IsOnCurve", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [$Bool], false)}, {prop: "Params", name: "Params", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "ScalarBaseMult", name: "ScalarBaseMult", pkg: "", typ: $funcType([sliceType], [ptrType$1, ptrType$1], false)}, {prop: "ScalarMult", name: "ScalarMult", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType], [ptrType$1, ptrType$1], false)}]);
	CurveParams.init([{prop: "P", name: "P", pkg: "", typ: ptrType$1, tag: ""}, {prop: "N", name: "N", pkg: "", typ: ptrType$1, tag: ""}, {prop: "B", name: "B", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Gx", name: "Gx", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Gy", name: "Gy", pkg: "", typ: ptrType$1, tag: ""}, {prop: "BitSize", name: "BitSize", pkg: "", typ: $Int, tag: ""}]);
	p224Curve.init([{prop: "CurveParams", name: "", pkg: "", typ: ptrType, tag: ""}, {prop: "gx", name: "gx", pkg: "crypto/elliptic", typ: p224FieldElement, tag: ""}, {prop: "gy", name: "gy", pkg: "crypto/elliptic", typ: p224FieldElement, tag: ""}, {prop: "b", name: "b", pkg: "crypto/elliptic", typ: p224FieldElement, tag: ""}]);
	p224FieldElement.init($Uint32, 8);
	p224LargeFieldElement.init($Uint64, 15);
	p256Curve.init([{prop: "CurveParams", name: "", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initonce = new sync.Once.ptr();
		p384 = ptrType.nil;
		p521 = ptrType.nil;
		p224 = new p224Curve.ptr();
		p256 = new p256Curve.ptr();
		p256RInverse = ptrType$1.nil;
		p224P = $toNativeArray($kindUint32, [1, 0, 0, 268431360, 268435455, 268435455, 268435455, 268435455]);
		p224ZeroModP31 = new sliceType$1([2147483656, 2147483640, 2147483640, 2147450872, 2147483640, 2147483640, 2147483640, 2147483640]);
		p224ZeroModP63 = $toNativeArray($kindUint64, [new $Uint64(2147483656, 0), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0), new $Uint64(2147483639, 4294443008), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0)]);
		p256One = $toNativeArray($kindUint32, [2, 0, 0, 268433408, 536870911, 268435455, 532676607, 33554431, 0]);
		p256Precomputed = $toNativeArray($kindUint32, [290596984, 242421057, 230031737, 78635775, 310917853, 212721032, 295599836, 222981803, 51514350, 489335829, 254096764, 434396381, 96936400, 429049253, 170095751, 22329889, 21696699, 11419619, 222406006, 153287761, 37001551, 101408979, 373655214, 216620824, 535072883, 66729676, 99339564, 188755759, 22835391, 358715996, 94529284, 229187216, 215751807, 513877062, 236641822, 248061730, 40859512, 90604670, 168553630, 37024851, 439480858, 226879324, 90992905, 170293760, 190300240, 10025815, 178796492, 101451666, 217734681, 102476702, 92922779, 10691781, 131522279, 43478603, 532943434, 176956491, 484992866, 215358590, 405915872, 123172065, 496412073, 138651209, 205172986, 115533781, 124205610, 395011560, 67124891, 438243778, 7870186, 258227729, 93078495, 255999938, 425934842, 143782578, 305931036, 74112396, 88539357, 94251799, 388871183, 138291069, 185456137, 265411090, 56389202, 435020300, 219799744, 159190848, 184638233, 71951349, 14748830, 54179201, 90859435, 91714381, 501071970, 207073549, 21607325, 40541819, 204857247, 75982029, 124632266, 212120422, 244515755, 443842791, 92184193, 504621904, 256273651, 116484896, 79311219, 202804275, 365646905, 111382033, 121002173, 187258447, 66509915, 5486974, 321045696, 106813439, 60941558, 350622890, 153379607, 466107082, 182025965, 221826634, 260222982, 54653047, 174775689, 76106445, 166814421, 260313327, 455502422, 14152227, 65063826, 238663282, 111317018, 110789974, 518080, 163043539, 3185280, 449863551, 204453341, 213898269, 164542008, 273777244, 228642651, 135456897, 116610665, 111505196, 502845828, 3430432, 343397495, 23354801, 199756881, 203603518, 238413402, 451639968, 204952341, 258456729, 134076345, 421511614, 6366045, 46236905, 29730873, 75111974, 192722006, 155066973, 351520493, 214702793, 402536435, 77105545, 445695234, 49487938, 169309851, 184388732, 135863406, 500019767, 23199936, 276509345, 107743451, 282094082, 261267, 90308643, 376580903, 109796441, 40959228, 262999756, 241033666, 246105707, 50090300, 67630940, 195735859, 158359529, 193509607, 120899987, 31588239, 420833648, 180162304, 273063591, 53033664, 215783594, 30950397, 236240872, 364806751, 9130514, 246676327, 136101161, 197537558, 45546695, 257576489, 324406118, 202074818, 85649040, 222421617, 255761364, 30870187, 16949106, 121510965, 250023868, 181935023, 166511770, 141325342, 266780208, 392647399, 2348054, 528735877, 41804168, 107966648, 404542751, 158035532, 412033845, 173930329, 396852918, 267062899, 357230868, 49540177, 58878809, 194113917, 29829449, 325238538, 237239775, 173413552, 1015183, 495713, 136567250, 136396601, 287878667, 218717445, 193315010, 32289519, 38657156, 238414081, 406919754, 257809469, 58222217, 86139112, 95303012, 88256781, 148453957, 429206180, 160877633, 273786665, 79574169, 86713258, 278868094, 116766395, 528802279, 125439226, 281337663, 39453418, 184844341, 238149222, 208587427, 42902325, 42491940, 326299680, 16080181, 367290444, 254451223, 441087273, 213368497, 187332769, 447880991, 104209615, 113842077, 185816615, 308787572, 71338925, 482342488, 238904593, 13096815, 30177897, 243196699, 89107279, 2855247, 450001456, 215177118, 206574156, 84781712, 11616114, 184986229, 118447302, 373941674, 139088658, 53019708, 68960273, 332604433, 184854584, 225840429, 387167538, 195693571, 138420907, 113046977, 49566585, 25878640, 415883550, 34327194, 107956587, 65991316, 108331218, 226451772, 2997227, 192155704, 235148095, 360879757, 199853559, 28097562, 443192223, 54415606, 224812756, 189496278, 509228953, 112408647, 402282239, 106887472, 2219082, 45315673, 72416791, 188054373, 234221484, 356088815, 164846207, 288014687, 103081518, 177253935, 276753618, 32938942, 125660110, 91493268, 331777276, 156289296, 119886379, 231179651, 68086459, 534655626, 198581654, 220775303, 166165897, 307563584, 123325309, 57143092, 182626656, 152800220, 154428073, 16017903, 187603695, 221030257, 89005890, 8038985, 103901883, 37829774, 88235001, 468532794, 254222964, 526283558, 104949015, 245526642, 164552359, 7239219, 130619730, 226520526, 149071841, 239214106, 68733409, 31180944, 456743990, 169722229, 499445619, 144011060, 239820018, 453851672, 51989046, 113402911, 239342156, 170872490, 176956858, 261258967, 103265812, 121052362, 195126932, 68664323, 130066403, 163798041, 292069893, 146190349, 283373001, 163683314, 92807721, 455819618, 173862682, 356737579, 163398462, 56942669, 122161042, 97105331, 243662629, 67694423, 404017060, 18986011, 220498447, 61887010, 60535146, 209032813, 168001811, 172627817, 18857068, 152560910, 250363304, 379416236, 17569433, 172056915, 259148050, 365781175, 78428889, 99599866, 253038295, 1190737, 285520906, 213382210, 263923967, 111956938, 425804492, 129961897, 9795153, 81850901, 248789496, 66350037, 95217711, 285808310, 7188600, 268270935, 254724780, 212364780, 366392026, 157674697, 479376578, 2045969, 481329397, 47757316, 433176877, 253803846, 26550183, 171333315, 86221861, 265094802, 222617032, 320802651, 184028746, 215612532, 161199640, 47944780, 174534800, 29495521, 395087139, 21447555, 280523837, 159753563, 48711545, 5726520, 156793127, 321990906, 199251222, 167040537, 196486512, 161400209, 227830014, 487028781, 264711691, 117551768, 409175611, 140072120, 303696950, 166199007, 258257961, 163174174, 350418392, 260410682, 155381416, 228964197, 116240383, 178067660, 208004282, 477396614, 240036117, 427939745, 137975385, 86955234, 142427063, 58372379, 433230542, 260916882, 415434047, 143015443, 79775424, 113112410, 82068861, 370483849, 180850370, 442090914, 33721239, 119287041, 43353375, 67400827, 142103949, 131242660, 332936223, 148565975, 329029421, 112716405, 222993886, 267477976, 136140247, 173797224, 192622808, 199703919, 178815297, 228027521, 132622796, 415151985, 225918141, 334829905, 164675959, 29661816]);
		p256Zero31 = $toNativeArray($kindUint32, [2147483640, 1073741820, 2147483644, 1073750012, 2147483644, 1073741820, 2164260860, 939524092, 2147483644]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/asn1"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, io, big, reflect, strconv, strings, time, utf8, StructuralError, SyntaxError, BitString, ObjectIdentifier, Enumerated, Flag, RawValue, RawContent, tagAndLength, fieldParameters, forkableWriter, sliceType, ptrType, sliceType$1, ptrType$1, ptrType$2, sliceType$2, ptrType$3, arrayType, ptrType$4, ptrType$5, bigOne, bitStringType, objectIdentifierType, enumeratedType, flagType, timeType, rawValueType, rawContentsType, bigIntType, x, x$1, x$2, parseBool, parseInt64, parseInt32, parseBigInt, parseBitString, parseObjectIdentifier, parseBase128Int, parseUTCTime, parseGeneralizedTime, parsePrintableString, isPrintable, parseIA5String, parseT61String, parseUTF8String, parseTagAndLength, parseSequenceOf, invalidLength, parseField, canHaveDefaultValue, setDefaultValue, Unmarshal, UnmarshalWithParams, parseFieldParameters, getUniversalType, newForkableWriter, marshalBase128Int, marshalInt64, int64Length, marshalBigInt, marshalLength, lengthLength, marshalTagAndLength, marshalBitString, marshalObjectIdentifier, marshalPrintableString, marshalIA5String, marshalUTF8String, marshalTwoDigits, marshalFourDigits, outsideUTCRange, marshalUTCTime, marshalGeneralizedTime, marshalTimeCommon, stripTagAndLength, marshalBody, marshalField, Marshal;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	big = $packages["math/big"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	time = $packages["time"];
	utf8 = $packages["unicode/utf8"];
	StructuralError = $pkg.StructuralError = $newType(0, $kindStruct, "asn1.StructuralError", "StructuralError", "encoding/asn1", function(Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Msg = "";
			return;
		}
		this.Msg = Msg_;
	});
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "asn1.SyntaxError", "SyntaxError", "encoding/asn1", function(Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Msg = "";
			return;
		}
		this.Msg = Msg_;
	});
	BitString = $pkg.BitString = $newType(0, $kindStruct, "asn1.BitString", "BitString", "encoding/asn1", function(Bytes_, BitLength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Bytes = sliceType.nil;
			this.BitLength = 0;
			return;
		}
		this.Bytes = Bytes_;
		this.BitLength = BitLength_;
	});
	ObjectIdentifier = $pkg.ObjectIdentifier = $newType(12, $kindSlice, "asn1.ObjectIdentifier", "ObjectIdentifier", "encoding/asn1", null);
	Enumerated = $pkg.Enumerated = $newType(4, $kindInt, "asn1.Enumerated", "Enumerated", "encoding/asn1", null);
	Flag = $pkg.Flag = $newType(1, $kindBool, "asn1.Flag", "Flag", "encoding/asn1", null);
	RawValue = $pkg.RawValue = $newType(0, $kindStruct, "asn1.RawValue", "RawValue", "encoding/asn1", function(Class_, Tag_, IsCompound_, Bytes_, FullBytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Class = 0;
			this.Tag = 0;
			this.IsCompound = false;
			this.Bytes = sliceType.nil;
			this.FullBytes = sliceType.nil;
			return;
		}
		this.Class = Class_;
		this.Tag = Tag_;
		this.IsCompound = IsCompound_;
		this.Bytes = Bytes_;
		this.FullBytes = FullBytes_;
	});
	RawContent = $pkg.RawContent = $newType(12, $kindSlice, "asn1.RawContent", "RawContent", "encoding/asn1", null);
	tagAndLength = $pkg.tagAndLength = $newType(0, $kindStruct, "asn1.tagAndLength", "tagAndLength", "encoding/asn1", function(class$0_, tag_, length_, isCompound_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.class$0 = 0;
			this.tag = 0;
			this.length = 0;
			this.isCompound = false;
			return;
		}
		this.class$0 = class$0_;
		this.tag = tag_;
		this.length = length_;
		this.isCompound = isCompound_;
	});
	fieldParameters = $pkg.fieldParameters = $newType(0, $kindStruct, "asn1.fieldParameters", "fieldParameters", "encoding/asn1", function(optional_, explicit_, application_, defaultValue_, tag_, stringType_, set_, omitEmpty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.optional = false;
			this.explicit = false;
			this.application = false;
			this.defaultValue = ptrType$1.nil;
			this.tag = ptrType$2.nil;
			this.stringType = 0;
			this.set = false;
			this.omitEmpty = false;
			return;
		}
		this.optional = optional_;
		this.explicit = explicit_;
		this.application = application_;
		this.defaultValue = defaultValue_;
		this.tag = tag_;
		this.stringType = stringType_;
		this.set = set_;
		this.omitEmpty = omitEmpty_;
	});
	forkableWriter = $pkg.forkableWriter = $newType(0, $kindStruct, "asn1.forkableWriter", "forkableWriter", "encoding/asn1", function(Buffer_, pre_, post_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Buffer = ptrType$5.nil;
			this.pre = ptrType$3.nil;
			this.post = ptrType$3.nil;
			return;
		}
		this.Buffer = Buffer_;
		this.pre = pre_;
		this.post = post_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(time.Location);
	sliceType$1 = $sliceType($Int);
	ptrType$1 = $ptrType($Int64);
	ptrType$2 = $ptrType($Int);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(forkableWriter);
	arrayType = $arrayType($Uint8, 4);
	ptrType$4 = $ptrType(big.Int);
	ptrType$5 = $ptrType(bytes.Buffer);
	StructuralError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = $clone(this, StructuralError);
		return "asn1: structure error: " + e.Msg;
	};
	StructuralError.prototype.Error = function() { return this.$val.Error(); };
	SyntaxError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = $clone(this, SyntaxError);
		return "asn1: syntax error: " + e.Msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	parseBool = function(bytes$1) {
		var $ptr, _ref, bytes$1, err, ret, x$3, x$4;
		ret = false;
		err = $ifaceNil;
		if (!((bytes$1.$length === 1))) {
			err = (x$3 = new SyntaxError.ptr("invalid boolean"), new x$3.constructor.elem(x$3));
			return [ret, err];
		}
		_ref = (0 >= bytes$1.$length ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]);
		if (_ref === 0) {
			ret = false;
		} else if (_ref === 255) {
			ret = true;
		} else {
			err = (x$4 = new SyntaxError.ptr("invalid boolean"), new x$4.constructor.elem(x$4));
		}
		return [ret, err];
	};
	parseInt64 = function(bytes$1) {
		var $ptr, bytes$1, bytesRead, err, ret, x$3, x$4;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		if (bytes$1.$length > 8) {
			err = (x$3 = new StructuralError.ptr("integer too large"), new x$3.constructor.elem(x$3));
			return [ret, err];
		}
		bytesRead = 0;
		while (true) {
			if (!(bytesRead < bytes$1.$length)) { break; }
			ret = $shiftLeft64(ret, (8));
			ret = (x$4 = new $Int64(0, ((bytesRead < 0 || bytesRead >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + bytesRead])), new $Int64(ret.$high | x$4.$high, (ret.$low | x$4.$low) >>> 0));
			bytesRead = bytesRead + (1) >> 0;
		}
		ret = $shiftLeft64(ret, ((64 - ((bytes$1.$length << 24 >>> 24) * 8 << 24 >>> 24) << 24 >>> 24)));
		ret = $shiftRightInt64(ret, ((64 - ((bytes$1.$length << 24 >>> 24) * 8 << 24 >>> 24) << 24 >>> 24)));
		return [ret, err];
	};
	parseInt32 = function(bytes$1) {
		var $ptr, _tuple, bytes$1, err, ret64, x$3, x$4;
		_tuple = parseInt64(bytes$1); ret64 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [0, err];
		}
		if (!((x$3 = new $Int64(0, ((ret64.$low + ((ret64.$high >> 31) * 4294967296)) >> 0)), (ret64.$high === x$3.$high && ret64.$low === x$3.$low)))) {
			return [0, (x$4 = new StructuralError.ptr("integer too large"), new x$4.constructor.elem(x$4))];
		}
		return [((ret64.$low + ((ret64.$high >> 31) * 4294967296)) >> 0), $ifaceNil];
	};
	parseBigInt = function(bytes$1) {
		var $ptr, _i, _ref, bytes$1, i, notBytes, ret;
		ret = new big.Int.ptr();
		if (bytes$1.$length > 0 && ((((0 >= bytes$1.$length ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 128)) {
			notBytes = $makeSlice(sliceType, bytes$1.$length);
			_ref = notBytes;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= notBytes.$length) ? $throwRuntimeError("index out of range") : notBytes.$array[notBytes.$offset + i] = ~((i < 0 || i >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + i]) << 24 >>> 24);
				_i++;
			}
			ret.SetBytes(notBytes);
			ret.Add(ret, bigOne);
			ret.Neg(ret);
			return ret;
		}
		ret.SetBytes(bytes$1);
		return ret;
	};
	BitString.ptr.prototype.At = function(i) {
		var $ptr, _q, _r, b, i, x$3, x$4, y, y$1;
		b = $clone(this, BitString);
		if (i < 0 || i >= b.BitLength) {
			return 0;
		}
		x$3 = (_q = i / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		y = 7 - ((_r = i % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) >>> 0;
		return (((y$1 = y, y$1 < 32 ? ((x$4 = b.Bytes, ((x$3 < 0 || x$3 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$3])) >>> y$1) : 0) << 24 >>> 24) >> 0) & 1;
	};
	BitString.prototype.At = function(i) { return this.$val.At(i); };
	BitString.ptr.prototype.RightAlign = function() {
		var $ptr, _r, a, b, i, shift, x$3, x$4, x$5, x$6, y, y$1, y$2;
		b = $clone(this, BitString);
		shift = ((8 - ((_r = b.BitLength % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))) >> 0) >>> 0);
		if ((shift === 8) || (b.Bytes.$length === 0)) {
			return b.Bytes;
		}
		a = $makeSlice(sliceType, b.Bytes.$length);
		(0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0] = (y = shift, y < 32 ? ((x$3 = b.Bytes, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])) >>> y) : 0) << 24 >>> 24);
		i = 1;
		while (true) {
			if (!(i < b.Bytes.$length)) { break; }
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = (y$1 = ((8 - shift >>> 0)), y$1 < 32 ? ((x$4 = b.Bytes, x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) << y$1) : 0) << 24 >>> 24);
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]) | (((y$2 = shift, y$2 < 32 ? ((x$6 = b.Bytes, ((i < 0 || i >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i])) >>> y$2) : 0) << 24 >>> 24))) >>> 0);
			i = i + (1) >> 0;
		}
		return a;
	};
	BitString.prototype.RightAlign = function() { return this.$val.RightAlign(); };
	parseBitString = function(bytes$1) {
		var $ptr, bytes$1, err, paddingBits, ret, x$3, x$4, x$5, y;
		ret = new BitString.ptr();
		err = $ifaceNil;
		if (bytes$1.$length === 0) {
			err = (x$3 = new SyntaxError.ptr("zero length BIT STRING"), new x$3.constructor.elem(x$3));
			return [ret, err];
		}
		paddingBits = ((0 >= bytes$1.$length ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]) >> 0);
		if (paddingBits > 7 || (bytes$1.$length === 1) && paddingBits > 0 || !(((((x$4 = bytes$1.$length - 1 >> 0, ((x$4 < 0 || x$4 >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + x$4])) & (((((y = (0 >= bytes$1.$length ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]), y < 32 ? (1 << y) : 0) << 24 >>> 24)) - 1 << 24 >>> 24))) >>> 0) === 0))) {
			err = (x$5 = new SyntaxError.ptr("invalid padding bits in BIT STRING"), new x$5.constructor.elem(x$5));
			return [ret, err];
		}
		ret.BitLength = (((bytes$1.$length - 1 >> 0)) * 8 >> 0) - paddingBits >> 0;
		ret.Bytes = $subslice(bytes$1, 1);
		return [ret, err];
	};
	ObjectIdentifier.prototype.Equal = function(other) {
		var $ptr, i, oi, other;
		oi = this;
		if (!((oi.$length === other.$length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < oi.$length)) { break; }
			if (!((((i < 0 || i >= oi.$length) ? $throwRuntimeError("index out of range") : oi.$array[oi.$offset + i]) === ((i < 0 || i >= other.$length) ? $throwRuntimeError("index out of range") : other.$array[other.$offset + i])))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	$ptrType(ObjectIdentifier).prototype.Equal = function(other) { return this.$get().Equal(other); };
	ObjectIdentifier.prototype.String = function() {
		var $ptr, _i, _ref, i, oi, s, v;
		oi = this;
		s = "";
		_ref = oi;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (".");
			}
			s = s + (strconv.Itoa(v));
			_i++;
		}
		return s;
	};
	$ptrType(ObjectIdentifier).prototype.String = function() { return this.$get().String(); };
	parseObjectIdentifier = function(bytes$1) {
		var $ptr, _q, _r, _tuple, _tuple$1, bytes$1, err, i, offset, s, v, x$3;
		s = sliceType$1.nil;
		err = $ifaceNil;
		if (bytes$1.$length === 0) {
			err = (x$3 = new SyntaxError.ptr("zero length OBJECT IDENTIFIER"), new x$3.constructor.elem(x$3));
			return [s, err];
		}
		s = $makeSlice(sliceType$1, (bytes$1.$length + 1 >> 0));
		_tuple = parseBase128Int(bytes$1, 0); v = _tuple[0]; offset = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		if (v < 80) {
			(0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0] = (_q = v / 40, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			(1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1] = (_r = v % 40, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		} else {
			(0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0] = 2);
			(1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1] = v - 80 >> 0);
		}
		i = 2;
		while (true) {
			if (!(offset < bytes$1.$length)) { break; }
			_tuple$1 = parseBase128Int(bytes$1, offset); v = _tuple$1[0]; offset = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [s, err];
			}
			((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = v);
			i = i + (1) >> 0;
		}
		s = $subslice(s, 0, i);
		return [s, err];
	};
	parseBase128Int = function(bytes$1, initOffset) {
		var $ptr, b, bytes$1, err, initOffset, offset, ret, shifted, x$3, x$4, y;
		ret = 0;
		offset = 0;
		err = $ifaceNil;
		offset = initOffset;
		shifted = 0;
		while (true) {
			if (!(offset < bytes$1.$length)) { break; }
			if (shifted > 4) {
				err = (x$3 = new StructuralError.ptr("base 128 integer too large"), new x$3.constructor.elem(x$3));
				return [ret, offset, err];
			}
			ret = (y = (7), y < 32 ? (ret << y) : 0) >> 0;
			b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
			ret = ret | ((((b & 127) >>> 0) >> 0));
			offset = offset + (1) >> 0;
			if (((b & 128) >>> 0) === 0) {
				return [ret, offset, err];
			}
			shifted = shifted + (1) >> 0;
		}
		err = (x$4 = new SyntaxError.ptr("truncated base 128 integer"), new x$4.constructor.elem(x$4));
		return [ret, offset, err];
	};
	parseUTCTime = function(bytes$1) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _v, bytes$1, err, ret, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; bytes$1 = $f.bytes$1; err = $f.err; ret = $f.ret; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new time.Time.ptr();
		err = $ifaceNil;
		s = $bytesToString(bytes$1);
		_r = time.Parse("0601021504Z0700", s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; $copy(ret, _tuple[0], time.Time); err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = time.Parse("060102150405Z0700", s); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; $copy(ret, _tuple$1[0], time.Time); err = _tuple$1[1];
		/* } */ case 3:
		if (!($interfaceIsEqual(err, $ifaceNil))) { _v = false; $s = 7; continue s; }
		_r$2 = ret.Year(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2 >= 2050; case 7:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			_r$3 = ret.AddDate(-100, 0, 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$copy(ret, _r$3, time.Time);
		/* } */ case 6:
		return [ret, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parseUTCTime }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.bytes$1 = bytes$1; $f.err = err; $f.ret = ret; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseGeneralizedTime = function(bytes$1) {
		var $ptr, _r, _tuple, bytes$1, err, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; bytes$1 = $f.bytes$1; err = $f.err; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new time.Time.ptr();
		err = $ifaceNil;
		_r = time.Parse("20060102150405Z0700", $bytesToString(bytes$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; $copy(ret, _tuple[0], time.Time); err = _tuple[1];
		return [ret, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parseGeneralizedTime }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.bytes$1 = bytes$1; $f.err = err; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	parsePrintableString = function(bytes$1) {
		var $ptr, _i, _ref, b, bytes$1, err, ret, x$3;
		ret = "";
		err = $ifaceNil;
		_ref = bytes$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!isPrintable(b)) {
				err = (x$3 = new SyntaxError.ptr("PrintableString contains invalid character"), new x$3.constructor.elem(x$3));
				return [ret, err];
			}
			_i++;
		}
		ret = $bytesToString(bytes$1);
		return [ret, err];
	};
	isPrintable = function(b) {
		var $ptr, b;
		return 97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || 39 <= b && b <= 41 || 43 <= b && b <= 47 || (b === 32) || (b === 58) || (b === 61) || (b === 63) || (b === 42);
	};
	parseIA5String = function(bytes$1) {
		var $ptr, _i, _ref, b, bytes$1, err, ret, x$3;
		ret = "";
		err = $ifaceNil;
		_ref = bytes$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				err = (x$3 = new SyntaxError.ptr("IA5String contains invalid character"), new x$3.constructor.elem(x$3));
				return [ret, err];
			}
			_i++;
		}
		ret = $bytesToString(bytes$1);
		return [ret, err];
	};
	parseT61String = function(bytes$1) {
		var $ptr, _tmp, _tmp$1, bytes$1, err, ret;
		ret = "";
		err = $ifaceNil;
		_tmp = $bytesToString(bytes$1); _tmp$1 = $ifaceNil; ret = _tmp; err = _tmp$1;
		return [ret, err];
	};
	parseUTF8String = function(bytes$1) {
		var $ptr, _tmp, _tmp$1, bytes$1, err, ret;
		ret = "";
		err = $ifaceNil;
		_tmp = $bytesToString(bytes$1); _tmp$1 = $ifaceNil; ret = _tmp; err = _tmp$1;
		return [ret, err];
	};
	parseTagAndLength = function(bytes$1, initOffset) {
		var $ptr, _tuple, b, bytes$1, err, i, initOffset, numBytes, offset, ret, x$3, x$4, x$5, x$6, x$7, y;
		ret = new tagAndLength.ptr();
		offset = 0;
		err = $ifaceNil;
		offset = initOffset;
		b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
		offset = offset + (1) >> 0;
		ret.class$0 = ((b >>> 6 << 24 >>> 24) >> 0);
		ret.isCompound = ((b & 32) >>> 0) === 32;
		ret.tag = (((b & 31) >>> 0) >> 0);
		if (ret.tag === 31) {
			_tuple = parseBase128Int(bytes$1, offset); ret.tag = _tuple[0]; offset = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ret, offset, err];
			}
		}
		if (offset >= bytes$1.$length) {
			err = (x$3 = new SyntaxError.ptr("truncated tag or length"), new x$3.constructor.elem(x$3));
			return [ret, offset, err];
		}
		b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
		offset = offset + (1) >> 0;
		if (((b & 128) >>> 0) === 0) {
			ret.length = (((b & 127) >>> 0) >> 0);
		} else {
			numBytes = (((b & 127) >>> 0) >> 0);
			if (numBytes === 0) {
				err = (x$4 = new SyntaxError.ptr("indefinite length found (not DER)"), new x$4.constructor.elem(x$4));
				return [ret, offset, err];
			}
			ret.length = 0;
			i = 0;
			while (true) {
				if (!(i < numBytes)) { break; }
				if (offset >= bytes$1.$length) {
					err = (x$5 = new SyntaxError.ptr("truncated tag or length"), new x$5.constructor.elem(x$5));
					return [ret, offset, err];
				}
				b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
				offset = offset + (1) >> 0;
				if (ret.length >= 8388608) {
					err = (x$6 = new StructuralError.ptr("length too large"), new x$6.constructor.elem(x$6));
					return [ret, offset, err];
				}
				ret.length = (y = (8), y < 32 ? (ret.length << y) : 0) >> 0;
				ret.length = ret.length | ((b >> 0));
				if (ret.length === 0) {
					err = (x$7 = new StructuralError.ptr("superfluous leading zeros in length"), new x$7.constructor.elem(x$7));
					return [ret, offset, err];
				}
				i = i + (1) >> 0;
			}
		}
		return [ret, offset, err];
	};
	parseSequenceOf = function(bytes$1, sliceType$2, elemType) {
		var $ptr, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, _tuple$2, bytes$1, compoundType, elemType, err, expectedTag, i, numElements, offset, offset$1, ok, params, ret, sliceType$2, t, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; bytes$1 = $f.bytes$1; compoundType = $f.compoundType; elemType = $f.elemType; err = $f.err; expectedTag = $f.expectedTag; i = $f.i; numElements = $f.numElements; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; params = $f.params; ret = $f.ret; sliceType$2 = $f.sliceType$2; t = $f.t; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new reflect.Value.ptr();
		err = $ifaceNil;
		_r = getUniversalType(elemType); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; expectedTag = _tuple[0]; compoundType = _tuple[1]; ok = _tuple[2];
		if (!ok) {
			err = (x$3 = new StructuralError.ptr("unknown Go type for slice"), new x$3.constructor.elem(x$3));
			return [ret, err];
		}
		numElements = 0;
		offset = 0;
		while (true) {
			if (!(offset < bytes$1.$length)) { break; }
			t = $clone(new tagAndLength.ptr(), tagAndLength);
			_tuple$1 = parseTagAndLength(bytes$1, offset); $copy(t, _tuple$1[0], tagAndLength); offset = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ret, err];
			}
			_ref = t.tag;
			if (_ref === 22 || _ref === 27 || _ref === 20 || _ref === 12) {
				t.tag = 19;
			} else if (_ref === 24 || _ref === 23) {
				t.tag = 23;
			}
			if (!((t.class$0 === 0)) || !(t.isCompound === compoundType) || !((t.tag === expectedTag))) {
				err = (x$4 = new StructuralError.ptr("sequence tag mismatch"), new x$4.constructor.elem(x$4));
				return [ret, err];
			}
			if (invalidLength(offset, t.length, bytes$1.$length)) {
				err = (x$5 = new SyntaxError.ptr("truncated sequence"), new x$5.constructor.elem(x$5));
				return [ret, err];
			}
			offset = offset + (t.length) >> 0;
			numElements = numElements + (1) >> 0;
		}
		_r$1 = reflect.MakeSlice(sliceType$2, numElements, numElements); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		params = new fieldParameters.ptr(false, false, false, ptrType$1.nil, ptrType$2.nil, 0, false, false);
		offset$1 = 0;
		i = 0;
		/* while (true) { */ case 3:
			/* if (!(i < numElements)) { break; } */ if(!(i < numElements)) { $s = 4; continue; }
			_r$2 = ret.Index(i); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = parseField(_r$2, bytes$1, offset$1, params); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3; offset$1 = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ret, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 3; continue; case 4:
		return [ret, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parseSequenceOf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.bytes$1 = bytes$1; $f.compoundType = compoundType; $f.elemType = elemType; $f.err = err; $f.expectedTag = expectedTag; $f.i = i; $f.numElements = numElements; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.params = params; $f.ret = ret; $f.sliceType$2 = sliceType$2; $f.t = t; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	invalidLength = function(offset, length, sliceLength) {
		var $ptr, length, offset, sliceLength;
		return (offset + length >> 0) < offset || (offset + length >> 0) > sliceLength;
	};
	parseField = function(v, bytes$1, initOffset, params) {
		var $ptr, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, _v$1, bs, bytes$1, bytes$2, compoundType, err, err1, err1$1, err1$2, err1$3, err1$4, err1$5, err1$6, err1$7, expectedClass, expectedClass$1, expectedTag, field, fieldType, i, ifaceType, initOffset, innerBytes, innerBytes$1, innerOffset, newSlice, newSlice$1, offset, ok, ok$1, ok1, params, parsedBool, parsedInt, parsedInt$1, parsedInt$2, parsedInt$3, result, result$1, sliceType$3, structType, t, t$1, t$2, time$1, universalTag, v, v$1, val, x$10, x$11, x$12, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$26 = $f._tuple$26; _tuple$27 = $f._tuple$27; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; _v = $f._v; _v$1 = $f._v$1; bs = $f.bs; bytes$1 = $f.bytes$1; bytes$2 = $f.bytes$2; compoundType = $f.compoundType; err = $f.err; err1 = $f.err1; err1$1 = $f.err1$1; err1$2 = $f.err1$2; err1$3 = $f.err1$3; err1$4 = $f.err1$4; err1$5 = $f.err1$5; err1$6 = $f.err1$6; err1$7 = $f.err1$7; expectedClass = $f.expectedClass; expectedClass$1 = $f.expectedClass$1; expectedTag = $f.expectedTag; field = $f.field; fieldType = $f.fieldType; i = $f.i; ifaceType = $f.ifaceType; initOffset = $f.initOffset; innerBytes = $f.innerBytes; innerBytes$1 = $f.innerBytes$1; innerOffset = $f.innerOffset; newSlice = $f.newSlice; newSlice$1 = $f.newSlice$1; offset = $f.offset; ok = $f.ok; ok$1 = $f.ok$1; ok1 = $f.ok1; params = $f.params; parsedBool = $f.parsedBool; parsedInt = $f.parsedInt; parsedInt$1 = $f.parsedInt$1; parsedInt$2 = $f.parsedInt$2; parsedInt$3 = $f.parsedInt$3; result = $f.result; result$1 = $f.result$1; sliceType$3 = $f.sliceType$3; structType = $f.structType; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; time$1 = $f.time$1; universalTag = $f.universalTag; v = $f.v; v$1 = $f.v$1; val = $f.val; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		err = $ifaceNil;
		params = $clone(params, fieldParameters);
		v = v;
		offset = initOffset;
		fieldType = v.Type();
		if (offset === bytes$1.$length) {
			if (!setDefaultValue(v, params)) {
				err = (x$3 = new SyntaxError.ptr("sequence truncated"), new x$3.constructor.elem(x$3));
			}
			return [offset, err];
		}
		/* */ if ($interfaceIsEqual(fieldType, rawValueType)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(fieldType, rawValueType)) { */ case 1:
			t = $clone(new tagAndLength.ptr(), tagAndLength);
			_tuple = parseTagAndLength(bytes$1, offset); $copy(t, _tuple[0], tagAndLength); offset = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [offset, err];
			}
			if (invalidLength(offset, t.length, bytes$1.$length)) {
				err = (x$4 = new SyntaxError.ptr("data truncated"), new x$4.constructor.elem(x$4));
				return [offset, err];
			}
			result = new RawValue.ptr(t.class$0, t.tag, t.isCompound, $subslice(bytes$1, offset, (offset + t.length >> 0)), $subslice(bytes$1, initOffset, (offset + t.length >> 0)));
			offset = offset + (t.length) >> 0;
			_r = reflect.ValueOf(new result.constructor.elem(result)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = v.Set(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return [offset, err];
		/* } */ case 2:
		ifaceType = fieldType;
		_r$1 = ifaceType.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r$1 === 20)) { _v = false; $s = 7; continue s; }
		_r$2 = ifaceType.NumMethod(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2 === 0; case 7:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			t$1 = $clone(new tagAndLength.ptr(), tagAndLength);
			_tuple$1 = parseTagAndLength(bytes$1, offset); $copy(t$1, _tuple$1[0], tagAndLength); offset = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [offset, err];
			}
			if (invalidLength(offset, t$1.length, bytes$1.$length)) {
				err = (x$5 = new SyntaxError.ptr("data truncated"), new x$5.constructor.elem(x$5));
				return [offset, err];
			}
			result$1 = $ifaceNil;
			/* */ if (!t$1.isCompound && (t$1.class$0 === 0)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!t$1.isCompound && (t$1.class$0 === 0)) { */ case 10:
				innerBytes = $subslice(bytes$1, offset, (offset + t$1.length >> 0));
				_ref = t$1.tag;
				/* */ if (_ref === 19) { $s = 12; continue; }
				/* */ if (_ref === 22) { $s = 13; continue; }
				/* */ if (_ref === 20) { $s = 14; continue; }
				/* */ if (_ref === 12) { $s = 15; continue; }
				/* */ if (_ref === 2) { $s = 16; continue; }
				/* */ if (_ref === 3) { $s = 17; continue; }
				/* */ if (_ref === 6) { $s = 18; continue; }
				/* */ if (_ref === 23) { $s = 19; continue; }
				/* */ if (_ref === 4) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (_ref === 19) { */ case 12:
					_tuple$2 = parsePrintableString(innerBytes); result$1 = new $String(_tuple$2[0]); err = _tuple$2[1];
					$s = 22; continue;
				/* } else if (_ref === 22) { */ case 13:
					_tuple$3 = parseIA5String(innerBytes); result$1 = new $String(_tuple$3[0]); err = _tuple$3[1];
					$s = 22; continue;
				/* } else if (_ref === 20) { */ case 14:
					_tuple$4 = parseT61String(innerBytes); result$1 = new $String(_tuple$4[0]); err = _tuple$4[1];
					$s = 22; continue;
				/* } else if (_ref === 12) { */ case 15:
					_tuple$5 = parseUTF8String(innerBytes); result$1 = new $String(_tuple$5[0]); err = _tuple$5[1];
					$s = 22; continue;
				/* } else if (_ref === 2) { */ case 16:
					_tuple$6 = parseInt64(innerBytes); result$1 = _tuple$6[0]; err = _tuple$6[1];
					$s = 22; continue;
				/* } else if (_ref === 3) { */ case 17:
					_tuple$7 = parseBitString(innerBytes); result$1 = new _tuple$7[0].constructor.elem(_tuple$7[0]); err = _tuple$7[1];
					$s = 22; continue;
				/* } else if (_ref === 6) { */ case 18:
					_tuple$8 = parseObjectIdentifier(innerBytes); result$1 = _tuple$8[0]; err = _tuple$8[1];
					$s = 22; continue;
				/* } else if (_ref === 23) { */ case 19:
					_r$3 = parseUTCTime(innerBytes); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$9 = _r$3; result$1 = new _tuple$9[0].constructor.elem(_tuple$9[0]); err = _tuple$9[1];
					$s = 22; continue;
				/* } else if (_ref === 4) { */ case 20:
					result$1 = innerBytes;
					$s = 22; continue;
				/* } else { */ case 21:
				/* } */ case 22:
			/* } */ case 11:
			offset = offset + (t$1.length) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [offset, err];
			}
			/* */ if (!($interfaceIsEqual(result$1, $ifaceNil))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!($interfaceIsEqual(result$1, $ifaceNil))) { */ case 24:
				_r$4 = reflect.ValueOf(result$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = v.Set(_r$4); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 25:
			return [offset, err];
		/* } */ case 6:
		_r$5 = getUniversalType(fieldType); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$10 = _r$5; universalTag = _tuple$10[0]; compoundType = _tuple$10[1]; ok1 = _tuple$10[2];
		/* */ if (!ok1) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (!ok1) { */ case 29:
			_r$6 = fmt.Sprintf("unknown Go type: %v", new sliceType$2([fieldType])); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = (x$6 = new StructuralError.ptr(_r$6), new x$6.constructor.elem(x$6));
			return [offset, err];
		/* } */ case 30:
		_tuple$11 = parseTagAndLength(bytes$1, offset); t$2 = $clone(_tuple$11[0], tagAndLength); offset = _tuple$11[1]; err = _tuple$11[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [offset, err];
		}
		if (params.explicit) {
			expectedClass = 2;
			if (params.application) {
				expectedClass = 1;
			}
			if ((t$2.class$0 === expectedClass) && (t$2.tag === params.tag.$get()) && ((t$2.length === 0) || t$2.isCompound)) {
				if (t$2.length > 0) {
					_tuple$12 = parseTagAndLength(bytes$1, offset); $copy(t$2, _tuple$12[0], tagAndLength); offset = _tuple$12[1]; err = _tuple$12[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [offset, err];
					}
				} else {
					if (!($interfaceIsEqual(fieldType, flagType))) {
						err = (x$7 = new StructuralError.ptr("zero length explicit tag was not an asn1.Flag"), new x$7.constructor.elem(x$7));
						return [offset, err];
					}
					v.SetBool(true);
					return [offset, err];
				}
			} else {
				ok = setDefaultValue(v, params);
				if (ok) {
					offset = initOffset;
				} else {
					err = (x$8 = new StructuralError.ptr("explicitly tagged member didn't match"), new x$8.constructor.elem(x$8));
				}
				return [offset, err];
			}
		}
		if (universalTag === 19) {
			if (t$2.class$0 === 0) {
				_ref$1 = t$2.tag;
				if (_ref$1 === 22 || _ref$1 === 27 || _ref$1 === 20 || _ref$1 === 12) {
					universalTag = t$2.tag;
				}
			} else if (!((params.stringType === 0))) {
				universalTag = params.stringType;
			}
		}
		if ((universalTag === 23) && (t$2.tag === 24) && (t$2.class$0 === 0)) {
			universalTag = 24;
		}
		if (params.set) {
			universalTag = 17;
		}
		expectedClass$1 = 0;
		expectedTag = universalTag;
		if (!params.explicit && !(params.tag === ptrType$2.nil)) {
			expectedClass$1 = 2;
			expectedTag = params.tag.$get();
		}
		if (!params.explicit && params.application && !(params.tag === ptrType$2.nil)) {
			expectedClass$1 = 1;
			expectedTag = params.tag.$get();
		}
		/* */ if (!((t$2.class$0 === expectedClass$1)) || !((t$2.tag === expectedTag)) || !(t$2.isCompound === compoundType)) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (!((t$2.class$0 === expectedClass$1)) || !((t$2.tag === expectedTag)) || !(t$2.isCompound === compoundType)) { */ case 32:
			ok$1 = setDefaultValue(v, params);
			/* */ if (ok$1) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (ok$1) { */ case 34:
				offset = initOffset;
				$s = 36; continue;
			/* } else { */ case 35:
				_arg = new $Int(expectedTag);
				_arg$1 = new t$2.constructor.elem(t$2);
				_arg$2 = new params.constructor.elem(params);
				_r$7 = fieldType.Name(); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$3 = new $String(_r$7);
				_arg$4 = new $Int(offset);
				_r$8 = fmt.Sprintf("tags don't match (%d vs %+v) %+v %s @%d", new sliceType$2([_arg, _arg$1, _arg$2, _arg$3, _arg$4])); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err = (x$9 = new StructuralError.ptr(_r$8), new x$9.constructor.elem(x$9));
			/* } */ case 36:
			return [offset, err];
		/* } */ case 33:
		if (invalidLength(offset, t$2.length, bytes$1.$length)) {
			err = (x$10 = new SyntaxError.ptr("data truncated"), new x$10.constructor.elem(x$10));
			return [offset, err];
		}
		innerBytes$1 = $subslice(bytes$1, offset, (offset + t$2.length >> 0));
		offset = offset + (t$2.length) >> 0;
		_ref$2 = fieldType;
		/* */ if ($interfaceIsEqual(_ref$2, objectIdentifierType)) { $s = 39; continue; }
		/* */ if ($interfaceIsEqual(_ref$2, bitStringType)) { $s = 40; continue; }
		/* */ if ($interfaceIsEqual(_ref$2, timeType)) { $s = 41; continue; }
		/* */ if ($interfaceIsEqual(_ref$2, enumeratedType)) { $s = 42; continue; }
		/* */ if ($interfaceIsEqual(_ref$2, flagType)) { $s = 43; continue; }
		/* */ if ($interfaceIsEqual(_ref$2, bigIntType)) { $s = 44; continue; }
		/* */ $s = 45; continue;
		/* if ($interfaceIsEqual(_ref$2, objectIdentifierType)) { */ case 39:
			_tuple$13 = parseObjectIdentifier(innerBytes$1); newSlice = _tuple$13[0]; err1 = _tuple$13[1];
			_r$9 = reflect.MakeSlice(v.Type(), newSlice.$length, newSlice.$length); /* */ $s = 46; case 46: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$r = v.Set(_r$9); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ($interfaceIsEqual(err1, $ifaceNil)) { $s = 48; continue; }
			/* */ $s = 49; continue;
			/* if ($interfaceIsEqual(err1, $ifaceNil)) { */ case 48:
				_arg$5 = v;
				_r$10 = reflect.ValueOf(newSlice); /* */ $s = 50; case 50: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$6 = _r$10;
				_r$11 = reflect.Copy(_arg$5, _arg$6); /* */ $s = 51; case 51: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
			/* } */ case 49:
			err = err1;
			return [offset, err];
			$s = 45; continue;
		/* } else if ($interfaceIsEqual(_ref$2, bitStringType)) { */ case 40:
			_tuple$14 = parseBitString(innerBytes$1); bs = $clone(_tuple$14[0], BitString); err1$1 = _tuple$14[1];
			/* */ if ($interfaceIsEqual(err1$1, $ifaceNil)) { $s = 52; continue; }
			/* */ $s = 53; continue;
			/* if ($interfaceIsEqual(err1$1, $ifaceNil)) { */ case 52:
				_r$12 = reflect.ValueOf(new bs.constructor.elem(bs)); /* */ $s = 54; case 54: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				$r = v.Set(_r$12); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 53:
			err = err1$1;
			return [offset, err];
			$s = 45; continue;
		/* } else if ($interfaceIsEqual(_ref$2, timeType)) { */ case 41:
			time$1 = $clone(new time.Time.ptr(), time.Time);
			err1$2 = $ifaceNil;
			/* */ if (universalTag === 23) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (universalTag === 23) { */ case 56:
				_r$13 = parseUTCTime(innerBytes$1); /* */ $s = 59; case 59: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_tuple$15 = _r$13; $copy(time$1, _tuple$15[0], time.Time); err1$2 = _tuple$15[1];
				$s = 58; continue;
			/* } else { */ case 57:
				_r$14 = parseGeneralizedTime(innerBytes$1); /* */ $s = 60; case 60: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_tuple$16 = _r$14; $copy(time$1, _tuple$16[0], time.Time); err1$2 = _tuple$16[1];
			/* } */ case 58:
			/* */ if ($interfaceIsEqual(err1$2, $ifaceNil)) { $s = 61; continue; }
			/* */ $s = 62; continue;
			/* if ($interfaceIsEqual(err1$2, $ifaceNil)) { */ case 61:
				_r$15 = reflect.ValueOf(new time$1.constructor.elem(time$1)); /* */ $s = 63; case 63: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$r = v.Set(_r$15); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 62:
			err = err1$2;
			return [offset, err];
			$s = 45; continue;
		/* } else if ($interfaceIsEqual(_ref$2, enumeratedType)) { */ case 42:
			_tuple$17 = parseInt32(innerBytes$1); parsedInt = _tuple$17[0]; err1$3 = _tuple$17[1];
			if ($interfaceIsEqual(err1$3, $ifaceNil)) {
				v.SetInt(new $Int64(0, parsedInt));
			}
			err = err1$3;
			return [offset, err];
			$s = 45; continue;
		/* } else if ($interfaceIsEqual(_ref$2, flagType)) { */ case 43:
			v.SetBool(true);
			return [offset, err];
			$s = 45; continue;
		/* } else if ($interfaceIsEqual(_ref$2, bigIntType)) { */ case 44:
			parsedInt$1 = parseBigInt(innerBytes$1);
			_r$16 = reflect.ValueOf(parsedInt$1); /* */ $s = 65; case 65: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			$r = v.Set(_r$16); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return [offset, err];
		/* } */ case 45:
		val = v;
		_ref$3 = val.Kind();
		/* */ if (_ref$3 === 1) { $s = 67; continue; }
		/* */ if (_ref$3 === 2 || _ref$3 === 5 || _ref$3 === 6) { $s = 68; continue; }
		/* */ if (_ref$3 === 25) { $s = 69; continue; }
		/* */ if (_ref$3 === 23) { $s = 70; continue; }
		/* */ if (_ref$3 === 24) { $s = 71; continue; }
		/* */ $s = 72; continue;
		/* if (_ref$3 === 1) { */ case 67:
			_tuple$18 = parseBool(innerBytes$1); parsedBool = _tuple$18[0]; err1$4 = _tuple$18[1];
			if ($interfaceIsEqual(err1$4, $ifaceNil)) {
				val.SetBool(parsedBool);
			}
			err = err1$4;
			return [offset, err];
			$s = 72; continue;
		/* } else if (_ref$3 === 2 || _ref$3 === 5 || _ref$3 === 6) { */ case 68:
			_r$17 = val.Type().Size(); /* */ $s = 76; case 76: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ if (_r$17 === 4) { $s = 73; continue; }
			/* */ $s = 74; continue;
			/* if (_r$17 === 4) { */ case 73:
				_tuple$19 = parseInt32(innerBytes$1); parsedInt$2 = _tuple$19[0]; err1$5 = _tuple$19[1];
				if ($interfaceIsEqual(err1$5, $ifaceNil)) {
					val.SetInt(new $Int64(0, parsedInt$2));
				}
				err = err1$5;
				$s = 75; continue;
			/* } else { */ case 74:
				_tuple$20 = parseInt64(innerBytes$1); parsedInt$3 = _tuple$20[0]; err1$6 = _tuple$20[1];
				if ($interfaceIsEqual(err1$6, $ifaceNil)) {
					val.SetInt(parsedInt$3);
				}
				err = err1$6;
			/* } */ case 75:
			return [offset, err];
			$s = 72; continue;
		/* } else if (_ref$3 === 25) { */ case 69:
			structType = fieldType;
			_r$18 = structType.NumField(); /* */ $s = 80; case 80: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			if (!(_r$18 > 0)) { _v$1 = false; $s = 79; continue s; }
			_r$19 = structType.Field(0); /* */ $s = 81; case 81: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_v$1 = $interfaceIsEqual(_r$19.Type, rawContentsType); case 79:
			/* */ if (_v$1) { $s = 77; continue; }
			/* */ $s = 78; continue;
			/* if (_v$1) { */ case 77:
				bytes$2 = $subslice(bytes$1, initOffset, offset);
				_r$20 = val.Field(0); /* */ $s = 82; case 82: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$21 = reflect.ValueOf($subslice(new RawContent(bytes$2.$array), bytes$2.$offset, bytes$2.$offset + bytes$2.$length)); /* */ $s = 83; case 83: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				$r = _r$20.Set(_r$21); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 78:
			innerOffset = 0;
			i = 0;
			/* while (true) { */ case 85:
				_r$22 = structType.NumField(); /* */ $s = 87; case 87: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				/* if (!(i < _r$22)) { break; } */ if(!(i < _r$22)) { $s = 86; continue; }
				_r$23 = structType.Field(i); /* */ $s = 88; case 88: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				field = $clone(_r$23, reflect.StructField);
				/* */ if ((i === 0) && $interfaceIsEqual(field.Type, rawContentsType)) { $s = 89; continue; }
				/* */ $s = 90; continue;
				/* if ((i === 0) && $interfaceIsEqual(field.Type, rawContentsType)) { */ case 89:
					i = i + (1) >> 0;
					/* continue; */ $s = 85; continue;
				/* } */ case 90:
				_r$24 = val.Field(i); /* */ $s = 91; case 91: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = parseField(_r$24, innerBytes$1, innerOffset, parseFieldParameters(new reflect.StructTag(field.Tag).Get("asn1"))); /* */ $s = 92; case 92: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_tuple$21 = _r$25; innerOffset = _tuple$21[0]; err = _tuple$21[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [offset, err];
				}
				i = i + (1) >> 0;
			/* } */ $s = 85; continue; case 86:
			return [offset, err];
			$s = 72; continue;
		/* } else if (_ref$3 === 23) { */ case 70:
			sliceType$3 = fieldType;
			_r$26 = sliceType$3.Elem(); /* */ $s = 95; case 95: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_r$27 = _r$26.Kind(); /* */ $s = 96; case 96: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			/* */ if (_r$27 === 8) { $s = 93; continue; }
			/* */ $s = 94; continue;
			/* if (_r$27 === 8) { */ case 93:
				_r$28 = reflect.MakeSlice(sliceType$3, innerBytes$1.$length, innerBytes$1.$length); /* */ $s = 97; case 97: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				$r = val.Set(_r$28); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_arg$7 = val;
				_r$29 = reflect.ValueOf(innerBytes$1); /* */ $s = 99; case 99: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_arg$8 = _r$29;
				_r$30 = reflect.Copy(_arg$7, _arg$8); /* */ $s = 100; case 100: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_r$30;
				return [offset, err];
			/* } */ case 94:
			_arg$9 = innerBytes$1;
			_arg$10 = sliceType$3;
			_r$31 = sliceType$3.Elem(); /* */ $s = 101; case 101: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_arg$11 = _r$31;
			_r$32 = parseSequenceOf(_arg$9, _arg$10, _arg$11); /* */ $s = 102; case 102: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			_tuple$22 = _r$32; newSlice$1 = _tuple$22[0]; err1$7 = _tuple$22[1];
			/* */ if ($interfaceIsEqual(err1$7, $ifaceNil)) { $s = 103; continue; }
			/* */ $s = 104; continue;
			/* if ($interfaceIsEqual(err1$7, $ifaceNil)) { */ case 103:
				$r = val.Set(newSlice$1); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 104:
			err = err1$7;
			return [offset, err];
			$s = 72; continue;
		/* } else if (_ref$3 === 24) { */ case 71:
			v$1 = "";
			_ref$4 = universalTag;
			/* */ if (_ref$4 === 19) { $s = 106; continue; }
			/* */ if (_ref$4 === 22) { $s = 107; continue; }
			/* */ if (_ref$4 === 20) { $s = 108; continue; }
			/* */ if (_ref$4 === 12) { $s = 109; continue; }
			/* */ if (_ref$4 === 27) { $s = 110; continue; }
			/* */ $s = 111; continue;
			/* if (_ref$4 === 19) { */ case 106:
				_tuple$23 = parsePrintableString(innerBytes$1); v$1 = _tuple$23[0]; err = _tuple$23[1];
				$s = 112; continue;
			/* } else if (_ref$4 === 22) { */ case 107:
				_tuple$24 = parseIA5String(innerBytes$1); v$1 = _tuple$24[0]; err = _tuple$24[1];
				$s = 112; continue;
			/* } else if (_ref$4 === 20) { */ case 108:
				_tuple$25 = parseT61String(innerBytes$1); v$1 = _tuple$25[0]; err = _tuple$25[1];
				$s = 112; continue;
			/* } else if (_ref$4 === 12) { */ case 109:
				_tuple$26 = parseUTF8String(innerBytes$1); v$1 = _tuple$26[0]; err = _tuple$26[1];
				$s = 112; continue;
			/* } else if (_ref$4 === 27) { */ case 110:
				_tuple$27 = parseT61String(innerBytes$1); v$1 = _tuple$27[0]; err = _tuple$27[1];
				$s = 112; continue;
			/* } else { */ case 111:
				_r$33 = fmt.Sprintf("internal error: unknown string type %d", new sliceType$2([new $Int(universalTag)])); /* */ $s = 113; case 113: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				err = (x$11 = new SyntaxError.ptr(_r$33), new x$11.constructor.elem(x$11));
			/* } */ case 112:
			if ($interfaceIsEqual(err, $ifaceNil)) {
				val.SetString(v$1);
			}
			return [offset, err];
		/* } */ case 72:
		_r$34 = v.Type().String(); /* */ $s = 114; case 114: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		err = (x$12 = new StructuralError.ptr("unsupported: " + _r$34), new x$12.constructor.elem(x$12));
		return [offset, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parseField }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$26 = _tuple$26; $f._tuple$27 = _tuple$27; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f._v = _v; $f._v$1 = _v$1; $f.bs = bs; $f.bytes$1 = bytes$1; $f.bytes$2 = bytes$2; $f.compoundType = compoundType; $f.err = err; $f.err1 = err1; $f.err1$1 = err1$1; $f.err1$2 = err1$2; $f.err1$3 = err1$3; $f.err1$4 = err1$4; $f.err1$5 = err1$5; $f.err1$6 = err1$6; $f.err1$7 = err1$7; $f.expectedClass = expectedClass; $f.expectedClass$1 = expectedClass$1; $f.expectedTag = expectedTag; $f.field = field; $f.fieldType = fieldType; $f.i = i; $f.ifaceType = ifaceType; $f.initOffset = initOffset; $f.innerBytes = innerBytes; $f.innerBytes$1 = innerBytes$1; $f.innerOffset = innerOffset; $f.newSlice = newSlice; $f.newSlice$1 = newSlice$1; $f.offset = offset; $f.ok = ok; $f.ok$1 = ok$1; $f.ok1 = ok1; $f.params = params; $f.parsedBool = parsedBool; $f.parsedInt = parsedInt; $f.parsedInt$1 = parsedInt$1; $f.parsedInt$2 = parsedInt$2; $f.parsedInt$3 = parsedInt$3; $f.result = result; $f.result$1 = result$1; $f.sliceType$3 = sliceType$3; $f.structType = structType; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.time$1 = time$1; $f.universalTag = universalTag; $f.v = v; $f.v$1 = v$1; $f.val = val; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	canHaveDefaultValue = function(k) {
		var $ptr, _ref, k;
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return true;
		}
		return false;
	};
	setDefaultValue = function(v, params) {
		var $ptr, ok, params, v;
		ok = false;
		params = $clone(params, fieldParameters);
		v = v;
		if (!params.optional) {
			return ok;
		}
		ok = true;
		if (params.defaultValue === ptrType$1.nil) {
			return ok;
		}
		if (canHaveDefaultValue(v.Kind())) {
			v.SetInt(params.defaultValue.$get());
		}
		return ok;
	};
	Unmarshal = function(b, val) {
		var $ptr, _r, _tuple, b, err, rest, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; rest = $f.rest; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rest = sliceType.nil;
		err = $ifaceNil;
		_r = UnmarshalWithParams(b, val, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; rest = _tuple[0]; err = _tuple[1];
		return [rest, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Unmarshal }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.rest = rest; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Unmarshal = Unmarshal;
	UnmarshalWithParams = function(b, val, params) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, offset, params, rest, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; offset = $f.offset; params = $f.params; rest = $f.rest; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rest = sliceType.nil;
		err = $ifaceNil;
		_r = reflect.ValueOf(val); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		_r$2 = parseField(v, b, 0, parseFieldParameters(params)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; offset = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = sliceType.nil; _tmp$1 = err; rest = _tmp; err = _tmp$1;
			return [rest, err];
		}
		_tmp$2 = $subslice(b, offset); _tmp$3 = $ifaceNil; rest = _tmp$2; err = _tmp$3;
		return [rest, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnmarshalWithParams }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.offset = offset; $f.params = params; $f.rest = rest; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.UnmarshalWithParams = UnmarshalWithParams;
	parseFieldParameters = function(str) {
		var $ptr, _i, _ref, _tuple, _tuple$1, err, err$1, i, i$1, part, ret, str;
		ret = new fieldParameters.ptr();
		_ref = strings.Split(str, ",");
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			part = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (part === "optional") {
				ret.optional = true;
			} else if (part === "explicit") {
				ret.explicit = true;
				if (ret.tag === ptrType$2.nil) {
					ret.tag = $newDataPointer(0, ptrType$2);
				}
			} else if (part === "ia5") {
				ret.stringType = 22;
			} else if (part === "printable") {
				ret.stringType = 19;
			} else if (part === "utf8") {
				ret.stringType = 12;
			} else if (strings.HasPrefix(part, "default:")) {
				_tuple = strconv.ParseInt(part.substring(8), 10, 64); i = _tuple[0]; err = _tuple[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					ret.defaultValue = $newDataPointer(new $Int64(0, 0), ptrType$1);
					ret.defaultValue.$set(i);
				}
			} else if (strings.HasPrefix(part, "tag:")) {
				_tuple$1 = strconv.Atoi(part.substring(4)); i$1 = _tuple$1[0]; err$1 = _tuple$1[1];
				if ($interfaceIsEqual(err$1, $ifaceNil)) {
					ret.tag = $newDataPointer(0, ptrType$2);
					ret.tag.$set(i$1);
				}
			} else if (part === "set") {
				ret.set = true;
			} else if (part === "application") {
				ret.application = true;
				if (ret.tag === ptrType$2.nil) {
					ret.tag = $newDataPointer(0, ptrType$2);
				}
			} else if (part === "omitempty") {
				ret.omitEmpty = true;
			}
			_i++;
		}
		return ret;
	};
	getUniversalType = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, isCompound, ok, t, tagNumber, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; isCompound = $f.isCompound; ok = $f.ok; t = $f.t; tagNumber = $f.tagNumber; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tagNumber = 0;
		isCompound = false;
		ok = false;
		_ref = t;
		if ($interfaceIsEqual(_ref, objectIdentifierType)) {
			_tmp = 6; _tmp$1 = false; _tmp$2 = true; tagNumber = _tmp; isCompound = _tmp$1; ok = _tmp$2;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, bitStringType)) {
			_tmp$3 = 3; _tmp$4 = false; _tmp$5 = true; tagNumber = _tmp$3; isCompound = _tmp$4; ok = _tmp$5;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, timeType)) {
			_tmp$6 = 23; _tmp$7 = false; _tmp$8 = true; tagNumber = _tmp$6; isCompound = _tmp$7; ok = _tmp$8;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, enumeratedType)) {
			_tmp$9 = 10; _tmp$10 = false; _tmp$11 = true; tagNumber = _tmp$9; isCompound = _tmp$10; ok = _tmp$11;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, bigIntType)) {
			_tmp$12 = 2; _tmp$13 = false; _tmp$14 = true; tagNumber = _tmp$12; isCompound = _tmp$13; ok = _tmp$14;
			return [tagNumber, isCompound, ok];
		}
		_r = t.Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref$1 = _r;
		/* */ if (_ref$1 === 1) { $s = 2; continue; }
		/* */ if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) { $s = 3; continue; }
		/* */ if (_ref$1 === 25) { $s = 4; continue; }
		/* */ if (_ref$1 === 23) { $s = 5; continue; }
		/* */ if (_ref$1 === 24) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_ref$1 === 1) { */ case 2:
			_tmp$15 = 1; _tmp$16 = false; _tmp$17 = true; tagNumber = _tmp$15; isCompound = _tmp$16; ok = _tmp$17;
			return [tagNumber, isCompound, ok];
			$s = 7; continue;
		/* } else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) { */ case 3:
			_tmp$18 = 2; _tmp$19 = false; _tmp$20 = true; tagNumber = _tmp$18; isCompound = _tmp$19; ok = _tmp$20;
			return [tagNumber, isCompound, ok];
			$s = 7; continue;
		/* } else if (_ref$1 === 25) { */ case 4:
			_tmp$21 = 16; _tmp$22 = true; _tmp$23 = true; tagNumber = _tmp$21; isCompound = _tmp$22; ok = _tmp$23;
			return [tagNumber, isCompound, ok];
			$s = 7; continue;
		/* } else if (_ref$1 === 23) { */ case 5:
			_r$1 = t.Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = _r$1.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 8) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_r$2 === 8) { */ case 8:
				_tmp$24 = 4; _tmp$25 = false; _tmp$26 = true; tagNumber = _tmp$24; isCompound = _tmp$25; ok = _tmp$26;
				return [tagNumber, isCompound, ok];
			/* } */ case 9:
			_r$3 = t.Name(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = strings.HasSuffix(_r$3, "SET"); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$4) { */ case 12:
				_tmp$27 = 17; _tmp$28 = true; _tmp$29 = true; tagNumber = _tmp$27; isCompound = _tmp$28; ok = _tmp$29;
				return [tagNumber, isCompound, ok];
			/* } */ case 13:
			_tmp$30 = 16; _tmp$31 = true; _tmp$32 = true; tagNumber = _tmp$30; isCompound = _tmp$31; ok = _tmp$32;
			return [tagNumber, isCompound, ok];
			$s = 7; continue;
		/* } else if (_ref$1 === 24) { */ case 6:
			_tmp$33 = 19; _tmp$34 = false; _tmp$35 = true; tagNumber = _tmp$33; isCompound = _tmp$34; ok = _tmp$35;
			return [tagNumber, isCompound, ok];
		/* } */ case 7:
		_tmp$36 = 0; _tmp$37 = false; _tmp$38 = false; tagNumber = _tmp$36; isCompound = _tmp$37; ok = _tmp$38;
		return [tagNumber, isCompound, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getUniversalType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.isCompound = isCompound; $f.ok = ok; $f.t = t; $f.tagNumber = tagNumber; $f.$s = $s; $f.$r = $r; return $f;
	};
	newForkableWriter = function() {
		var $ptr;
		return new forkableWriter.ptr(new bytes.Buffer.ptr(), ptrType$3.nil, ptrType$3.nil);
	};
	forkableWriter.ptr.prototype.fork = function() {
		var $ptr, _tmp, _tmp$1, f, post, pre;
		pre = ptrType$3.nil;
		post = ptrType$3.nil;
		f = this;
		if (!(f.pre === ptrType$3.nil) || !(f.post === ptrType$3.nil)) {
			$panic(new $String("have already forked"));
		}
		f.pre = newForkableWriter();
		f.post = newForkableWriter();
		_tmp = f.pre; _tmp$1 = f.post; pre = _tmp; post = _tmp$1;
		return [pre, post];
	};
	forkableWriter.prototype.fork = function() { return this.$val.fork(); };
	forkableWriter.ptr.prototype.Len = function() {
		var $ptr, f, l;
		l = 0;
		f = this;
		l = l + (f.Buffer.Len()) >> 0;
		if (!(f.pre === ptrType$3.nil)) {
			l = l + (f.pre.Len()) >> 0;
		}
		if (!(f.post === ptrType$3.nil)) {
			l = l + (f.post.Len()) >> 0;
		}
		return l;
	};
	forkableWriter.prototype.Len = function() { return this.$val.Len(); };
	forkableWriter.ptr.prototype.writeTo = function(out) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, err, f, n, nn, out, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; f = $f.f; n = $f.n; nn = $f.nn; out = $f.out; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = out.Write(f.Buffer.Bytes()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		nn = 0;
		/* */ if (!(f.pre === ptrType$3.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(f.pre === ptrType$3.nil)) { */ case 2:
			_r$1 = f.pre.writeTo(out); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; nn = _tuple$1[0]; err = _tuple$1[1];
			n = n + (nn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
		/* } */ case 3:
		/* */ if (!(f.post === ptrType$3.nil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(f.post === ptrType$3.nil)) { */ case 5:
			_r$2 = f.post.writeTo(out); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2; nn = _tuple$2[0]; err = _tuple$2[1];
			n = n + (nn) >> 0;
		/* } */ case 6:
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: forkableWriter.ptr.prototype.writeTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.f = f; $f.n = n; $f.nn = nn; $f.out = out; $f.$s = $s; $f.$r = $r; return $f;
	};
	forkableWriter.prototype.writeTo = function(out) { return this.$val.writeTo(out); };
	marshalBase128Int = function(out, n) {
		var $ptr, err, i, i$1, l, n, o, out;
		err = $ifaceNil;
		if ((n.$high === 0 && n.$low === 0)) {
			err = out.Buffer.WriteByte(0);
			return err;
		}
		l = 0;
		i = n;
		while (true) {
			if (!((i.$high > 0 || (i.$high === 0 && i.$low > 0)))) { break; }
			l = l + (1) >> 0;
			i = $shiftRightInt64(i, (7));
		}
		i$1 = l - 1 >> 0;
		while (true) {
			if (!(i$1 >= 0)) { break; }
			o = ($shiftRightInt64(n, ((i$1 * 7 >> 0) >>> 0)).$low << 24 >>> 24);
			o = (o & (127)) >>> 0;
			if (!((i$1 === 0))) {
				o = (o | (128)) >>> 0;
			}
			err = out.Buffer.WriteByte(o);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			i$1 = i$1 - (1) >> 0;
		}
		err = $ifaceNil;
		return err;
	};
	marshalInt64 = function(out, i) {
		var $ptr, err, i, n, out;
		err = $ifaceNil;
		n = int64Length(i);
		while (true) {
			if (!(n > 0)) { break; }
			err = out.Buffer.WriteByte(($shiftRightInt64(i, ((((n - 1 >> 0)) * 8 >> 0) >>> 0)).$low << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			n = n - (1) >> 0;
		}
		err = $ifaceNil;
		return err;
	};
	int64Length = function(i) {
		var $ptr, i, numBytes;
		numBytes = 0;
		numBytes = 1;
		while (true) {
			if (!((i.$high > 0 || (i.$high === 0 && i.$low > 127)))) { break; }
			numBytes = numBytes + (1) >> 0;
			i = $shiftRightInt64(i, (8));
		}
		while (true) {
			if (!((i.$high < -1 || (i.$high === -1 && i.$low < 4294967168)))) { break; }
			numBytes = numBytes + (1) >> 0;
			i = $shiftRightInt64(i, (8));
		}
		return numBytes;
	};
	marshalBigInt = function(out, n) {
		var $ptr, _i, _ref, _tuple, _tuple$1, bytes$1, bytes$2, err, i, n, nMinus1, out;
		err = $ifaceNil;
		if (n.Sign() < 0) {
			nMinus1 = new big.Int.ptr().Neg(n);
			nMinus1.Sub(nMinus1, bigOne);
			bytes$1 = nMinus1.Bytes();
			_ref = bytes$1;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + i] = (((i < 0 || i >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + i]) ^ (255)) << 24 >>> 24);
				_i++;
			}
			if ((bytes$1.$length === 0) || ((((0 >= bytes$1.$length ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 0)) {
				err = out.Buffer.WriteByte(255);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
			}
			_tuple = out.Buffer.Write(bytes$1); err = _tuple[1];
		} else if (n.Sign() === 0) {
			err = out.Buffer.WriteByte(0);
		} else {
			bytes$2 = n.Bytes();
			if (bytes$2.$length > 0 && !(((((0 >= bytes$2.$length ? $throwRuntimeError("index out of range") : bytes$2.$array[bytes$2.$offset + 0]) & 128) >>> 0) === 0))) {
				err = out.Buffer.WriteByte(0);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
			}
			_tuple$1 = out.Buffer.Write(bytes$2); err = _tuple$1[1];
		}
		return err;
	};
	marshalLength = function(out, i) {
		var $ptr, err, i, n, out;
		err = $ifaceNil;
		n = lengthLength(i);
		while (true) {
			if (!(n > 0)) { break; }
			err = out.Buffer.WriteByte((((i >> $min(((((n - 1 >> 0)) * 8 >> 0) >>> 0), 31)) >> 0) << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			n = n - (1) >> 0;
		}
		err = $ifaceNil;
		return err;
	};
	lengthLength = function(i) {
		var $ptr, i, numBytes;
		numBytes = 0;
		numBytes = 1;
		while (true) {
			if (!(i > 255)) { break; }
			numBytes = numBytes + (1) >> 0;
			i = (i >> $min((8), 31)) >> 0;
		}
		return numBytes;
	};
	marshalTagAndLength = function(out, t) {
		var $ptr, b, err, l, out, t;
		err = $ifaceNil;
		t = $clone(t, tagAndLength);
		b = (t.class$0 << 24 >>> 24) << 6 << 24 >>> 24;
		if (t.isCompound) {
			b = (b | (32)) >>> 0;
		}
		if (t.tag >= 31) {
			b = (b | (31)) >>> 0;
			err = out.Buffer.WriteByte(b);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			err = marshalBase128Int(out, new $Int64(0, t.tag));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		} else {
			b = (b | ((t.tag << 24 >>> 24))) >>> 0;
			err = out.Buffer.WriteByte(b);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		if (t.length >= 128) {
			l = lengthLength(t.length);
			err = out.Buffer.WriteByte((128 | (l << 24 >>> 24)) >>> 0);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			err = marshalLength(out, t.length);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		} else {
			err = out.Buffer.WriteByte((t.length << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		err = $ifaceNil;
		return err;
	};
	marshalBitString = function(out, b) {
		var $ptr, _r, _r$1, _tuple, b, err, out, paddingBits;
		err = $ifaceNil;
		b = $clone(b, BitString);
		paddingBits = ((_r = ((8 - (_r$1 = b.BitLength % 8, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24);
		err = out.Buffer.WriteByte(paddingBits);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple = out.Buffer.Write(b.Bytes); err = _tuple[1];
		return err;
	};
	marshalObjectIdentifier = function(out, oid) {
		var $ptr, err, i, oid, out, x$3;
		err = $ifaceNil;
		if (oid.$length < 2 || (0 >= oid.$length ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 0]) > 2 || ((0 >= oid.$length ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 0]) < 2 && (1 >= oid.$length ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 1]) >= 40)) {
			err = (x$3 = new StructuralError.ptr("invalid object identifier"), new x$3.constructor.elem(x$3));
			return err;
		}
		err = marshalBase128Int(out, new $Int64(0, (((0 >= oid.$length ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 0]) * 40 >> 0) + (1 >= oid.$length ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 1]) >> 0)));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		i = 2;
		while (true) {
			if (!(i < oid.$length)) { break; }
			err = marshalBase128Int(out, new $Int64(0, ((i < 0 || i >= oid.$length) ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + i])));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			i = i + (1) >> 0;
		}
		return err;
	};
	marshalPrintableString = function(out, s) {
		var $ptr, _i, _ref, _tuple, b, c, err, out, s, x$3;
		err = $ifaceNil;
		b = new sliceType($stringToBytes(s));
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!isPrintable(c)) {
				err = (x$3 = new StructuralError.ptr("PrintableString contains invalid character"), new x$3.constructor.elem(x$3));
				return err;
			}
			_i++;
		}
		_tuple = out.Buffer.Write(b); err = _tuple[1];
		return err;
	};
	marshalIA5String = function(out, s) {
		var $ptr, _i, _ref, _tuple, b, c, err, out, s, x$3;
		err = $ifaceNil;
		b = new sliceType($stringToBytes(s));
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c > 127) {
				err = (x$3 = new StructuralError.ptr("IA5String contains invalid character"), new x$3.constructor.elem(x$3));
				return err;
			}
			_i++;
		}
		_tuple = out.Buffer.Write(b); err = _tuple[1];
		return err;
	};
	marshalUTF8String = function(out, s) {
		var $ptr, _tuple, err, out, s;
		err = $ifaceNil;
		_tuple = out.Buffer.Write(new sliceType($stringToBytes(s))); err = _tuple[1];
		return err;
	};
	marshalTwoDigits = function(out, v) {
		var $ptr, _q, _r, _r$1, err, out, v;
		err = $ifaceNil;
		err = out.Buffer.WriteByte(((48 + (_r = ((_q = v / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = out.Buffer.WriteByte(((48 + (_r$1 = v % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24));
		return err;
	};
	marshalFourDigits = function(out, v) {
		var $ptr, _i, _q, _r, _ref, _tuple, bytes$1, err, i, out, v, x$3;
		err = $ifaceNil;
		bytes$1 = $clone(arrayType.zero(), arrayType);
		_ref = bytes$1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			(x$3 = 3 - i >> 0, ((x$3 < 0 || x$3 >= bytes$1.length) ? $throwRuntimeError("index out of range") : bytes$1[x$3] = 48 + ((_r = v % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) << 24 >>> 24));
			v = (_q = v / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			_i++;
		}
		_tuple = out.Buffer.Write(new sliceType(bytes$1)); err = _tuple[1];
		return err;
	};
	outsideUTCRange = function(t) {
		var $ptr, _r, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(t, time.Time);
		_r = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		year = _r;
		return year < 1950 || year >= 2050;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: outsideUTCRange }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	marshalUTCTime = function(out, t) {
		var $ptr, _r, _r$1, err, out, t, x$3, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; err = $f.err; out = $f.out; t = $f.t; x$3 = $f.x$3; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = $clone(t, time.Time);
		_r = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		year = _r;
		if (1950 <= year && year < 2000) {
			err = marshalTwoDigits(out, (year - 1900 >> 0));
		} else if (2000 <= year && year < 2050) {
			err = marshalTwoDigits(out, (year - 2000 >> 0));
		} else {
			err = (x$3 = new StructuralError.ptr("cannot represent time as UTCTime"), new x$3.constructor.elem(x$3));
			return err;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$1 = marshalTimeCommon(out, t); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalUTCTime }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.out = out; $f.t = t; $f.x$3 = x$3; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	marshalGeneralizedTime = function(out, t) {
		var $ptr, _r, _r$1, err, out, t, x$3, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; err = $f.err; out = $f.out; t = $f.t; x$3 = $f.x$3; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = $clone(t, time.Time);
		_r = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		year = _r;
		if (year < 0 || year > 9999) {
			err = (x$3 = new StructuralError.ptr("cannot represent time as GeneralizedTime"), new x$3.constructor.elem(x$3));
			return err;
		}
		err = marshalFourDigits(out, year);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$1 = marshalTimeCommon(out, t); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalGeneralizedTime }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.out = out; $f.t = t; $f.x$3 = x$3; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	marshalTimeCommon = function(out, t) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, day, err, hour, min, month, offset, offsetMinutes, out, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; err = $f.err; hour = $f.hour; min = $f.min; month = $f.month; offset = $f.offset; offsetMinutes = $f.offsetMinutes; out = $f.out; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = $clone(t, time.Time);
		_r = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; month = _tuple[1]; day = _tuple[2];
		err = marshalTwoDigits(out, (month >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, day);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$1 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		err = marshalTwoDigits(out, hour);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, min);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, sec);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$2 = t.Zone(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; offset = _tuple$2[1];
		if ((_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === 0) {
			err = out.Buffer.WriteByte(90);
			return err;
		} else if (offset > 0) {
			err = out.Buffer.WriteByte(43);
		} else if (offset < 0) {
			err = out.Buffer.WriteByte(45);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		offsetMinutes = (_q$1 = offset / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		if (offsetMinutes < 0) {
			offsetMinutes = -offsetMinutes;
		}
		err = marshalTwoDigits(out, (_q$2 = offsetMinutes / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, (_r$3 = offsetMinutes % 60, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")));
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalTimeCommon }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.err = err; $f.hour = hour; $f.min = min; $f.month = month; $f.offset = offset; $f.offsetMinutes = offsetMinutes; $f.out = out; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	stripTagAndLength = function(in$1) {
		var $ptr, _tuple, err, in$1, offset;
		_tuple = parseTagAndLength(in$1, 0); offset = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return in$1;
		}
		return $subslice(in$1, offset);
	};
	marshalBody = function(out, value, params) {
		var $ptr, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$16, _arg$17, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, bytes$1, bytes$2, err, fp, i, i$1, i$2, i$3, out, params, pre, pre$1, s, sliceType$3, startingField, t, t$1, v, value, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$16 = $f._arg$16; _arg$17 = $f._arg$17; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; bytes$1 = $f.bytes$1; bytes$2 = $f.bytes$2; err = $f.err; fp = $f.fp; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; out = $f.out; params = $f.params; pre = $f.pre; pre$1 = $f.pre$1; s = $f.s; sliceType$3 = $f.sliceType$3; startingField = $f.startingField; t = $f.t; t$1 = $f.t$1; v = $f.v; value = $f.value; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		params = $clone(params, fieldParameters);
		value = value;
		_ref = value.Type();
		/* */ if ($interfaceIsEqual(_ref, timeType)) { $s = 1; continue; }
		/* */ if ($interfaceIsEqual(_ref, bitStringType)) { $s = 2; continue; }
		/* */ if ($interfaceIsEqual(_ref, objectIdentifierType)) { $s = 3; continue; }
		/* */ if ($interfaceIsEqual(_ref, bigIntType)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($interfaceIsEqual(_ref, timeType)) { */ case 1:
			_r = value.Interface(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			t = $clone($assertType(_r, time.Time), time.Time);
			_r$1 = outsideUTCRange(t); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$1) { */ case 7:
				_r$2 = marshalGeneralizedTime(out, t); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				return err;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$3 = marshalUTCTime(out, t); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				return err;
			/* } */ case 9:
			$s = 5; continue;
		/* } else if ($interfaceIsEqual(_ref, bitStringType)) { */ case 2:
			_arg = out;
			_r$4 = value.Interface(); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$1 = $assertType(_r$4, BitString);
			_r$5 = marshalBitString(_arg, _arg$1); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			return err;
			$s = 5; continue;
		/* } else if ($interfaceIsEqual(_ref, objectIdentifierType)) { */ case 3:
			_arg$2 = out;
			_r$6 = value.Interface(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$3 = (x$3 = $assertType(_r$6, ObjectIdentifier), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length));
			_r$7 = marshalObjectIdentifier(_arg$2, _arg$3); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			err = _r$7;
			return err;
			$s = 5; continue;
		/* } else if ($interfaceIsEqual(_ref, bigIntType)) { */ case 4:
			_arg$4 = out;
			_r$8 = value.Interface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$5 = $assertType(_r$8, ptrType$4);
			_r$9 = marshalBigInt(_arg$4, _arg$5); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			err = _r$9;
			return err;
		/* } */ case 5:
		v = value;
		_ref$1 = v.Kind();
		/* */ if (_ref$1 === 1) { $s = 19; continue; }
		/* */ if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) { $s = 20; continue; }
		/* */ if (_ref$1 === 25) { $s = 21; continue; }
		/* */ if (_ref$1 === 23) { $s = 22; continue; }
		/* */ if (_ref$1 === 24) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (_ref$1 === 1) { */ case 19:
			if (v.Bool()) {
				err = out.Buffer.WriteByte(255);
				return err;
			} else {
				err = out.Buffer.WriteByte(0);
				return err;
			}
			$s = 24; continue;
		/* } else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) { */ case 20:
			err = marshalInt64(out, v.Int());
			return err;
			$s = 24; continue;
		/* } else if (_ref$1 === 25) { */ case 21:
			t$1 = v.Type();
			startingField = 0;
			_r$10 = t$1.NumField(); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			if (!(_r$10 > 0)) { _v = false; $s = 27; continue s; }
			_r$11 = t$1.Field(0); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_v = $interfaceIsEqual(_r$11.Type, rawContentsType); case 27:
			/* */ if (_v) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_v) { */ case 25:
				_r$12 = v.Field(0); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				s = _r$12;
				/* */ if (s.Len() > 0) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if (s.Len() > 0) { */ case 31:
					bytes$1 = $makeSlice(sliceType, s.Len());
					i = 0;
					/* while (true) { */ case 34:
						/* if (!(i < s.Len())) { break; } */ if(!(i < s.Len())) { $s = 35; continue; }
						_r$13 = s.Index(i); /* */ $s = 36; case 36: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$14 = _r$13.Uint(); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						((i < 0 || i >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + i] = (_r$14.$low << 24 >>> 24));
						i = i + (1) >> 0;
					/* } */ $s = 34; continue; case 35:
					_tuple = out.Buffer.Write(stripTagAndLength(bytes$1)); err = _tuple[1];
					return err;
					$s = 33; continue;
				/* } else { */ case 32:
					startingField = 1;
				/* } */ case 33:
			/* } */ case 26:
			i$1 = startingField;
			/* while (true) { */ case 38:
				_r$15 = t$1.NumField(); /* */ $s = 40; case 40: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* if (!(i$1 < _r$15)) { break; } */ if(!(i$1 < _r$15)) { $s = 39; continue; }
				pre = ptrType$3.nil;
				_tuple$1 = out.fork(); pre = _tuple$1[0]; out = _tuple$1[1];
				_arg$6 = pre;
				_r$16 = v.Field(i$1); /* */ $s = 41; case 41: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_arg$7 = _r$16;
				_r$17 = t$1.Field(i$1); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = new reflect.StructTag(_r$17.Tag).Get("asn1"); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$19 = parseFieldParameters(_r$18); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_arg$8 = _r$19;
				_r$20 = marshalField(_arg$6, _arg$7, _arg$8); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				err = _r$20;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 38; continue; case 39:
			return err;
			$s = 24; continue;
		/* } else if (_ref$1 === 23) { */ case 22:
			sliceType$3 = v.Type();
			_r$21 = sliceType$3.Elem(); /* */ $s = 48; case 48: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$22 = _r$21.Kind(); /* */ $s = 49; case 49: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ if (_r$22 === 8) { $s = 46; continue; }
			/* */ $s = 47; continue;
			/* if (_r$22 === 8) { */ case 46:
				bytes$2 = $makeSlice(sliceType, v.Len());
				i$2 = 0;
				/* while (true) { */ case 50:
					/* if (!(i$2 < v.Len())) { break; } */ if(!(i$2 < v.Len())) { $s = 51; continue; }
					_r$23 = v.Index(i$2); /* */ $s = 52; case 52: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					_r$24 = _r$23.Uint(); /* */ $s = 53; case 53: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					((i$2 < 0 || i$2 >= bytes$2.$length) ? $throwRuntimeError("index out of range") : bytes$2.$array[bytes$2.$offset + i$2] = (_r$24.$low << 24 >>> 24));
					i$2 = i$2 + (1) >> 0;
				/* } */ $s = 50; continue; case 51:
				_tuple$2 = out.Buffer.Write(bytes$2); err = _tuple$2[1];
				return err;
			/* } */ case 47:
			fp = $clone(new fieldParameters.ptr(), fieldParameters);
			i$3 = 0;
			/* while (true) { */ case 54:
				/* if (!(i$3 < v.Len())) { break; } */ if(!(i$3 < v.Len())) { $s = 55; continue; }
				pre$1 = ptrType$3.nil;
				_tuple$3 = out.fork(); pre$1 = _tuple$3[0]; out = _tuple$3[1];
				_arg$9 = pre$1;
				_r$25 = v.Index(i$3); /* */ $s = 56; case 56: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_arg$10 = _r$25;
				_arg$11 = fp;
				_r$26 = marshalField(_arg$9, _arg$10, _arg$11); /* */ $s = 57; case 57: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				err = _r$26;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				i$3 = i$3 + (1) >> 0;
			/* } */ $s = 54; continue; case 55:
			return err;
			$s = 24; continue;
		/* } else if (_ref$1 === 24) { */ case 23:
			_ref$2 = params.stringType;
			/* */ if (_ref$2 === 22) { $s = 58; continue; }
			/* */ if (_ref$2 === 19) { $s = 59; continue; }
			/* */ $s = 60; continue;
			/* if (_ref$2 === 22) { */ case 58:
				_arg$12 = out;
				_r$27 = v.String(); /* */ $s = 62; case 62: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_arg$13 = _r$27;
				_r$28 = marshalIA5String(_arg$12, _arg$13); /* */ $s = 63; case 63: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				err = _r$28;
				return err;
				$s = 61; continue;
			/* } else if (_ref$2 === 19) { */ case 59:
				_arg$14 = out;
				_r$29 = v.String(); /* */ $s = 64; case 64: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_arg$15 = _r$29;
				_r$30 = marshalPrintableString(_arg$14, _arg$15); /* */ $s = 65; case 65: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				err = _r$30;
				return err;
				$s = 61; continue;
			/* } else { */ case 60:
				_arg$16 = out;
				_r$31 = v.String(); /* */ $s = 66; case 66: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_arg$17 = _r$31;
				_r$32 = marshalUTF8String(_arg$16, _arg$17); /* */ $s = 67; case 67: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				err = _r$32;
				return err;
			/* } */ case 61:
		/* } */ case 24:
		err = (x$4 = new StructuralError.ptr("unknown Go type"), new x$4.constructor.elem(x$4));
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalBody }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$16 = _arg$16; $f._arg$17 = _arg$17; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f.bytes$1 = bytes$1; $f.bytes$2 = bytes$2; $f.err = err; $f.fp = fp; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.out = out; $f.params = params; $f.pre = pre; $f.pre$1 = pre$1; $f.s = s; $f.sliceType$3 = sliceType$3; $f.startingField = startingField; $f.t = t; $f.t$1 = t$1; $f.v = v; $f.value = value; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	marshalField = function(out, v, params) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _rune, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, body, bodyLen, class$1, defaultValue, err, explicitTag, isCompound, ok, out, params, r, rv, tag, tags, v, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _rune = $f._rune; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _v = $f._v; body = $f.body; bodyLen = $f.bodyLen; class$1 = $f.class$1; defaultValue = $f.defaultValue; err = $f.err; explicitTag = $f.explicitTag; isCompound = $f.isCompound; ok = $f.ok; out = $f.out; params = $f.params; r = $f.r; rv = $f.rv; tag = $f.tag; tags = $f.tags; v = $f.v; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		params = $clone(params, fieldParameters);
		v = v;
		if (!(v.Kind() === 20)) { _v = false; $s = 3; continue s; }
		_r = v.Type().NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r === 0; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_arg = out;
			_r$1 = v.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = _r$1;
			_arg$2 = params;
			_r$2 = marshalField(_arg, _arg$1, _arg$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err = _r$2;
			return err;
		/* } */ case 2:
		if ((v.Kind() === 23) && (v.Len() === 0) && params.omitEmpty) {
			return err;
		}
		/* */ if (params.optional && !(params.defaultValue === ptrType$1.nil) && canHaveDefaultValue(v.Kind())) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (params.optional && !(params.defaultValue === ptrType$1.nil) && canHaveDefaultValue(v.Kind())) { */ case 7:
			_r$3 = reflect.New(v.Type()); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			defaultValue = _r$4;
			defaultValue.SetInt(params.defaultValue.$get());
			_r$5 = v.Interface(); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$3 = _r$5;
			_r$6 = defaultValue.Interface(); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$4 = _r$6;
			_r$7 = reflect.DeepEqual(_arg$3, _arg$4); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_r$7) { */ case 11:
				return err;
			/* } */ case 12:
		/* } */ case 8:
		/* */ if (params.optional && params.defaultValue === ptrType$1.nil) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (params.optional && params.defaultValue === ptrType$1.nil) { */ case 16:
			_r$8 = v.Interface(); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$5 = _r$8;
			_r$9 = reflect.Zero(v.Type()); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = _r$9.Interface(); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg$6 = _r$10;
			_r$11 = reflect.DeepEqual(_arg$5, _arg$6); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ if (_r$11) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_r$11) { */ case 18:
				return err;
			/* } */ case 19:
		/* } */ case 17:
		/* */ if ($interfaceIsEqual(v.Type(), rawValueType)) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if ($interfaceIsEqual(v.Type(), rawValueType)) { */ case 24:
			_r$12 = v.Interface(); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			rv = $clone($assertType(_r$12, RawValue), RawValue);
			if (!((rv.FullBytes.$length === 0))) {
				_tuple = out.Buffer.Write(rv.FullBytes); err = _tuple[1];
			} else {
				err = marshalTagAndLength(out, new tagAndLength.ptr(rv.Class, rv.Tag, rv.Bytes.$length, rv.IsCompound));
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				_tuple$1 = out.Buffer.Write(rv.Bytes); err = _tuple$1[1];
			}
			return err;
		/* } */ case 25:
		_r$13 = getUniversalType(v.Type()); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_tuple$2 = _r$13; tag = _tuple$2[0]; isCompound = _tuple$2[1]; ok = _tuple$2[2];
		/* */ if (!ok) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (!ok) { */ case 28:
			_r$14 = fmt.Sprintf("unknown Go type: %v", new sliceType$2([v.Type()])); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			err = (x$3 = new StructuralError.ptr(_r$14), new x$3.constructor.elem(x$3));
			return err;
		/* } */ case 29:
		class$1 = 0;
		if (!((params.stringType === 0)) && !((tag === 19))) {
			err = (x$4 = new StructuralError.ptr("explicit string type given to non-string member"), new x$4.constructor.elem(x$4));
			return err;
		}
		_ref = tag;
		/* */ if (_ref === 19) { $s = 31; continue; }
		/* */ if (_ref === 23) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (_ref === 19) { */ case 31:
			/* */ if (params.stringType === 0) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (params.stringType === 0) { */ case 34:
				_r$15 = v.String(); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_ref$1 = _r$15;
				_i = 0;
				/* while (true) { */ case 38:
					/* if (!(_i < _ref$1.length)) { break; } */ if(!(_i < _ref$1.length)) { $s = 39; continue; }
					_rune = $decodeRune(_ref$1, _i);
					r = _rune[0];
					/* */ if (r >= 128 || !isPrintable((r << 24 >>> 24))) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (r >= 128 || !isPrintable((r << 24 >>> 24))) { */ case 40:
						_r$16 = v.String(); /* */ $s = 44; case 44: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$17 = utf8.ValidString(_r$16); /* */ $s = 45; case 45: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						/* */ if (!_r$17) { $s = 42; continue; }
						/* */ $s = 43; continue;
						/* if (!_r$17) { */ case 42:
							err = errors.New("asn1: string not valid UTF-8");
							return err;
						/* } */ case 43:
						tag = 12;
						/* break; */ $s = 39; continue;
					/* } */ case 41:
					_i += _rune[1];
				/* } */ $s = 38; continue; case 39:
				$s = 36; continue;
			/* } else { */ case 35:
				tag = params.stringType;
			/* } */ case 36:
			$s = 33; continue;
		/* } else if (_ref === 23) { */ case 32:
			_r$18 = v.Interface(); /* */ $s = 48; case 48: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$19 = outsideUTCRange($assertType(_r$18, time.Time)); /* */ $s = 49; case 49: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			/* */ if (_r$19) { $s = 46; continue; }
			/* */ $s = 47; continue;
			/* if (_r$19) { */ case 46:
				tag = 24;
			/* } */ case 47:
		/* } */ case 33:
		if (params.set) {
			if (!((tag === 16))) {
				err = (x$5 = new StructuralError.ptr("non sequence tagged as set"), new x$5.constructor.elem(x$5));
				return err;
			}
			tag = 17;
		}
		_tuple$3 = out.fork(); tags = _tuple$3[0]; body = _tuple$3[1];
		_r$20 = marshalBody(body, v, params); /* */ $s = 50; case 50: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		err = _r$20;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		bodyLen = body.Len();
		explicitTag = ptrType$3.nil;
		if (params.explicit) {
			_tuple$4 = tags.fork(); explicitTag = _tuple$4[0]; tags = _tuple$4[1];
		}
		if (!params.explicit && !(params.tag === ptrType$2.nil)) {
			tag = params.tag.$get();
			class$1 = 2;
		}
		err = marshalTagAndLength(tags, new tagAndLength.ptr(class$1, tag, bodyLen, isCompound));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (params.explicit) {
			err = marshalTagAndLength(explicitTag, new tagAndLength.ptr(2, params.tag.$get(), bodyLen + tags.Len() >> 0, true));
		}
		err = $ifaceNil;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalField }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._rune = _rune; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._v = _v; $f.body = body; $f.bodyLen = bodyLen; $f.class$1 = class$1; $f.defaultValue = defaultValue; $f.err = err; $f.explicitTag = explicitTag; $f.isCompound = isCompound; $f.ok = ok; $f.out = out; $f.params = params; $f.r = r; $f.rv = rv; $f.tag = tag; $f.tags = tags; $f.v = v; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Marshal = function(val) {
		var $ptr, _r, _r$1, _r$2, _tuple, err, f, out, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; f = $f.f; out = $f.out; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = [out];
		out[0] = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		_r = reflect.ValueOf(val); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		f = newForkableWriter();
		_r$1 = marshalField(f, v, new fieldParameters.ptr(false, false, false, ptrType$1.nil, ptrType$2.nil, 0, false, false)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		_r$2 = f.writeTo(out[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; err = _tuple[1];
		return [out[0].Bytes(), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Marshal }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.out = out; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Marshal = Marshal;
	StructuralError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	SyntaxError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	BitString.methods = [{prop: "At", name: "At", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "RightAlign", name: "RightAlign", pkg: "", typ: $funcType([], [sliceType], false)}];
	ObjectIdentifier.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ObjectIdentifier], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "fork", name: "fork", pkg: "encoding/asn1", typ: $funcType([], [ptrType$3, ptrType$3], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "writeTo", name: "writeTo", pkg: "encoding/asn1", typ: $funcType([io.Writer], [$Int, $error], false)}];
	StructuralError.init([{prop: "Msg", name: "Msg", pkg: "", typ: $String, tag: ""}]);
	SyntaxError.init([{prop: "Msg", name: "Msg", pkg: "", typ: $String, tag: ""}]);
	BitString.init([{prop: "Bytes", name: "Bytes", pkg: "", typ: sliceType, tag: ""}, {prop: "BitLength", name: "BitLength", pkg: "", typ: $Int, tag: ""}]);
	ObjectIdentifier.init($Int);
	RawValue.init([{prop: "Class", name: "Class", pkg: "", typ: $Int, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: $Int, tag: ""}, {prop: "IsCompound", name: "IsCompound", pkg: "", typ: $Bool, tag: ""}, {prop: "Bytes", name: "Bytes", pkg: "", typ: sliceType, tag: ""}, {prop: "FullBytes", name: "FullBytes", pkg: "", typ: sliceType, tag: ""}]);
	RawContent.init($Uint8);
	tagAndLength.init([{prop: "class$0", name: "class", pkg: "encoding/asn1", typ: $Int, tag: ""}, {prop: "tag", name: "tag", pkg: "encoding/asn1", typ: $Int, tag: ""}, {prop: "length", name: "length", pkg: "encoding/asn1", typ: $Int, tag: ""}, {prop: "isCompound", name: "isCompound", pkg: "encoding/asn1", typ: $Bool, tag: ""}]);
	fieldParameters.init([{prop: "optional", name: "optional", pkg: "encoding/asn1", typ: $Bool, tag: ""}, {prop: "explicit", name: "explicit", pkg: "encoding/asn1", typ: $Bool, tag: ""}, {prop: "application", name: "application", pkg: "encoding/asn1", typ: $Bool, tag: ""}, {prop: "defaultValue", name: "defaultValue", pkg: "encoding/asn1", typ: ptrType$1, tag: ""}, {prop: "tag", name: "tag", pkg: "encoding/asn1", typ: ptrType$2, tag: ""}, {prop: "stringType", name: "stringType", pkg: "encoding/asn1", typ: $Int, tag: ""}, {prop: "set", name: "set", pkg: "encoding/asn1", typ: $Bool, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", pkg: "encoding/asn1", typ: $Bool, tag: ""}]);
	forkableWriter.init([{prop: "Buffer", name: "", pkg: "", typ: ptrType$5, tag: ""}, {prop: "pre", name: "pre", pkg: "encoding/asn1", typ: ptrType$3, tag: ""}, {prop: "post", name: "post", pkg: "encoding/asn1", typ: ptrType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bigOne = big.NewInt(new $Int64(0, 1));
		bitStringType = reflect.TypeOf((x = new BitString.ptr(sliceType.nil, 0), new x.constructor.elem(x)));
		objectIdentifierType = reflect.TypeOf(new ObjectIdentifier([]));
		enumeratedType = reflect.TypeOf(new Enumerated(0));
		flagType = reflect.TypeOf(new Flag(false));
		timeType = reflect.TypeOf((x$1 = new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), new x$1.constructor.elem(x$1)));
		rawValueType = reflect.TypeOf((x$2 = new RawValue.ptr(0, 0, false, sliceType.nil, sliceType.nil), new x$2.constructor.elem(x$2)));
		rawContentsType = reflect.TypeOf(RawContent.nil);
		bigIntType = reflect.TypeOf(new big.Int.ptr());
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/ecdsa"] = (function() {
	var $pkg = {}, $init, crypto, elliptic, asn1, io, big, PublicKey, PrivateKey, ecdsaSignature, sliceType, ptrType, ptrType$1, one, randFieldElement, GenerateKey, hashToInt, fermatInverse, Sign, Verify;
	crypto = $packages["crypto"];
	elliptic = $packages["crypto/elliptic"];
	asn1 = $packages["encoding/asn1"];
	io = $packages["io"];
	big = $packages["math/big"];
	PublicKey = $pkg.PublicKey = $newType(0, $kindStruct, "ecdsa.PublicKey", "PublicKey", "crypto/ecdsa", function(Curve_, X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Curve = $ifaceNil;
			this.X = ptrType.nil;
			this.Y = ptrType.nil;
			return;
		}
		this.Curve = Curve_;
		this.X = X_;
		this.Y = Y_;
	});
	PrivateKey = $pkg.PrivateKey = $newType(0, $kindStruct, "ecdsa.PrivateKey", "PrivateKey", "crypto/ecdsa", function(PublicKey_, D_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PublicKey = new PublicKey.ptr();
			this.D = ptrType.nil;
			return;
		}
		this.PublicKey = PublicKey_;
		this.D = D_;
	});
	ecdsaSignature = $pkg.ecdsaSignature = $newType(0, $kindStruct, "ecdsa.ecdsaSignature", "ecdsaSignature", "crypto/ecdsa", function(R_, S_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = ptrType.nil;
			this.S = ptrType.nil;
			return;
		}
		this.R = R_;
		this.S = S_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(big.Int);
	ptrType$1 = $ptrType(PrivateKey);
	PrivateKey.ptr.prototype.Public = function() {
		var $ptr, priv;
		priv = this;
		return priv.PublicKey;
	};
	PrivateKey.prototype.Public = function() { return this.$val.Public(); };
	PrivateKey.ptr.prototype.Sign = function(rand, msg, opts) {
		var $ptr, _r, _r$1, _tuple, err, msg, opts, priv, r, rand, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; msg = $f.msg; opts = $f.opts; priv = $f.priv; r = $f.r; rand = $f.rand; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		priv = this;
		_r = Sign(rand, priv, msg); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; s = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		_r$1 = asn1.Marshal((x = new ecdsaSignature.ptr(r, s), new x.constructor.elem(x))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PrivateKey.ptr.prototype.Sign }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.msg = msg; $f.opts = opts; $f.priv = priv; $f.r = r; $f.rand = rand; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrivateKey.prototype.Sign = function(rand, msg, opts) { return this.$val.Sign(rand, msg, opts); };
	randFieldElement = function(c, rand) {
		var $ptr, _q, _r, _r$1, _tuple, b, c, err, k, n, params, rand, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; b = $f.b; c = $f.c; err = $f.err; k = $f.k; n = $f.n; params = $f.params; rand = $f.rand; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = ptrType.nil;
		err = $ifaceNil;
		_r = c.Params(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		params = _r;
		b = $makeSlice(sliceType, ((_q = params.BitSize / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 8 >> 0));
		_r$1 = io.ReadFull(rand, b); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [k, err];
		}
		k = new big.Int.ptr().SetBytes(b);
		n = new big.Int.ptr().Sub(params.N, one);
		k.Mod(k, n);
		k.Add(k, one);
		return [k, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: randFieldElement }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.b = b; $f.c = c; $f.err = err; $f.k = k; $f.n = n; $f.params = params; $f.rand = rand; $f.$s = $s; $f.$r = $r; return $f;
	};
	GenerateKey = function(c, rand) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, c, err, k, priv, rand, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; err = $f.err; k = $f.k; priv = $f.priv; rand = $f.rand; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		priv = ptrType$1.nil;
		err = $ifaceNil;
		_r = randFieldElement(c, rand); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; k = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [priv, err];
		}
		priv = new PrivateKey.ptr();
		priv.PublicKey.Curve = c;
		priv.D = k;
		_r$1 = c.ScalarBaseMult(k.Bytes()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; priv.PublicKey.X = _tuple$1[0]; priv.PublicKey.Y = _tuple$1[1];
		return [priv, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GenerateKey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.err = err; $f.k = k; $f.priv = priv; $f.rand = rand; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenerateKey = GenerateKey;
	hashToInt = function(hash, c) {
		var $ptr, _q, _r, _r$1, c, excess, hash, orderBits, orderBytes, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; c = $f.c; excess = $f.excess; hash = $f.hash; orderBits = $f.orderBits; orderBytes = $f.orderBytes; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = c.Params(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.N.BitLen(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		orderBits = _r$1;
		orderBytes = (_q = ((orderBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (hash.$length > orderBytes) {
			hash = $subslice(hash, 0, orderBytes);
		}
		ret = new big.Int.ptr().SetBytes(hash);
		excess = (hash.$length * 8 >> 0) - orderBits >> 0;
		if (excess > 0) {
			ret.Rsh(ret, (excess >>> 0));
		}
		return ret;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: hashToInt }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.excess = excess; $f.hash = hash; $f.orderBits = orderBits; $f.orderBytes = orderBytes; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	fermatInverse = function(k, N) {
		var $ptr, N, k, nMinus2, two;
		two = big.NewInt(new $Int64(0, 2));
		nMinus2 = new big.Int.ptr().Sub(N, two);
		return new big.Int.ptr().Exp(k, nMinus2, N);
	};
	Sign = function(rand, priv, hash) {
		var $ptr, N, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, c, e, err, hash, k, kInv, priv, r, rand, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; N = $f.N; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; err = $f.err; hash = $f.hash; k = $f.k; kInv = $f.kInv; priv = $f.priv; r = $f.r; rand = $f.rand; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = ptrType.nil;
		s = ptrType.nil;
		err = $ifaceNil;
		c = priv.PublicKey.Curve;
		_r = c.Params(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		N = _r.N;
		_tmp = ptrType.nil; _tmp$1 = ptrType.nil; k = _tmp; kInv = _tmp$1;
		/* while (true) { */ case 2:
			/* while (true) { */ case 4:
				_r$1 = randFieldElement(c, rand); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1; k = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					r = ptrType.nil;
					return [r, s, err];
				}
				kInv = fermatInverse(k, N);
				_r$2 = priv.PublicKey.Curve.ScalarBaseMult(k.Bytes()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2; r = _tuple$1[0];
				r.Mod(r, N);
				if (!((r.Sign() === 0))) {
					/* break; */ $s = 5; continue;
				}
			/* } */ $s = 4; continue; case 5:
			_r$3 = hashToInt(hash, c); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			e = _r$3;
			s = new big.Int.ptr().Mul(priv.D, r);
			s.Add(s, e);
			s.Mul(s, kInv);
			s.Mod(s, N);
			if (!((s.Sign() === 0))) {
				/* break; */ $s = 3; continue;
			}
		/* } */ $s = 2; continue; case 3:
		return [r, s, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sign }; } $f.$ptr = $ptr; $f.N = N; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.err = err; $f.hash = hash; $f.k = k; $f.kInv = kInv; $f.priv = priv; $f.r = r; $f.rand = rand; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sign = Sign;
	Verify = function(pub, hash, r, s) {
		var $ptr, N, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, c, e, hash, pub, r, s, u1, u2, w, x, x1, x2, y, y1, y2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; N = $f.N; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; e = $f.e; hash = $f.hash; pub = $f.pub; r = $f.r; s = $f.s; u1 = $f.u1; u2 = $f.u2; w = $f.w; x = $f.x; x1 = $f.x1; x2 = $f.x2; y = $f.y; y1 = $f.y1; y2 = $f.y2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = pub.Curve;
		_r = c.Params(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		N = _r.N;
		if ((r.Sign() === 0) || (s.Sign() === 0)) {
			return false;
		}
		if (r.Cmp(N) >= 0 || s.Cmp(N) >= 0) {
			return false;
		}
		_r$1 = hashToInt(hash, c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		e = _r$1;
		w = new big.Int.ptr().ModInverse(s, N);
		u1 = e.Mul(e, w);
		u1.Mod(u1, N);
		u2 = w.Mul(r, w);
		u2.Mod(u2, N);
		_r$2 = c.ScalarBaseMult(u1.Bytes()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; x1 = _tuple[0]; y1 = _tuple[1];
		_r$3 = c.ScalarMult(pub.X, pub.Y, u2.Bytes()); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3; x2 = _tuple$1[0]; y2 = _tuple$1[1];
		_r$4 = c.Add(x1, y1, x2, y2); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4; x = _tuple$2[0]; y = _tuple$2[1];
		if ((x.Sign() === 0) && (y.Sign() === 0)) {
			return false;
		}
		x.Mod(x, N);
		return x.Cmp(r) === 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Verify }; } $f.$ptr = $ptr; $f.N = N; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.e = e; $f.hash = hash; $f.pub = pub; $f.r = r; $f.s = s; $f.u1 = u1; $f.u2 = u2; $f.w = w; $f.x = x; $f.x1 = x1; $f.x2 = x2; $f.y = y; $f.y1 = y1; $f.y2 = y2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Verify = Verify;
	ptrType$1.methods = [{prop: "Public", name: "Public", pkg: "", typ: $funcType([], [crypto.PublicKey], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([io.Reader, sliceType, crypto.SignerOpts], [sliceType, $error], false)}];
	PublicKey.init([{prop: "Curve", name: "", pkg: "", typ: elliptic.Curve, tag: ""}, {prop: "X", name: "X", pkg: "", typ: ptrType, tag: ""}, {prop: "Y", name: "Y", pkg: "", typ: ptrType, tag: ""}]);
	PrivateKey.init([{prop: "PublicKey", name: "", pkg: "", typ: PublicKey, tag: ""}, {prop: "D", name: "D", pkg: "", typ: ptrType, tag: ""}]);
	ecdsaSignature.init([{prop: "R", name: "R", pkg: "", typ: ptrType, tag: ""}, {prop: "S", name: "S", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elliptic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = asn1.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		one = new big.Int.ptr().SetInt64(new $Int64(0, 1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/subtle"] = (function() {
	var $pkg = {}, $init, ConstantTimeCompare, ConstantTimeByteEq;
	ConstantTimeCompare = function(x, y) {
		var $ptr, i, v, x, y;
		if (!((x.$length === y.$length))) {
			return 0;
		}
		v = 0;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			v = (v | (((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) << 24 >>> 24))) >>> 0;
			i = i + (1) >> 0;
		}
		return ConstantTimeByteEq(v, 0);
	};
	$pkg.ConstantTimeCompare = ConstantTimeCompare;
	ConstantTimeByteEq = function(x, y) {
		var $ptr, x, y, z;
		z = ~(((x ^ y) << 24 >>> 24)) << 24 >>> 24;
		z = (z & ((z >>> 4 << 24 >>> 24))) >>> 0;
		z = (z & ((z >>> 2 << 24 >>> 24))) >>> 0;
		z = (z & ((z >>> 1 << 24 >>> 24))) >>> 0;
		return (z >> 0);
	};
	$pkg.ConstantTimeByteEq = ConstantTimeByteEq;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/hmac"] = (function() {
	var $pkg = {}, $init, subtle, hash;
	subtle = $packages["crypto/subtle"];
	hash = $packages["hash"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = subtle.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/md5"] = (function() {
	var $pkg = {}, $init, crypto, hash, runtime, digest, sliceType, arrayType, arrayType$1, arrayType$2, arrayType$3, ptrType, arrayType$4, ptrType$1, littleEndian, block, init, New, init$1, blockGeneric;
	crypto = $packages["crypto"];
	hash = $packages["hash"];
	runtime = $packages["runtime"];
	digest = $pkg.digest = $newType(0, $kindStruct, "md5.digest", "digest", "crypto/md5", function(s_, x_, nx_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = arrayType$4.zero();
			this.x = arrayType$1.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			return;
		}
		this.s = s_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 16);
	arrayType$1 = $arrayType($Uint8, 64);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$3 = $arrayType($Uint32, 16);
	ptrType = $ptrType(arrayType$3);
	arrayType$4 = $arrayType($Uint32, 4);
	ptrType$1 = $ptrType(digest);
	init = function() {
		var $ptr;
		crypto.RegisterHash(2, New);
	};
	digest.ptr.prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.s[0] = 1732584193;
		d.s[1] = 4023233417;
		d.s[2] = 2562383102;
		d.s[3] = 271733878;
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = function() {
		var $ptr, d;
		d = new digest.ptr();
		d.Reset();
		return d;
	};
	$pkg.New = New;
	digest.ptr.prototype.Size = function() {
		var $ptr, d;
		d = this;
		return 16;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var $ptr, d, err, i, n, n$1, nn, p, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; d = $f.d; err = $f.err; i = $f.i; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		/* */ if (d.nx > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nx > 0) { */ case 1:
			n = p.$length;
			if (n > (64 - d.nx >> 0)) {
				n = 64 - d.nx >> 0;
			}
			i = 0;
			while (true) {
				if (!(i < n)) { break; }
				(x$2 = d.x, x$3 = d.nx + i >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3] = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i])));
				i = i + (1) >> 0;
			}
			d.nx = d.nx + (n) >> 0;
			/* */ if (d.nx === 64) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.nx === 64) { */ case 3:
				$r = block(d, $subslice(new sliceType(d.x), 0, 64)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				d.nx = 0;
			/* } */ case 4:
			p = $subslice(p, n);
		/* } */ case 2:
		/* */ if (p.$length >= 64) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.$length >= 64) { */ case 6:
			n$1 = (p.$length & ~63) >> 0;
			$r = block(d, $subslice(p, 0, n$1)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p = $subslice(p, n$1);
		/* } */ case 7:
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType(d.x), p);
		}
		return [nn, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Write }; } $f.$ptr = $ptr; $f.d = d; $f.err = err; $f.i = i; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var $ptr, _r, d, d0, hash$1, in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; d0 = $f.d0; hash$1 = $f.hash$1; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d0 = this;
		d = $clone(d0, digest);
		_r = d.checkSum(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hash$1 = $clone(_r, arrayType);
		return $appendSlice(in$1, new sliceType(hash$1));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Sum }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.d0 = d0; $f.hash$1 = hash$1; $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, d, digest$1, i, i$1, len, s, tmp, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; d = $f.d; digest$1 = $f.digest$1; i = $f.i; i$1 = $f.i$1; len = $f.len; s = $f.s; tmp = $f.tmp; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		len = d.len;
		tmp = $clone(arrayType$1.zero(), arrayType$1);
		tmp[0] = 128;
		/* */ if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) { */ case 1:
			_r = d.Write($subslice(new sliceType(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low))))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = d.Write($subslice(new sliceType(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low))))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		len = $shiftLeft64(len, (3));
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, ((8 * i >>> 0))).$low << 24 >>> 24));
			i = i + (1) >>> 0;
		}
		_r$2 = d.Write($subslice(new sliceType(tmp), 0, 8)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = $clone(arrayType.zero(), arrayType);
		_ref = d.s;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			(x$3 = i$1 * 4 >> 0, ((x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = (s << 24 >>> 24)));
			(x$4 = (i$1 * 4 >> 0) + 1 >> 0, ((x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ((s >>> 8 >>> 0) << 24 >>> 24)));
			(x$5 = (i$1 * 4 >> 0) + 2 >> 0, ((x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ((s >>> 16 >>> 0) << 24 >>> 24)));
			(x$6 = (i$1 * 4 >> 0) + 3 >> 0, ((x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = ((s >>> 24 >>> 0) << 24 >>> 24)));
			_i++;
		}
		return digest$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.checkSum }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.d = d; $f.digest$1 = digest$1; $f.i = i; $f.i$1 = i$1; $f.len = len; $f.s = s; $f.tmp = tmp; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	init$1 = function() {
		var $ptr, x, y;
		x = 67305985;
		y = $toNativeArray($kindUint8, [1, 2, 3, 4]);
		littleEndian = $equal(x, y, arrayType$2);
	};
	blockGeneric = function(dig, p) {
		var $ptr, X, _tmp, _tmp$1, _tmp$2, _tmp$3, a, aa, b, bb, c, cc, d, dd, dig, i, j, p, x, x$1, x$2, x$3, xbuf;
		a = dig.s[0];
		b = dig.s[1];
		c = dig.s[2];
		d = dig.s[3];
		X = ptrType.nil;
		xbuf = $clone(arrayType$3.zero(), arrayType$3);
		while (true) {
			if (!(p.$length >= 64)) { break; }
			_tmp = a; _tmp$1 = b; _tmp$2 = c; _tmp$3 = d; aa = _tmp; bb = _tmp$1; cc = _tmp$2; dd = _tmp$3;
			if (littleEndian && ((($sliceToArray(p) & 3) >>> 0) === 0)) {
				X = $sliceToArray(p);
			} else {
				X = xbuf;
				j = 0;
				i = 0;
				while (true) {
					if (!(i < 16)) { break; }
					(x$3 = i & 15, X.nilCheck, ((x$3 < 0 || x$3 >= X.length) ? $throwRuntimeError("index out of range") : X[x$3] = ((((((((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) >>> 0) | (((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >>> 0) << 8 >>> 0)) >>> 0) | (((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2])) >>> 0) << 24 >>> 0)) >>> 0));
					j = j + (4) >> 0;
					i = i + (1) >> 0;
				}
			}
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 3614090360 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 3905402710 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 606105819 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 3250441966 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 4118548399 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 1200080426 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 2821735955 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 4249261313 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 1770035416 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 2336552879 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 4294925233 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 2304563134 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 1804603682 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 4254626195 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 2792965006 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 1236535329 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 4129170786 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 3225465664 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 643717713 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 3921069994 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 3593408605 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 38016083 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 3634488961 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 3889429448 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 568446438 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 3275163606 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 4107603335 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 1163531501 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 2850285829 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 4243563512 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 1735328473 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 2368359562 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 4294588738 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 2272392833 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 1839030562 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 4259657740 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 2763975236 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 1272893353 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 4139469664 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 3200236656 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 681279174 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 3936430074 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 3572445317 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 76029189 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 3654602809 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 3873151461 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 530742520 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 3299628645 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 4096336452 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 1126891415 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 2878612391 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 4237533241 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 1700485571 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 2399980690 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 4293915773 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 2240044497 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 1873313359 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 4264355552 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 2734768916 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 1309151649 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 4149444226 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 3174756917 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 718787259 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 3951481745 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + (aa) >>> 0;
			b = b + (bb) >>> 0;
			c = c + (cc) >>> 0;
			d = d + (dd) >>> 0;
			p = $subslice(p, 64);
		}
		dig.s[0] = a;
		dig.s[1] = b;
		dig.s[2] = c;
		dig.s[3] = d;
	};
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/md5", typ: $funcType([], [arrayType], false)}];
	digest.init([{prop: "s", name: "s", pkg: "crypto/md5", typ: arrayType$4, tag: ""}, {prop: "x", name: "x", pkg: "crypto/md5", typ: arrayType$1, tag: ""}, {prop: "nx", name: "nx", pkg: "crypto/md5", typ: $Int, tag: ""}, {prop: "len", name: "len", pkg: "crypto/md5", typ: $Uint64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		littleEndian = false;
		block = blockGeneric;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/rand"] = (function() {
	var $pkg = {}, $init, errors, js, io, big, rngReader, sliceType, ptrType, ptrType$1, smallPrimes, smallPrimesProduct, init, Prime, Int;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	big = $packages["math/big"];
	rngReader = $pkg.rngReader = $newType(0, $kindStruct, "rand.rngReader", "rngReader", "crypto/rand", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(big.Int);
	ptrType$1 = $ptrType(rngReader);
	init = function() {
		var $ptr;
		$pkg.Reader = new rngReader.ptr();
	};
	rngReader.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, array, b, crypto, err, n, offset, r, randomBytes, require;
		n = 0;
		err = $ifaceNil;
		r = this;
		array = b.$array;
		offset = $parseInt(b.$offset) >> 0;
		crypto = $global.crypto;
		if (crypto === undefined) {
			crypto = $global.msCrypto;
		}
		if (!(crypto === undefined)) {
			if (!(crypto.getRandomValues === undefined)) {
				n = b.$length;
				if (n > 65536) {
					n = 65536;
				}
				crypto.getRandomValues(array.subarray(offset, offset + n >> 0));
				_tmp = n; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		}
		require = $global.require;
		if (!(require === undefined)) {
			randomBytes = require($externalize("crypto", $String)).randomBytes;
			if (!(randomBytes === undefined)) {
				array.set(randomBytes(b.$length), offset);
				_tmp$2 = b.$length; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		}
		_tmp$4 = 0; _tmp$5 = errors.New("crypto/rand not available in this environment"); n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	rngReader.prototype.Read = function(b) { return this.$val.Read(b); };
	Prime = function(rand, bits) {
		var $ptr, _i, _index, _q, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, b, bigMod, bits, bytes, delta, err, m, mod, p, prime, rand, x, x$1, x$2, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _index = $f._index; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; bigMod = $f.bigMod; bits = $f.bits; bytes = $f.bytes; delta = $f.delta; err = $f.err; m = $f.m; mod = $f.mod; p = $f.p; prime = $f.prime; rand = $f.rand; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = ptrType.nil;
		err = $ifaceNil;
		if (bits < 2) {
			err = errors.New("crypto/rand: prime size must be at least 2-bit");
			return [p, err];
		}
		b = ((_r = bits % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0);
		if (b === 0) {
			b = 8;
		}
		bytes = $makeSlice(sliceType, (_q = ((bits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		p = new big.Int.ptr();
		bigMod = new big.Int.ptr();
		/* while (true) { */ case 1:
			_r$1 = io.ReadFull(rand, bytes); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = ptrType.nil; _tmp$1 = err; p = _tmp; err = _tmp$1;
				return [p, err];
			}
			(0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0] = ((0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0]) & (((((y = b, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0) << 24 >>> 24))) >>> 0);
			if (b >= 2) {
				(0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0] = ((0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0]) | (((y$1 = ((b - 2 >>> 0)), y$1 < 32 ? (3 << y$1) : 0) << 24 >>> 24))) >>> 0);
			} else {
				(0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0] = ((0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0]) | (1)) >>> 0);
				if (bytes.$length > 1) {
					(1 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 1] = ((1 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 1]) | (128)) >>> 0);
				}
			}
			_index = bytes.$length - 1 >> 0;
			((_index < 0 || _index >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + _index] = (((_index < 0 || _index >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + _index]) | (1)) >>> 0);
			p.SetBytes(bytes);
			bigMod.Mod(p, smallPrimesProduct);
			mod = bigMod.Uint64();
			delta = new $Uint64(0, 0);
			NextDelta:
			while (true) {
				if (!((delta.$high < 0 || (delta.$high === 0 && delta.$low < 1048576)))) { break; }
				m = new $Uint64(mod.$high + delta.$high, mod.$low + delta.$low);
				_ref = smallPrimes;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					prime = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if ((x = $div64(m, new $Uint64(0, prime), true), (x.$high === 0 && x.$low === 0)) && (bits > 6 || !((x$1 = new $Uint64(0, prime), (m.$high === x$1.$high && m.$low === x$1.$low))))) {
						delta = (x$2 = new $Uint64(0, 2), new $Uint64(delta.$high + x$2.$high, delta.$low + x$2.$low));
						continue NextDelta;
					}
					_i++;
				}
				if ((delta.$high > 0 || (delta.$high === 0 && delta.$low > 0))) {
					bigMod.SetUint64(delta);
					p.Add(p, bigMod);
				}
				break;
			}
			_r$2 = p.ProbablyPrime(20); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 && (p.BitLen() === bits)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$2 && (p.BitLen() === bits)) { */ case 4:
				return [p, err];
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Prime }; } $f.$ptr = $ptr; $f._i = _i; $f._index = _index; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.bigMod = bigMod; $f.bits = bits; $f.bytes = bytes; $f.delta = delta; $f.err = err; $f.m = m; $f.mod = mod; $f.p = p; $f.prime = prime; $f.rand = rand; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Prime = Prime;
	Int = function(rand, max) {
		var $ptr, _q, _r, _r$1, _tmp, _tmp$1, _tuple, b, bytes, err, k, max, n, rand, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; bytes = $f.bytes; err = $f.err; k = $f.k; max = $f.max; n = $f.n; rand = $f.rand; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = ptrType.nil;
		err = $ifaceNil;
		if (max.Sign() <= 0) {
			$panic(new $String("crypto/rand: argument to Int is <= 0"));
		}
		k = (_q = ((max.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((_r = max.BitLen() % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0);
		if (b === 0) {
			b = 8;
		}
		bytes = $makeSlice(sliceType, k);
		n = new big.Int.ptr();
		/* while (true) { */ case 1:
			_r$1 = io.ReadFull(rand, bytes); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = ptrType.nil; _tmp$1 = err; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			(0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0] = ((0 >= bytes.$length ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + 0]) & (((((y = b, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0) << 24 >>> 24))) >>> 0);
			n.SetBytes(bytes);
			if (n.Cmp(max) < 0) {
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.bytes = bytes; $f.err = err; $f.k = k; $f.max = max; $f.n = n; $f.rand = rand; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Int = Int;
	ptrType$1.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	rngReader.init([]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Reader = $ifaceNil;
		smallPrimes = new sliceType([3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]);
		smallPrimesProduct = new big.Int.ptr().SetUint64(new $Uint64(3793877372, 820596253));
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/rsa"] = (function() {
	var $pkg = {}, $init, bytes, crypto, rand, subtle, errors, hash, io, big, PSSOptions, PublicKey, PrivateKey, PrecomputedValues, CRTValue, sliceType, arrayType, ptrType, ptrType$1, ptrType$2, sliceType$1, arrayType$1, sliceType$2, hashPrefixes, bigZero, bigOne, errPublicModulus, errPublicExponentSmall, errPublicExponentLarge, _map, _key, SignPKCS1v15, VerifyPKCS1v15, pkcs1v15HashInfo, copyWithLeftPad, emsaPSSEncode, signPSSWithSalt, SignPSS, checkPub, GenerateKey, GenerateMultiPrimeKey, incCounter, mgf1XOR, encrypt, modInverse, decrypt, leftPad;
	bytes = $packages["bytes"];
	crypto = $packages["crypto"];
	rand = $packages["crypto/rand"];
	subtle = $packages["crypto/subtle"];
	errors = $packages["errors"];
	hash = $packages["hash"];
	io = $packages["io"];
	big = $packages["math/big"];
	PSSOptions = $pkg.PSSOptions = $newType(0, $kindStruct, "rsa.PSSOptions", "PSSOptions", "crypto/rsa", function(SaltLength_, Hash_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SaltLength = 0;
			this.Hash = 0;
			return;
		}
		this.SaltLength = SaltLength_;
		this.Hash = Hash_;
	});
	PublicKey = $pkg.PublicKey = $newType(0, $kindStruct, "rsa.PublicKey", "PublicKey", "crypto/rsa", function(N_, E_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.N = ptrType$1.nil;
			this.E = 0;
			return;
		}
		this.N = N_;
		this.E = E_;
	});
	PrivateKey = $pkg.PrivateKey = $newType(0, $kindStruct, "rsa.PrivateKey", "PrivateKey", "crypto/rsa", function(PublicKey_, D_, Primes_, Precomputed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PublicKey = new PublicKey.ptr();
			this.D = ptrType$1.nil;
			this.Primes = sliceType$1.nil;
			this.Precomputed = new PrecomputedValues.ptr();
			return;
		}
		this.PublicKey = PublicKey_;
		this.D = D_;
		this.Primes = Primes_;
		this.Precomputed = Precomputed_;
	});
	PrecomputedValues = $pkg.PrecomputedValues = $newType(0, $kindStruct, "rsa.PrecomputedValues", "PrecomputedValues", "crypto/rsa", function(Dp_, Dq_, Qinv_, CRTValues_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dp = ptrType$1.nil;
			this.Dq = ptrType$1.nil;
			this.Qinv = ptrType$1.nil;
			this.CRTValues = sliceType$2.nil;
			return;
		}
		this.Dp = Dp_;
		this.Dq = Dq_;
		this.Qinv = Qinv_;
		this.CRTValues = CRTValues_;
	});
	CRTValue = $pkg.CRTValue = $newType(0, $kindStruct, "rsa.CRTValue", "CRTValue", "crypto/rsa", function(Exp_, Coeff_, R_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Exp = ptrType$1.nil;
			this.Coeff = ptrType$1.nil;
			this.R = ptrType$1.nil;
			return;
		}
		this.Exp = Exp_;
		this.Coeff = Coeff_;
		this.R = R_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 8);
	ptrType = $ptrType(PSSOptions);
	ptrType$1 = $ptrType(big.Int);
	ptrType$2 = $ptrType(PrivateKey);
	sliceType$1 = $sliceType(ptrType$1);
	arrayType$1 = $arrayType($Uint8, 4);
	sliceType$2 = $sliceType(CRTValue);
	SignPKCS1v15 = function(rand$1, priv, hash$1, hashed) {
		var $ptr, _q, _r, _tmp, _tmp$1, _tuple, _tuple$1, c, em, err, hash$1, hashLen, hashed, i, k, m, prefix, priv, rand$1, s, tLen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; em = $f.em; err = $f.err; hash$1 = $f.hash$1; hashLen = $f.hashLen; hashed = $f.hashed; i = $f.i; k = $f.k; m = $f.m; prefix = $f.prefix; priv = $f.priv; rand$1 = $f.rand$1; s = $f.s; tLen = $f.tLen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = sliceType.nil;
		err = $ifaceNil;
		_tuple = pkcs1v15HashInfo(hash$1, hashed.$length); hashLen = _tuple[0]; prefix = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		tLen = prefix.$length + hashLen >> 0;
		k = (_q = ((priv.PublicKey.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (k < (tLen + 11 >> 0)) {
			_tmp = sliceType.nil; _tmp$1 = $pkg.ErrMessageTooLong; s = _tmp; err = _tmp$1;
			return [s, err];
		}
		em = $makeSlice(sliceType, k);
		(1 >= em.$length ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 1] = 1);
		i = 2;
		while (true) {
			if (!(i < ((k - tLen >> 0) - 1 >> 0))) { break; }
			((i < 0 || i >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + i] = 255);
			i = i + (1) >> 0;
		}
		$copySlice($subslice(em, (k - tLen >> 0), (k - hashLen >> 0)), prefix);
		$copySlice($subslice(em, (k - hashLen >> 0), k), hashed);
		m = new big.Int.ptr().SetBytes(em);
		_r = decrypt(rand$1, priv, m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; c = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		copyWithLeftPad(em, c.Bytes());
		s = em;
		return [s, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SignPKCS1v15 }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.em = em; $f.err = err; $f.hash$1 = hash$1; $f.hashLen = hashLen; $f.hashed = hashed; $f.i = i; $f.k = k; $f.m = m; $f.prefix = prefix; $f.priv = priv; $f.rand$1 = rand$1; $f.s = s; $f.tLen = tLen; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SignPKCS1v15 = SignPKCS1v15;
	VerifyPKCS1v15 = function(pub, hash$1, hashed, sig) {
		var $ptr, _q, _tuple, c, em, err, hash$1, hashLen, hashed, i, k, m, ok, prefix, pub, sig, tLen, x;
		err = $ifaceNil;
		_tuple = pkcs1v15HashInfo(hash$1, hashed.$length); hashLen = _tuple[0]; prefix = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		tLen = prefix.$length + hashLen >> 0;
		k = (_q = ((pub.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (k < (tLen + 11 >> 0)) {
			err = $pkg.ErrVerification;
			return err;
		}
		c = new big.Int.ptr().SetBytes(sig);
		m = encrypt(new big.Int.ptr(), pub, c);
		em = leftPad(m.Bytes(), k);
		ok = subtle.ConstantTimeByteEq((0 >= em.$length ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 0]), 0);
		ok = ok & (subtle.ConstantTimeByteEq((1 >= em.$length ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 1]), 1));
		ok = ok & (subtle.ConstantTimeCompare($subslice(em, (k - hashLen >> 0), k), hashed));
		ok = ok & (subtle.ConstantTimeCompare($subslice(em, (k - tLen >> 0), (k - hashLen >> 0)), prefix));
		ok = ok & (subtle.ConstantTimeByteEq((x = (k - tLen >> 0) - 1 >> 0, ((x < 0 || x >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + x])), 0));
		i = 2;
		while (true) {
			if (!(i < ((k - tLen >> 0) - 1 >> 0))) { break; }
			ok = ok & (subtle.ConstantTimeByteEq(((i < 0 || i >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + i]), 255));
			i = i + (1) >> 0;
		}
		if (!((ok === 1))) {
			err = $pkg.ErrVerification;
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	$pkg.VerifyPKCS1v15 = VerifyPKCS1v15;
	pkcs1v15HashInfo = function(hash$1, inLen) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, err, hash$1, hashLen, inLen, ok, prefix;
		hashLen = 0;
		prefix = sliceType.nil;
		err = $ifaceNil;
		if (hash$1 === 0) {
			_tmp = inLen; _tmp$1 = sliceType.nil; _tmp$2 = $ifaceNil; hashLen = _tmp; prefix = _tmp$1; err = _tmp$2;
			return [hashLen, prefix, err];
		}
		hashLen = new crypto.Hash(hash$1).Size();
		if (!((inLen === hashLen))) {
			_tmp$3 = 0; _tmp$4 = sliceType.nil; _tmp$5 = errors.New("crypto/rsa: input must be hashed message"); hashLen = _tmp$3; prefix = _tmp$4; err = _tmp$5;
			return [hashLen, prefix, err];
		}
		_tuple = (_entry = hashPrefixes[crypto.Hash.keyFor(hash$1)], _entry !== undefined ? [_entry.v, true] : [sliceType.nil, false]); prefix = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			_tmp$6 = 0; _tmp$7 = sliceType.nil; _tmp$8 = errors.New("crypto/rsa: unsupported hash function"); hashLen = _tmp$6; prefix = _tmp$7; err = _tmp$8;
			return [hashLen, prefix, err];
		}
		return [hashLen, prefix, err];
	};
	copyWithLeftPad = function(dest, src) {
		var $ptr, dest, i, numPaddingBytes, src;
		numPaddingBytes = dest.$length - src.$length >> 0;
		i = 0;
		while (true) {
			if (!(i < numPaddingBytes)) { break; }
			((i < 0 || i >= dest.$length) ? $throwRuntimeError("index out of range") : dest.$array[dest.$offset + i] = 0);
			i = i + (1) >> 0;
		}
		$copySlice($subslice(dest, numPaddingBytes), src);
	};
	emsaPSSEncode = function(mHash, emBits, salt, hash$1) {
		var $ptr, _q, _r, _r$1, _r$2, _r$3, _r$4, db, em, emBits, emLen, h, hLen, hash$1, mHash, prefix, sLen, salt, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; db = $f.db; em = $f.em; emBits = $f.emBits; emLen = $f.emLen; h = $f.h; hLen = $f.hLen; hash$1 = $f.hash$1; mHash = $f.mHash; prefix = $f.prefix; sLen = $f.sLen; salt = $f.salt; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = hash$1.Size(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hLen = _r;
		sLen = salt.$length;
		emLen = (_q = ((emBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (!((mHash.$length === hLen))) {
			return [sliceType.nil, errors.New("crypto/rsa: input must be hashed message")];
		}
		if (emLen < ((hLen + sLen >> 0) + 2 >> 0)) {
			return [sliceType.nil, errors.New("crypto/rsa: encoding error")];
		}
		em = $makeSlice(sliceType, emLen);
		db = $subslice(em, 0, (((((emLen - sLen >> 0) - hLen >> 0) - 2 >> 0) + 1 >> 0) + sLen >> 0));
		h = $subslice(em, (((((emLen - sLen >> 0) - hLen >> 0) - 2 >> 0) + 1 >> 0) + sLen >> 0), (emLen - 1 >> 0));
		prefix = $clone(arrayType.zero(), arrayType);
		_r$1 = hash$1.Write(new sliceType(prefix)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = hash$1.Write(mHash); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = hash$1.Write(salt); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = hash$1.Sum($subslice(h, 0, 0)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		h = _r$4;
		$r = hash$1.Reset(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(x = ((emLen - sLen >> 0) - hLen >> 0) - 2 >> 0, ((x < 0 || x >= db.$length) ? $throwRuntimeError("index out of range") : db.$array[db.$offset + x] = 1));
		$copySlice($subslice(db, (((emLen - sLen >> 0) - hLen >> 0) - 1 >> 0)), salt);
		$r = mgf1XOR(db, hash$1, h); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(0 >= db.$length ? $throwRuntimeError("index out of range") : db.$array[db.$offset + 0] = ((0 >= db.$length ? $throwRuntimeError("index out of range") : db.$array[db.$offset + 0]) & ((((y = (((8 * emLen >> 0) - emBits >> 0) >>> 0), y < 32 ? (255 >>> y) : 0) << 24 >>> 24)))) >>> 0);
		(x$1 = emLen - 1 >> 0, ((x$1 < 0 || x$1 >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + x$1] = 188));
		return [em, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: emsaPSSEncode }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.db = db; $f.em = em; $f.emBits = emBits; $f.emLen = emLen; $f.h = h; $f.hLen = hLen; $f.hash$1 = hash$1; $f.mHash = mHash; $f.prefix = prefix; $f.sLen = sLen; $f.salt = salt; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	signPSSWithSalt = function(rand$1, priv, hash$1, hashed, salt) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _q, _r, _r$1, _r$2, _tuple, _tuple$1, c, em, err, hash$1, hashed, m, nBits, priv, rand$1, s, salt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; em = $f.em; err = $f.err; hash$1 = $f.hash$1; hashed = $f.hashed; m = $f.m; nBits = $f.nBits; priv = $f.priv; rand$1 = $f.rand$1; s = $f.s; salt = $f.salt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = sliceType.nil;
		err = $ifaceNil;
		nBits = priv.PublicKey.N.BitLen();
		_arg = hashed;
		_arg$1 = nBits - 1 >> 0;
		_arg$2 = salt;
		_r = new crypto.Hash(hash$1).New(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$3 = _r;
		_r$1 = emsaPSSEncode(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; em = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		m = new big.Int.ptr().SetBytes(em);
		_r$2 = decrypt(rand$1, priv, m); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; c = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		s = $makeSlice(sliceType, (_q = ((nBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		copyWithLeftPad(s, c.Bytes());
		return [s, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: signPSSWithSalt }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.em = em; $f.err = err; $f.hash$1 = hash$1; $f.hashed = hashed; $f.m = m; $f.nBits = nBits; $f.priv = priv; $f.rand$1 = rand$1; $f.s = s; $f.salt = salt; $f.$s = $s; $f.$r = $r; return $f;
	};
	PSSOptions.ptr.prototype.HashFunc = function() {
		var $ptr, pssOpts;
		pssOpts = this;
		return pssOpts.Hash;
	};
	PSSOptions.prototype.HashFunc = function() { return this.$val.HashFunc(); };
	PSSOptions.ptr.prototype.saltLength = function() {
		var $ptr, opts;
		opts = this;
		if (opts === ptrType.nil) {
			return 0;
		}
		return opts.SaltLength;
	};
	PSSOptions.prototype.saltLength = function() { return this.$val.saltLength(); };
	SignPSS = function(rand$1, priv, hash$1, hashed, opts) {
		var $ptr, _q, _r, _r$1, _ref, _tuple, _tuple$1, err, hash$1, hashed, opts, priv, rand$1, s, salt, saltLength, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; hash$1 = $f.hash$1; hashed = $f.hashed; opts = $f.opts; priv = $f.priv; rand$1 = $f.rand$1; s = $f.s; salt = $f.salt; saltLength = $f.saltLength; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = sliceType.nil;
		err = $ifaceNil;
		saltLength = opts.saltLength();
		_ref = saltLength;
		if (_ref === 0) {
			saltLength = ((_q = ((priv.PublicKey.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - 2 >> 0) - new crypto.Hash(hash$1).Size() >> 0;
		} else if (_ref === -1) {
			saltLength = new crypto.Hash(hash$1).Size();
		}
		if (!((opts.Hash === 0))) {
			hash$1 = opts.Hash;
		}
		salt = $makeSlice(sliceType, saltLength);
		_r = io.ReadFull(rand$1, salt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [s, err];
		/* } */ case 3:
		_r$1 = signPSSWithSalt(rand$1, priv, hash$1, hashed, salt); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; s = _tuple$1[0]; err = _tuple$1[1];
		return [s, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SignPSS }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.hash$1 = hash$1; $f.hashed = hashed; $f.opts = opts; $f.priv = priv; $f.rand$1 = rand$1; $f.s = s; $f.salt = salt; $f.saltLength = saltLength; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SignPSS = SignPSS;
	checkPub = function(pub) {
		var $ptr, pub;
		if (pub.N === ptrType$1.nil) {
			return errPublicModulus;
		}
		if (pub.E < 2) {
			return errPublicExponentSmall;
		}
		if (pub.E > 2147483647) {
			return errPublicExponentLarge;
		}
		return $ifaceNil;
	};
	PrivateKey.ptr.prototype.Public = function() {
		var $ptr, priv;
		priv = this;
		return priv.PublicKey;
	};
	PrivateKey.prototype.Public = function() { return this.$val.Public(); };
	PrivateKey.ptr.prototype.Sign = function(rand$1, msg, opts) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, _tuple, msg, ok, opts, priv, pssOpts, rand$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; msg = $f.msg; ok = $f.ok; opts = $f.opts; priv = $f.priv; pssOpts = $f.pssOpts; rand$1 = $f.rand$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		priv = this;
		_tuple = $assertType(opts, ptrType, true); pssOpts = _tuple[0]; ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = SignPSS(rand$1, priv, pssOpts.Hash, msg, pssOpts); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		_arg = rand$1;
		_arg$1 = priv;
		_r$1 = opts.HashFunc(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$2 = _r$1;
		_arg$3 = msg;
		_r$2 = SignPKCS1v15(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PrivateKey.ptr.prototype.Sign }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.msg = msg; $f.ok = ok; $f.opts = opts; $f.priv = priv; $f.pssOpts = pssOpts; $f.rand$1 = rand$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrivateKey.prototype.Sign = function(rand$1, msg, opts) { return this.$val.Sign(rand$1, msg, opts); };
	PrivateKey.ptr.prototype.Validate = function() {
		var $ptr, _i, _i$1, _i$2, _r, _ref, _ref$1, _ref$2, congruence, de, err, modulus, pminus1, prime, prime$1, prime$2, priv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; congruence = $f.congruence; de = $f.de; err = $f.err; modulus = $f.modulus; pminus1 = $f.pminus1; prime = $f.prime; prime$1 = $f.prime$1; prime$2 = $f.prime$2; priv = $f.priv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		priv = this;
		err = checkPub(priv.PublicKey);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_ref = priv.Primes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			prime = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = prime.ProbablyPrime(20); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return errors.New("crypto/rsa: prime factor is composite");
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		modulus = new big.Int.ptr().Set(bigOne);
		_ref$1 = priv.Primes;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			prime$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			modulus.Mul(modulus, prime$1);
			_i$1++;
		}
		if (!((modulus.Cmp(priv.PublicKey.N) === 0))) {
			return errors.New("crypto/rsa: invalid modulus");
		}
		congruence = new big.Int.ptr();
		de = new big.Int.ptr().SetInt64(new $Int64(0, priv.PublicKey.E));
		de.Mul(de, priv.D);
		_ref$2 = priv.Primes;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			prime$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			pminus1 = new big.Int.ptr().Sub(prime$2, bigOne);
			congruence.Mod(de, pminus1);
			if (!((congruence.Cmp(bigOne) === 0))) {
				return errors.New("crypto/rsa: invalid exponents");
			}
			_i$2++;
		}
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PrivateKey.ptr.prototype.Validate }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.congruence = congruence; $f.de = de; $f.err = err; $f.modulus = modulus; $f.pminus1 = pminus1; $f.prime = prime; $f.prime$1 = prime$1; $f.prime$2 = prime$2; $f.priv = priv; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrivateKey.prototype.Validate = function() { return this.$val.Validate(); };
	GenerateKey = function(random, bits) {
		var $ptr, _r, _tuple, bits, err, priv, random, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; bits = $f.bits; err = $f.err; priv = $f.priv; random = $f.random; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		priv = ptrType$2.nil;
		err = $ifaceNil;
		_r = GenerateMultiPrimeKey(random, 2, bits); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; priv = _tuple[0]; err = _tuple[1];
		return [priv, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GenerateKey }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.bits = bits; $f.err = err; $f.priv = priv; $f.random = random; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenerateKey = GenerateKey;
	GenerateMultiPrimeKey = function(random, nprimes, bits) {
		var $ptr, _i, _i$1, _q, _q$1, _r, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, bits, e, err, g, i, i$1, j, n, nprimes, pminus1, prime, prime$1, primes, priv, random, todo, totient, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; bits = $f.bits; e = $f.e; err = $f.err; g = $f.g; i = $f.i; i$1 = $f.i$1; j = $f.j; n = $f.n; nprimes = $f.nprimes; pminus1 = $f.pminus1; prime = $f.prime; prime$1 = $f.prime$1; primes = $f.primes; priv = $f.priv; random = $f.random; todo = $f.todo; totient = $f.totient; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		priv = ptrType$2.nil;
		err = $ifaceNil;
		priv = new PrivateKey.ptr();
		priv.PublicKey.E = 65537;
		if (nprimes < 2) {
			_tmp = ptrType$2.nil; _tmp$1 = errors.New("crypto/rsa: GenerateMultiPrimeKey: nprimes must be >= 2"); priv = _tmp; err = _tmp$1;
			return [priv, err];
		}
		primes = $makeSlice(sliceType$1, nprimes);
		/* while (true) { */ case 1:
			todo = bits;
			if (nprimes >= 7) {
				todo = todo + ((_q = ((nprimes - 2 >> 0)) / 5, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(i < nprimes)) { break; } */ if(!(i < nprimes)) { $s = 4; continue; }
				_r = rand.Prime(random, (_q$1 = todo / ((nprimes - i >> 0)), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; ((i < 0 || i >= primes.$length) ? $throwRuntimeError("index out of range") : primes.$array[primes.$offset + i] = _tuple[0]); err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$2 = ptrType$2.nil; _tmp$3 = err; priv = _tmp$2; err = _tmp$3;
					return [priv, err];
				}
				todo = todo - (((i < 0 || i >= primes.$length) ? $throwRuntimeError("index out of range") : primes.$array[primes.$offset + i]).BitLen()) >> 0;
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_ref = primes;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$1 = _i;
				prime = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				j = 0;
				while (true) {
					if (!(j < i$1)) { break; }
					if (prime.Cmp(((j < 0 || j >= primes.$length) ? $throwRuntimeError("index out of range") : primes.$array[primes.$offset + j])) === 0) {
						/* continue NextSetOfPrimes; */ $s = 1; continue s;
					}
					j = j + (1) >> 0;
				}
				_i++;
			}
			n = new big.Int.ptr().Set(bigOne);
			totient = new big.Int.ptr().Set(bigOne);
			pminus1 = new big.Int.ptr();
			_ref$1 = primes;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				prime$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				n.Mul(n, prime$1);
				pminus1.Sub(prime$1, bigOne);
				totient.Mul(totient, pminus1);
				_i$1++;
			}
			if (!((n.BitLen() === bits))) {
				/* continue NextSetOfPrimes; */ $s = 1; continue s;
			}
			g = new big.Int.ptr();
			priv.D = new big.Int.ptr();
			y = new big.Int.ptr();
			e = big.NewInt(new $Int64(0, priv.PublicKey.E));
			g.GCD(priv.D, y, e, totient);
			if (g.Cmp(bigOne) === 0) {
				if (priv.D.Sign() < 0) {
					priv.D.Add(priv.D, totient);
				}
				priv.Primes = primes;
				priv.PublicKey.N = n;
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		priv.Precompute();
		return [priv, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GenerateMultiPrimeKey }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.bits = bits; $f.e = e; $f.err = err; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.n = n; $f.nprimes = nprimes; $f.pminus1 = pminus1; $f.prime = prime; $f.prime$1 = prime$1; $f.primes = primes; $f.priv = priv; $f.random = random; $f.todo = todo; $f.totient = totient; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenerateMultiPrimeKey = GenerateMultiPrimeKey;
	incCounter = function(c) {
		var $ptr, c;
		c.nilCheck, c[3] = (c.nilCheck, c[3]) + (1) << 24 >>> 24;
		if (!(((c.nilCheck, c[3]) === 0))) {
			return;
		}
		c.nilCheck, c[2] = (c.nilCheck, c[2]) + (1) << 24 >>> 24;
		if (!(((c.nilCheck, c[2]) === 0))) {
			return;
		}
		c.nilCheck, c[1] = (c.nilCheck, c[1]) + (1) << 24 >>> 24;
		if (!(((c.nilCheck, c[1]) === 0))) {
			return;
		}
		c.nilCheck, c[0] = (c.nilCheck, c[0]) + (1) << 24 >>> 24;
	};
	mgf1XOR = function(out, hash$1, seed) {
		var $ptr, _r, _r$1, _r$2, counter, digest, done, hash$1, i, out, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; counter = $f.counter; digest = $f.digest; done = $f.done; hash$1 = $f.hash$1; i = $f.i; out = $f.out; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		counter = [counter];
		counter[0] = $clone(arrayType$1.zero(), arrayType$1);
		digest = sliceType.nil;
		done = 0;
		/* while (true) { */ case 1:
			/* if (!(done < out.$length)) { break; } */ if(!(done < out.$length)) { $s = 2; continue; }
			_r = hash$1.Write(seed); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_r$1 = hash$1.Write($subslice(new sliceType(counter[0]), 0, 4)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_r$2 = hash$1.Sum($subslice(digest, 0, 0)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			digest = _r$2;
			$r = hash$1.Reset(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = 0;
			while (true) {
				if (!(i < digest.$length && done < out.$length)) { break; }
				((done < 0 || done >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + done] = (((done < 0 || done >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + done]) ^ (((i < 0 || i >= digest.$length) ? $throwRuntimeError("index out of range") : digest.$array[digest.$offset + i]))) << 24 >>> 24);
				done = done + (1) >> 0;
				i = i + (1) >> 0;
			}
			incCounter(counter[0]);
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mgf1XOR }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.counter = counter; $f.digest = digest; $f.done = done; $f.hash$1 = hash$1; $f.i = i; $f.out = out; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	encrypt = function(c, pub, m) {
		var $ptr, c, e, m, pub;
		e = big.NewInt(new $Int64(0, pub.E));
		c.Exp(m, e, pub.N);
		return c;
	};
	modInverse = function(a, n) {
		var $ptr, _tmp, _tmp$1, a, g, ia, n, ok, x, y;
		ia = ptrType$1.nil;
		ok = false;
		g = new big.Int.ptr();
		x = new big.Int.ptr();
		y = new big.Int.ptr();
		g.GCD(x, y, a, n);
		if (!((g.Cmp(bigOne) === 0))) {
			return [ia, ok];
		}
		if (x.Cmp(bigOne) < 0) {
			x.Add(x, n);
		}
		_tmp = x; _tmp$1 = true; ia = _tmp; ok = _tmp$1;
		return [ia, ok];
	};
	PrivateKey.ptr.prototype.Precompute = function() {
		var $ptr, i, prime, priv, r, values, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		priv = this;
		if (!(priv.Precomputed.Dp === ptrType$1.nil)) {
			return;
		}
		priv.Precomputed.Dp = new big.Int.ptr().Sub((x = priv.Primes, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), bigOne);
		priv.Precomputed.Dp.Mod(priv.D, priv.Precomputed.Dp);
		priv.Precomputed.Dq = new big.Int.ptr().Sub((x$1 = priv.Primes, (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])), bigOne);
		priv.Precomputed.Dq.Mod(priv.D, priv.Precomputed.Dq);
		priv.Precomputed.Qinv = new big.Int.ptr().ModInverse((x$2 = priv.Primes, (1 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 1])), (x$3 = priv.Primes, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])));
		r = new big.Int.ptr().Mul((x$4 = priv.Primes, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0])), (x$5 = priv.Primes, (1 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 1])));
		priv.Precomputed.CRTValues = $makeSlice(sliceType$2, (priv.Primes.$length - 2 >> 0));
		i = 2;
		while (true) {
			if (!(i < priv.Primes.$length)) { break; }
			prime = (x$6 = priv.Primes, ((i < 0 || i >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i]));
			values = (x$7 = priv.Precomputed.CRTValues, x$8 = i - 2 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
			values.Exp = new big.Int.ptr().Sub(prime, bigOne);
			values.Exp.Mod(priv.D, values.Exp);
			values.R = new big.Int.ptr().Set(r);
			values.Coeff = new big.Int.ptr().ModInverse(r, prime);
			r.Mul(r, prime);
			i = i + (1) >> 0;
		}
	};
	PrivateKey.prototype.Precompute = function() { return this.$val.Precompute(); };
	decrypt = function(random, priv, c) {
		var $ptr, _i, _r, _ref, _tuple, _tuple$1, bigE, c, cCopy, err, i, ir, m, m2, ok, prime, priv, r, random, rpowe, values, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bigE = $f.bigE; c = $f.c; cCopy = $f.cCopy; err = $f.err; i = $f.i; ir = $f.ir; m = $f.m; m2 = $f.m2; ok = $f.ok; prime = $f.prime; priv = $f.priv; r = $f.r; random = $f.random; rpowe = $f.rpowe; values = $f.values; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = ptrType$1.nil;
		err = $ifaceNil;
		if (c.Cmp(priv.PublicKey.N) > 0) {
			err = $pkg.ErrDecryption;
			return [m, err];
		}
		ir = ptrType$1.nil;
		/* */ if (!($interfaceIsEqual(random, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(random, $ifaceNil))) { */ case 1:
			r = ptrType$1.nil;
			/* while (true) { */ case 3:
				_r = rand.Int(random, priv.PublicKey.N); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; r = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [m, err];
				}
				if (r.Cmp(bigZero) === 0) {
					r = bigOne;
				}
				ok = false;
				_tuple$1 = modInverse(r, priv.PublicKey.N); ir = _tuple$1[0]; ok = _tuple$1[1];
				if (ok) {
					/* break; */ $s = 4; continue;
				}
			/* } */ $s = 3; continue; case 4:
			bigE = big.NewInt(new $Int64(0, priv.PublicKey.E));
			rpowe = new big.Int.ptr().Exp(r, bigE, priv.PublicKey.N);
			cCopy = new big.Int.ptr().Set(c);
			cCopy.Mul(cCopy, rpowe);
			cCopy.Mod(cCopy, priv.PublicKey.N);
			c = cCopy;
		/* } */ case 2:
		if (priv.Precomputed.Dp === ptrType$1.nil) {
			m = new big.Int.ptr().Exp(c, priv.D, priv.PublicKey.N);
		} else {
			m = new big.Int.ptr().Exp(c, priv.Precomputed.Dp, (x = priv.Primes, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])));
			m2 = new big.Int.ptr().Exp(c, priv.Precomputed.Dq, (x$1 = priv.Primes, (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])));
			m.Sub(m, m2);
			if (m.Sign() < 0) {
				m.Add(m, (x$2 = priv.Primes, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])));
			}
			m.Mul(m, priv.Precomputed.Qinv);
			m.Mod(m, (x$3 = priv.Primes, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])));
			m.Mul(m, (x$4 = priv.Primes, (1 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1])));
			m.Add(m, m2);
			_ref = priv.Precomputed.CRTValues;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				values = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), CRTValue);
				prime = (x$5 = priv.Primes, x$6 = 2 + i >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6]));
				m2.Exp(c, values.Exp, prime);
				m2.Sub(m2, m);
				m2.Mul(m2, values.Coeff);
				m2.Mod(m2, prime);
				if (m2.Sign() < 0) {
					m2.Add(m2, prime);
				}
				m2.Mul(m2, values.R);
				m.Add(m, m2);
				_i++;
			}
		}
		if (!(ir === ptrType$1.nil)) {
			m.Mul(m, ir);
			m.Mod(m, priv.PublicKey.N);
		}
		return [m, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decrypt }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bigE = bigE; $f.c = c; $f.cCopy = cCopy; $f.err = err; $f.i = i; $f.ir = ir; $f.m = m; $f.m2 = m2; $f.ok = ok; $f.prime = prime; $f.priv = priv; $f.r = r; $f.random = random; $f.rpowe = rpowe; $f.values = values; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	leftPad = function(input, size) {
		var $ptr, input, n, out, size;
		out = sliceType.nil;
		n = input.$length;
		if (n > size) {
			n = size;
		}
		out = $makeSlice(sliceType, size);
		$copySlice($subslice(out, (out.$length - n >> 0)), input);
		return out;
	};
	ptrType.methods = [{prop: "HashFunc", name: "HashFunc", pkg: "", typ: $funcType([], [crypto.Hash], false)}, {prop: "saltLength", name: "saltLength", pkg: "crypto/rsa", typ: $funcType([], [$Int], false)}];
	ptrType$2.methods = [{prop: "Public", name: "Public", pkg: "", typ: $funcType([], [crypto.PublicKey], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([io.Reader, sliceType, crypto.SignerOpts], [sliceType, $error], false)}, {prop: "Validate", name: "Validate", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Precompute", name: "Precompute", pkg: "", typ: $funcType([], [], false)}];
	PSSOptions.init([{prop: "SaltLength", name: "SaltLength", pkg: "", typ: $Int, tag: ""}, {prop: "Hash", name: "Hash", pkg: "", typ: crypto.Hash, tag: ""}]);
	PublicKey.init([{prop: "N", name: "N", pkg: "", typ: ptrType$1, tag: ""}, {prop: "E", name: "E", pkg: "", typ: $Int, tag: ""}]);
	PrivateKey.init([{prop: "PublicKey", name: "", pkg: "", typ: PublicKey, tag: ""}, {prop: "D", name: "D", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Primes", name: "Primes", pkg: "", typ: sliceType$1, tag: ""}, {prop: "Precomputed", name: "Precomputed", pkg: "", typ: PrecomputedValues, tag: ""}]);
	PrecomputedValues.init([{prop: "Dp", name: "Dp", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Dq", name: "Dq", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Qinv", name: "Qinv", pkg: "", typ: ptrType$1, tag: ""}, {prop: "CRTValues", name: "CRTValues", pkg: "", typ: sliceType$2, tag: ""}]);
	CRTValue.init([{prop: "Exp", name: "Exp", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Coeff", name: "Coeff", pkg: "", typ: ptrType$1, tag: ""}, {prop: "R", name: "R", pkg: "", typ: ptrType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crypto.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = subtle.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		hashPrefixes = (_map = new $Map(), _key = 2, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([48, 32, 48, 12, 6, 8, 42, 134, 72, 134, 247, 13, 2, 5, 5, 0, 4, 16]) }, _key = 3, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([48, 33, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 4, 20]) }, _key = 4, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([48, 45, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 4, 5, 0, 4, 28]) }, _key = 5, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([48, 49, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32]) }, _key = 6, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([48, 65, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 4, 48]) }, _key = 7, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([48, 81, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 4, 64]) }, _key = 8, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([]) }, _key = 9, _map[crypto.Hash.keyFor(_key)] = { k: _key, v: new sliceType([48, 32, 48, 8, 6, 6, 40, 207, 6, 3, 0, 49, 4, 20]) }, _map);
		bigZero = big.NewInt(new $Int64(0, 0));
		bigOne = big.NewInt(new $Int64(0, 1));
		errPublicModulus = errors.New("crypto/rsa: missing public modulus");
		errPublicExponentSmall = errors.New("crypto/rsa: public exponent too small");
		errPublicExponentLarge = errors.New("crypto/rsa: public exponent too large");
		$pkg.ErrMessageTooLong = errors.New("crypto/rsa: message too long for RSA public key size");
		$pkg.ErrDecryption = errors.New("crypto/rsa: decryption error");
		$pkg.ErrVerification = errors.New("crypto/rsa: verification error");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/sha1"] = (function() {
	var $pkg = {}, $init, crypto, hash, digest, sliceType, arrayType, arrayType$1, arrayType$2, arrayType$3, ptrType, block, init, New, blockGeneric;
	crypto = $packages["crypto"];
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(0, $kindStruct, "sha1.digest", "digest", "crypto/sha1", function(h_, x_, nx_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = arrayType$3.zero();
			this.x = arrayType$1.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			return;
		}
		this.h = h_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 20);
	arrayType$1 = $arrayType($Uint8, 64);
	arrayType$2 = $arrayType($Uint32, 16);
	arrayType$3 = $arrayType($Uint32, 5);
	ptrType = $ptrType(digest);
	init = function() {
		var $ptr;
		crypto.RegisterHash(3, New);
	};
	digest.ptr.prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.h[0] = 1732584193;
		d.h[1] = 4023233417;
		d.h[2] = 2562383102;
		d.h[3] = 271733878;
		d.h[4] = 3285377520;
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = function() {
		var $ptr, d;
		d = new digest.ptr();
		d.Reset();
		return d;
	};
	$pkg.New = New;
	digest.ptr.prototype.Size = function() {
		var $ptr, d;
		d = this;
		return 20;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var $ptr, d, err, n, n$1, nn, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; d = $f.d; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		/* */ if (d.nx > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nx > 0) { */ case 1:
			n = $copySlice($subslice(new sliceType(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			/* */ if (d.nx === 64) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.nx === 64) { */ case 3:
				$r = block(d, new sliceType(d.x)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				d.nx = 0;
			/* } */ case 4:
			p = $subslice(p, n);
		/* } */ case 2:
		/* */ if (p.$length >= 64) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.$length >= 64) { */ case 6:
			n$1 = (p.$length & ~63) >> 0;
			$r = block(d, $subslice(p, 0, n$1)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p = $subslice(p, n$1);
		/* } */ case 7:
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType(d.x), p);
		}
		return [nn, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Write }; } $f.$ptr = $ptr; $f.d = d; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var $ptr, _r, d, d0, hash$1, in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; d0 = $f.d0; hash$1 = $f.hash$1; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d0 = this;
		d = $clone(d0, digest);
		_r = d.checkSum(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hash$1 = $clone(_r, arrayType);
		return $appendSlice(in$1, new sliceType(hash$1));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Sum }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.d0 = d0; $f.hash$1 = hash$1; $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, d, digest$1, i, i$1, len, s, tmp, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; d = $f.d; digest$1 = $f.digest$1; i = $f.i; i$1 = $f.i$1; len = $f.len; s = $f.s; tmp = $f.tmp; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		len = d.len;
		tmp = $clone(arrayType$1.zero(), arrayType$1);
		tmp[0] = 128;
		/* */ if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) { */ case 1:
			_r = d.Write($subslice(new sliceType(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low))))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = d.Write($subslice(new sliceType(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low))))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		len = $shiftLeft64(len, (3));
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, ((56 - (8 * i >>> 0) >>> 0))).$low << 24 >>> 24));
			i = i + (1) >>> 0;
		}
		_r$2 = d.Write($subslice(new sliceType(tmp), 0, 8)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = $clone(arrayType.zero(), arrayType);
		_ref = d.h;
		_i = 0;
		while (true) {
			if (!(_i < 5)) { break; }
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			(x$3 = i$1 * 4 >> 0, ((x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = ((s >>> 24 >>> 0) << 24 >>> 24)));
			(x$4 = (i$1 * 4 >> 0) + 1 >> 0, ((x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ((s >>> 16 >>> 0) << 24 >>> 24)));
			(x$5 = (i$1 * 4 >> 0) + 2 >> 0, ((x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ((s >>> 8 >>> 0) << 24 >>> 24)));
			(x$6 = (i$1 * 4 >> 0) + 3 >> 0, ((x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = (s << 24 >>> 24)));
			_i++;
		}
		return digest$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.checkSum }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.d = d; $f.digest$1 = digest$1; $f.i = i; $f.i$1 = i$1; $f.len = len; $f.s = s; $f.tmp = tmp; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	blockGeneric = function(dig, p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, a5, a5$1, a5$2, a5$3, a5$4, b, b30, b30$1, b30$2, b30$3, b30$4, c, d, dig, e, f, f$1, f$2, f$3, f$4, h0, h1, h2, h3, h4, i, i$1, j, p, t, t$1, t$2, t$3, t$4, tmp, tmp$1, tmp$2, tmp$3, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		w = $clone(arrayType$2.zero(), arrayType$2);
		_tmp = dig.h[0]; _tmp$1 = dig.h[1]; _tmp$2 = dig.h[2]; _tmp$3 = dig.h[3]; _tmp$4 = dig.h[4]; h0 = _tmp; h1 = _tmp$1; h2 = _tmp$2; h3 = _tmp$3; h4 = _tmp$4;
		while (true) {
			if (!(p.$length >= 64)) { break; }
			i = 0;
			while (true) {
				if (!(i < 16)) { break; }
				j = i * 4 >> 0;
				((i < 0 || i >= w.length) ? $throwRuntimeError("index out of range") : w[i] = (((((((((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) >>> 0) << 24 >>> 0) | (((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2])) >>> 0)) >>> 0);
				i = i + (1) >> 0;
			}
			_tmp$5 = h0; _tmp$6 = h1; _tmp$7 = h2; _tmp$8 = h3; _tmp$9 = h4; a = _tmp$5; b = _tmp$6; c = _tmp$7; d = _tmp$8; e = _tmp$9;
			i$1 = 0;
			while (true) {
				if (!(i$1 < 16)) { break; }
				f = (((b & c) >>> 0) | ((((~b >>> 0)) & d) >>> 0)) >>> 0;
				a5 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t = (((a5 + f >>> 0) + e >>> 0) + (x$3 = i$1 & 15, ((x$3 < 0 || x$3 >= w.length) ? $throwRuntimeError("index out of range") : w[x$3])) >>> 0) + 1518500249 >>> 0;
				_tmp$10 = t; _tmp$11 = a; _tmp$12 = b30; _tmp$13 = c; _tmp$14 = d; a = _tmp$10; b = _tmp$11; c = _tmp$12; d = _tmp$13; e = _tmp$14;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 20)) { break; }
				tmp = ((((((x$4 = ((i$1 - 3 >> 0)) & 15, ((x$4 < 0 || x$4 >= w.length) ? $throwRuntimeError("index out of range") : w[x$4])) ^ (x$5 = ((i$1 - 8 >> 0)) & 15, ((x$5 < 0 || x$5 >= w.length) ? $throwRuntimeError("index out of range") : w[x$5]))) >>> 0) ^ (x$6 = ((i$1 - 14 >> 0)) & 15, ((x$6 < 0 || x$6 >= w.length) ? $throwRuntimeError("index out of range") : w[x$6]))) >>> 0) ^ (x$7 = (i$1) & 15, ((x$7 < 0 || x$7 >= w.length) ? $throwRuntimeError("index out of range") : w[x$7]))) >>> 0;
				(x$8 = i$1 & 15, ((x$8 < 0 || x$8 >= w.length) ? $throwRuntimeError("index out of range") : w[x$8] = ((tmp << 1 >>> 0) | (tmp >>> 31 >>> 0)) >>> 0));
				f$1 = (((b & c) >>> 0) | ((((~b >>> 0)) & d) >>> 0)) >>> 0;
				a5$1 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$1 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$1 = (((a5$1 + f$1 >>> 0) + e >>> 0) + (x$9 = i$1 & 15, ((x$9 < 0 || x$9 >= w.length) ? $throwRuntimeError("index out of range") : w[x$9])) >>> 0) + 1518500249 >>> 0;
				_tmp$15 = t$1; _tmp$16 = a; _tmp$17 = b30$1; _tmp$18 = c; _tmp$19 = d; a = _tmp$15; b = _tmp$16; c = _tmp$17; d = _tmp$18; e = _tmp$19;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 40)) { break; }
				tmp$1 = ((((((x$10 = ((i$1 - 3 >> 0)) & 15, ((x$10 < 0 || x$10 >= w.length) ? $throwRuntimeError("index out of range") : w[x$10])) ^ (x$11 = ((i$1 - 8 >> 0)) & 15, ((x$11 < 0 || x$11 >= w.length) ? $throwRuntimeError("index out of range") : w[x$11]))) >>> 0) ^ (x$12 = ((i$1 - 14 >> 0)) & 15, ((x$12 < 0 || x$12 >= w.length) ? $throwRuntimeError("index out of range") : w[x$12]))) >>> 0) ^ (x$13 = (i$1) & 15, ((x$13 < 0 || x$13 >= w.length) ? $throwRuntimeError("index out of range") : w[x$13]))) >>> 0;
				(x$14 = i$1 & 15, ((x$14 < 0 || x$14 >= w.length) ? $throwRuntimeError("index out of range") : w[x$14] = ((tmp$1 << 1 >>> 0) | (tmp$1 >>> 31 >>> 0)) >>> 0));
				f$2 = (((b ^ c) >>> 0) ^ d) >>> 0;
				a5$2 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$2 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$2 = (((a5$2 + f$2 >>> 0) + e >>> 0) + (x$15 = i$1 & 15, ((x$15 < 0 || x$15 >= w.length) ? $throwRuntimeError("index out of range") : w[x$15])) >>> 0) + 1859775393 >>> 0;
				_tmp$20 = t$2; _tmp$21 = a; _tmp$22 = b30$2; _tmp$23 = c; _tmp$24 = d; a = _tmp$20; b = _tmp$21; c = _tmp$22; d = _tmp$23; e = _tmp$24;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 60)) { break; }
				tmp$2 = ((((((x$16 = ((i$1 - 3 >> 0)) & 15, ((x$16 < 0 || x$16 >= w.length) ? $throwRuntimeError("index out of range") : w[x$16])) ^ (x$17 = ((i$1 - 8 >> 0)) & 15, ((x$17 < 0 || x$17 >= w.length) ? $throwRuntimeError("index out of range") : w[x$17]))) >>> 0) ^ (x$18 = ((i$1 - 14 >> 0)) & 15, ((x$18 < 0 || x$18 >= w.length) ? $throwRuntimeError("index out of range") : w[x$18]))) >>> 0) ^ (x$19 = (i$1) & 15, ((x$19 < 0 || x$19 >= w.length) ? $throwRuntimeError("index out of range") : w[x$19]))) >>> 0;
				(x$20 = i$1 & 15, ((x$20 < 0 || x$20 >= w.length) ? $throwRuntimeError("index out of range") : w[x$20] = ((tmp$2 << 1 >>> 0) | (tmp$2 >>> 31 >>> 0)) >>> 0));
				f$3 = (((((((b | c) >>> 0)) & d) >>> 0)) | (((b & c) >>> 0))) >>> 0;
				a5$3 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$3 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$3 = (((a5$3 + f$3 >>> 0) + e >>> 0) + (x$21 = i$1 & 15, ((x$21 < 0 || x$21 >= w.length) ? $throwRuntimeError("index out of range") : w[x$21])) >>> 0) + 2400959708 >>> 0;
				_tmp$25 = t$3; _tmp$26 = a; _tmp$27 = b30$3; _tmp$28 = c; _tmp$29 = d; a = _tmp$25; b = _tmp$26; c = _tmp$27; d = _tmp$28; e = _tmp$29;
				i$1 = i$1 + (1) >> 0;
			}
			while (true) {
				if (!(i$1 < 80)) { break; }
				tmp$3 = ((((((x$22 = ((i$1 - 3 >> 0)) & 15, ((x$22 < 0 || x$22 >= w.length) ? $throwRuntimeError("index out of range") : w[x$22])) ^ (x$23 = ((i$1 - 8 >> 0)) & 15, ((x$23 < 0 || x$23 >= w.length) ? $throwRuntimeError("index out of range") : w[x$23]))) >>> 0) ^ (x$24 = ((i$1 - 14 >> 0)) & 15, ((x$24 < 0 || x$24 >= w.length) ? $throwRuntimeError("index out of range") : w[x$24]))) >>> 0) ^ (x$25 = (i$1) & 15, ((x$25 < 0 || x$25 >= w.length) ? $throwRuntimeError("index out of range") : w[x$25]))) >>> 0;
				(x$26 = i$1 & 15, ((x$26 < 0 || x$26 >= w.length) ? $throwRuntimeError("index out of range") : w[x$26] = ((tmp$3 << 1 >>> 0) | (tmp$3 >>> 31 >>> 0)) >>> 0));
				f$4 = (((b ^ c) >>> 0) ^ d) >>> 0;
				a5$4 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$4 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$4 = (((a5$4 + f$4 >>> 0) + e >>> 0) + (x$27 = i$1 & 15, ((x$27 < 0 || x$27 >= w.length) ? $throwRuntimeError("index out of range") : w[x$27])) >>> 0) + 3395469782 >>> 0;
				_tmp$30 = t$4; _tmp$31 = a; _tmp$32 = b30$4; _tmp$33 = c; _tmp$34 = d; a = _tmp$30; b = _tmp$31; c = _tmp$32; d = _tmp$33; e = _tmp$34;
				i$1 = i$1 + (1) >> 0;
			}
			h0 = h0 + (a) >>> 0;
			h1 = h1 + (b) >>> 0;
			h2 = h2 + (c) >>> 0;
			h3 = h3 + (d) >>> 0;
			h4 = h4 + (e) >>> 0;
			p = $subslice(p, 64);
		}
		_tmp$35 = h0; _tmp$36 = h1; _tmp$37 = h2; _tmp$38 = h3; _tmp$39 = h4; dig.h[0] = _tmp$35; dig.h[1] = _tmp$36; dig.h[2] = _tmp$37; dig.h[3] = _tmp$38; dig.h[4] = _tmp$39;
	};
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/sha1", typ: $funcType([], [arrayType], false)}];
	digest.init([{prop: "h", name: "h", pkg: "crypto/sha1", typ: arrayType$3, tag: ""}, {prop: "x", name: "x", pkg: "crypto/sha1", typ: arrayType$1, tag: ""}, {prop: "nx", name: "nx", pkg: "crypto/sha1", typ: $Int, tag: ""}, {prop: "len", name: "len", pkg: "crypto/sha1", typ: $Uint64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		block = blockGeneric;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/sha256"] = (function() {
	var $pkg = {}, $init, crypto, hash, digest, sliceType, sliceType$1, arrayType, arrayType$1, arrayType$3, arrayType$4, ptrType, _K, init, New, New224, block;
	crypto = $packages["crypto"];
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(0, $kindStruct, "sha256.digest", "digest", "crypto/sha256", function(h_, x_, nx_, len_, is224_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = arrayType$4.zero();
			this.x = arrayType$1.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			this.is224 = false;
			return;
		}
		this.h = h_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
		this.is224 = is224_;
	});
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 32);
	arrayType$1 = $arrayType($Uint8, 64);
	arrayType$3 = $arrayType($Uint32, 64);
	arrayType$4 = $arrayType($Uint32, 8);
	ptrType = $ptrType(digest);
	init = function() {
		var $ptr;
		crypto.RegisterHash(4, New224);
		crypto.RegisterHash(5, New);
	};
	digest.ptr.prototype.Reset = function() {
		var $ptr, d;
		d = this;
		if (!d.is224) {
			d.h[0] = 1779033703;
			d.h[1] = 3144134277;
			d.h[2] = 1013904242;
			d.h[3] = 2773480762;
			d.h[4] = 1359893119;
			d.h[5] = 2600822924;
			d.h[6] = 528734635;
			d.h[7] = 1541459225;
		} else {
			d.h[0] = 3238371032;
			d.h[1] = 914150663;
			d.h[2] = 812702999;
			d.h[3] = 4144912697;
			d.h[4] = 4290775857;
			d.h[5] = 1750603025;
			d.h[6] = 1694076839;
			d.h[7] = 3204075428;
		}
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = function() {
		var $ptr, d;
		d = new digest.ptr();
		d.Reset();
		return d;
	};
	$pkg.New = New;
	New224 = function() {
		var $ptr, d;
		d = new digest.ptr();
		d.is224 = true;
		d.Reset();
		return d;
	};
	$pkg.New224 = New224;
	digest.ptr.prototype.Size = function() {
		var $ptr, d;
		d = this;
		if (!d.is224) {
			return 32;
		}
		return 28;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var $ptr, d, err, n, n$1, nn, p, x, x$1;
		nn = 0;
		err = $ifaceNil;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new sliceType$1(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 64) {
				block(d, new sliceType$1(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 64) {
			n$1 = (p.$length & ~63) >> 0;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType$1(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var $ptr, d, d0, hash$1, in$1;
		d0 = this;
		d = $clone(d0, digest);
		hash$1 = $clone(d.checkSum(), arrayType);
		if (d.is224) {
			return $appendSlice(in$1, $subslice(new sliceType$1(hash$1), 0, 28));
		}
		return $appendSlice(in$1, new sliceType$1(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var $ptr, _i, _ref, d, digest$1, h, i, i$1, len, s, tmp, x, x$1, x$2, x$3, x$4, x$5, x$6;
		d = this;
		len = d.len;
		tmp = $clone(arrayType$1.zero(), arrayType$1);
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low)))));
		} else {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, ((56 - (8 * i >>> 0) >>> 0))).$low << 24 >>> 24));
			i = i + (1) >>> 0;
		}
		d.Write($subslice(new sliceType$1(tmp), 0, 8));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		h = new sliceType(d.h);
		if (d.is224) {
			h = $subslice(new sliceType(d.h), 0, 7);
		}
		digest$1 = $clone(arrayType.zero(), arrayType);
		_ref = h;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x$3 = i$1 * 4 >> 0, ((x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = ((s >>> 24 >>> 0) << 24 >>> 24)));
			(x$4 = (i$1 * 4 >> 0) + 1 >> 0, ((x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ((s >>> 16 >>> 0) << 24 >>> 24)));
			(x$5 = (i$1 * 4 >> 0) + 2 >> 0, ((x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ((s >>> 8 >>> 0) << 24 >>> 24)));
			(x$6 = (i$1 * 4 >> 0) + 3 >> 0, ((x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = (s << 24 >>> 24)));
			_i++;
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	block = function(dig, p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, dig, e, f, g, h, h0, h1, h2, h3, h4, h5, h6, h7, i, i$1, i$2, j, p, t1, t1$1, t2, t2$1, v1, v2, w, x, x$1, x$2, x$3, x$4, x$5, x$6;
		w = $clone(arrayType$3.zero(), arrayType$3);
		_tmp = dig.h[0]; _tmp$1 = dig.h[1]; _tmp$2 = dig.h[2]; _tmp$3 = dig.h[3]; _tmp$4 = dig.h[4]; _tmp$5 = dig.h[5]; _tmp$6 = dig.h[6]; _tmp$7 = dig.h[7]; h0 = _tmp; h1 = _tmp$1; h2 = _tmp$2; h3 = _tmp$3; h4 = _tmp$4; h5 = _tmp$5; h6 = _tmp$6; h7 = _tmp$7;
		while (true) {
			if (!(p.$length >= 64)) { break; }
			i = 0;
			while (true) {
				if (!(i < 16)) { break; }
				j = i * 4 >> 0;
				((i < 0 || i >= w.length) ? $throwRuntimeError("index out of range") : w[i] = (((((((((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) >>> 0) << 24 >>> 0) | (((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2])) >>> 0)) >>> 0);
				i = i + (1) >> 0;
			}
			i$1 = 16;
			while (true) {
				if (!(i$1 < 64)) { break; }
				v1 = (x$3 = i$1 - 2 >> 0, ((x$3 < 0 || x$3 >= w.length) ? $throwRuntimeError("index out of range") : w[x$3]));
				t1 = (((((((v1 >>> 17 >>> 0) | (v1 << 15 >>> 0)) >>> 0)) ^ ((((v1 >>> 19 >>> 0) | (v1 << 13 >>> 0)) >>> 0))) >>> 0) ^ ((v1 >>> 10 >>> 0))) >>> 0;
				v2 = (x$4 = i$1 - 15 >> 0, ((x$4 < 0 || x$4 >= w.length) ? $throwRuntimeError("index out of range") : w[x$4]));
				t2 = (((((((v2 >>> 7 >>> 0) | (v2 << 25 >>> 0)) >>> 0)) ^ ((((v2 >>> 18 >>> 0) | (v2 << 14 >>> 0)) >>> 0))) >>> 0) ^ ((v2 >>> 3 >>> 0))) >>> 0;
				((i$1 < 0 || i$1 >= w.length) ? $throwRuntimeError("index out of range") : w[i$1] = ((t1 + (x$5 = i$1 - 7 >> 0, ((x$5 < 0 || x$5 >= w.length) ? $throwRuntimeError("index out of range") : w[x$5])) >>> 0) + t2 >>> 0) + (x$6 = i$1 - 16 >> 0, ((x$6 < 0 || x$6 >= w.length) ? $throwRuntimeError("index out of range") : w[x$6])) >>> 0);
				i$1 = i$1 + (1) >> 0;
			}
			_tmp$8 = h0; _tmp$9 = h1; _tmp$10 = h2; _tmp$11 = h3; _tmp$12 = h4; _tmp$13 = h5; _tmp$14 = h6; _tmp$15 = h7; a = _tmp$8; b = _tmp$9; c = _tmp$10; d = _tmp$11; e = _tmp$12; f = _tmp$13; g = _tmp$14; h = _tmp$15;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 64)) { break; }
				t1$1 = (((h + (((((((((e >>> 6 >>> 0) | (e << 26 >>> 0)) >>> 0)) ^ ((((e >>> 11 >>> 0) | (e << 21 >>> 0)) >>> 0))) >>> 0) ^ ((((e >>> 25 >>> 0) | (e << 7 >>> 0)) >>> 0))) >>> 0)) >>> 0) + ((((((e & f) >>> 0)) ^ ((((~e >>> 0) & g) >>> 0))) >>> 0)) >>> 0) + ((i$2 < 0 || i$2 >= _K.$length) ? $throwRuntimeError("index out of range") : _K.$array[_K.$offset + i$2]) >>> 0) + ((i$2 < 0 || i$2 >= w.length) ? $throwRuntimeError("index out of range") : w[i$2]) >>> 0;
				t2$1 = (((((((((a >>> 2 >>> 0) | (a << 30 >>> 0)) >>> 0)) ^ ((((a >>> 13 >>> 0) | (a << 19 >>> 0)) >>> 0))) >>> 0) ^ ((((a >>> 22 >>> 0) | (a << 10 >>> 0)) >>> 0))) >>> 0)) + ((((((((a & b) >>> 0)) ^ (((a & c) >>> 0))) >>> 0) ^ (((b & c) >>> 0))) >>> 0)) >>> 0;
				h = g;
				g = f;
				f = e;
				e = d + t1$1 >>> 0;
				d = c;
				c = b;
				b = a;
				a = t1$1 + t2$1 >>> 0;
				i$2 = i$2 + (1) >> 0;
			}
			h0 = h0 + (a) >>> 0;
			h1 = h1 + (b) >>> 0;
			h2 = h2 + (c) >>> 0;
			h3 = h3 + (d) >>> 0;
			h4 = h4 + (e) >>> 0;
			h5 = h5 + (f) >>> 0;
			h6 = h6 + (g) >>> 0;
			h7 = h7 + (h) >>> 0;
			p = $subslice(p, 64);
		}
		_tmp$16 = h0; _tmp$17 = h1; _tmp$18 = h2; _tmp$19 = h3; _tmp$20 = h4; _tmp$21 = h5; _tmp$22 = h6; _tmp$23 = h7; dig.h[0] = _tmp$16; dig.h[1] = _tmp$17; dig.h[2] = _tmp$18; dig.h[3] = _tmp$19; dig.h[4] = _tmp$20; dig.h[5] = _tmp$21; dig.h[6] = _tmp$22; dig.h[7] = _tmp$23;
	};
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/sha256", typ: $funcType([], [arrayType], false)}];
	digest.init([{prop: "h", name: "h", pkg: "crypto/sha256", typ: arrayType$4, tag: ""}, {prop: "x", name: "x", pkg: "crypto/sha256", typ: arrayType$1, tag: ""}, {prop: "nx", name: "nx", pkg: "crypto/sha256", typ: $Int, tag: ""}, {prop: "len", name: "len", pkg: "crypto/sha256", typ: $Uint64, tag: ""}, {prop: "is224", name: "is224", pkg: "crypto/sha256", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_K = new sliceType([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/sha512"] = (function() {
	var $pkg = {}, $init, crypto, hash, digest, sliceType, sliceType$1, arrayType, arrayType$1, arrayType$3, arrayType$4, ptrType, _K, init, New, New384, block;
	crypto = $packages["crypto"];
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(0, $kindStruct, "sha512.digest", "digest", "crypto/sha512", function(h_, x_, nx_, len_, is384_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = arrayType$4.zero();
			this.x = arrayType$1.zero();
			this.nx = 0;
			this.len = new $Uint64(0, 0);
			this.is384 = false;
			return;
		}
		this.h = h_;
		this.x = x_;
		this.nx = nx_;
		this.len = len_;
		this.is384 = is384_;
	});
	sliceType = $sliceType($Uint64);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 128);
	arrayType$3 = $arrayType($Uint64, 80);
	arrayType$4 = $arrayType($Uint64, 8);
	ptrType = $ptrType(digest);
	init = function() {
		var $ptr;
		crypto.RegisterHash(6, New384);
		crypto.RegisterHash(7, New);
	};
	digest.ptr.prototype.Reset = function() {
		var $ptr, d;
		d = this;
		if (!d.is384) {
			d.h[0] = new $Uint64(1779033703, 4089235720);
			d.h[1] = new $Uint64(3144134277, 2227873595);
			d.h[2] = new $Uint64(1013904242, 4271175723);
			d.h[3] = new $Uint64(2773480762, 1595750129);
			d.h[4] = new $Uint64(1359893119, 2917565137);
			d.h[5] = new $Uint64(2600822924, 725511199);
			d.h[6] = new $Uint64(528734635, 4215389547);
			d.h[7] = new $Uint64(1541459225, 327033209);
		} else {
			d.h[0] = new $Uint64(3418070365, 3238371032);
			d.h[1] = new $Uint64(1654270250, 914150663);
			d.h[2] = new $Uint64(2438529370, 812702999);
			d.h[3] = new $Uint64(355462360, 4144912697);
			d.h[4] = new $Uint64(1731405415, 4290775857);
			d.h[5] = new $Uint64(2394180231, 1750603025);
			d.h[6] = new $Uint64(3675008525, 1694076839);
			d.h[7] = new $Uint64(1203062813, 3204075428);
		}
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = function() {
		var $ptr, d;
		d = new digest.ptr();
		d.Reset();
		return d;
	};
	$pkg.New = New;
	New384 = function() {
		var $ptr, d;
		d = new digest.ptr();
		d.is384 = true;
		d.Reset();
		return d;
	};
	$pkg.New384 = New384;
	digest.ptr.prototype.Size = function() {
		var $ptr, d;
		d = this;
		if (!d.is384) {
			return 64;
		}
		return 48;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 128;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Write = function(p) {
		var $ptr, d, err, n, n$1, nn, p, x, x$1;
		nn = 0;
		err = $ifaceNil;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new sliceType$1(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 128) {
				block(d, new sliceType$1(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 128) {
			n$1 = (p.$length & ~127) >> 0;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new sliceType$1(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum = function(in$1) {
		var $ptr, d, d0, hash$1, in$1;
		d0 = this;
		d = new digest.ptr();
		$copy(d, d0, digest);
		hash$1 = $clone(d.checkSum(), arrayType);
		if (d.is384) {
			return $appendSlice(in$1, $subslice(new sliceType$1(hash$1), 0, 48));
		}
		return $appendSlice(in$1, new sliceType$1(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.ptr.prototype.checkSum = function() {
		var $ptr, _i, _ref, d, digest$1, h, i, i$1, len, s, tmp, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		d = this;
		len = d.len;
		tmp = $clone(arrayType$1.zero(), arrayType$1);
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 128), true), (x.$high < 0 || (x.$high === 0 && x.$low < 112)))) {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 128), true), new $Uint64(0 - x$1.$high, 112 - x$1.$low)))));
		} else {
			d.Write($subslice(new sliceType$1(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 128), true), new $Uint64(0 - x$2.$high, 240 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, ((120 - (8 * i >>> 0) >>> 0))).$low << 24 >>> 24));
			i = i + (1) >>> 0;
		}
		d.Write($subslice(new sliceType$1(tmp), 0, 16));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		h = new sliceType(d.h);
		if (d.is384) {
			h = $subslice(new sliceType(d.h), 0, 6);
		}
		digest$1 = $clone(arrayType.zero(), arrayType);
		_ref = h;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x$3 = i$1 * 8 >> 0, ((x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = ($shiftRightUint64(s, 56).$low << 24 >>> 24)));
			(x$4 = (i$1 * 8 >> 0) + 1 >> 0, ((x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ($shiftRightUint64(s, 48).$low << 24 >>> 24)));
			(x$5 = (i$1 * 8 >> 0) + 2 >> 0, ((x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ($shiftRightUint64(s, 40).$low << 24 >>> 24)));
			(x$6 = (i$1 * 8 >> 0) + 3 >> 0, ((x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = ($shiftRightUint64(s, 32).$low << 24 >>> 24)));
			(x$7 = (i$1 * 8 >> 0) + 4 >> 0, ((x$7 < 0 || x$7 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$7] = ($shiftRightUint64(s, 24).$low << 24 >>> 24)));
			(x$8 = (i$1 * 8 >> 0) + 5 >> 0, ((x$8 < 0 || x$8 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$8] = ($shiftRightUint64(s, 16).$low << 24 >>> 24)));
			(x$9 = (i$1 * 8 >> 0) + 6 >> 0, ((x$9 < 0 || x$9 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$9] = ($shiftRightUint64(s, 8).$low << 24 >>> 24)));
			(x$10 = (i$1 * 8 >> 0) + 7 >> 0, ((x$10 < 0 || x$10 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$10] = (s.$low << 24 >>> 24)));
			_i++;
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	block = function(dig, p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, dig, e, f, g, h, h0, h1, h2, h3, h4, h5, h6, h7, i, i$1, i$2, j, p, t1, t1$1, t2, t2$1, v1, v2, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$9;
		w = $clone(arrayType$3.zero(), arrayType$3);
		_tmp = dig.h[0]; _tmp$1 = dig.h[1]; _tmp$2 = dig.h[2]; _tmp$3 = dig.h[3]; _tmp$4 = dig.h[4]; _tmp$5 = dig.h[5]; _tmp$6 = dig.h[6]; _tmp$7 = dig.h[7]; h0 = _tmp; h1 = _tmp$1; h2 = _tmp$2; h3 = _tmp$3; h4 = _tmp$4; h5 = _tmp$5; h6 = _tmp$6; h7 = _tmp$7;
		while (true) {
			if (!(p.$length >= 128)) { break; }
			i = 0;
			while (true) {
				if (!(i < 16)) { break; }
				j = i * 8 >> 0;
				((i < 0 || i >= w.length) ? $throwRuntimeError("index out of range") : w[i] = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j])), 56), x$7 = $shiftLeft64(new $Uint64(0, (x$8 = j + 1 >> 0, ((x$8 < 0 || x$8 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$8]))), 48), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (x$10 = j + 2 >> 0, ((x$10 < 0 || x$10 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$10]))), 40), new $Uint64(x$5.$high | x$9.$high, (x$5.$low | x$9.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (x$12 = j + 3 >> 0, ((x$12 < 0 || x$12 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$12]))), 32), new $Uint64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, (x$14 = j + 4 >> 0, ((x$14 < 0 || x$14 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$14]))), 24), new $Uint64(x$3.$high | x$13.$high, (x$3.$low | x$13.$low) >>> 0)), x$15 = $shiftLeft64(new $Uint64(0, (x$16 = j + 5 >> 0, ((x$16 < 0 || x$16 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$16]))), 16), new $Uint64(x$2.$high | x$15.$high, (x$2.$low | x$15.$low) >>> 0)), x$17 = $shiftLeft64(new $Uint64(0, (x$18 = j + 6 >> 0, ((x$18 < 0 || x$18 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$18]))), 8), new $Uint64(x$1.$high | x$17.$high, (x$1.$low | x$17.$low) >>> 0)), x$19 = new $Uint64(0, (x$20 = j + 7 >> 0, ((x$20 < 0 || x$20 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$20]))), new $Uint64(x.$high | x$19.$high, (x.$low | x$19.$low) >>> 0)));
				i = i + (1) >> 0;
			}
			i$1 = 16;
			while (true) {
				if (!(i$1 < 80)) { break; }
				v1 = (x$21 = i$1 - 2 >> 0, ((x$21 < 0 || x$21 >= w.length) ? $throwRuntimeError("index out of range") : w[x$21]));
				t1 = (x$22 = (x$23 = (x$24 = $shiftRightUint64(v1, 19), x$25 = $shiftLeft64(v1, 45), new $Uint64(x$24.$high | x$25.$high, (x$24.$low | x$25.$low) >>> 0)), x$26 = (x$27 = $shiftRightUint64(v1, 61), x$28 = $shiftLeft64(v1, 3), new $Uint64(x$27.$high | x$28.$high, (x$27.$low | x$28.$low) >>> 0)), new $Uint64(x$23.$high ^ x$26.$high, (x$23.$low ^ x$26.$low) >>> 0)), x$29 = $shiftRightUint64(v1, 6), new $Uint64(x$22.$high ^ x$29.$high, (x$22.$low ^ x$29.$low) >>> 0));
				v2 = (x$30 = i$1 - 15 >> 0, ((x$30 < 0 || x$30 >= w.length) ? $throwRuntimeError("index out of range") : w[x$30]));
				t2 = (x$31 = (x$32 = (x$33 = $shiftRightUint64(v2, 1), x$34 = $shiftLeft64(v2, 63), new $Uint64(x$33.$high | x$34.$high, (x$33.$low | x$34.$low) >>> 0)), x$35 = (x$36 = $shiftRightUint64(v2, 8), x$37 = $shiftLeft64(v2, 56), new $Uint64(x$36.$high | x$37.$high, (x$36.$low | x$37.$low) >>> 0)), new $Uint64(x$32.$high ^ x$35.$high, (x$32.$low ^ x$35.$low) >>> 0)), x$38 = $shiftRightUint64(v2, 7), new $Uint64(x$31.$high ^ x$38.$high, (x$31.$low ^ x$38.$low) >>> 0));
				((i$1 < 0 || i$1 >= w.length) ? $throwRuntimeError("index out of range") : w[i$1] = (x$39 = (x$40 = (x$41 = (x$42 = i$1 - 7 >> 0, ((x$42 < 0 || x$42 >= w.length) ? $throwRuntimeError("index out of range") : w[x$42])), new $Uint64(t1.$high + x$41.$high, t1.$low + x$41.$low)), new $Uint64(x$40.$high + t2.$high, x$40.$low + t2.$low)), x$43 = (x$44 = i$1 - 16 >> 0, ((x$44 < 0 || x$44 >= w.length) ? $throwRuntimeError("index out of range") : w[x$44])), new $Uint64(x$39.$high + x$43.$high, x$39.$low + x$43.$low)));
				i$1 = i$1 + (1) >> 0;
			}
			_tmp$8 = h0; _tmp$9 = h1; _tmp$10 = h2; _tmp$11 = h3; _tmp$12 = h4; _tmp$13 = h5; _tmp$14 = h6; _tmp$15 = h7; a = _tmp$8; b = _tmp$9; c = _tmp$10; d = _tmp$11; e = _tmp$12; f = _tmp$13; g = _tmp$14; h = _tmp$15;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 80)) { break; }
				t1$1 = (x$45 = (x$46 = (x$47 = (x$48 = (x$49 = (x$50 = (x$51 = $shiftRightUint64(e, 14), x$52 = $shiftLeft64(e, 50), new $Uint64(x$51.$high | x$52.$high, (x$51.$low | x$52.$low) >>> 0)), x$53 = (x$54 = $shiftRightUint64(e, 18), x$55 = $shiftLeft64(e, 46), new $Uint64(x$54.$high | x$55.$high, (x$54.$low | x$55.$low) >>> 0)), new $Uint64(x$50.$high ^ x$53.$high, (x$50.$low ^ x$53.$low) >>> 0)), x$56 = (x$57 = $shiftRightUint64(e, 41), x$58 = $shiftLeft64(e, 23), new $Uint64(x$57.$high | x$58.$high, (x$57.$low | x$58.$low) >>> 0)), new $Uint64(x$49.$high ^ x$56.$high, (x$49.$low ^ x$56.$low) >>> 0)), new $Uint64(h.$high + x$48.$high, h.$low + x$48.$low)), x$59 = (x$60 = new $Uint64(e.$high & f.$high, (e.$low & f.$low) >>> 0), x$61 = (x$62 = new $Uint64(~e.$high, ~e.$low >>> 0), new $Uint64(x$62.$high & g.$high, (x$62.$low & g.$low) >>> 0)), new $Uint64(x$60.$high ^ x$61.$high, (x$60.$low ^ x$61.$low) >>> 0)), new $Uint64(x$47.$high + x$59.$high, x$47.$low + x$59.$low)), x$63 = ((i$2 < 0 || i$2 >= _K.$length) ? $throwRuntimeError("index out of range") : _K.$array[_K.$offset + i$2]), new $Uint64(x$46.$high + x$63.$high, x$46.$low + x$63.$low)), x$64 = ((i$2 < 0 || i$2 >= w.length) ? $throwRuntimeError("index out of range") : w[i$2]), new $Uint64(x$45.$high + x$64.$high, x$45.$low + x$64.$low));
				t2$1 = (x$65 = (x$66 = (x$67 = (x$68 = $shiftRightUint64(a, 28), x$69 = $shiftLeft64(a, 36), new $Uint64(x$68.$high | x$69.$high, (x$68.$low | x$69.$low) >>> 0)), x$70 = (x$71 = $shiftRightUint64(a, 34), x$72 = $shiftLeft64(a, 30), new $Uint64(x$71.$high | x$72.$high, (x$71.$low | x$72.$low) >>> 0)), new $Uint64(x$67.$high ^ x$70.$high, (x$67.$low ^ x$70.$low) >>> 0)), x$73 = (x$74 = $shiftRightUint64(a, 39), x$75 = $shiftLeft64(a, 25), new $Uint64(x$74.$high | x$75.$high, (x$74.$low | x$75.$low) >>> 0)), new $Uint64(x$66.$high ^ x$73.$high, (x$66.$low ^ x$73.$low) >>> 0)), x$76 = (x$77 = (x$78 = new $Uint64(a.$high & b.$high, (a.$low & b.$low) >>> 0), x$79 = new $Uint64(a.$high & c.$high, (a.$low & c.$low) >>> 0), new $Uint64(x$78.$high ^ x$79.$high, (x$78.$low ^ x$79.$low) >>> 0)), x$80 = new $Uint64(b.$high & c.$high, (b.$low & c.$low) >>> 0), new $Uint64(x$77.$high ^ x$80.$high, (x$77.$low ^ x$80.$low) >>> 0)), new $Uint64(x$65.$high + x$76.$high, x$65.$low + x$76.$low));
				h = g;
				g = f;
				f = e;
				e = new $Uint64(d.$high + t1$1.$high, d.$low + t1$1.$low);
				d = c;
				c = b;
				b = a;
				a = new $Uint64(t1$1.$high + t2$1.$high, t1$1.$low + t2$1.$low);
				i$2 = i$2 + (1) >> 0;
			}
			h0 = (x$81 = a, new $Uint64(h0.$high + x$81.$high, h0.$low + x$81.$low));
			h1 = (x$82 = b, new $Uint64(h1.$high + x$82.$high, h1.$low + x$82.$low));
			h2 = (x$83 = c, new $Uint64(h2.$high + x$83.$high, h2.$low + x$83.$low));
			h3 = (x$84 = d, new $Uint64(h3.$high + x$84.$high, h3.$low + x$84.$low));
			h4 = (x$85 = e, new $Uint64(h4.$high + x$85.$high, h4.$low + x$85.$low));
			h5 = (x$86 = f, new $Uint64(h5.$high + x$86.$high, h5.$low + x$86.$low));
			h6 = (x$87 = g, new $Uint64(h6.$high + x$87.$high, h6.$low + x$87.$low));
			h7 = (x$88 = h, new $Uint64(h7.$high + x$88.$high, h7.$low + x$88.$low));
			p = $subslice(p, 128);
		}
		_tmp$16 = h0; _tmp$17 = h1; _tmp$18 = h2; _tmp$19 = h3; _tmp$20 = h4; _tmp$21 = h5; _tmp$22 = h6; _tmp$23 = h7; dig.h[0] = _tmp$16; dig.h[1] = _tmp$17; dig.h[2] = _tmp$18; dig.h[3] = _tmp$19; dig.h[4] = _tmp$20; dig.h[5] = _tmp$21; dig.h[6] = _tmp$22; dig.h[7] = _tmp$23;
	};
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "checkSum", name: "checkSum", pkg: "crypto/sha512", typ: $funcType([], [arrayType], false)}];
	digest.init([{prop: "h", name: "h", pkg: "crypto/sha512", typ: arrayType$4, tag: ""}, {prop: "x", name: "x", pkg: "crypto/sha512", typ: arrayType$1, tag: ""}, {prop: "nx", name: "nx", pkg: "crypto/sha512", typ: $Int, tag: ""}, {prop: "len", name: "len", pkg: "crypto/sha512", typ: $Uint64, tag: ""}, {prop: "is384", name: "is384", pkg: "crypto/sha512", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = crypto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_K = new sliceType([new $Uint64(1116352408, 3609767458), new $Uint64(1899447441, 602891725), new $Uint64(3049323471, 3964484399), new $Uint64(3921009573, 2173295548), new $Uint64(961987163, 4081628472), new $Uint64(1508970993, 3053834265), new $Uint64(2453635748, 2937671579), new $Uint64(2870763221, 3664609560), new $Uint64(3624381080, 2734883394), new $Uint64(310598401, 1164996542), new $Uint64(607225278, 1323610764), new $Uint64(1426881987, 3590304994), new $Uint64(1925078388, 4068182383), new $Uint64(2162078206, 991336113), new $Uint64(2614888103, 633803317), new $Uint64(3248222580, 3479774868), new $Uint64(3835390401, 2666613458), new $Uint64(4022224774, 944711139), new $Uint64(264347078, 2341262773), new $Uint64(604807628, 2007800933), new $Uint64(770255983, 1495990901), new $Uint64(1249150122, 1856431235), new $Uint64(1555081692, 3175218132), new $Uint64(1996064986, 2198950837), new $Uint64(2554220882, 3999719339), new $Uint64(2821834349, 766784016), new $Uint64(2952996808, 2566594879), new $Uint64(3210313671, 3203337956), new $Uint64(3336571891, 1034457026), new $Uint64(3584528711, 2466948901), new $Uint64(113926993, 3758326383), new $Uint64(338241895, 168717936), new $Uint64(666307205, 1188179964), new $Uint64(773529912, 1546045734), new $Uint64(1294757372, 1522805485), new $Uint64(1396182291, 2643833823), new $Uint64(1695183700, 2343527390), new $Uint64(1986661051, 1014477480), new $Uint64(2177026350, 1206759142), new $Uint64(2456956037, 344077627), new $Uint64(2730485921, 1290863460), new $Uint64(2820302411, 3158454273), new $Uint64(3259730800, 3505952657), new $Uint64(3345764771, 106217008), new $Uint64(3516065817, 3606008344), new $Uint64(3600352804, 1432725776), new $Uint64(4094571909, 1467031594), new $Uint64(275423344, 851169720), new $Uint64(430227734, 3100823752), new $Uint64(506948616, 1363258195), new $Uint64(659060556, 3750685593), new $Uint64(883997877, 3785050280), new $Uint64(958139571, 3318307427), new $Uint64(1322822218, 3812723403), new $Uint64(1537002063, 2003034995), new $Uint64(1747873779, 3602036899), new $Uint64(1955562222, 1575990012), new $Uint64(2024104815, 1125592928), new $Uint64(2227730452, 2716904306), new $Uint64(2361852424, 442776044), new $Uint64(2428436474, 593698344), new $Uint64(2756734187, 3733110249), new $Uint64(3204031479, 2999351573), new $Uint64(3329325298, 3815920427), new $Uint64(3391569614, 3928383900), new $Uint64(3515267271, 566280711), new $Uint64(3940187606, 3454069534), new $Uint64(4118630271, 4000239992), new $Uint64(116418474, 1914138554), new $Uint64(174292421, 2731055270), new $Uint64(289380356, 3203993006), new $Uint64(460393269, 320620315), new $Uint64(685471733, 587496836), new $Uint64(852142971, 1086792851), new $Uint64(1017036298, 365543100), new $Uint64(1126000580, 2618297676), new $Uint64(1288033470, 3409855158), new $Uint64(1501505948, 4234509866), new $Uint64(1607167915, 987167468), new $Uint64(1816402316, 1246189591)]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/cipher"] = (function() {
	var $pkg = {}, $init, subtle, errors, io, runtime, errOpen;
	subtle = $packages["crypto/subtle"];
	errors = $packages["errors"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = subtle.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errOpen = errors.New("cipher: message authentication failed");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/aes"] = (function() {
	var $pkg = {}, $init, cipher, strconv;
	cipher = $packages["crypto/cipher"];
	strconv = $packages["strconv"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = cipher.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/des"] = (function() {
	var $pkg = {}, $init, cipher, binary, strconv, arrayType, arrayType$1, arrayType$2, arrayType$3, sliceType, feistelBox, permutationFunction, sBoxes, permuteBlock, init;
	cipher = $packages["crypto/cipher"];
	binary = $packages["encoding/binary"];
	strconv = $packages["strconv"];
	arrayType = $arrayType($Uint32, 64);
	arrayType$1 = $arrayType(arrayType, 8);
	arrayType$2 = $arrayType($Uint8, 16);
	arrayType$3 = $arrayType(arrayType$2, 4);
	sliceType = $sliceType($Uint8);
	permuteBlock = function(src, permutation) {
		var $ptr, _i, _ref, bit, block, n, permutation, position, src, x, x$1;
		block = new $Uint64(0, 0);
		_ref = permutation;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			position = _i;
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bit = (x = $shiftRightUint64(src, n), new $Uint64(x.$high & 0, (x.$low & 1) >>> 0));
			block = (x$1 = $shiftLeft64(bit, ((((permutation.$length - 1 >> 0)) - position >> 0) >>> 0)), new $Uint64(block.$high | x$1.$high, (block.$low | x$1.$low) >>> 0));
			_i++;
		}
		return block;
	};
	init = function() {
		var $ptr, _i, _ref, f, i, j, s, x, x$1, x$2, x$3;
		_ref = sBoxes;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			s = _i;
			i = 0;
			while (true) {
				if (!(i < 4)) { break; }
				j = 0;
				while (true) {
					if (!(j < 16)) { break; }
					f = $shiftLeft64(new $Uint64(0, (x = (x$1 = ((s < 0 || s >= sBoxes.length) ? $throwRuntimeError("index out of range") : sBoxes[s]), ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])), ((j < 0 || j >= x.length) ? $throwRuntimeError("index out of range") : x[j]))), ((4 * ((7 - (s >>> 0) >>> 0)) >>> 0)));
					f = permuteBlock(f, new sliceType(permutationFunction));
					(x$2 = ((s < 0 || s >= feistelBox.length) ? $throwRuntimeError("index out of range") : feistelBox[s]), x$3 = (16 * i >> 0) + j >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3] = (f.$low >>> 0)));
					j = j + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			_i++;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = cipher.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		feistelBox = arrayType$1.zero();
		permutationFunction = $toNativeArray($kindUint8, [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7]);
		sBoxes = $toNativeArray($kindArray, [$toNativeArray($kindArray, [$toNativeArray($kindUint8, [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7]), $toNativeArray($kindUint8, [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8]), $toNativeArray($kindUint8, [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0]), $toNativeArray($kindUint8, [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13])]), $toNativeArray($kindArray, [$toNativeArray($kindUint8, [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10]), $toNativeArray($kindUint8, [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5]), $toNativeArray($kindUint8, [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15]), $toNativeArray($kindUint8, [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9])]), $toNativeArray($kindArray, [$toNativeArray($kindUint8, [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8]), $toNativeArray($kindUint8, [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1]), $toNativeArray($kindUint8, [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7]), $toNativeArray($kindUint8, [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12])]), $toNativeArray($kindArray, [$toNativeArray($kindUint8, [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15]), $toNativeArray($kindUint8, [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9]), $toNativeArray($kindUint8, [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4]), $toNativeArray($kindUint8, [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14])]), $toNativeArray($kindArray, [$toNativeArray($kindUint8, [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9]), $toNativeArray($kindUint8, [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6]), $toNativeArray($kindUint8, [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14]), $toNativeArray($kindUint8, [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3])]), $toNativeArray($kindArray, [$toNativeArray($kindUint8, [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11]), $toNativeArray($kindUint8, [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8]), $toNativeArray($kindUint8, [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6]), $toNativeArray($kindUint8, [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13])]), $toNativeArray($kindArray, [$toNativeArray($kindUint8, [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1]), $toNativeArray($kindUint8, [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6]), $toNativeArray($kindUint8, [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2]), $toNativeArray($kindUint8, [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12])]), $toNativeArray($kindArray, [$toNativeArray($kindUint8, [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7]), $toNativeArray($kindUint8, [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2]), $toNativeArray($kindUint8, [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8]), $toNativeArray($kindUint8, [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11])])]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/x509/pkix"] = (function() {
	var $pkg = {}, $init, asn1, big, time, AlgorithmIdentifier, RDNSequence, RelativeDistinguishedNameSET, AttributeTypeAndValue, Extension, Name, CertificateList, TBSCertificateList, RevokedCertificate, sliceType, sliceType$1, sliceType$2, sliceType$4, ptrType, ptrType$1, ptrType$2, sliceType$5, sliceType$6, ptrType$3, oidCountry, oidOrganization, oidOrganizationalUnit, oidCommonName, oidSerialNumber, oidLocality, oidProvince, oidStreetAddress, oidPostalCode, appendRDNs;
	asn1 = $packages["encoding/asn1"];
	big = $packages["math/big"];
	time = $packages["time"];
	AlgorithmIdentifier = $pkg.AlgorithmIdentifier = $newType(0, $kindStruct, "pkix.AlgorithmIdentifier", "AlgorithmIdentifier", "crypto/x509/pkix", function(Algorithm_, Parameters_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Algorithm = asn1.ObjectIdentifier.nil;
			this.Parameters = new asn1.RawValue.ptr();
			return;
		}
		this.Algorithm = Algorithm_;
		this.Parameters = Parameters_;
	});
	RDNSequence = $pkg.RDNSequence = $newType(12, $kindSlice, "pkix.RDNSequence", "RDNSequence", "crypto/x509/pkix", null);
	RelativeDistinguishedNameSET = $pkg.RelativeDistinguishedNameSET = $newType(12, $kindSlice, "pkix.RelativeDistinguishedNameSET", "RelativeDistinguishedNameSET", "crypto/x509/pkix", null);
	AttributeTypeAndValue = $pkg.AttributeTypeAndValue = $newType(0, $kindStruct, "pkix.AttributeTypeAndValue", "AttributeTypeAndValue", "crypto/x509/pkix", function(Type_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = asn1.ObjectIdentifier.nil;
			this.Value = $ifaceNil;
			return;
		}
		this.Type = Type_;
		this.Value = Value_;
	});
	Extension = $pkg.Extension = $newType(0, $kindStruct, "pkix.Extension", "Extension", "crypto/x509/pkix", function(Id_, Critical_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Id = asn1.ObjectIdentifier.nil;
			this.Critical = false;
			this.Value = sliceType$4.nil;
			return;
		}
		this.Id = Id_;
		this.Critical = Critical_;
		this.Value = Value_;
	});
	Name = $pkg.Name = $newType(0, $kindStruct, "pkix.Name", "Name", "crypto/x509/pkix", function(Country_, Organization_, OrganizationalUnit_, Locality_, Province_, StreetAddress_, PostalCode_, SerialNumber_, CommonName_, Names_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Country = sliceType$2.nil;
			this.Organization = sliceType$2.nil;
			this.OrganizationalUnit = sliceType$2.nil;
			this.Locality = sliceType$2.nil;
			this.Province = sliceType$2.nil;
			this.StreetAddress = sliceType$2.nil;
			this.PostalCode = sliceType$2.nil;
			this.SerialNumber = "";
			this.CommonName = "";
			this.Names = sliceType$1.nil;
			return;
		}
		this.Country = Country_;
		this.Organization = Organization_;
		this.OrganizationalUnit = OrganizationalUnit_;
		this.Locality = Locality_;
		this.Province = Province_;
		this.StreetAddress = StreetAddress_;
		this.PostalCode = PostalCode_;
		this.SerialNumber = SerialNumber_;
		this.CommonName = CommonName_;
		this.Names = Names_;
	});
	CertificateList = $pkg.CertificateList = $newType(0, $kindStruct, "pkix.CertificateList", "CertificateList", "crypto/x509/pkix", function(TBSCertList_, SignatureAlgorithm_, SignatureValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.TBSCertList = new TBSCertificateList.ptr();
			this.SignatureAlgorithm = new AlgorithmIdentifier.ptr();
			this.SignatureValue = new asn1.BitString.ptr();
			return;
		}
		this.TBSCertList = TBSCertList_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.SignatureValue = SignatureValue_;
	});
	TBSCertificateList = $pkg.TBSCertificateList = $newType(0, $kindStruct, "pkix.TBSCertificateList", "TBSCertificateList", "crypto/x509/pkix", function(Raw_, Version_, Signature_, Issuer_, ThisUpdate_, NextUpdate_, RevokedCertificates_, Extensions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.Version = 0;
			this.Signature = new AlgorithmIdentifier.ptr();
			this.Issuer = RDNSequence.nil;
			this.ThisUpdate = new time.Time.ptr();
			this.NextUpdate = new time.Time.ptr();
			this.RevokedCertificates = sliceType$5.nil;
			this.Extensions = sliceType$6.nil;
			return;
		}
		this.Raw = Raw_;
		this.Version = Version_;
		this.Signature = Signature_;
		this.Issuer = Issuer_;
		this.ThisUpdate = ThisUpdate_;
		this.NextUpdate = NextUpdate_;
		this.RevokedCertificates = RevokedCertificates_;
		this.Extensions = Extensions_;
	});
	RevokedCertificate = $pkg.RevokedCertificate = $newType(0, $kindStruct, "pkix.RevokedCertificate", "RevokedCertificate", "crypto/x509/pkix", function(SerialNumber_, RevocationTime_, Extensions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SerialNumber = ptrType$3.nil;
			this.RevocationTime = new time.Time.ptr();
			this.Extensions = sliceType$6.nil;
			return;
		}
		this.SerialNumber = SerialNumber_;
		this.RevocationTime = RevocationTime_;
		this.Extensions = Extensions_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType(AttributeTypeAndValue);
	sliceType$2 = $sliceType($String);
	sliceType$4 = $sliceType($Uint8);
	ptrType = $ptrType(RDNSequence);
	ptrType$1 = $ptrType(Name);
	ptrType$2 = $ptrType(CertificateList);
	sliceType$5 = $sliceType(RevokedCertificate);
	sliceType$6 = $sliceType(Extension);
	ptrType$3 = $ptrType(big.Int);
	Name.ptr.prototype.FillFromRDNSequence = function(rdns) {
		var $ptr, _i, _ref, _ref$1, _tuple, atv, n, ok, rdn, rdns, t, value;
		n = this;
		_ref = rdns.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rdn = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (rdn.$length === 0) {
				_i++;
				continue;
			}
			atv = $clone((0 >= rdn.$length ? $throwRuntimeError("index out of range") : rdn.$array[rdn.$offset + 0]), AttributeTypeAndValue);
			n.Names = $append(n.Names, atv);
			_tuple = $assertType(atv.Value, $String, true); value = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				_i++;
				continue;
			}
			t = atv.Type;
			if ((t.$length === 4) && ((0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) === 2) && ((1 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 1]) === 5) && ((2 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 2]) === 4)) {
				_ref$1 = (3 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 3]);
				if (_ref$1 === 3) {
					n.CommonName = value;
				} else if (_ref$1 === 5) {
					n.SerialNumber = value;
				} else if (_ref$1 === 6) {
					n.Country = $append(n.Country, value);
				} else if (_ref$1 === 7) {
					n.Locality = $append(n.Locality, value);
				} else if (_ref$1 === 8) {
					n.Province = $append(n.Province, value);
				} else if (_ref$1 === 9) {
					n.StreetAddress = $append(n.StreetAddress, value);
				} else if (_ref$1 === 10) {
					n.Organization = $append(n.Organization, value);
				} else if (_ref$1 === 11) {
					n.OrganizationalUnit = $append(n.OrganizationalUnit, value);
				} else if (_ref$1 === 17) {
					n.PostalCode = $append(n.PostalCode, value);
				}
			}
			_i++;
		}
	};
	Name.prototype.FillFromRDNSequence = function(rdns) { return this.$val.FillFromRDNSequence(rdns); };
	appendRDNs = function(in$1, values, oid) {
		var $ptr, _i, _ref, i, in$1, oid, s, value, values;
		if (values.$length === 0) {
			return in$1;
		}
		s = $makeSlice(sliceType$1, values.$length);
		_ref = values;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			value = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).Type = oid;
			((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).Value = new $String(value);
			_i++;
		}
		return $append(in$1, $subslice(new RelativeDistinguishedNameSET(s.$array), s.$offset, s.$offset + s.$length));
	};
	Name.ptr.prototype.ToRDNSequence = function() {
		var $ptr, n, ret;
		ret = RDNSequence.nil;
		n = $clone(this, Name);
		ret = appendRDNs(ret, n.Country, $subslice(new asn1.ObjectIdentifier(oidCountry.$array), oidCountry.$offset, oidCountry.$offset + oidCountry.$length));
		ret = appendRDNs(ret, n.Organization, $subslice(new asn1.ObjectIdentifier(oidOrganization.$array), oidOrganization.$offset, oidOrganization.$offset + oidOrganization.$length));
		ret = appendRDNs(ret, n.OrganizationalUnit, $subslice(new asn1.ObjectIdentifier(oidOrganizationalUnit.$array), oidOrganizationalUnit.$offset, oidOrganizationalUnit.$offset + oidOrganizationalUnit.$length));
		ret = appendRDNs(ret, n.Locality, $subslice(new asn1.ObjectIdentifier(oidLocality.$array), oidLocality.$offset, oidLocality.$offset + oidLocality.$length));
		ret = appendRDNs(ret, n.Province, $subslice(new asn1.ObjectIdentifier(oidProvince.$array), oidProvince.$offset, oidProvince.$offset + oidProvince.$length));
		ret = appendRDNs(ret, n.StreetAddress, $subslice(new asn1.ObjectIdentifier(oidStreetAddress.$array), oidStreetAddress.$offset, oidStreetAddress.$offset + oidStreetAddress.$length));
		ret = appendRDNs(ret, n.PostalCode, $subslice(new asn1.ObjectIdentifier(oidPostalCode.$array), oidPostalCode.$offset, oidPostalCode.$offset + oidPostalCode.$length));
		if (n.CommonName.length > 0) {
			ret = appendRDNs(ret, new sliceType$2([n.CommonName]), $subslice(new asn1.ObjectIdentifier(oidCommonName.$array), oidCommonName.$offset, oidCommonName.$offset + oidCommonName.$length));
		}
		if (n.SerialNumber.length > 0) {
			ret = appendRDNs(ret, new sliceType$2([n.SerialNumber]), $subslice(new asn1.ObjectIdentifier(oidSerialNumber.$array), oidSerialNumber.$offset, oidSerialNumber.$offset + oidSerialNumber.$length));
		}
		ret = ret;
		return ret;
	};
	Name.prototype.ToRDNSequence = function() { return this.$val.ToRDNSequence(); };
	CertificateList.ptr.prototype.HasExpired = function(now) {
		var $ptr, certList, now;
		now = $clone(now, time.Time);
		certList = this;
		return now.After(certList.TBSCertList.NextUpdate);
	};
	CertificateList.prototype.HasExpired = function(now) { return this.$val.HasExpired(now); };
	Name.methods = [{prop: "ToRDNSequence", name: "ToRDNSequence", pkg: "", typ: $funcType([], [RDNSequence], false)}];
	ptrType$1.methods = [{prop: "FillFromRDNSequence", name: "FillFromRDNSequence", pkg: "", typ: $funcType([ptrType], [], false)}];
	ptrType$2.methods = [{prop: "HasExpired", name: "HasExpired", pkg: "", typ: $funcType([time.Time], [$Bool], false)}];
	AlgorithmIdentifier.init([{prop: "Algorithm", name: "Algorithm", pkg: "", typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Parameters", name: "Parameters", pkg: "", typ: asn1.RawValue, tag: "asn1:\"optional\""}]);
	RDNSequence.init(RelativeDistinguishedNameSET);
	RelativeDistinguishedNameSET.init(AttributeTypeAndValue);
	AttributeTypeAndValue.init([{prop: "Type", name: "Type", pkg: "", typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $emptyInterface, tag: ""}]);
	Extension.init([{prop: "Id", name: "Id", pkg: "", typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Critical", name: "Critical", pkg: "", typ: $Bool, tag: "asn1:\"optional\""}, {prop: "Value", name: "Value", pkg: "", typ: sliceType$4, tag: ""}]);
	Name.init([{prop: "Country", name: "Country", pkg: "", typ: sliceType$2, tag: ""}, {prop: "Organization", name: "Organization", pkg: "", typ: sliceType$2, tag: ""}, {prop: "OrganizationalUnit", name: "OrganizationalUnit", pkg: "", typ: sliceType$2, tag: ""}, {prop: "Locality", name: "Locality", pkg: "", typ: sliceType$2, tag: ""}, {prop: "Province", name: "Province", pkg: "", typ: sliceType$2, tag: ""}, {prop: "StreetAddress", name: "StreetAddress", pkg: "", typ: sliceType$2, tag: ""}, {prop: "PostalCode", name: "PostalCode", pkg: "", typ: sliceType$2, tag: ""}, {prop: "SerialNumber", name: "SerialNumber", pkg: "", typ: $String, tag: ""}, {prop: "CommonName", name: "CommonName", pkg: "", typ: $String, tag: ""}, {prop: "Names", name: "Names", pkg: "", typ: sliceType$1, tag: ""}]);
	CertificateList.init([{prop: "TBSCertList", name: "TBSCertList", pkg: "", typ: TBSCertificateList, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", pkg: "", typ: AlgorithmIdentifier, tag: ""}, {prop: "SignatureValue", name: "SignatureValue", pkg: "", typ: asn1.BitString, tag: ""}]);
	TBSCertificateList.init([{prop: "Raw", name: "Raw", pkg: "", typ: asn1.RawContent, tag: ""}, {prop: "Version", name: "Version", pkg: "", typ: $Int, tag: "asn1:\"optional,default:2\""}, {prop: "Signature", name: "Signature", pkg: "", typ: AlgorithmIdentifier, tag: ""}, {prop: "Issuer", name: "Issuer", pkg: "", typ: RDNSequence, tag: ""}, {prop: "ThisUpdate", name: "ThisUpdate", pkg: "", typ: time.Time, tag: ""}, {prop: "NextUpdate", name: "NextUpdate", pkg: "", typ: time.Time, tag: "asn1:\"optional\""}, {prop: "RevokedCertificates", name: "RevokedCertificates", pkg: "", typ: sliceType$5, tag: "asn1:\"optional\""}, {prop: "Extensions", name: "Extensions", pkg: "", typ: sliceType$6, tag: "asn1:\"tag:0,optional,explicit\""}]);
	RevokedCertificate.init([{prop: "SerialNumber", name: "SerialNumber", pkg: "", typ: ptrType$3, tag: ""}, {prop: "RevocationTime", name: "RevocationTime", pkg: "", typ: time.Time, tag: ""}, {prop: "Extensions", name: "Extensions", pkg: "", typ: sliceType$6, tag: "asn1:\"optional\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = asn1.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		oidCountry = new sliceType([2, 5, 4, 6]);
		oidOrganization = new sliceType([2, 5, 4, 10]);
		oidOrganizationalUnit = new sliceType([2, 5, 4, 11]);
		oidCommonName = new sliceType([2, 5, 4, 3]);
		oidSerialNumber = new sliceType([2, 5, 4, 5]);
		oidLocality = new sliceType([2, 5, 4, 7]);
		oidProvince = new sliceType([2, 5, 4, 8]);
		oidStreetAddress = new sliceType([2, 5, 4, 9]);
		oidPostalCode = new sliceType([2, 5, 4, 17]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/hex"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, io, InvalidByteError, sliceType, sliceType$1, EncodedLen, Encode, DecodedLen, Decode, fromHexChar, EncodeToString, DecodeString;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	InvalidByteError = $pkg.InvalidByteError = $newType(1, $kindUint8, "hex.InvalidByteError", "InvalidByteError", "encoding/hex", null);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	EncodedLen = function(n) {
		var $ptr, n;
		return n * 2 >> 0;
	};
	$pkg.EncodedLen = EncodedLen;
	Encode = function(dst, src) {
		var $ptr, _i, _ref, dst, i, src, v, x, x$1;
		_ref = src;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = i * 2 >> 0, ((x < 0 || x >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x] = "0123456789abcdef".charCodeAt((v >>> 4 << 24 >>> 24))));
			(x$1 = (i * 2 >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$1] = "0123456789abcdef".charCodeAt(((v & 15) >>> 0))));
			_i++;
		}
		return src.$length * 2 >> 0;
	};
	$pkg.Encode = Encode;
	InvalidByteError.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this.$val;
		_r = fmt.Sprintf("encoding/hex: invalid byte: %#U", new sliceType([new $Int32((e >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: InvalidByteError.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(InvalidByteError).prototype.Error = function() { return new InvalidByteError(this.$get()).Error(); };
	DecodedLen = function(x) {
		var $ptr, _q, x;
		return (_q = x / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	$pkg.DecodedLen = DecodedLen;
	Decode = function(dst, src) {
		var $ptr, _q, _q$1, _r, _tuple, _tuple$1, a, b, dst, i, ok, src, x, x$1, x$2, x$3;
		if ((_r = src.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			return [0, $pkg.ErrLength];
		}
		i = 0;
		while (true) {
			if (!(i < (_q = src.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) { break; }
			_tuple = fromHexChar((x = i * 2 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x]))); a = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				return [0, new InvalidByteError(((x$1 = i * 2 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) << 24 >>> 24))];
			}
			_tuple$1 = fromHexChar((x$2 = (i * 2 >> 0) + 1 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2]))); b = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				return [0, new InvalidByteError(((x$3 = (i * 2 >> 0) + 1 >> 0, ((x$3 < 0 || x$3 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$3])) << 24 >>> 24))];
			}
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = (((a << 4 << 24 >>> 24)) | b) >>> 0);
			i = i + (1) >> 0;
		}
		return [(_q$1 = src.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), $ifaceNil];
	};
	$pkg.Decode = Decode;
	fromHexChar = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return [c - 48 << 24 >>> 24, true];
		} else if (97 <= c && c <= 102) {
			return [(c - 97 << 24 >>> 24) + 10 << 24 >>> 24, true];
		} else if (65 <= c && c <= 70) {
			return [(c - 65 << 24 >>> 24) + 10 << 24 >>> 24, true];
		}
		return [0, false];
	};
	EncodeToString = function(src) {
		var $ptr, dst, src;
		dst = $makeSlice(sliceType$1, EncodedLen(src.$length));
		Encode(dst, src);
		return $bytesToString(dst);
	};
	$pkg.EncodeToString = EncodeToString;
	DecodeString = function(s) {
		var $ptr, _tuple, dst, err, s, src;
		src = new sliceType$1($stringToBytes(s));
		dst = $makeSlice(sliceType$1, DecodedLen(src.$length));
		_tuple = Decode(dst, src); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$1.nil, err];
		}
		return [dst, $ifaceNil];
	};
	$pkg.DecodeString = DecodeString;
	InvalidByteError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrLength = errors.New("encoding/hex: odd length hex string");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, bytes, io, strconv, strings, Encoding, CorruptInputError, sliceType, ptrType, arrayType$2, arrayType$4, removeNewlinesMapper, NewEncoding;
	bytes = $packages["bytes"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", "Encoding", "encoding/base64", function(encode_, decodeMap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = "";
			this.decodeMap = arrayType$4.zero();
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", "CorruptInputError", "encoding/base64", null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$4 = $arrayType($Uint8, 256);
	NewEncoding = function(encoder$1) {
		var $ptr, e, encoder$1, i, i$1, x, x$1, x$2;
		e = new Encoding.ptr();
		e.encode = encoder$1;
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			(x = e.decodeMap, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24)));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, b0, b1, b2, b3, dst, enc, src;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		while (true) {
			if (!(src.$length > 0)) { break; }
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; _tmp$3 = 0; b0 = _tmp; b1 = _tmp$1; b2 = _tmp$2; b3 = _tmp$3;
			_ref = src.$length;
			if (_ref === 2) {
				b2 = (b2 | ((((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b1 = (1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24;
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;
			} else if (_ref === 1) {
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;
			} else {
				b3 = ((2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) & 63) >>> 0;
				b2 = (2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 6 << 24 >>> 24;
				b2 = (b2 | ((((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b1 = (1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24;
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;
			}
			(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = enc.encode.charCodeAt(b0));
			(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = enc.encode.charCodeAt(b1));
			(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = enc.encode.charCodeAt(b2));
			(3 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = enc.encode.charCodeAt(b3));
			if (src.$length < 3) {
				(3 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = 61);
				if (src.$length < 2) {
					(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = 61);
				}
				break;
			}
			src = $subslice(src, 3);
			dst = $subslice(dst, 4);
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var $ptr, buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var $ptr, _q, enc, n;
		enc = this;
		return (_q = ((n + 2 >> 0)) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) * 4 >> 0;
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var $ptr, _i, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dlen, dst, enc, end, err, in$1, j, n, olen, src, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		olen = src.$length;
		while (true) {
			if (!(src.$length > 0 && !end)) { break; }
			dbuf = $clone(arrayType$2.zero(), arrayType$2);
			dlen = 4;
			_ref = dbuf;
			_i = 0;
			while (true) {
				if (!(_i < 4)) { break; }
				j = _i;
				if (src.$length === 0) {
					_tmp = n; _tmp$1 = false; _tmp$2 = new CorruptInputError(0, ((olen - src.$length >> 0) - j >> 0)); n = _tmp; end = _tmp$1; err = _tmp$2;
					return [n, end, err];
				}
				in$1 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]);
				src = $subslice(src, 1);
				if (in$1 === 61) {
					_ref$1 = j;
					if (_ref$1 === 0 || _ref$1 === 1) {
						_tmp$3 = n; _tmp$4 = false; _tmp$5 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$3; end = _tmp$4; err = _tmp$5;
						return [n, end, err];
					} else if (_ref$1 === 2) {
						if (src.$length === 0) {
							_tmp$6 = n; _tmp$7 = false; _tmp$8 = new CorruptInputError(0, olen); n = _tmp$6; end = _tmp$7; err = _tmp$8;
							return [n, end, err];
						}
						if (!(((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) === 61))) {
							_tmp$9 = n; _tmp$10 = false; _tmp$11 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$9; end = _tmp$10; err = _tmp$11;
							return [n, end, err];
						}
						src = $subslice(src, 1);
					}
					if (src.$length > 0) {
						err = new CorruptInputError(0, (olen - src.$length >> 0));
					}
					_tmp$12 = j; _tmp$13 = true; dlen = _tmp$12; end = _tmp$13;
					break;
				}
				((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1])));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$14 = n; _tmp$15 = false; _tmp$16 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$14; end = _tmp$15; err = _tmp$16;
					return [n, end, err];
				}
				_i++;
			}
			_ref$2 = dlen;
			if (_ref$2 === 4) {
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((dbuf[2] << 6 << 24 >>> 24) | dbuf[3]) >>> 0);
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0);
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0);
			} else if (_ref$2 === 3) {
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0);
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0);
			} else if (_ref$2 === 2) {
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0);
			}
			dst = $subslice(dst, 3);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$17 = n; _tmp$18 = end; _tmp$19 = err; n = _tmp$17; end = _tmp$18; err = _tmp$19;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var $ptr, _r, _tuple, dst, enc, err, n, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; enc = $f.enc; err = $f.err; n = $f.n; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		enc = this;
		_r = bytes.Map(removeNewlinesMapper, src); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		src = _r;
		_tuple = enc.decode(dst, src); n = _tuple[0]; err = _tuple[2];
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoding.ptr.prototype.Decode }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.enc = enc; $f.err = err; $f.n = n; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var $ptr, _r, _tuple, dbuf, enc, err, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dbuf = $f.dbuf; enc = $f.enc; err = $f.err; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r = strings.Map(removeNewlinesMapper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s))); n = _tuple[0]; err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoding.ptr.prototype.DecodeString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dbuf = dbuf; $f.enc = enc; $f.err = err; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var $ptr, _q, enc, n;
		enc = this;
		return (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) * 3 >> 0;
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init([{prop: "encode", name: "encode", pkg: "encoding/base64", typ: $String, tag: ""}, {prop: "decodeMap", name: "decodeMap", pkg: "encoding/base64", typ: arrayType$4, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		removeNewlinesMapper = (function(r) {
			var $ptr, r;
			if ((r === 13) || (r === 10)) {
				return -1;
			}
			return r;
		});
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort;
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = (2 * root >> 0) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, a, b, c) {
		var $ptr, _r, _r$1, _r$2, a, b, c, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; a = $f.a; b = $f.b; c = $f.c; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m0 = b;
		m1 = a;
		m2 = c;
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_r$2) { */ case 9:
			$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	swapRange = function(data, a, b, n) {
		var $ptr, a, b, data, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; b = $f.b; data = $f.data; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			$r = data.Swap(a + i >> 0, b + i >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: swapRange }; } $f.$ptr = $ptr; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, c, d, data, hi, lo, m, midhi, midlo, n, pivot, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a = $f.a; b = $f.b; c = $f.c; d = $f.d; data = $f.data; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; n = $f.n; pivot = $f.pivot; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + (2 * s >> 0) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - (2 * s >> 0) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0; _tmp$1 = lo + 1 >> 0; _tmp$2 = hi; _tmp$3 = hi; a = _tmp; b = _tmp$1; c = _tmp$2; d = _tmp$3;
		/* while (true) { */ case 7:
			/* while (true) { */ case 9:
				/* if (!(b < c)) { break; } */ if(!(b < c)) { $s = 10; continue; }
				_r = data.Less(b, pivot); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r) { $s = 11; continue; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r) { */ case 11:
					b = b + (1) >> 0;
					$s = 14; continue;
				/* } else if (!_r$1) { */ case 12:
					$r = data.Swap(a, b); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					a = a + (1) >> 0;
					b = b + (1) >> 0;
					$s = 14; continue;
				/* } else { */ case 13:
					/* break; */ $s = 10; continue;
				/* } */ case 14:
			/* } */ $s = 9; continue; case 10:
			/* while (true) { */ case 18:
				/* if (!(b < c)) { break; } */ if(!(b < c)) { $s = 19; continue; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2) { $s = 20; continue; }
				_r$3 = data.Less(c - 1 >> 0, pivot); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (!_r$3) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_r$2) { */ case 20:
					c = c - (1) >> 0;
					$s = 23; continue;
				/* } else if (!_r$3) { */ case 21:
					$r = data.Swap(c - 1 >> 0, d - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					c = c - (1) >> 0;
					d = d - (1) >> 0;
					$s = 23; continue;
				/* } else { */ case 22:
					/* break; */ $s = 19; continue;
				/* } */ case 23:
			/* } */ $s = 18; continue; case 19:
			if (b >= c) {
				/* break; */ $s = 8; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		n = min(b - a >> 0, a - lo >> 0);
		$r = swapRange(data, lo, b - n >> 0, n); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		n = min(hi - d >> 0, d - c >> 0);
		$r = swapRange(data, c, hi - n >> 0, n); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = (lo + b >> 0) - a >> 0; _tmp$5 = hi - ((d - c >> 0)) >> 0; midlo = _tmp$4; midhi = _tmp$5;
		return [midlo, midhi];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a = a; $f.b = b; $f.c = c; $f.d = d; $f.data = data; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.n = n; $f.pivot = pivot; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth) {
		var $ptr, _r, _tuple, a, b, data, maxDepth, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; maxDepth = $f.maxDepth; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 7)) { break; } */ if(!((b - a >> 0) > 7)) { $s = 2; continue; }
			/* */ if (maxDepth === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			maxDepth = maxDepth - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; mlo = _tuple[0]; mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			$r = insertionSort(data, a, b); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.maxDepth = maxDepth; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, i, maxDepth, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		maxDepth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = maxDepth * (2) >> 0;
		$r = quickSort(data, 0, n, maxDepth); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/pem"] = (function() {
	var $pkg = {}, $init, bytes, base64, io, sort, Block, sliceType, ptrType, mapType, pemStart, pemEnd, pemEndOfLine, getLine, removeWhitespace, Decode, decodeError;
	bytes = $packages["bytes"];
	base64 = $packages["encoding/base64"];
	io = $packages["io"];
	sort = $packages["sort"];
	Block = $pkg.Block = $newType(0, $kindStruct, "pem.Block", "Block", "encoding/pem", function(Type_, Headers_, Bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = "";
			this.Headers = false;
			this.Bytes = sliceType.nil;
			return;
		}
		this.Type = Type_;
		this.Headers = Headers_;
		this.Bytes = Bytes_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Block);
	mapType = $mapType($String, $String);
	getLine = function(data) {
		var $ptr, _r, _tmp, _tmp$1, data, i, j, line, rest, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; data = $f.data; i = $f.i; j = $f.j; line = $f.line; rest = $f.rest; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		rest = sliceType.nil;
		i = bytes.Index(data, new sliceType([10]));
		j = 0;
		if (i < 0) {
			i = data.$length;
			j = i;
		} else {
			j = i + 1 >> 0;
			if (i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + x])) === 13)) {
				i = i - (1) >> 0;
			}
		}
		_r = bytes.TrimRight($subslice(data, 0, i), " \t"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp = _r; _tmp$1 = $subslice(data, j); line = _tmp; rest = _tmp$1;
		return [line, rest];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.data = data; $f.i = i; $f.j = j; $f.line = line; $f.rest = rest; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	removeWhitespace = function(data) {
		var $ptr, _i, _ref, b, data, n, result;
		result = $makeSlice(sliceType, data.$length);
		n = 0;
		_ref = data;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if ((b === 32) || (b === 9) || (b === 13) || (b === 10)) {
				_i++;
				continue;
			}
			((n < 0 || n >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + n] = b);
			n = n + (1) >> 0;
			_i++;
		}
		return $subslice(result, 0, n);
	};
	Decode = function(data) {
		var $ptr, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, base64Data, data, err, i, i$1, i$2, key, line, n, next, p, rest, typeLine, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; base64Data = $f.base64Data; data = $f.data; err = $f.err; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; key = $f.key; line = $f.line; n = $f.n; next = $f.next; p = $f.p; rest = $f.rest; typeLine = $f.typeLine; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = ptrType.nil;
		rest = sliceType.nil;
		rest = data;
		if (bytes.HasPrefix(data, $subslice(pemStart, 1))) {
			rest = $subslice(rest, (pemStart.$length - 1 >> 0), data.$length);
		} else {
			i = bytes.Index(data, pemStart);
			if (i >= 0) {
				rest = $subslice(rest, (i + pemStart.$length >> 0), data.$length);
			} else {
				_tmp = ptrType.nil; _tmp$1 = data; p = _tmp; rest = _tmp$1;
				return [p, rest];
			}
		}
		_r = getLine(rest); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; typeLine = _tuple[0]; rest = _tuple[1];
		/* */ if (!bytes.HasSuffix(typeLine, pemEndOfLine)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!bytes.HasSuffix(typeLine, pemEndOfLine)) { */ case 2:
			_r$1 = decodeError(data, rest); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; p = _tuple$1[0]; rest = _tuple$1[1];
			return [p, rest];
		/* } */ case 3:
		typeLine = $subslice(typeLine, 0, (typeLine.$length - pemEndOfLine.$length >> 0));
		p = new Block.ptr($bytesToString(typeLine), new $Map(), sliceType.nil);
		/* while (true) { */ case 5:
			if (rest.$length === 0) {
				_tmp$2 = ptrType.nil; _tmp$3 = data; p = _tmp$2; rest = _tmp$3;
				return [p, rest];
			}
			_r$2 = getLine(rest); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2; line = _tuple$2[0]; next = _tuple$2[1];
			i$1 = bytes.Index(line, new sliceType([58]));
			if (i$1 === -1) {
				/* break; */ $s = 6; continue;
			}
			_tmp$4 = $subslice(line, 0, i$1); _tmp$5 = $subslice(line, (i$1 + 1 >> 0)); key = _tmp$4; val = _tmp$5;
			_r$3 = bytes.TrimSpace(key); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			key = _r$3;
			_r$4 = bytes.TrimSpace(val); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			val = _r$4;
			_key = $bytesToString(key); (p.Headers || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $bytesToString(val) };
			rest = next;
		/* } */ $s = 5; continue; case 6:
		i$2 = bytes.Index(rest, pemEnd);
		/* */ if (i$2 < 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (i$2 < 0) { */ case 10:
			_r$5 = decodeError(data, rest); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$3 = _r$5; p = _tuple$3[0]; rest = _tuple$3[1];
			return [p, rest];
		/* } */ case 11:
		base64Data = removeWhitespace($subslice(rest, 0, i$2));
		p.Bytes = $makeSlice(sliceType, base64.StdEncoding.DecodedLen(base64Data.$length));
		_r$6 = base64.StdEncoding.Decode(p.Bytes, base64Data); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$4 = _r$6; n = _tuple$4[0]; err = _tuple$4[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 14:
			_r$7 = decodeError(data, rest); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$5 = _r$7; p = _tuple$5[0]; rest = _tuple$5[1];
			return [p, rest];
		/* } */ case 15:
		p.Bytes = $subslice(p.Bytes, 0, n);
		_r$8 = getLine($subslice(rest, (i$2 + pemEnd.$length >> 0))); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$6 = _r$8; rest = _tuple$6[1];
		return [p, rest];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.base64Data = base64Data; $f.data = data; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.key = key; $f.line = line; $f.n = n; $f.next = next; $f.p = p; $f.rest = rest; $f.typeLine = typeLine; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	decodeError = function(data, rest) {
		var $ptr, _r, _tuple, data, p, rest, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; p = $f.p; rest = $f.rest; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Decode(rest); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; p = _tuple[0]; rest = _tuple[1];
		if (p === ptrType.nil) {
			rest = data;
		}
		return [p, rest];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeError }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.p = p; $f.rest = rest; $f.$s = $s; $f.$r = $r; return $f;
	};
	Block.init([{prop: "Type", name: "Type", pkg: "", typ: $String, tag: ""}, {prop: "Headers", name: "Headers", pkg: "", typ: mapType, tag: ""}, {prop: "Bytes", name: "Bytes", pkg: "", typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pemStart = new sliceType($stringToBytes("\n-----BEGIN "));
		pemEnd = new sliceType($stringToBytes("\n-----END "));
		pemEndOfLine = new sliceType($stringToBytes("-----"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net"] = (function() {
	var $pkg = {}, $init, errors, io, rand, os, runtime, sort, sync, atomic, syscall, time, dnsRR_Header, dnsRR_CNAME, dnsRR_HINFO, dnsRR_MB, dnsRR_MG, dnsRR_MINFO, dnsRR_MR, dnsRR_MX, dnsRR_NS, dnsRR_PTR, dnsRR_SOA, dnsRR_TXT, dnsRR_SRV, dnsRR_A, dnsRR_AAAA, IP, IPMask, ParseError, Addr, AddrError, file, structType, chanType, sliceType, sliceType$1, ptrType$7, ptrType$8, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$25, ptrType$29, arrayType, arrayType$1, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$47, arrayType$3, funcType$1, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, ptrType$60, ptrType$64, ptrType$65, rr_mk, errInvalidInterface, errInvalidInterfaceIndex, errInvalidInterfaceName, errNoSuchInterface, errNoSuchMulticastInterface, v4InV6Prefix, classAMask, classBMask, classCMask, supportsIPv4, supportsIPv6, supportsIPv4map, errNoSuitableAddress, listenerBacklog, errMissingAddress, errClosing, threadLimit, services, servicesError, onceReadServices, _map, _key, _map$2, _key$2, _map$3, _key$3, sysInit, probeIPv4Stack, probeIPv6Stack, maxListenerBacklog, cgoLookupPort, IPv4, IPv4Mask, CIDRMask, isZeros, allFF, bytesEqual, simpleMaskLength, parseIPv4, parseIPv6, ParseIP, init, splitHostZone, LookupPort, lookupPort, open, byteIndex, countAnyByte, splitAtBytes, getFields, dtoi, xtoi, itod, appendHex, last, readServices, goLookupPort;
	errors = $packages["errors"];
	io = $packages["io"];
	rand = $packages["math/rand"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	dnsRR_Header = $pkg.dnsRR_Header = $newType(0, $kindStruct, "net.dnsRR_Header", "dnsRR_Header", "net", function(Name_, Rrtype_, Class_, Ttl_, Rdlength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Rrtype = 0;
			this.Class = 0;
			this.Ttl = 0;
			this.Rdlength = 0;
			return;
		}
		this.Name = Name_;
		this.Rrtype = Rrtype_;
		this.Class = Class_;
		this.Ttl = Ttl_;
		this.Rdlength = Rdlength_;
	});
	dnsRR_CNAME = $pkg.dnsRR_CNAME = $newType(0, $kindStruct, "net.dnsRR_CNAME", "dnsRR_CNAME", "net", function(Hdr_, Cname_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Cname = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Cname = Cname_;
	});
	dnsRR_HINFO = $pkg.dnsRR_HINFO = $newType(0, $kindStruct, "net.dnsRR_HINFO", "dnsRR_HINFO", "net", function(Hdr_, Cpu_, Os_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Cpu = "";
			this.Os = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Cpu = Cpu_;
		this.Os = Os_;
	});
	dnsRR_MB = $pkg.dnsRR_MB = $newType(0, $kindStruct, "net.dnsRR_MB", "dnsRR_MB", "net", function(Hdr_, Mb_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Mb = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mb = Mb_;
	});
	dnsRR_MG = $pkg.dnsRR_MG = $newType(0, $kindStruct, "net.dnsRR_MG", "dnsRR_MG", "net", function(Hdr_, Mg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Mg = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mg = Mg_;
	});
	dnsRR_MINFO = $pkg.dnsRR_MINFO = $newType(0, $kindStruct, "net.dnsRR_MINFO", "dnsRR_MINFO", "net", function(Hdr_, Rmail_, Email_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Rmail = "";
			this.Email = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Rmail = Rmail_;
		this.Email = Email_;
	});
	dnsRR_MR = $pkg.dnsRR_MR = $newType(0, $kindStruct, "net.dnsRR_MR", "dnsRR_MR", "net", function(Hdr_, Mr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Mr = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mr = Mr_;
	});
	dnsRR_MX = $pkg.dnsRR_MX = $newType(0, $kindStruct, "net.dnsRR_MX", "dnsRR_MX", "net", function(Hdr_, Pref_, Mx_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Pref = 0;
			this.Mx = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Pref = Pref_;
		this.Mx = Mx_;
	});
	dnsRR_NS = $pkg.dnsRR_NS = $newType(0, $kindStruct, "net.dnsRR_NS", "dnsRR_NS", "net", function(Hdr_, Ns_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Ns = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Ns = Ns_;
	});
	dnsRR_PTR = $pkg.dnsRR_PTR = $newType(0, $kindStruct, "net.dnsRR_PTR", "dnsRR_PTR", "net", function(Hdr_, Ptr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Ptr = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Ptr = Ptr_;
	});
	dnsRR_SOA = $pkg.dnsRR_SOA = $newType(0, $kindStruct, "net.dnsRR_SOA", "dnsRR_SOA", "net", function(Hdr_, Ns_, Mbox_, Serial_, Refresh_, Retry_, Expire_, Minttl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Ns = "";
			this.Mbox = "";
			this.Serial = 0;
			this.Refresh = 0;
			this.Retry = 0;
			this.Expire = 0;
			this.Minttl = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.Ns = Ns_;
		this.Mbox = Mbox_;
		this.Serial = Serial_;
		this.Refresh = Refresh_;
		this.Retry = Retry_;
		this.Expire = Expire_;
		this.Minttl = Minttl_;
	});
	dnsRR_TXT = $pkg.dnsRR_TXT = $newType(0, $kindStruct, "net.dnsRR_TXT", "dnsRR_TXT", "net", function(Hdr_, Txt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Txt = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Txt = Txt_;
	});
	dnsRR_SRV = $pkg.dnsRR_SRV = $newType(0, $kindStruct, "net.dnsRR_SRV", "dnsRR_SRV", "net", function(Hdr_, Priority_, Weight_, Port_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.Priority = 0;
			this.Weight = 0;
			this.Port = 0;
			this.Target = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Priority = Priority_;
		this.Weight = Weight_;
		this.Port = Port_;
		this.Target = Target_;
	});
	dnsRR_A = $pkg.dnsRR_A = $newType(0, $kindStruct, "net.dnsRR_A", "dnsRR_A", "net", function(Hdr_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.A = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.A = A_;
	});
	dnsRR_AAAA = $pkg.dnsRR_AAAA = $newType(0, $kindStruct, "net.dnsRR_AAAA", "dnsRR_AAAA", "net", function(Hdr_, AAAA_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new dnsRR_Header.ptr();
			this.AAAA = arrayType.zero();
			return;
		}
		this.Hdr = Hdr_;
		this.AAAA = AAAA_;
	});
	IP = $pkg.IP = $newType(12, $kindSlice, "net.IP", "IP", "net", null);
	IPMask = $pkg.IPMask = $newType(12, $kindSlice, "net.IPMask", "IPMask", "net", null);
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "net.ParseError", "ParseError", "net", function(Type_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = "";
			this.Text = "";
			return;
		}
		this.Type = Type_;
		this.Text = Text_;
	});
	Addr = $pkg.Addr = $newType(8, $kindInterface, "net.Addr", "Addr", "net", null);
	AddrError = $pkg.AddrError = $newType(0, $kindStruct, "net.AddrError", "AddrError", "net", function(Err_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = "";
			this.Addr = "";
			return;
		}
		this.Err = Err_;
		this.Addr = Addr_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "net.file", "file", "net", function(file_, data_, atEOF_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$25.nil;
			this.data = sliceType$1.nil;
			this.atEOF = false;
			return;
		}
		this.file = file_;
		this.data = data_;
		this.atEOF = atEOF_;
	});
	structType = $structType([]);
	chanType = $chanType(structType, false, false);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($Uint8);
	ptrType$7 = $ptrType(dnsRR_Header);
	ptrType$8 = $ptrType(dnsRR_CNAME);
	ptrType$12 = $ptrType(dnsRR_A);
	ptrType$13 = $ptrType(dnsRR_AAAA);
	ptrType$14 = $ptrType($Uint16);
	ptrType$15 = $ptrType($String);
	ptrType$16 = $ptrType($Uint32);
	ptrType$25 = $ptrType(os.File);
	ptrType$29 = $ptrType(file);
	arrayType = $arrayType($Uint8, 16);
	arrayType$1 = $arrayType($Uint8, 4);
	ptrType$40 = $ptrType(dnsRR_SRV);
	ptrType$41 = $ptrType(dnsRR_MX);
	ptrType$42 = $ptrType(dnsRR_NS);
	ptrType$43 = $ptrType(dnsRR_TXT);
	ptrType$44 = $ptrType(dnsRR_PTR);
	ptrType$47 = $ptrType(AddrError);
	arrayType$3 = $arrayType($Uint8, 32);
	funcType$1 = $funcType([$emptyInterface, $String, $String], [$Bool], false);
	ptrType$55 = $ptrType(dnsRR_HINFO);
	ptrType$56 = $ptrType(dnsRR_MB);
	ptrType$57 = $ptrType(dnsRR_MG);
	ptrType$58 = $ptrType(dnsRR_MINFO);
	ptrType$59 = $ptrType(dnsRR_MR);
	ptrType$60 = $ptrType(dnsRR_SOA);
	ptrType$64 = $ptrType(IP);
	ptrType$65 = $ptrType(ParseError);
	sysInit = function() {
		var $ptr;
	};
	probeIPv4Stack = function() {
		var $ptr;
		return false;
	};
	probeIPv6Stack = function() {
		var $ptr, _tmp, _tmp$1, supportsIPv4map$1, supportsIPv6$1;
		supportsIPv6$1 = false;
		supportsIPv4map$1 = false;
		_tmp = false; _tmp$1 = false; supportsIPv6$1 = _tmp; supportsIPv4map$1 = _tmp$1;
		return [supportsIPv6$1, supportsIPv4map$1];
	};
	maxListenerBacklog = function() {
		var $ptr;
		return 128;
	};
	cgoLookupPort = function(network, service) {
		var $ptr, _tmp, _tmp$1, _tmp$2, completed, err, network, port, service;
		port = 0;
		err = $ifaceNil;
		completed = false;
		_tmp = 0; _tmp$1 = $ifaceNil; _tmp$2 = false; port = _tmp; err = _tmp$1; completed = _tmp$2;
		return [port, err, completed];
	};
	dnsRR_Header.ptr.prototype.Header = function() {
		var $ptr, h;
		h = this;
		return h;
	};
	dnsRR_Header.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_Header.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _v, _v$1, _v$2, _v$3, f, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; f = $f.f; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		_r = f((h.$ptr_Name || (h.$ptr_Name = new ptrType$15(function() { return this.$target.Name; }, function($v) { this.$target.Name = $v; }, h))), "Name", "domain"); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$3 = false; $s = 4; continue s; }
		_r$1 = f((h.$ptr_Rrtype || (h.$ptr_Rrtype = new ptrType$14(function() { return this.$target.Rrtype; }, function($v) { this.$target.Rrtype = $v; }, h))), "Rrtype", ""); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$3 = _r$1; case 4:
		if (!(_v$3)) { _v$2 = false; $s = 3; continue s; }
		_r$2 = f((h.$ptr_Class || (h.$ptr_Class = new ptrType$14(function() { return this.$target.Class; }, function($v) { this.$target.Class = $v; }, h))), "Class", ""); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$2 = _r$2; case 3:
		if (!(_v$2)) { _v$1 = false; $s = 2; continue s; }
		_r$3 = f((h.$ptr_Ttl || (h.$ptr_Ttl = new ptrType$16(function() { return this.$target.Ttl; }, function($v) { this.$target.Ttl = $v; }, h))), "Ttl", ""); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = _r$3; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$4 = f((h.$ptr_Rdlength || (h.$ptr_Rdlength = new ptrType$14(function() { return this.$target.Rdlength; }, function($v) { this.$target.Rdlength = $v; }, h))), "Rdlength", ""); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v = _r$4; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_Header.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.f = f; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_Header.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_CNAME.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_CNAME.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_CNAME.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_Cname || (rr.$ptr_Cname = new ptrType$15(function() { return this.$target.Cname; }, function($v) { this.$target.Cname = $v; }, rr))), "Cname", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_CNAME.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_CNAME.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_HINFO.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_HINFO.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_HINFO.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _r$2, _v, _v$1, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; _v$1 = $f._v$1; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$1 = false; $s = 2; continue s; }
		_r$1 = f((rr.$ptr_Cpu || (rr.$ptr_Cpu = new ptrType$15(function() { return this.$target.Cpu; }, function($v) { this.$target.Cpu = $v; }, rr))), "Cpu", ""); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$1 = _r$1; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$2 = f((rr.$ptr_Os || (rr.$ptr_Os = new ptrType$15(function() { return this.$target.Os; }, function($v) { this.$target.Os = $v; }, rr))), "Os", ""); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_HINFO.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f._v$1 = _v$1; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_HINFO.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MB.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MB.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MB.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_Mb || (rr.$ptr_Mb = new ptrType$15(function() { return this.$target.Mb; }, function($v) { this.$target.Mb = $v; }, rr))), "Mb", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MB.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_MB.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MG.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MG.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MG.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_Mg || (rr.$ptr_Mg = new ptrType$15(function() { return this.$target.Mg; }, function($v) { this.$target.Mg = $v; }, rr))), "Mg", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MG.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_MG.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MINFO.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MINFO.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MINFO.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _r$2, _v, _v$1, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; _v$1 = $f._v$1; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$1 = false; $s = 2; continue s; }
		_r$1 = f((rr.$ptr_Rmail || (rr.$ptr_Rmail = new ptrType$15(function() { return this.$target.Rmail; }, function($v) { this.$target.Rmail = $v; }, rr))), "Rmail", "domain"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$1 = _r$1; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$2 = f((rr.$ptr_Email || (rr.$ptr_Email = new ptrType$15(function() { return this.$target.Email; }, function($v) { this.$target.Email = $v; }, rr))), "Email", "domain"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MINFO.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f._v$1 = _v$1; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_MINFO.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MR.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MR.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MR.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_Mr || (rr.$ptr_Mr = new ptrType$15(function() { return this.$target.Mr; }, function($v) { this.$target.Mr = $v; }, rr))), "Mr", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MR.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_MR.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MX.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MX.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MX.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _r$2, _v, _v$1, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; _v$1 = $f._v$1; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$1 = false; $s = 2; continue s; }
		_r$1 = f((rr.$ptr_Pref || (rr.$ptr_Pref = new ptrType$14(function() { return this.$target.Pref; }, function($v) { this.$target.Pref = $v; }, rr))), "Pref", ""); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$1 = _r$1; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$2 = f((rr.$ptr_Mx || (rr.$ptr_Mx = new ptrType$15(function() { return this.$target.Mx; }, function($v) { this.$target.Mx = $v; }, rr))), "Mx", "domain"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MX.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f._v$1 = _v$1; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_MX.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_NS.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_NS.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_NS.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_Ns || (rr.$ptr_Ns = new ptrType$15(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr))), "Ns", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_NS.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_NS.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_PTR.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_PTR.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_PTR.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_Ptr || (rr.$ptr_Ptr = new ptrType$15(function() { return this.$target.Ptr; }, function($v) { this.$target.Ptr = $v; }, rr))), "Ptr", "domain"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_PTR.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_PTR.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_SOA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_SOA.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_SOA.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, _v$3, _v$4, _v$5, _v$6, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; _v$6 = $f._v$6; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$6 = false; $s = 7; continue s; }
		_r$1 = f((rr.$ptr_Ns || (rr.$ptr_Ns = new ptrType$15(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr))), "Ns", "domain"); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$6 = _r$1; case 7:
		if (!(_v$6)) { _v$5 = false; $s = 6; continue s; }
		_r$2 = f((rr.$ptr_Mbox || (rr.$ptr_Mbox = new ptrType$15(function() { return this.$target.Mbox; }, function($v) { this.$target.Mbox = $v; }, rr))), "Mbox", "domain"); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$5 = _r$2; case 6:
		if (!(_v$5)) { _v$4 = false; $s = 5; continue s; }
		_r$3 = f((rr.$ptr_Serial || (rr.$ptr_Serial = new ptrType$16(function() { return this.$target.Serial; }, function($v) { this.$target.Serial = $v; }, rr))), "Serial", ""); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$4 = _r$3; case 5:
		if (!(_v$4)) { _v$3 = false; $s = 4; continue s; }
		_r$4 = f((rr.$ptr_Refresh || (rr.$ptr_Refresh = new ptrType$16(function() { return this.$target.Refresh; }, function($v) { this.$target.Refresh = $v; }, rr))), "Refresh", ""); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v$3 = _r$4; case 4:
		if (!(_v$3)) { _v$2 = false; $s = 3; continue s; }
		_r$5 = f((rr.$ptr_Retry || (rr.$ptr_Retry = new ptrType$16(function() { return this.$target.Retry; }, function($v) { this.$target.Retry = $v; }, rr))), "Retry", ""); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v$2 = _r$5; case 3:
		if (!(_v$2)) { _v$1 = false; $s = 2; continue s; }
		_r$6 = f((rr.$ptr_Expire || (rr.$ptr_Expire = new ptrType$16(function() { return this.$target.Expire; }, function($v) { this.$target.Expire = $v; }, rr))), "Expire", ""); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$1 = _r$6; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$7 = f((rr.$ptr_Minttl || (rr.$ptr_Minttl = new ptrType$16(function() { return this.$target.Minttl; }, function($v) { this.$target.Minttl = $v; }, rr))), "Minttl", ""); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v = _r$7; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_SOA.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f._v$6 = _v$6; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_SOA.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_TXT.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_TXT.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_TXT.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_Txt || (rr.$ptr_Txt = new ptrType$15(function() { return this.$target.Txt; }, function($v) { this.$target.Txt = $v; }, rr))), "Txt", ""); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_TXT.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_TXT.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_SRV.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_SRV.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_SRV.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _v, _v$1, _v$2, _v$3, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$3 = false; $s = 4; continue s; }
		_r$1 = f((rr.$ptr_Priority || (rr.$ptr_Priority = new ptrType$14(function() { return this.$target.Priority; }, function($v) { this.$target.Priority = $v; }, rr))), "Priority", ""); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$3 = _r$1; case 4:
		if (!(_v$3)) { _v$2 = false; $s = 3; continue s; }
		_r$2 = f((rr.$ptr_Weight || (rr.$ptr_Weight = new ptrType$14(function() { return this.$target.Weight; }, function($v) { this.$target.Weight = $v; }, rr))), "Weight", ""); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$2 = _r$2; case 3:
		if (!(_v$2)) { _v$1 = false; $s = 2; continue s; }
		_r$3 = f((rr.$ptr_Port || (rr.$ptr_Port = new ptrType$14(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, rr))), "Port", ""); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = _r$3; case 2:
		if (!(_v$1)) { _v = false; $s = 1; continue s; }
		_r$4 = f((rr.$ptr_Target || (rr.$ptr_Target = new ptrType$15(function() { return this.$target.Target; }, function($v) { this.$target.Target = $v; }, rr))), "Target", "domain"); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v = _r$4; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_SRV.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_SRV.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_A.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_A.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_A.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f((rr.$ptr_A || (rr.$ptr_A = new ptrType$16(function() { return this.$target.A; }, function($v) { this.$target.A = $v; }, rr))), "A", "ipv4"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_A.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_A.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_AAAA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_AAAA.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_AAAA.ptr.prototype.Walk = function(f) {
		var $ptr, _r, _r$1, _v, f, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v = false; $s = 1; continue s; }
		_r$1 = f(new sliceType$1(rr.AAAA), "AAAA", "ipv6"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		return _v;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_AAAA.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	dnsRR_AAAA.prototype.Walk = function(f) { return this.$val.Walk(f); };
	IPv4 = function(a, b, c, d) {
		var $ptr, a, b, c, d, p;
		p = $makeSlice(IP, 16);
		$copySlice(p, v4InV6Prefix);
		(12 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 12] = a);
		(13 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 13] = b);
		(14 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 14] = c);
		(15 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 15] = d);
		return p;
	};
	$pkg.IPv4 = IPv4;
	IPv4Mask = function(a, b, c, d) {
		var $ptr, a, b, c, d, p;
		p = $makeSlice(IPMask, 4);
		(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = a);
		(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = b);
		(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = c);
		(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = d);
		return p;
	};
	$pkg.IPv4Mask = IPv4Mask;
	CIDRMask = function(ones, bits) {
		var $ptr, _q, bits, i, l, m, n, ones, y;
		if (!((bits === 32)) && !((bits === 128))) {
			return IPMask.nil;
		}
		if (ones < 0 || ones > bits) {
			return IPMask.nil;
		}
		l = (_q = bits / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		m = $makeSlice(IPMask, l);
		n = (ones >>> 0);
		i = 0;
		while (true) {
			if (!(i < l)) { break; }
			if (n >= 8) {
				((i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i] = 255);
				n = n - (8) >>> 0;
				i = i + (1) >> 0;
				continue;
			}
			((i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i] = ~((y = n, y < 32 ? (255 >>> y) : 0) << 24 >>> 24) << 24 >>> 24);
			n = 0;
			i = i + (1) >> 0;
		}
		return m;
	};
	$pkg.CIDRMask = CIDRMask;
	IP.prototype.IsUnspecified = function() {
		var $ptr, ip;
		ip = this;
		if (ip.Equal($pkg.IPv4zero) || ip.Equal($pkg.IPv6unspecified)) {
			return true;
		}
		return false;
	};
	$ptrType(IP).prototype.IsUnspecified = function() { return this.$get().IsUnspecified(); };
	IP.prototype.IsLoopback = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && ((0 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) === 127)) {
			return true;
		}
		return ip.Equal($pkg.IPv6loopback);
	};
	$ptrType(IP).prototype.IsLoopback = function() { return this.$get().IsLoopback(); };
	IP.prototype.IsMulticast = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && ((((0 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) & 240) >>> 0) === 224)) {
			return true;
		}
		return (0 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 255;
	};
	$ptrType(IP).prototype.IsMulticast = function() { return this.$get().IsMulticast(); };
	IP.prototype.IsInterfaceLocalMulticast = function() {
		var $ptr, ip;
		ip = this;
		return (ip.$length === 16) && ((0 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 1);
	};
	$ptrType(IP).prototype.IsInterfaceLocalMulticast = function() { return this.$get().IsInterfaceLocalMulticast(); };
	IP.prototype.IsLinkLocalMulticast = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && ((0 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) === 224) && ((1 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 1]) === 0) && ((2 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 2]) === 0)) {
			return true;
		}
		return ((0 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 2);
	};
	$ptrType(IP).prototype.IsLinkLocalMulticast = function() { return this.$get().IsLinkLocalMulticast(); };
	IP.prototype.IsLinkLocalUnicast = function() {
		var $ptr, ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && ((0 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) === 169) && ((1 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 1]) === 254)) {
			return true;
		}
		return ((0 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 254) && ((((1 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]) & 192) >>> 0) === 128);
	};
	$ptrType(IP).prototype.IsLinkLocalUnicast = function() { return this.$get().IsLinkLocalUnicast(); };
	IP.prototype.IsGlobalUnicast = function() {
		var $ptr, ip;
		ip = this;
		return !ip.IsUnspecified() && !ip.IsLoopback() && !ip.IsMulticast() && !ip.IsLinkLocalUnicast();
	};
	$ptrType(IP).prototype.IsGlobalUnicast = function() { return this.$get().IsGlobalUnicast(); };
	isZeros = function(p) {
		var $ptr, i, p;
		i = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			if (!((((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) === 0))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	IP.prototype.To4 = function() {
		var $ptr, ip;
		ip = this;
		if (ip.$length === 4) {
			return ip;
		}
		if ((ip.$length === 16) && isZeros($subslice(ip, 0, 10)) && ((10 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 10]) === 255) && ((11 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 11]) === 255)) {
			return $subslice(ip, 12, 16);
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To4 = function() { return this.$get().To4(); };
	IP.prototype.To16 = function() {
		var $ptr, ip;
		ip = this;
		if (ip.$length === 4) {
			return IPv4((0 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]), (1 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]), (2 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 2]), (3 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 3]));
		}
		if (ip.$length === 16) {
			return ip;
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To16 = function() { return this.$get().To16(); };
	IP.prototype.DefaultMask = function() {
		var $ptr, ip;
		ip = this;
		ip = ip.To4();
		if (ip === IP.nil) {
			return IPMask.nil;
		}
		if ((0 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) < 128) {
			return classAMask;
		} else if ((0 >= ip.$length ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) < 192) {
			return classBMask;
		} else {
			return classCMask;
		}
	};
	$ptrType(IP).prototype.DefaultMask = function() { return this.$get().DefaultMask(); };
	allFF = function(b) {
		var $ptr, _i, _ref, b, c;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === 255))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	IP.prototype.Mask = function(mask) {
		var $ptr, i, ip, mask, n, out, x, x$1;
		ip = this;
		if ((mask.$length === 16) && (ip.$length === 4) && allFF((x = $subslice(mask, 0, 12), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length)))) {
			mask = $subslice(mask, 12);
		}
		if ((mask.$length === 4) && (ip.$length === 16) && bytesEqual((x$1 = $subslice(ip, 0, 12), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix)) {
			ip = $subslice(ip, 12);
		}
		n = ip.$length;
		if (!((n === mask.$length))) {
			return IP.nil;
		}
		out = $makeSlice(IP, n);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = (((i < 0 || i >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + i]) & ((i < 0 || i >= mask.$length) ? $throwRuntimeError("index out of range") : mask.$array[mask.$offset + i])) >>> 0);
			i = i + (1) >> 0;
		}
		return out;
	};
	$ptrType(IP).prototype.Mask = function(mask) { return this.$get().Mask(mask); };
	IP.prototype.String = function() {
		var $ptr, b, e0, e1, i, i$1, ip, j, p, p4, x, x$1;
		ip = this;
		p = ip;
		if (ip.$length === 0) {
			return "<nil>";
		}
		p4 = p.To4();
		if (p4.$length === 4) {
			return itod(((0 >= p4.$length ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 0]) >>> 0)) + "." + itod(((1 >= p4.$length ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 1]) >>> 0)) + "." + itod(((2 >= p4.$length ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 2]) >>> 0)) + "." + itod(((3 >= p4.$length ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 3]) >>> 0));
		}
		if (!((p.$length === 16))) {
			return "?";
		}
		e0 = -1;
		e1 = -1;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			j = i;
			while (true) {
				if (!(j < 16 && (((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) === 0) && ((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) === 0))) { break; }
				j = j + (2) >> 0;
			}
			if (j > i && (j - i >> 0) > (e1 - e0 >> 0)) {
				e0 = i;
				e1 = j;
				i = j;
			}
			i = i + (2) >> 0;
		}
		if ((e1 - e0 >> 0) <= 2) {
			e0 = -1;
			e1 = -1;
		}
		b = $makeSlice(sliceType$1, 0, 39);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 16)) { break; }
			if (i$1 === e0) {
				b = $append(b, 58, 58);
				i$1 = e1;
				if (i$1 >= 16) {
					break;
				}
			} else if (i$1 > 0) {
				b = $append(b, 58);
			}
			b = appendHex(b, ((((((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i$1]) >>> 0) << 8 >>> 0)) | ((x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0)) >>> 0);
			i$1 = i$1 + (2) >> 0;
		}
		return $bytesToString(b);
	};
	$ptrType(IP).prototype.String = function() { return this.$get().String(); };
	IP.prototype.MarshalText = function() {
		var $ptr, ip;
		ip = this;
		if (ip.$length === 0) {
			return [new sliceType$1($stringToBytes("")), $ifaceNil];
		}
		if (!((ip.$length === 4)) && !((ip.$length === 16))) {
			return [sliceType$1.nil, errors.New("invalid IP address")];
		}
		return [new sliceType$1($stringToBytes(ip.String())), $ifaceNil];
	};
	$ptrType(IP).prototype.MarshalText = function() { return this.$get().MarshalText(); };
	$ptrType(IP).prototype.UnmarshalText = function(text) {
		var $ptr, ip, s, text, x;
		ip = this;
		if (text.$length === 0) {
			ip.$set(IP.nil);
			return $ifaceNil;
		}
		s = $bytesToString(text);
		x = ParseIP(s);
		if (x === IP.nil) {
			return new ParseError.ptr("IP address", s);
		}
		ip.$set(x);
		return $ifaceNil;
	};
	IP.prototype.Equal = function(x) {
		var $ptr, ip, x, x$1, x$2, x$3, x$4;
		ip = this;
		if (ip.$length === x.$length) {
			return bytesEqual($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));
		}
		if ((ip.$length === 4) && (x.$length === 16)) {
			return bytesEqual((x$1 = $subslice(x, 0, 12), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix) && bytesEqual($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length), (x$2 = $subslice(x, 12), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)));
		}
		if ((ip.$length === 16) && (x.$length === 4)) {
			return bytesEqual((x$3 = $subslice(ip, 0, 12), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), v4InV6Prefix) && bytesEqual((x$4 = $subslice(ip, 12), $subslice(new sliceType$1(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));
		}
		return false;
	};
	$ptrType(IP).prototype.Equal = function(x) { return this.$get().Equal(x); };
	bytesEqual = function(x, y) {
		var $ptr, _i, _ref, b, i, x, y;
		if (!((x.$length === y.$length))) {
			return false;
		}
		_ref = x;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]) === b))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleMaskLength = function(mask) {
		var $ptr, _i, _ref, i, mask, n, v, y;
		n = 0;
		_ref = mask;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v === 255) {
				n = n + (8) >> 0;
				_i++;
				continue;
			}
			while (true) {
				if (!(!((((v & 128) >>> 0) === 0)))) { break; }
				n = n + (1) >> 0;
				v = (y = (1), y < 32 ? (v << y) : 0) << 24 >>> 24;
			}
			if (!((v === 0))) {
				return -1;
			}
			i = i + (1) >> 0;
			while (true) {
				if (!(i < mask.$length)) { break; }
				if (!((((i < 0 || i >= mask.$length) ? $throwRuntimeError("index out of range") : mask.$array[mask.$offset + i]) === 0))) {
					return -1;
				}
				i = i + (1) >> 0;
			}
			break;
		}
		return n;
	};
	IPMask.prototype.Size = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, bits, m, ones;
		ones = 0;
		bits = 0;
		m = this;
		_tmp = simpleMaskLength(m); _tmp$1 = m.$length * 8 >> 0; ones = _tmp; bits = _tmp$1;
		if (ones === -1) {
			_tmp$2 = 0; _tmp$3 = 0; ones = _tmp$2; bits = _tmp$3;
			return [ones, bits];
		}
		return [ones, bits];
	};
	$ptrType(IPMask).prototype.Size = function() { return this.$get().Size(); };
	IPMask.prototype.String = function() {
		var $ptr, _i, _ref, _tmp, _tmp$1, b, buf, i, m, x, x$1;
		m = this;
		if (m.$length === 0) {
			return "<nil>";
		}
		buf = $makeSlice(sliceType$1, (m.$length * 2 >> 0));
		_ref = m;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tmp = "0123456789abcdef".charCodeAt((b >>> 4 << 24 >>> 24)); _tmp$1 = "0123456789abcdef".charCodeAt(((b & 15) >>> 0)); (x = i * 2 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x] = _tmp)); (x$1 = (i * 2 >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x$1] = _tmp$1));
			_i++;
		}
		return $bytesToString(buf);
	};
	$ptrType(IPMask).prototype.String = function() { return this.$get().String(); };
	parseIPv4 = function(s) {
		var $ptr, _tuple, i, j, n, ok, p, s;
		p = $clone(arrayType$1.zero(), arrayType$1);
		i = 0;
		j = 0;
		while (true) {
			if (!(j < 4)) { break; }
			if (i >= s.length) {
				return IP.nil;
			}
			if (j > 0) {
				if (!((s.charCodeAt(i) === 46))) {
					return IP.nil;
				}
				i = i + (1) >> 0;
			}
			n = 0;
			ok = false;
			_tuple = dtoi(s, i); n = _tuple[0]; i = _tuple[1]; ok = _tuple[2];
			if (!ok || n > 255) {
				return IP.nil;
			}
			((j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p[j] = (n << 24 >>> 24));
			j = j + (1) >> 0;
		}
		if (!((i === s.length))) {
			return IP.nil;
		}
		return IPv4(p[0], p[1], p[2], p[3]);
	};
	parseIPv6 = function(s, zoneAllowed) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, ellipsis, i, i1, ip, ip4, j, k, k$1, n, n$1, ok, s, x, x$1, x$2, x$3, x$4, zone, zoneAllowed;
		ip = IP.nil;
		zone = "";
		ip = $makeSlice(IP, 16);
		ellipsis = -1;
		i = 0;
		if (zoneAllowed) {
			_tuple = splitHostZone(s); s = _tuple[0]; zone = _tuple[1];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 58) && (s.charCodeAt(1) === 58)) {
			ellipsis = 0;
			i = 2;
			if (i === s.length) {
				_tmp = ip; _tmp$1 = zone; ip = _tmp; zone = _tmp$1;
				return [ip, zone];
			}
		}
		j = 0;
		while (true) {
			if (!(j < 16)) { break; }
			_tuple$1 = xtoi(s, i); n = _tuple$1[0]; i1 = _tuple$1[1]; ok = _tuple$1[2];
			if (!ok || n > 65535) {
				_tmp$2 = IP.nil; _tmp$3 = zone; ip = _tmp$2; zone = _tmp$3;
				return [ip, zone];
			}
			if (i1 < s.length && (s.charCodeAt(i1) === 46)) {
				if (ellipsis < 0 && !((j === 12))) {
					_tmp$4 = IP.nil; _tmp$5 = zone; ip = _tmp$4; zone = _tmp$5;
					return [ip, zone];
				}
				if ((j + 4 >> 0) > 16) {
					_tmp$6 = IP.nil; _tmp$7 = zone; ip = _tmp$6; zone = _tmp$7;
					return [ip, zone];
				}
				ip4 = parseIPv4(s.substring(i));
				if (ip4 === IP.nil) {
					_tmp$8 = IP.nil; _tmp$9 = zone; ip = _tmp$8; zone = _tmp$9;
					return [ip, zone];
				}
				((j < 0 || j >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + j] = (12 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 12]));
				(x = j + 1 >> 0, ((x < 0 || x >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x] = (13 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 13])));
				(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$1] = (14 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 14])));
				(x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$2] = (15 >= ip4.$length ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 15])));
				i = s.length;
				j = j + (4) >> 0;
				break;
			}
			((j < 0 || j >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + j] = ((n >> 8 >> 0) << 24 >>> 24));
			(x$3 = j + 1 >> 0, ((x$3 < 0 || x$3 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$3] = (n << 24 >>> 24)));
			j = j + (2) >> 0;
			i = i1;
			if (i === s.length) {
				break;
			}
			if (!((s.charCodeAt(i) === 58)) || ((i + 1 >> 0) === s.length)) {
				_tmp$10 = IP.nil; _tmp$11 = zone; ip = _tmp$10; zone = _tmp$11;
				return [ip, zone];
			}
			i = i + (1) >> 0;
			if (s.charCodeAt(i) === 58) {
				if (ellipsis >= 0) {
					_tmp$12 = IP.nil; _tmp$13 = zone; ip = _tmp$12; zone = _tmp$13;
					return [ip, zone];
				}
				ellipsis = j;
				i = i + (1) >> 0;
				if (i === s.length) {
					break;
				}
			}
		}
		if (!((i === s.length))) {
			_tmp$14 = IP.nil; _tmp$15 = zone; ip = _tmp$14; zone = _tmp$15;
			return [ip, zone];
		}
		if (j < 16) {
			if (ellipsis < 0) {
				_tmp$16 = IP.nil; _tmp$17 = zone; ip = _tmp$16; zone = _tmp$17;
				return [ip, zone];
			}
			n$1 = 16 - j >> 0;
			k = j - 1 >> 0;
			while (true) {
				if (!(k >= ellipsis)) { break; }
				(x$4 = k + n$1 >> 0, ((x$4 < 0 || x$4 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$4] = ((k < 0 || k >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + k])));
				k = k - (1) >> 0;
			}
			k$1 = (ellipsis + n$1 >> 0) - 1 >> 0;
			while (true) {
				if (!(k$1 >= ellipsis)) { break; }
				((k$1 < 0 || k$1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + k$1] = 0);
				k$1 = k$1 - (1) >> 0;
			}
		} else if (ellipsis >= 0) {
			_tmp$18 = IP.nil; _tmp$19 = zone; ip = _tmp$18; zone = _tmp$19;
			return [ip, zone];
		}
		_tmp$20 = ip; _tmp$21 = zone; ip = _tmp$20; zone = _tmp$21;
		return [ip, zone];
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "invalid " + e.Type + ": " + e.Text;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	ParseIP = function(s) {
		var $ptr, _ref, _tuple, i, ip, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_ref = s.charCodeAt(i);
			if (_ref === 46) {
				return parseIPv4(s);
			} else if (_ref === 58) {
				_tuple = parseIPv6(s, false); ip = _tuple[0];
				return ip;
			}
			i = i + (1) >> 0;
		}
		return IP.nil;
	};
	$pkg.ParseIP = ParseIP;
	init = function() {
		var $ptr, _tuple;
		sysInit();
		supportsIPv4 = probeIPv4Stack();
		_tuple = probeIPv6Stack(); supportsIPv6 = _tuple[0]; supportsIPv4map = _tuple[1];
	};
	splitHostZone = function(s) {
		var $ptr, _tmp, _tmp$1, host, i, s, zone;
		host = "";
		zone = "";
		i = last(s, 37);
		if (i > 0) {
			_tmp = s.substring(0, i); _tmp$1 = s.substring((i + 1 >> 0)); host = _tmp; zone = _tmp$1;
		} else {
			host = s;
		}
		return [host, zone];
	};
	LookupPort = function(network, service) {
		var $ptr, _r, _tuple, err, network, port, service, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; network = $f.network; port = $f.port; service = $f.service; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		port = 0;
		err = $ifaceNil;
		_r = lookupPort(network, service); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; port = _tuple[0]; err = _tuple[1];
		return [port, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: LookupPort }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.network = network; $f.port = port; $f.service = service; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.LookupPort = LookupPort;
	lookupPort = function(network, service) {
		var $ptr, _r, _tuple, _tuple$1, err, network, ok, port, service, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; network = $f.network; ok = $f.ok; port = $f.port; service = $f.service; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		port = 0;
		err = $ifaceNil;
		_tuple = cgoLookupPort(network, service); port = _tuple[0]; err = _tuple[1]; ok = _tuple[2];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = goLookupPort(network, service); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; port = _tuple$1[0]; err = _tuple$1[1];
		/* } */ case 2:
		return [port, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lookupPort }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.network = network; $f.ok = ok; $f.port = port; $f.service = service; $f.$s = $s; $f.$r = $r; return $f;
	};
	AddrError.ptr.prototype.Error = function() {
		var $ptr, e, s;
		e = this;
		if (e === ptrType$47.nil) {
			return "<nil>";
		}
		s = e.Err;
		if (!(e.Addr === "")) {
			s = s + (" " + e.Addr);
		}
		return s;
	};
	AddrError.prototype.Error = function() { return this.$val.Error(); };
	AddrError.ptr.prototype.Temporary = function() {
		var $ptr, e;
		e = this;
		return false;
	};
	AddrError.prototype.Temporary = function() { return this.$val.Temporary(); };
	AddrError.ptr.prototype.Timeout = function() {
		var $ptr, e;
		e = this;
		return false;
	};
	AddrError.prototype.Timeout = function() { return this.$val.Timeout(); };
	file.ptr.prototype.close = function() {
		var $ptr, f;
		f = this;
		f.file.Close();
	};
	file.prototype.close = function() { return this.$val.close(); };
	file.ptr.prototype.getLineFromData = function() {
		var $ptr, data, f, i, n, ok, s;
		s = "";
		ok = false;
		f = this;
		data = f.data;
		i = 0;
		i = 0;
		while (true) {
			if (!(i < data.$length)) { break; }
			if (((i < 0 || i >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + i]) === 10) {
				s = $bytesToString($subslice(data, 0, i));
				ok = true;
				i = i + (1) >> 0;
				n = data.$length - i >> 0;
				$copySlice($subslice(data, 0), $subslice(data, i));
				f.data = $subslice(data, 0, n);
				return [s, ok];
			}
			i = i + (1) >> 0;
		}
		if (f.atEOF && f.data.$length > 0) {
			s = $bytesToString(data);
			f.data = $subslice(f.data, 0, 0);
			ok = true;
		}
		return [s, ok];
	};
	file.prototype.getLineFromData = function() { return this.$val.getLineFromData(); };
	file.ptr.prototype.readLine = function() {
		var $ptr, _r, _tuple, _tuple$1, _tuple$2, err, f, ln, n, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; f = $f.f; ln = $f.ln; n = $f.n; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = "";
		ok = false;
		f = this;
		_tuple = f.getLineFromData(); s = _tuple[0]; ok = _tuple[1];
		if (ok) {
			return [s, ok];
		}
		/* */ if (f.data.$length < f.data.$capacity) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.data.$length < f.data.$capacity) { */ case 1:
			ln = f.data.$length;
			_r = io.ReadFull(f.file, $subslice(f.data, ln, f.data.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; n = _tuple$1[0]; err = _tuple$1[1];
			if (n >= 0) {
				f.data = $subslice(f.data, 0, (ln + n >> 0));
			}
			if ($interfaceIsEqual(err, io.EOF) || $interfaceIsEqual(err, io.ErrUnexpectedEOF)) {
				f.atEOF = true;
			}
		/* } */ case 2:
		_tuple$2 = f.getLineFromData(); s = _tuple$2[0]; ok = _tuple$2[1];
		return [s, ok];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: file.ptr.prototype.readLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.f = f; $f.ln = ln; $f.n = n; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	file.prototype.readLine = function() { return this.$val.readLine(); };
	open = function(name) {
		var $ptr, _tuple, err, fd, name;
		_tuple = os.Open(name); fd = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$29.nil, err];
		}
		return [new file.ptr(fd, $makeSlice(sliceType$1, 0, os.Getpagesize()), false), $ifaceNil];
	};
	byteIndex = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	countAnyByte = function(s, t) {
		var $ptr, i, n, s, t;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (byteIndex(t, s.charCodeAt(i)) >= 0) {
				n = n + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return n;
	};
	splitAtBytes = function(s, t) {
		var $ptr, a, i, last$1, n, s, t;
		a = $makeSlice(sliceType, (1 + countAnyByte(s, t) >> 0));
		n = 0;
		last$1 = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (byteIndex(t, s.charCodeAt(i)) >= 0) {
				if (last$1 < i) {
					((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = s.substring(last$1, i));
					n = n + (1) >> 0;
				}
				last$1 = i + 1 >> 0;
			}
			i = i + (1) >> 0;
		}
		if (last$1 < s.length) {
			((n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = s.substring(last$1));
			n = n + (1) >> 0;
		}
		return $subslice(a, 0, n);
	};
	getFields = function(s) {
		var $ptr, s;
		return splitAtBytes(s, " \r\t\n");
	};
	dtoi = function(s, i0) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, i0, n, ok, s;
		n = 0;
		i = 0;
		ok = false;
		n = 0;
		i = i0;
		while (true) {
			if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
			n = (n * 10 >> 0) + ((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0) >> 0;
			if (n >= 16777215) {
				_tmp = 0; _tmp$1 = i; _tmp$2 = false; n = _tmp; i = _tmp$1; ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === i0) {
			_tmp$3 = 0; _tmp$4 = i; _tmp$5 = false; n = _tmp$3; i = _tmp$4; ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n; _tmp$7 = i; _tmp$8 = true; n = _tmp$6; i = _tmp$7; ok = _tmp$8;
		return [n, i, ok];
	};
	xtoi = function(s, i0) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, i0, n, ok, s;
		n = 0;
		i = 0;
		ok = false;
		n = 0;
		i = i0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				n = n * (16) >> 0;
				n = n + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;
			} else if (97 <= s.charCodeAt(i) && s.charCodeAt(i) <= 102) {
				n = n * (16) >> 0;
				n = n + ((((s.charCodeAt(i) - 97 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;
			} else if (65 <= s.charCodeAt(i) && s.charCodeAt(i) <= 70) {
				n = n * (16) >> 0;
				n = n + ((((s.charCodeAt(i) - 65 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;
			} else {
				break;
			}
			if (n >= 16777215) {
				_tmp = 0; _tmp$1 = i; _tmp$2 = false; n = _tmp; i = _tmp$1; ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === i0) {
			_tmp$3 = 0; _tmp$4 = i; _tmp$5 = false; n = _tmp$3; i = _tmp$4; ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n; _tmp$7 = i; _tmp$8 = true; n = _tmp$6; i = _tmp$7; ok = _tmp$8;
		return [n, i, ok];
	};
	itod = function(i) {
		var $ptr, _q, _r, b, bp, i;
		if (i === 0) {
			return "0";
		}
		b = $clone(arrayType$3.zero(), arrayType$3);
		bp = 32;
		while (true) {
			if (!(i > 0)) { break; }
			bp = bp - (1) >> 0;
			((bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = ((_r = i % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
			i = (_q = i / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $bytesToString($subslice(new sliceType$1(b), bp));
	};
	appendHex = function(dst, i) {
		var $ptr, dst, i, j, v, y;
		if (i === 0) {
			return $append(dst, 48);
		}
		j = 7;
		while (true) {
			if (!(j >= 0)) { break; }
			v = (y = ((j * 4 >> 0) >>> 0), y < 32 ? (i >>> y) : 0) >>> 0;
			if (v > 0) {
				dst = $append(dst, "0123456789abcdef".charCodeAt(((v & 15) >>> 0)));
			}
			j = j - (1) >> 0;
		}
		return dst;
	};
	last = function(s, b) {
		var $ptr, b, i, s;
		i = s.length;
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === b) {
				break;
			}
			i = i - (1) >> 0;
		}
		return i;
	};
	readServices = function() {
		var $ptr, _entry, _key$4, _key$5, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, f, file$1, i, i$1, j, line, m, netw, ok, ok$1, ok1, port, portnet, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key$4 = $f._key$4; _key$5 = $f._key$5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; f = $f.f; file$1 = $f.file$1; i = $f.i; i$1 = $f.i$1; j = $f.j; line = $f.line; m = $f.m; netw = $f.netw; ok = $f.ok; ok$1 = $f.ok$1; ok1 = $f.ok1; port = $f.port; portnet = $f.portnet; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file$1 = ptrType$29.nil;
		_tuple = open("/etc/services"); file$1 = _tuple[0]; servicesError = _tuple[1];
		if (!($interfaceIsEqual(servicesError, $ifaceNil))) {
			return;
		}
		_r = file$1.readLine(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; line = _tuple$1[0]; ok = _tuple$1[1];
		/* while (true) { */ case 2:
			/* if (!(ok)) { break; } */ if(!(ok)) { $s = 3; continue; }
			i = byteIndex(line, 35);
			if (i >= 0) {
				line = line.substring(0, i);
			}
			f = getFields(line);
			/* */ if (f.$length < 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (f.$length < 2) { */ case 4:
				_r$1 = file$1.readLine(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1; line = _tuple$2[0]; ok = _tuple$2[1];
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			portnet = (1 >= f.$length ? $throwRuntimeError("index out of range") : f.$array[f.$offset + 1]);
			_tuple$3 = dtoi(portnet, 0); port = _tuple$3[0]; j = _tuple$3[1]; ok$1 = _tuple$3[2];
			/* */ if (!ok$1 || port <= 0 || j >= portnet.length || !((portnet.charCodeAt(j) === 47))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok$1 || port <= 0 || j >= portnet.length || !((portnet.charCodeAt(j) === 47))) { */ case 7:
				_r$2 = file$1.readLine(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$4 = _r$2; line = _tuple$4[0]; ok = _tuple$4[1];
				/* continue; */ $s = 2; continue;
			/* } */ case 8:
			netw = portnet.substring((j + 1 >> 0));
			_tuple$5 = (_entry = services[$String.keyFor(netw)], _entry !== undefined ? [_entry.v, true] : [false, false]); m = _tuple$5[0]; ok1 = _tuple$5[1];
			if (!ok1) {
				m = new $Map();
				_key$4 = netw; (services || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: m };
			}
			i$1 = 0;
			while (true) {
				if (!(i$1 < f.$length)) { break; }
				if (!((i$1 === 1))) {
					_key$5 = ((i$1 < 0 || i$1 >= f.$length) ? $throwRuntimeError("index out of range") : f.$array[f.$offset + i$1]); (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: port };
				}
				i$1 = i$1 + (1) >> 0;
			}
			_r$3 = file$1.readLine(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$6 = _r$3; line = _tuple$6[0]; ok = _tuple$6[1];
		/* } */ $s = 2; continue; case 3:
		file$1.close();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: readServices }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.f = f; $f.file$1 = file$1; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.line = line; $f.m = m; $f.netw = netw; $f.ok = ok; $f.ok$1 = ok$1; $f.ok1 = ok1; $f.port = port; $f.portnet = portnet; $f.$s = $s; $f.$r = $r; return $f;
	};
	goLookupPort = function(network, service) {
		var $ptr, _entry, _entry$1, _ref, _tmp, _tmp$1, _tuple, _tuple$1, err, m, network, ok, port, service, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; m = $f.m; network = $f.network; ok = $f.ok; port = $f.port; service = $f.service; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		port = 0;
		err = $ifaceNil;
		$r = onceReadServices.Do(readServices); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = network;
		if (_ref === "tcp4" || _ref === "tcp6") {
			network = "tcp";
		} else if (_ref === "udp4" || _ref === "udp6") {
			network = "udp";
		}
		_tuple = (_entry = services[$String.keyFor(network)], _entry !== undefined ? [_entry.v, true] : [false, false]); m = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tuple$1 = (_entry$1 = m[$String.keyFor(service)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]); port = _tuple$1[0]; ok = _tuple$1[1];
			if (ok) {
				return [port, err];
			}
		}
		_tmp = 0; _tmp$1 = new AddrError.ptr("unknown port", network + "/" + service); port = _tmp; err = _tmp$1;
		return [port, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: goLookupPort }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.m = m; $f.network = network; $f.ok = ok; $f.port = port; $f.service = service; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$7.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$8.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$55.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$56.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$57.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$58.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$59.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$41.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$42.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$44.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$60.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$43.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$40.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$12.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	ptrType$13.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "Walk", name: "Walk", pkg: "", typ: $funcType([funcType$1], [$Bool], false)}];
	IP.methods = [{prop: "IsUnspecified", name: "IsUnspecified", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLoopback", name: "IsLoopback", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsMulticast", name: "IsMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInterfaceLocalMulticast", name: "IsInterfaceLocalMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLinkLocalMulticast", name: "IsLinkLocalMulticast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsLinkLocalUnicast", name: "IsLinkLocalUnicast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsGlobalUnicast", name: "IsGlobalUnicast", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "To4", name: "To4", pkg: "", typ: $funcType([], [IP], false)}, {prop: "To16", name: "To16", pkg: "", typ: $funcType([], [IP], false)}, {prop: "DefaultMask", name: "DefaultMask", pkg: "", typ: $funcType([], [IPMask], false)}, {prop: "Mask", name: "Mask", pkg: "", typ: $funcType([IPMask], [IP], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([IP], [$Bool], false)}];
	ptrType$64.methods = [{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}];
	IPMask.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$65.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$47.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$29.methods = [{prop: "close", name: "close", pkg: "net", typ: $funcType([], [], false)}, {prop: "getLineFromData", name: "getLineFromData", pkg: "net", typ: $funcType([], [$String, $Bool], false)}, {prop: "readLine", name: "readLine", pkg: "net", typ: $funcType([], [$String, $Bool], false)}];
	dnsRR_Header.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: "net:\"domain-name\""}, {prop: "Rrtype", name: "Rrtype", pkg: "", typ: $Uint16, tag: ""}, {prop: "Class", name: "Class", pkg: "", typ: $Uint16, tag: ""}, {prop: "Ttl", name: "Ttl", pkg: "", typ: $Uint32, tag: ""}, {prop: "Rdlength", name: "Rdlength", pkg: "", typ: $Uint16, tag: ""}]);
	dnsRR_CNAME.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Cname", name: "Cname", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_HINFO.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Cpu", name: "Cpu", pkg: "", typ: $String, tag: ""}, {prop: "Os", name: "Os", pkg: "", typ: $String, tag: ""}]);
	dnsRR_MB.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Mb", name: "Mb", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_MG.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Mg", name: "Mg", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_MINFO.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Rmail", name: "Rmail", pkg: "", typ: $String, tag: "net:\"domain-name\""}, {prop: "Email", name: "Email", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_MR.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Mr", name: "Mr", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_MX.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Pref", name: "Pref", pkg: "", typ: $Uint16, tag: ""}, {prop: "Mx", name: "Mx", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_NS.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Ns", name: "Ns", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_PTR.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Ptr", name: "Ptr", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_SOA.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Ns", name: "Ns", pkg: "", typ: $String, tag: "net:\"domain-name\""}, {prop: "Mbox", name: "Mbox", pkg: "", typ: $String, tag: "net:\"domain-name\""}, {prop: "Serial", name: "Serial", pkg: "", typ: $Uint32, tag: ""}, {prop: "Refresh", name: "Refresh", pkg: "", typ: $Uint32, tag: ""}, {prop: "Retry", name: "Retry", pkg: "", typ: $Uint32, tag: ""}, {prop: "Expire", name: "Expire", pkg: "", typ: $Uint32, tag: ""}, {prop: "Minttl", name: "Minttl", pkg: "", typ: $Uint32, tag: ""}]);
	dnsRR_TXT.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Txt", name: "Txt", pkg: "", typ: $String, tag: ""}]);
	dnsRR_SRV.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "Priority", name: "Priority", pkg: "", typ: $Uint16, tag: ""}, {prop: "Weight", name: "Weight", pkg: "", typ: $Uint16, tag: ""}, {prop: "Port", name: "Port", pkg: "", typ: $Uint16, tag: ""}, {prop: "Target", name: "Target", pkg: "", typ: $String, tag: "net:\"domain-name\""}]);
	dnsRR_A.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "A", name: "A", pkg: "", typ: $Uint32, tag: "net:\"ipv4\""}]);
	dnsRR_AAAA.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: dnsRR_Header, tag: ""}, {prop: "AAAA", name: "AAAA", pkg: "", typ: arrayType, tag: "net:\"ipv6\""}]);
	IP.init($Uint8);
	IPMask.init($Uint8);
	ParseError.init([{prop: "Type", name: "Type", pkg: "", typ: $String, tag: ""}, {prop: "Text", name: "Text", pkg: "", typ: $String, tag: ""}]);
	Addr.init([{prop: "Network", name: "Network", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	AddrError.init([{prop: "Err", name: "Err", pkg: "", typ: $String, tag: ""}, {prop: "Addr", name: "Addr", pkg: "", typ: $String, tag: ""}]);
	file.init([{prop: "file", name: "file", pkg: "net", typ: ptrType$25, tag: ""}, {prop: "data", name: "data", pkg: "net", typ: sliceType$1, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "net", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		supportsIPv4 = false;
		supportsIPv6 = false;
		supportsIPv4map = false;
		servicesError = $ifaceNil;
		onceReadServices = new sync.Once.ptr();
		rr_mk = (_map = new $Map(), _key = 5, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_CNAME.ptr();
		}) }, _key = 13, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_HINFO.ptr();
		}) }, _key = 7, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_MB.ptr();
		}) }, _key = 8, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_MG.ptr();
		}) }, _key = 14, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_MINFO.ptr();
		}) }, _key = 9, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_MR.ptr();
		}) }, _key = 15, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_MX.ptr();
		}) }, _key = 2, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_NS.ptr();
		}) }, _key = 12, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_PTR.ptr();
		}) }, _key = 6, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_SOA.ptr();
		}) }, _key = 16, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_TXT.ptr();
		}) }, _key = 33, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_SRV.ptr();
		}) }, _key = 1, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_A.ptr();
		}) }, _key = 28, _map[$Int.keyFor(_key)] = { k: _key, v: (function() {
			var $ptr;
			return new dnsRR_AAAA.ptr();
		}) }, _map);
		errInvalidInterface = errors.New("invalid network interface");
		errInvalidInterfaceIndex = errors.New("invalid network interface index");
		errInvalidInterfaceName = errors.New("invalid network interface name");
		errNoSuchInterface = errors.New("no such network interface");
		errNoSuchMulticastInterface = errors.New("no such multicast network interface");
		v4InV6Prefix = new sliceType$1([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255]);
		$pkg.IPv4bcast = IPv4(255, 255, 255, 255);
		$pkg.IPv4allsys = IPv4(224, 0, 0, 1);
		$pkg.IPv4allrouter = IPv4(224, 0, 0, 2);
		$pkg.IPv4zero = IPv4(0, 0, 0, 0);
		$pkg.IPv6unspecified = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
		$pkg.IPv6loopback = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);
		classAMask = IPv4Mask(255, 0, 0, 0);
		classBMask = IPv4Mask(255, 255, 0, 0);
		classCMask = IPv4Mask(255, 255, 255, 0);
		errNoSuitableAddress = errors.New("no suitable address found");
		listenerBacklog = maxListenerBacklog();
		errMissingAddress = errors.New("missing address");
		errClosing = errors.New("use of closed network connection");
		$pkg.ErrWriteToConnected = errors.New("use of WriteTo with pre-connected connection");
		threadLimit = new chanType(500);
		services = (_map$2 = new $Map(), _key$2 = "tcp", _map$2[$String.keyFor(_key$2)] = { k: _key$2, v: (_map$3 = new $Map(), _key$3 = "http", _map$3[$String.keyFor(_key$3)] = { k: _key$3, v: 80 }, _map$3) }, _map$2);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, bytes, errors, os, runtime, sort, strings, utf8;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os/exec"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, os, filepath, runtime, strconv, strings, sync, syscall;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	syscall = $packages["syscall"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrNotFound = errors.New("executable file not found in $PATH");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/x509"] = (function() {
	var $pkg = {}, $init, bytes, crypto, aes, cipher, des, dsa, ecdsa, elliptic, md5, rsa, sha1, sha256, sha512, pkix, asn1, hex, pem, errors, fmt, io, big, net, os, exec, runtime, strconv, strings, sync, time, utf8, CertPool, rsaPublicKey, InvalidReason, CertificateInvalidError, HostnameError, UnknownAuthorityError, SystemRootsError, VerifyOptions, certificate, tbsCertificate, dsaAlgorithmParameters, dsaSignature, ecdsaSignature, validity, publicKeyInfo, authKeyId, SignatureAlgorithm, PublicKeyAlgorithm, KeyUsage, ExtKeyUsage, Certificate, ConstraintViolationError, UnhandledCriticalExtension, basicConstraints, policyInformation, nameConstraints, generalSubtree, authorityInfoAccess, distributionPoint, distributionPointName, ptrType, structType, sliceType$1, structType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$1, sliceType$5, ptrType$2, sliceType$6, ptrType$4, ptrType$5, ptrType$6, sliceType$9, sliceType$10, sliceType$11, ptrType$8, ptrType$9, ptrType$10, ptrType$11, sliceType$12, sliceType$13, ptrType$12, sliceType$14, ptrType$13, sliceType$15, ptrType$14, ptrType$15, sliceType$16, ptrType$16, sliceType$17, ptrType$17, sliceType$20, sliceType$21, ptrType$19, sliceType$22, mapType, ptrType$21, mapType$1, once, systemRoots, oidSignatureMD2WithRSA, oidSignatureMD5WithRSA, oidSignatureSHA1WithRSA, oidSignatureSHA256WithRSA, oidSignatureSHA384WithRSA, oidSignatureSHA512WithRSA, oidSignatureDSAWithSHA1, oidSignatureDSAWithSHA256, oidSignatureECDSAWithSHA1, oidSignatureECDSAWithSHA256, oidSignatureECDSAWithSHA384, oidSignatureECDSAWithSHA512, signatureAlgorithmDetails, oidPublicKeyRSA, oidPublicKeyDSA, oidPublicKeyECDSA, oidNamedCurveP224, oidNamedCurveP256, oidNamedCurveP384, oidNamedCurveP521, oidExtKeyUsageAny, oidExtKeyUsageServerAuth, oidExtKeyUsageClientAuth, oidExtKeyUsageCodeSigning, oidExtKeyUsageEmailProtection, oidExtKeyUsageIPSECEndSystem, oidExtKeyUsageIPSECTunnel, oidExtKeyUsageIPSECUser, oidExtKeyUsageTimeStamping, oidExtKeyUsageOCSPSigning, oidExtKeyUsageMicrosoftServerGatedCrypto, oidExtKeyUsageNetscapeServerGatedCrypto, extKeyUsageOIDs, entrustBrokenSPKI, oidExtensionAuthorityInfoAccess, oidAuthorityInfoAccessOcsp, oidAuthorityInfoAccessIssuers, initSystemRoots, systemRootsPool, appendToFreshChain, matchHostnames, toLowerCaseASCII, checkChainForKeyUsage, getSignatureAlgorithmFromOID, getPublicKeyAlgorithmFromOID, namedCurveFromOID, extKeyUsageFromOID, parsePublicKey, parseSANExtension, parseCertificate, ParseCertificate;
	bytes = $packages["bytes"];
	crypto = $packages["crypto"];
	aes = $packages["crypto/aes"];
	cipher = $packages["crypto/cipher"];
	des = $packages["crypto/des"];
	dsa = $packages["crypto/dsa"];
	ecdsa = $packages["crypto/ecdsa"];
	elliptic = $packages["crypto/elliptic"];
	md5 = $packages["crypto/md5"];
	rsa = $packages["crypto/rsa"];
	sha1 = $packages["crypto/sha1"];
	sha256 = $packages["crypto/sha256"];
	sha512 = $packages["crypto/sha512"];
	pkix = $packages["crypto/x509/pkix"];
	asn1 = $packages["encoding/asn1"];
	hex = $packages["encoding/hex"];
	pem = $packages["encoding/pem"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	big = $packages["math/big"];
	net = $packages["net"];
	os = $packages["os"];
	exec = $packages["os/exec"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	time = $packages["time"];
	utf8 = $packages["unicode/utf8"];
	CertPool = $pkg.CertPool = $newType(0, $kindStruct, "x509.CertPool", "CertPool", "crypto/x509", function(bySubjectKeyId_, byName_, certs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bySubjectKeyId = false;
			this.byName = false;
			this.certs = sliceType$5.nil;
			return;
		}
		this.bySubjectKeyId = bySubjectKeyId_;
		this.byName = byName_;
		this.certs = certs_;
	});
	rsaPublicKey = $pkg.rsaPublicKey = $newType(0, $kindStruct, "x509.rsaPublicKey", "rsaPublicKey", "crypto/x509", function(N_, E_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.N = ptrType$5.nil;
			this.E = 0;
			return;
		}
		this.N = N_;
		this.E = E_;
	});
	InvalidReason = $pkg.InvalidReason = $newType(4, $kindInt, "x509.InvalidReason", "InvalidReason", "crypto/x509", null);
	CertificateInvalidError = $pkg.CertificateInvalidError = $newType(0, $kindStruct, "x509.CertificateInvalidError", "CertificateInvalidError", "crypto/x509", function(Cert_, Reason_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Cert = ptrType$1.nil;
			this.Reason = 0;
			return;
		}
		this.Cert = Cert_;
		this.Reason = Reason_;
	});
	HostnameError = $pkg.HostnameError = $newType(0, $kindStruct, "x509.HostnameError", "HostnameError", "crypto/x509", function(Certificate_, Host_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Certificate = ptrType$1.nil;
			this.Host = "";
			return;
		}
		this.Certificate = Certificate_;
		this.Host = Host_;
	});
	UnknownAuthorityError = $pkg.UnknownAuthorityError = $newType(0, $kindStruct, "x509.UnknownAuthorityError", "UnknownAuthorityError", "crypto/x509", function(cert_, hintErr_, hintCert_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cert = ptrType$1.nil;
			this.hintErr = $ifaceNil;
			this.hintCert = ptrType$1.nil;
			return;
		}
		this.cert = cert_;
		this.hintErr = hintErr_;
		this.hintCert = hintCert_;
	});
	SystemRootsError = $pkg.SystemRootsError = $newType(0, $kindStruct, "x509.SystemRootsError", "SystemRootsError", "crypto/x509", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	VerifyOptions = $pkg.VerifyOptions = $newType(0, $kindStruct, "x509.VerifyOptions", "VerifyOptions", "crypto/x509", function(DNSName_, Intermediates_, Roots_, CurrentTime_, KeyUsages_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DNSName = "";
			this.Intermediates = ptrType.nil;
			this.Roots = ptrType.nil;
			this.CurrentTime = new time.Time.ptr();
			this.KeyUsages = sliceType$11.nil;
			return;
		}
		this.DNSName = DNSName_;
		this.Intermediates = Intermediates_;
		this.Roots = Roots_;
		this.CurrentTime = CurrentTime_;
		this.KeyUsages = KeyUsages_;
	});
	certificate = $pkg.certificate = $newType(0, $kindStruct, "x509.certificate", "certificate", "crypto/x509", function(Raw_, TBSCertificate_, SignatureAlgorithm_, SignatureValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.TBSCertificate = new tbsCertificate.ptr();
			this.SignatureAlgorithm = new pkix.AlgorithmIdentifier.ptr();
			this.SignatureValue = new asn1.BitString.ptr();
			return;
		}
		this.Raw = Raw_;
		this.TBSCertificate = TBSCertificate_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.SignatureValue = SignatureValue_;
	});
	tbsCertificate = $pkg.tbsCertificate = $newType(0, $kindStruct, "x509.tbsCertificate", "tbsCertificate", "crypto/x509", function(Raw_, Version_, SerialNumber_, SignatureAlgorithm_, Issuer_, Validity_, Subject_, PublicKey_, UniqueId_, SubjectUniqueId_, Extensions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.Version = 0;
			this.SerialNumber = ptrType$5.nil;
			this.SignatureAlgorithm = new pkix.AlgorithmIdentifier.ptr();
			this.Issuer = new asn1.RawValue.ptr();
			this.Validity = new validity.ptr();
			this.Subject = new asn1.RawValue.ptr();
			this.PublicKey = new publicKeyInfo.ptr();
			this.UniqueId = new asn1.BitString.ptr();
			this.SubjectUniqueId = new asn1.BitString.ptr();
			this.Extensions = sliceType$20.nil;
			return;
		}
		this.Raw = Raw_;
		this.Version = Version_;
		this.SerialNumber = SerialNumber_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.Issuer = Issuer_;
		this.Validity = Validity_;
		this.Subject = Subject_;
		this.PublicKey = PublicKey_;
		this.UniqueId = UniqueId_;
		this.SubjectUniqueId = SubjectUniqueId_;
		this.Extensions = Extensions_;
	});
	dsaAlgorithmParameters = $pkg.dsaAlgorithmParameters = $newType(0, $kindStruct, "x509.dsaAlgorithmParameters", "dsaAlgorithmParameters", "crypto/x509", function(P_, Q_, G_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.P = ptrType$5.nil;
			this.Q = ptrType$5.nil;
			this.G = ptrType$5.nil;
			return;
		}
		this.P = P_;
		this.Q = Q_;
		this.G = G_;
	});
	dsaSignature = $pkg.dsaSignature = $newType(0, $kindStruct, "x509.dsaSignature", "dsaSignature", "crypto/x509", function(R_, S_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = ptrType$5.nil;
			this.S = ptrType$5.nil;
			return;
		}
		this.R = R_;
		this.S = S_;
	});
	ecdsaSignature = $pkg.ecdsaSignature = $newType(0, $kindStruct, "x509.ecdsaSignature", "ecdsaSignature", "crypto/x509", function(R_, S_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = ptrType$5.nil;
			this.S = ptrType$5.nil;
			return;
		}
		this.R = R_;
		this.S = S_;
	});
	validity = $pkg.validity = $newType(0, $kindStruct, "x509.validity", "validity", "crypto/x509", function(NotBefore_, NotAfter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NotBefore = new time.Time.ptr();
			this.NotAfter = new time.Time.ptr();
			return;
		}
		this.NotBefore = NotBefore_;
		this.NotAfter = NotAfter_;
	});
	publicKeyInfo = $pkg.publicKeyInfo = $newType(0, $kindStruct, "x509.publicKeyInfo", "publicKeyInfo", "crypto/x509", function(Raw_, Algorithm_, PublicKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = asn1.RawContent.nil;
			this.Algorithm = new pkix.AlgorithmIdentifier.ptr();
			this.PublicKey = new asn1.BitString.ptr();
			return;
		}
		this.Raw = Raw_;
		this.Algorithm = Algorithm_;
		this.PublicKey = PublicKey_;
	});
	authKeyId = $pkg.authKeyId = $newType(0, $kindStruct, "x509.authKeyId", "authKeyId", "crypto/x509", function(Id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Id = sliceType$3.nil;
			return;
		}
		this.Id = Id_;
	});
	SignatureAlgorithm = $pkg.SignatureAlgorithm = $newType(4, $kindInt, "x509.SignatureAlgorithm", "SignatureAlgorithm", "crypto/x509", null);
	PublicKeyAlgorithm = $pkg.PublicKeyAlgorithm = $newType(4, $kindInt, "x509.PublicKeyAlgorithm", "PublicKeyAlgorithm", "crypto/x509", null);
	KeyUsage = $pkg.KeyUsage = $newType(4, $kindInt, "x509.KeyUsage", "KeyUsage", "crypto/x509", null);
	ExtKeyUsage = $pkg.ExtKeyUsage = $newType(4, $kindInt, "x509.ExtKeyUsage", "ExtKeyUsage", "crypto/x509", null);
	Certificate = $pkg.Certificate = $newType(0, $kindStruct, "x509.Certificate", "Certificate", "crypto/x509", function(Raw_, RawTBSCertificate_, RawSubjectPublicKeyInfo_, RawSubject_, RawIssuer_, Signature_, SignatureAlgorithm_, PublicKeyAlgorithm_, PublicKey_, Version_, SerialNumber_, Issuer_, Subject_, NotBefore_, NotAfter_, KeyUsage_, Extensions_, ExtraExtensions_, ExtKeyUsage_, UnknownExtKeyUsage_, BasicConstraintsValid_, IsCA_, MaxPathLen_, MaxPathLenZero_, SubjectKeyId_, AuthorityKeyId_, OCSPServer_, IssuingCertificateURL_, DNSNames_, EmailAddresses_, IPAddresses_, PermittedDNSDomainsCritical_, PermittedDNSDomains_, CRLDistributionPoints_, PolicyIdentifiers_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Raw = sliceType$3.nil;
			this.RawTBSCertificate = sliceType$3.nil;
			this.RawSubjectPublicKeyInfo = sliceType$3.nil;
			this.RawSubject = sliceType$3.nil;
			this.RawIssuer = sliceType$3.nil;
			this.Signature = sliceType$3.nil;
			this.SignatureAlgorithm = 0;
			this.PublicKeyAlgorithm = 0;
			this.PublicKey = $ifaceNil;
			this.Version = 0;
			this.SerialNumber = ptrType$5.nil;
			this.Issuer = new pkix.Name.ptr();
			this.Subject = new pkix.Name.ptr();
			this.NotBefore = new time.Time.ptr();
			this.NotAfter = new time.Time.ptr();
			this.KeyUsage = 0;
			this.Extensions = sliceType$20.nil;
			this.ExtraExtensions = sliceType$20.nil;
			this.ExtKeyUsage = sliceType$11.nil;
			this.UnknownExtKeyUsage = sliceType$15.nil;
			this.BasicConstraintsValid = false;
			this.IsCA = false;
			this.MaxPathLen = 0;
			this.MaxPathLenZero = false;
			this.SubjectKeyId = sliceType$3.nil;
			this.AuthorityKeyId = sliceType$3.nil;
			this.OCSPServer = sliceType$12.nil;
			this.IssuingCertificateURL = sliceType$12.nil;
			this.DNSNames = sliceType$12.nil;
			this.EmailAddresses = sliceType$12.nil;
			this.IPAddresses = sliceType$13.nil;
			this.PermittedDNSDomainsCritical = false;
			this.PermittedDNSDomains = sliceType$12.nil;
			this.CRLDistributionPoints = sliceType$12.nil;
			this.PolicyIdentifiers = sliceType$15.nil;
			return;
		}
		this.Raw = Raw_;
		this.RawTBSCertificate = RawTBSCertificate_;
		this.RawSubjectPublicKeyInfo = RawSubjectPublicKeyInfo_;
		this.RawSubject = RawSubject_;
		this.RawIssuer = RawIssuer_;
		this.Signature = Signature_;
		this.SignatureAlgorithm = SignatureAlgorithm_;
		this.PublicKeyAlgorithm = PublicKeyAlgorithm_;
		this.PublicKey = PublicKey_;
		this.Version = Version_;
		this.SerialNumber = SerialNumber_;
		this.Issuer = Issuer_;
		this.Subject = Subject_;
		this.NotBefore = NotBefore_;
		this.NotAfter = NotAfter_;
		this.KeyUsage = KeyUsage_;
		this.Extensions = Extensions_;
		this.ExtraExtensions = ExtraExtensions_;
		this.ExtKeyUsage = ExtKeyUsage_;
		this.UnknownExtKeyUsage = UnknownExtKeyUsage_;
		this.BasicConstraintsValid = BasicConstraintsValid_;
		this.IsCA = IsCA_;
		this.MaxPathLen = MaxPathLen_;
		this.MaxPathLenZero = MaxPathLenZero_;
		this.SubjectKeyId = SubjectKeyId_;
		this.AuthorityKeyId = AuthorityKeyId_;
		this.OCSPServer = OCSPServer_;
		this.IssuingCertificateURL = IssuingCertificateURL_;
		this.DNSNames = DNSNames_;
		this.EmailAddresses = EmailAddresses_;
		this.IPAddresses = IPAddresses_;
		this.PermittedDNSDomainsCritical = PermittedDNSDomainsCritical_;
		this.PermittedDNSDomains = PermittedDNSDomains_;
		this.CRLDistributionPoints = CRLDistributionPoints_;
		this.PolicyIdentifiers = PolicyIdentifiers_;
	});
	ConstraintViolationError = $pkg.ConstraintViolationError = $newType(0, $kindStruct, "x509.ConstraintViolationError", "ConstraintViolationError", "crypto/x509", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	UnhandledCriticalExtension = $pkg.UnhandledCriticalExtension = $newType(0, $kindStruct, "x509.UnhandledCriticalExtension", "UnhandledCriticalExtension", "crypto/x509", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	basicConstraints = $pkg.basicConstraints = $newType(0, $kindStruct, "x509.basicConstraints", "basicConstraints", "crypto/x509", function(IsCA_, MaxPathLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.IsCA = false;
			this.MaxPathLen = 0;
			return;
		}
		this.IsCA = IsCA_;
		this.MaxPathLen = MaxPathLen_;
	});
	policyInformation = $pkg.policyInformation = $newType(0, $kindStruct, "x509.policyInformation", "policyInformation", "crypto/x509", function(Policy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Policy = asn1.ObjectIdentifier.nil;
			return;
		}
		this.Policy = Policy_;
	});
	nameConstraints = $pkg.nameConstraints = $newType(0, $kindStruct, "x509.nameConstraints", "nameConstraints", "crypto/x509", function(Permitted_, Excluded_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Permitted = sliceType$21.nil;
			this.Excluded = sliceType$21.nil;
			return;
		}
		this.Permitted = Permitted_;
		this.Excluded = Excluded_;
	});
	generalSubtree = $pkg.generalSubtree = $newType(0, $kindStruct, "x509.generalSubtree", "generalSubtree", "crypto/x509", function(Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			return;
		}
		this.Name = Name_;
	});
	authorityInfoAccess = $pkg.authorityInfoAccess = $newType(0, $kindStruct, "x509.authorityInfoAccess", "authorityInfoAccess", "crypto/x509", function(Method_, Location_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = asn1.ObjectIdentifier.nil;
			this.Location = new asn1.RawValue.ptr();
			return;
		}
		this.Method = Method_;
		this.Location = Location_;
	});
	distributionPoint = $pkg.distributionPoint = $newType(0, $kindStruct, "x509.distributionPoint", "distributionPoint", "crypto/x509", function(DistributionPoint_, Reason_, CRLIssuer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DistributionPoint = new distributionPointName.ptr();
			this.Reason = new asn1.BitString.ptr();
			this.CRLIssuer = new asn1.RawValue.ptr();
			return;
		}
		this.DistributionPoint = DistributionPoint_;
		this.Reason = Reason_;
		this.CRLIssuer = CRLIssuer_;
	});
	distributionPointName = $pkg.distributionPointName = $newType(0, $kindStruct, "x509.distributionPointName", "distributionPointName", "crypto/x509", function(FullName_, RelativeName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FullName = new asn1.RawValue.ptr();
			this.RelativeName = pkix.RDNSequence.nil;
			return;
		}
		this.FullName = FullName_;
		this.RelativeName = RelativeName_;
	});
	ptrType = $ptrType(CertPool);
	structType = $structType([{prop: "algo", name: "algo", pkg: "crypto/x509", typ: SignatureAlgorithm, tag: ""}, {prop: "oid", name: "oid", pkg: "crypto/x509", typ: asn1.ObjectIdentifier, tag: ""}, {prop: "pubKeyAlgo", name: "pubKeyAlgo", pkg: "crypto/x509", typ: PublicKeyAlgorithm, tag: ""}, {prop: "hash", name: "hash", pkg: "crypto/x509", typ: crypto.Hash, tag: ""}]);
	sliceType$1 = $sliceType(structType);
	structType$1 = $structType([{prop: "extKeyUsage", name: "extKeyUsage", pkg: "crypto/x509", typ: ExtKeyUsage, tag: ""}, {prop: "oid", name: "oid", pkg: "crypto/x509", typ: asn1.ObjectIdentifier, tag: ""}]);
	sliceType$2 = $sliceType(structType$1);
	sliceType$3 = $sliceType($Uint8);
	sliceType$4 = $sliceType($Int);
	ptrType$1 = $ptrType(Certificate);
	sliceType$5 = $sliceType(ptrType$1);
	ptrType$2 = $ptrType(pem.Block);
	sliceType$6 = $sliceType(sliceType$3);
	ptrType$4 = $ptrType(rsa.PrivateKey);
	ptrType$5 = $ptrType(big.Int);
	ptrType$6 = $ptrType(asn1.ObjectIdentifier);
	sliceType$9 = $sliceType($emptyInterface);
	sliceType$10 = $sliceType(sliceType$5);
	sliceType$11 = $sliceType(ExtKeyUsage);
	ptrType$8 = $ptrType(rsa.PublicKey);
	ptrType$9 = $ptrType(ecdsa.PublicKey);
	ptrType$10 = $ptrType(dsa.PublicKey);
	ptrType$11 = $ptrType(ptrType$5);
	sliceType$12 = $sliceType($String);
	sliceType$13 = $sliceType(net.IP);
	ptrType$12 = $ptrType(pkix.RDNSequence);
	sliceType$14 = $sliceType(distributionPoint);
	ptrType$13 = $ptrType(sliceType$14);
	sliceType$15 = $sliceType(asn1.ObjectIdentifier);
	ptrType$14 = $ptrType(sliceType$15);
	ptrType$15 = $ptrType(sliceType$3);
	sliceType$16 = $sliceType(policyInformation);
	ptrType$16 = $ptrType(sliceType$16);
	sliceType$17 = $sliceType(authorityInfoAccess);
	ptrType$17 = $ptrType(sliceType$17);
	sliceType$20 = $sliceType(pkix.Extension);
	sliceType$21 = $sliceType(generalSubtree);
	ptrType$19 = $ptrType(pkix.CertificateList);
	sliceType$22 = $sliceType(pkix.RevokedCertificate);
	mapType = $mapType($String, sliceType$4);
	ptrType$21 = $ptrType(VerifyOptions);
	mapType$1 = $mapType($Int, sliceType$10);
	initSystemRoots = function() {
		var $ptr;
	};
	CertPool.ptr.prototype.findVerifiedParents = function(cert) {
		var $ptr, _entry, _entry$1, _i, _r, _ref, c, candidates, cert, err, errCert, parents, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; candidates = $f.candidates; cert = $f.cert; err = $f.err; errCert = $f.errCert; parents = $f.parents; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		parents = sliceType$4.nil;
		errCert = ptrType$1.nil;
		err = $ifaceNil;
		s = this;
		if (s === ptrType.nil) {
			return [parents, errCert, err];
		}
		candidates = sliceType$4.nil;
		if (cert.AuthorityKeyId.$length > 0) {
			candidates = (_entry = s.bySubjectKeyId[$String.keyFor($bytesToString(cert.AuthorityKeyId))], _entry !== undefined ? _entry.v : sliceType$4.nil);
		}
		if (candidates.$length === 0) {
			candidates = (_entry$1 = s.byName[$String.keyFor($bytesToString(cert.RawIssuer))], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil);
		}
		_ref = candidates;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = cert.CheckSignatureFrom((x = s.certs, ((c < 0 || c >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + c]))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 4:
				parents = $append(parents, c);
				$s = 6; continue;
			/* } else { */ case 5:
				errCert = (x$1 = s.certs, ((c < 0 || c >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + c]));
			/* } */ case 6:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return [parents, errCert, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CertPool.ptr.prototype.findVerifiedParents }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.candidates = candidates; $f.cert = cert; $f.err = err; $f.errCert = errCert; $f.parents = parents; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CertPool.prototype.findVerifiedParents = function(cert) { return this.$val.findVerifiedParents(cert); };
	CertPool.ptr.prototype.AddCert = function(cert) {
		var $ptr, _entry, _entry$1, _i, _key, _key$1, _ref, c, cert, keyId, n, name, s;
		s = this;
		if (cert === ptrType$1.nil) {
			$panic(new $String("adding nil Certificate to CertPool"));
		}
		_ref = s.certs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c.Equal(cert)) {
				return;
			}
			_i++;
		}
		n = s.certs.$length;
		s.certs = $append(s.certs, cert);
		if (cert.SubjectKeyId.$length > 0) {
			keyId = $bytesToString(cert.SubjectKeyId);
			_key = keyId; (s.bySubjectKeyId || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = s.bySubjectKeyId[$String.keyFor(keyId)], _entry !== undefined ? _entry.v : sliceType$4.nil), n) };
		}
		name = $bytesToString(cert.RawSubject);
		_key$1 = name; (s.byName || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$1 = s.byName[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : sliceType$4.nil), n) };
	};
	CertPool.prototype.AddCert = function(cert) { return this.$val.AddCert(cert); };
	CertPool.ptr.prototype.AppendCertsFromPEM = function(pemCerts) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, block, cert, err, ok, pemCerts, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; block = $f.block; cert = $f.cert; err = $f.err; ok = $f.ok; pemCerts = $f.pemCerts; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ok = false;
		s = this;
		/* while (true) { */ case 1:
			/* if (!(pemCerts.$length > 0)) { break; } */ if(!(pemCerts.$length > 0)) { $s = 2; continue; }
			block = ptrType$2.nil;
			_r = pem.Decode(pemCerts); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; block = _tuple[0]; pemCerts = _tuple[1];
			if (block === ptrType$2.nil) {
				/* break; */ $s = 2; continue;
			}
			/* */ if (!(block.Type === "CERTIFICATE") || !(($keys(block.Headers).length === 0))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(block.Type === "CERTIFICATE") || !(($keys(block.Headers).length === 0))) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			_r$1 = ParseCertificate(block.Bytes); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; cert = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* continue; */ $s = 1; continue;
			}
			s.AddCert(cert);
			ok = true;
		/* } */ $s = 1; continue; case 2:
		return ok;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CertPool.ptr.prototype.AppendCertsFromPEM }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.block = block; $f.cert = cert; $f.err = err; $f.ok = ok; $f.pemCerts = pemCerts; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CertPool.prototype.AppendCertsFromPEM = function(pemCerts) { return this.$val.AppendCertsFromPEM(pemCerts); };
	CertPool.ptr.prototype.Subjects = function() {
		var $ptr, _i, _ref, c, i, res, s;
		res = sliceType$6.nil;
		s = this;
		res = $makeSlice(sliceType$6, s.certs.$length);
		_ref = s.certs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= res.$length) ? $throwRuntimeError("index out of range") : res.$array[res.$offset + i] = c.RawSubject);
			_i++;
		}
		return res;
	};
	CertPool.prototype.Subjects = function() { return this.$val.Subjects(); };
	systemRootsPool = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = once.Do(initSystemRoots); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return systemRoots;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: systemRootsPool }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Certificate.ptr.prototype.systemVerify = function(opts) {
		var $ptr, _tmp, _tmp$1, c, chains, err, opts;
		chains = sliceType$10.nil;
		err = $ifaceNil;
		c = this;
		_tmp = sliceType$10.nil; _tmp$1 = $ifaceNil; chains = _tmp; err = _tmp$1;
		return [chains, err];
	};
	Certificate.prototype.systemVerify = function(opts) { return this.$val.systemVerify(opts); };
	CertificateInvalidError.ptr.prototype.Error = function() {
		var $ptr, _ref, e;
		e = $clone(this, CertificateInvalidError);
		_ref = e.Reason;
		if (_ref === 0) {
			return "x509: certificate is not authorized to sign other certificates";
		} else if (_ref === 1) {
			return "x509: certificate has expired or is not yet valid";
		} else if (_ref === 2) {
			return "x509: a root or intermediate certificate is not authorized to sign in this domain";
		} else if (_ref === 3) {
			return "x509: too many intermediates for path length constraint";
		} else if (_ref === 4) {
			return "x509: certificate specifies an incompatible key usage";
		}
		return "x509: unknown error";
	};
	CertificateInvalidError.prototype.Error = function() { return this.$val.Error(); };
	HostnameError.ptr.prototype.Error = function() {
		var $ptr, _i, _ref, c, h, ip, san, valid;
		h = $clone(this, HostnameError);
		c = h.Certificate;
		valid = "";
		ip = net.ParseIP(h.Host);
		if (!(ip === net.IP.nil)) {
			if (c.IPAddresses.$length === 0) {
				return "x509: cannot validate certificate for " + h.Host + " because it doesn't contain any IP SANs";
			}
			_ref = c.IPAddresses;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				san = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (valid.length > 0) {
					valid = valid + (", ");
				}
				valid = valid + (san.String());
				_i++;
			}
		} else {
			if (c.DNSNames.$length > 0) {
				valid = strings.Join(c.DNSNames, ", ");
			} else {
				valid = c.Subject.CommonName;
			}
		}
		return "x509: certificate is valid for " + valid + ", not " + h.Host;
	};
	HostnameError.prototype.Error = function() { return this.$val.Error(); };
	UnknownAuthorityError.ptr.prototype.Error = function() {
		var $ptr, _r, certName, e, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; certName = $f.certName; e = $f.e; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(this, UnknownAuthorityError);
		s = "x509: certificate signed by unknown authority";
		/* */ if (!($interfaceIsEqual(e.hintErr, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(e.hintErr, $ifaceNil))) { */ case 1:
			certName = e.hintCert.Subject.CommonName;
			if (certName.length === 0) {
				if (e.hintCert.Subject.Organization.$length > 0) {
					certName = (x = e.hintCert.Subject.Organization, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
				}
				certName = "serial:" + e.hintCert.SerialNumber.String();
			}
			_r = fmt.Sprintf(" (possibly because of %q while trying to verify candidate authority certificate %q)", new sliceType$9([e.hintErr, new $String(certName)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = s + (_r);
		/* } */ case 2:
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnknownAuthorityError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.certName = certName; $f.e = e; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnknownAuthorityError.prototype.Error = function() { return this.$val.Error(); };
	SystemRootsError.ptr.prototype.Error = function() {
		var $ptr;
		return "x509: failed to load system roots and no roots provided";
	};
	SystemRootsError.prototype.Error = function() { return this.$val.Error(); };
	Certificate.ptr.prototype.isValid = function(certType, currentChain, opts) {
		var $ptr, _i, _ref, c, certType, currentChain, domain, now, numIntermediates, ok, opts, x, x$1, x$2, x$3;
		c = this;
		now = $clone(opts.CurrentTime, time.Time);
		if (now.IsZero()) {
			$copy(now, time.Now(), time.Time);
		}
		if (now.Before(c.NotBefore) || now.After(c.NotAfter)) {
			return (x = new CertificateInvalidError.ptr(c, 1), new x.constructor.elem(x));
		}
		if (c.PermittedDNSDomains.$length > 0) {
			ok = false;
			_ref = c.PermittedDNSDomains;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				domain = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (opts.DNSName === domain || (strings.HasSuffix(opts.DNSName, domain) && opts.DNSName.length >= (1 + domain.length >> 0) && (opts.DNSName.charCodeAt(((opts.DNSName.length - domain.length >> 0) - 1 >> 0)) === 46))) {
					ok = true;
					break;
				}
				_i++;
			}
			if (!ok) {
				return (x$1 = new CertificateInvalidError.ptr(c, 2), new x$1.constructor.elem(x$1));
			}
		}
		if ((certType === 1) && (!c.BasicConstraintsValid || !c.IsCA)) {
			return (x$2 = new CertificateInvalidError.ptr(c, 0), new x$2.constructor.elem(x$2));
		}
		if (c.BasicConstraintsValid && c.MaxPathLen >= 0) {
			numIntermediates = currentChain.$length - 1 >> 0;
			if (numIntermediates > c.MaxPathLen) {
				return (x$3 = new CertificateInvalidError.ptr(c, 3), new x$3.constructor.elem(x$3));
			}
		}
		return $ifaceNil;
	};
	Certificate.prototype.isValid = function(certType, currentChain, opts) { return this.$val.isValid(certType, currentChain, opts); };
	Certificate.ptr.prototype.Verify = function(opts) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tuple, _tuple$1, c, candidate, candidateChains, chains, err, keyUsages, opts, usage, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; candidate = $f.candidate; candidateChains = $f.candidateChains; chains = $f.chains; err = $f.err; keyUsages = $f.keyUsages; opts = $f.opts; usage = $f.usage; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = [opts];
		chains = sliceType$10.nil;
		err = $ifaceNil;
		opts[0] = $clone(opts[0], VerifyOptions);
		c = this;
		if (opts[0].Roots === ptrType.nil && false) {
			_tuple = c.systemVerify(opts[0]); chains = _tuple[0]; err = _tuple[1];
			return [chains, err];
		}
		/* */ if (opts[0].Roots === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (opts[0].Roots === ptrType.nil) { */ case 1:
			_r = systemRootsPool(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			opts[0].Roots = _r;
			if (opts[0].Roots === ptrType.nil) {
				_tmp = sliceType$10.nil; _tmp$1 = (x = new SystemRootsError.ptr(), new x.constructor.elem(x)); chains = _tmp; err = _tmp$1;
				return [chains, err];
			}
		/* } */ case 2:
		err = c.isValid(0, sliceType$5.nil, opts[0]);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [chains, err];
		}
		if (opts[0].DNSName.length > 0) {
			err = c.VerifyHostname(opts[0].DNSName);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [chains, err];
			}
		}
		_r$1 = c.buildChains(new $Map(), new sliceType$5([c]), opts[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; candidateChains = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [chains, err];
		}
		keyUsages = opts[0].KeyUsages;
		if (keyUsages.$length === 0) {
			keyUsages = new sliceType$11([1]);
		}
		_ref = keyUsages;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			usage = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (usage === 0) {
				chains = candidateChains;
				return [chains, err];
			}
			_i++;
		}
		_ref$1 = candidateChains;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			candidate = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (checkChainForKeyUsage(candidate, keyUsages)) {
				chains = $append(chains, candidate);
			}
			_i$1++;
		}
		if (chains.$length === 0) {
			err = (x$1 = new CertificateInvalidError.ptr(c, 4), new x$1.constructor.elem(x$1));
		}
		return [chains, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Certificate.ptr.prototype.Verify }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.candidate = candidate; $f.candidateChains = candidateChains; $f.chains = chains; $f.err = err; $f.keyUsages = keyUsages; $f.opts = opts; $f.usage = usage; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Certificate.prototype.Verify = function(opts) { return this.$val.Verify(opts); };
	appendToFreshChain = function(chain, cert) {
		var $ptr, cert, chain, n, x;
		n = $makeSlice(sliceType$5, (chain.$length + 1 >> 0));
		$copySlice(n, chain);
		(x = chain.$length, ((x < 0 || x >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + x] = cert));
		return n;
	};
	Certificate.ptr.prototype.buildChains = function(cache, currentChain, opts) {
		var $ptr, _entry, _i, _i$1, _i$2, _key, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, c, cache, cert, chains, childChains, currentChain, err, failedIntermediate, failedRoot, hintCert, hintErr, intermediate, intermediateErr, intermediateNum, ok, opts, possibleIntermediates, possibleRoots, root, rootErr, rootNum, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; cache = $f.cache; cert = $f.cert; chains = $f.chains; childChains = $f.childChains; currentChain = $f.currentChain; err = $f.err; failedIntermediate = $f.failedIntermediate; failedRoot = $f.failedRoot; hintCert = $f.hintCert; hintErr = $f.hintErr; intermediate = $f.intermediate; intermediateErr = $f.intermediateErr; intermediateNum = $f.intermediateNum; ok = $f.ok; opts = $f.opts; possibleIntermediates = $f.possibleIntermediates; possibleRoots = $f.possibleRoots; root = $f.root; rootErr = $f.rootErr; rootNum = $f.rootNum; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		chains = sliceType$10.nil;
		err = $ifaceNil;
		c = this;
		_r = opts.Roots.findVerifiedParents(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; possibleRoots = _tuple[0]; failedRoot = _tuple[1]; rootErr = _tuple[2];
		_ref = possibleRoots;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			rootNum = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			root = (x = opts.Roots.certs, ((rootNum < 0 || rootNum >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + rootNum]));
			err = root.isValid(2, currentChain, opts);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			chains = $append(chains, appendToFreshChain(currentChain, root));
			_i++;
		/* } */ $s = 2; continue; case 3:
		_r$1 = opts.Intermediates.findVerifiedParents(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; possibleIntermediates = _tuple$1[0]; failedIntermediate = _tuple$1[1]; intermediateErr = _tuple$1[2];
		_ref$1 = possibleIntermediates;
		_i$1 = 0;
		/* while (true) { */ case 5:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
			intermediateNum = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			intermediate = (x$1 = opts.Intermediates.certs, ((intermediateNum < 0 || intermediateNum >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + intermediateNum]));
			_ref$2 = currentChain;
			_i$2 = 0;
			/* while (true) { */ case 7:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 8; continue; }
				cert = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (cert === intermediate) {
					_i$1++;
					/* continue nextIntermediate; */ $s = 5; continue s;
				}
				_i$2++;
			/* } */ $s = 7; continue; case 8:
			err = intermediate.isValid(1, currentChain, opts);
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
				_i$1++;
				/* continue; */ $s = 5; continue;
			/* } */ case 10:
			childChains = sliceType$10.nil;
			_tuple$2 = (_entry = cache[$Int.keyFor(intermediateNum)], _entry !== undefined ? [_entry.v, true] : [sliceType$10.nil, false]); childChains = _tuple$2[0]; ok = _tuple$2[1];
			/* */ if (!ok) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!ok) { */ case 11:
				_r$2 = intermediate.buildChains(cache, appendToFreshChain(currentChain, intermediate), opts); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$3 = _r$2; childChains = _tuple$3[0]; err = _tuple$3[1];
				_key = intermediateNum; (cache || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: childChains };
			/* } */ case 12:
			chains = $appendSlice(chains, childChains);
			_i$1++;
		/* } */ $s = 5; continue; case 6:
		if (chains.$length > 0) {
			err = $ifaceNil;
		}
		if ((chains.$length === 0) && $interfaceIsEqual(err, $ifaceNil)) {
			hintErr = rootErr;
			hintCert = failedRoot;
			if ($interfaceIsEqual(hintErr, $ifaceNil)) {
				hintErr = intermediateErr;
				hintCert = failedIntermediate;
			}
			err = (x$2 = new UnknownAuthorityError.ptr(c, hintErr, hintCert), new x$2.constructor.elem(x$2));
		}
		return [chains, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Certificate.ptr.prototype.buildChains }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.cache = cache; $f.cert = cert; $f.chains = chains; $f.childChains = childChains; $f.currentChain = currentChain; $f.err = err; $f.failedIntermediate = failedIntermediate; $f.failedRoot = failedRoot; $f.hintCert = hintCert; $f.hintErr = hintErr; $f.intermediate = intermediate; $f.intermediateErr = intermediateErr; $f.intermediateNum = intermediateNum; $f.ok = ok; $f.opts = opts; $f.possibleIntermediates = possibleIntermediates; $f.possibleRoots = possibleRoots; $f.root = root; $f.rootErr = rootErr; $f.rootNum = rootNum; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Certificate.prototype.buildChains = function(cache, currentChain, opts) { return this.$val.buildChains(cache, currentChain, opts); };
	matchHostnames = function(pattern, host) {
		var $ptr, _i, _ref, host, hostParts, i, pattern, patternPart, patternParts;
		if ((pattern.length === 0) || (host.length === 0)) {
			return false;
		}
		patternParts = strings.Split(pattern, ".");
		hostParts = strings.Split(host, ".");
		if (!((patternParts.$length === hostParts.$length))) {
			return false;
		}
		_ref = patternParts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			patternPart = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (patternPart === "*") {
				_i++;
				continue;
			}
			if (!(patternPart === ((i < 0 || i >= hostParts.$length) ? $throwRuntimeError("index out of range") : hostParts.$array[hostParts.$offset + i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	toLowerCaseASCII = function(in$1) {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, c, c$1, i, in$1, isAlreadyLowerCase, out;
		isAlreadyLowerCase = true;
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 65533) {
				isAlreadyLowerCase = false;
				break;
			}
			if (65 <= c && c <= 90) {
				isAlreadyLowerCase = false;
				break;
			}
			_i += _rune[1];
		}
		if (isAlreadyLowerCase) {
			return in$1;
		}
		out = new sliceType$3($stringToBytes(in$1));
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i = _i$1;
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (65 <= c$1 && c$1 <= 90) {
				((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = ((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i]) + (32) << 24 >>> 24);
			}
			_i$1++;
		}
		return $bytesToString(out);
	};
	Certificate.ptr.prototype.VerifyHostname = function(h) {
		var $ptr, _i, _i$1, _ref, _ref$1, c, candidate, candidateIP, h, ip, lowered, match, x, x$1;
		c = this;
		candidateIP = h;
		if (h.length >= 3 && (h.charCodeAt(0) === 91) && (h.charCodeAt((h.length - 1 >> 0)) === 93)) {
			candidateIP = h.substring(1, (h.length - 1 >> 0));
		}
		ip = net.ParseIP(candidateIP);
		if (!(ip === net.IP.nil)) {
			_ref = c.IPAddresses;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				candidate = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (ip.Equal(candidate)) {
					return $ifaceNil;
				}
				_i++;
			}
			return (x = new HostnameError.ptr(c, candidateIP), new x.constructor.elem(x));
		}
		lowered = toLowerCaseASCII(h);
		if (c.DNSNames.$length > 0) {
			_ref$1 = c.DNSNames;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				match = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (matchHostnames(toLowerCaseASCII(match), lowered)) {
					return $ifaceNil;
				}
				_i$1++;
			}
		} else if (matchHostnames(toLowerCaseASCII(c.Subject.CommonName), lowered)) {
			return $ifaceNil;
		}
		return (x$1 = new HostnameError.ptr(c, h), new x$1.constructor.elem(x$1));
	};
	Certificate.prototype.VerifyHostname = function(h) { return this.$val.VerifyHostname(h); };
	checkChainForKeyUsage = function(chain, keyUsages) {
		var $ptr, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, cert, chain, i, i$1, keyUsages, requestedUsage, usage, usage$1, usages, usagesRemaining;
		usages = $makeSlice(sliceType$11, keyUsages.$length);
		$copySlice(usages, keyUsages);
		if (chain.$length === 0) {
			return false;
		}
		usagesRemaining = usages.$length;
		i = chain.$length - 1 >> 0;
		NextCert:
		while (true) {
			if (!(i >= 0)) { break; }
			cert = ((i < 0 || i >= chain.$length) ? $throwRuntimeError("index out of range") : chain.$array[chain.$offset + i]);
			if ((cert.ExtKeyUsage.$length === 0) && (cert.UnknownExtKeyUsage.$length === 0)) {
				i = i - (1) >> 0;
				continue;
			}
			_ref = cert.ExtKeyUsage;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				usage = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (usage === 0) {
					i = i - (1) >> 0;
					continue NextCert;
				}
				_i++;
			}
			_ref$1 = usages;
			_i$1 = 0;
			NextRequestedUsage:
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				requestedUsage = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (requestedUsage === -1) {
					_i$1++;
					continue;
				}
				_ref$2 = cert.ExtKeyUsage;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					usage$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					if (requestedUsage === usage$1) {
						_i$1++;
						continue NextRequestedUsage;
					} else if ((requestedUsage === 1) && ((usage$1 === 11) || (usage$1 === 10))) {
						_i$1++;
						continue NextRequestedUsage;
					}
					_i$2++;
				}
				((i$1 < 0 || i$1 >= usages.$length) ? $throwRuntimeError("index out of range") : usages.$array[usages.$offset + i$1] = -1);
				usagesRemaining = usagesRemaining - (1) >> 0;
				if (usagesRemaining === 0) {
					return false;
				}
				_i$1++;
			}
			i = i - (1) >> 0;
		}
		return true;
	};
	getSignatureAlgorithmFromOID = function(oid) {
		var $ptr, _i, _ref, details, oid;
		_ref = signatureAlgorithmDetails;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			details = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), structType);
			if (oid.Equal(details.oid)) {
				return details.algo;
			}
			_i++;
		}
		return 0;
	};
	getPublicKeyAlgorithmFromOID = function(oid) {
		var $ptr, oid;
		if (oid.Equal(oidPublicKeyRSA)) {
			return 1;
		} else if (oid.Equal(oidPublicKeyDSA)) {
			return 2;
		} else if (oid.Equal(oidPublicKeyECDSA)) {
			return 3;
		}
		return 0;
	};
	namedCurveFromOID = function(oid) {
		var $ptr, _r, _r$1, _r$2, _r$3, oid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; oid = $f.oid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (oid.Equal(oidNamedCurveP224)) { $s = 1; continue; }
		/* */ if (oid.Equal(oidNamedCurveP256)) { $s = 2; continue; }
		/* */ if (oid.Equal(oidNamedCurveP384)) { $s = 3; continue; }
		/* */ if (oid.Equal(oidNamedCurveP521)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (oid.Equal(oidNamedCurveP224)) { */ case 1:
			_r = elliptic.P224(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
			$s = 5; continue;
		/* } else if (oid.Equal(oidNamedCurveP256)) { */ case 2:
			_r$1 = elliptic.P256(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			return _r$1;
			$s = 5; continue;
		/* } else if (oid.Equal(oidNamedCurveP384)) { */ case 3:
			_r$2 = elliptic.P384(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			return _r$2;
			$s = 5; continue;
		/* } else if (oid.Equal(oidNamedCurveP521)) { */ case 4:
			_r$3 = elliptic.P521(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			return _r$3;
		/* } */ case 5:
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: namedCurveFromOID }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.oid = oid; $f.$s = $s; $f.$r = $r; return $f;
	};
	extKeyUsageFromOID = function(oid) {
		var $ptr, _i, _ref, _tmp, _tmp$1, eku, oid, ok, pair;
		eku = 0;
		ok = false;
		_ref = extKeyUsageOIDs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pair = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), structType$1);
			if (oid.Equal(pair.oid)) {
				_tmp = pair.extKeyUsage; _tmp$1 = true; eku = _tmp; ok = _tmp$1;
				return [eku, ok];
			}
			_i++;
		}
		return [eku, ok];
	};
	ConstraintViolationError.ptr.prototype.Error = function() {
		var $ptr;
		return "x509: invalid signature: parent certificate cannot sign this kind of certificate";
	};
	ConstraintViolationError.prototype.Error = function() { return this.$val.Error(); };
	Certificate.ptr.prototype.Equal = function(other) {
		var $ptr, c, other;
		c = this;
		return bytes.Equal(c.Raw, other.Raw);
	};
	Certificate.prototype.Equal = function(other) { return this.$val.Equal(other); };
	Certificate.ptr.prototype.CheckSignatureFrom = function(parent) {
		var $ptr, _r, c, err, parent, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; err = $f.err; parent = $f.parent; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		c = this;
		if (((parent.Version === 3) && !parent.BasicConstraintsValid || parent.BasicConstraintsValid && !parent.IsCA) && !bytes.Equal(c.RawSubjectPublicKeyInfo, entrustBrokenSPKI)) {
			err = (x = new ConstraintViolationError.ptr(), new x.constructor.elem(x));
			return err;
		}
		if (!((parent.KeyUsage === 0)) && ((parent.KeyUsage & 32) === 0)) {
			err = (x$1 = new ConstraintViolationError.ptr(), new x$1.constructor.elem(x$1));
			return err;
		}
		if (parent.PublicKeyAlgorithm === 0) {
			err = $pkg.ErrUnsupportedAlgorithm;
			return err;
		}
		_r = parent.CheckSignature(c.SignatureAlgorithm, c.RawTBSCertificate, c.Signature); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Certificate.ptr.prototype.CheckSignatureFrom }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.err = err; $f.parent = parent; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Certificate.prototype.CheckSignatureFrom = function(parent) { return this.$val.CheckSignatureFrom(parent); };
	Certificate.ptr.prototype.CheckSignature = function(algo, signed, signature) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _tuple, _tuple$1, algo, c, digest, dsaSig, ecdsaSig, err, err$1, err$2, h, hashType, pub, pub$1, pub$2, signature, signed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; algo = $f.algo; c = $f.c; digest = $f.digest; dsaSig = $f.dsaSig; ecdsaSig = $f.ecdsaSig; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; h = $f.h; hashType = $f.hashType; pub = $f.pub; pub$1 = $f.pub$1; pub$2 = $f.pub$2; signature = $f.signature; signed = $f.signed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		c = this;
		hashType = 0;
		_ref = algo;
		if (_ref === 3 || _ref === 7 || _ref === 9) {
			hashType = 3;
		} else if (_ref === 4 || _ref === 8 || _ref === 10) {
			hashType = 5;
		} else if (_ref === 5 || _ref === 11) {
			hashType = 6;
		} else if (_ref === 6 || _ref === 12) {
			hashType = 7;
		} else {
			err = $pkg.ErrUnsupportedAlgorithm;
			return err;
		}
		if (!new crypto.Hash(hashType).Available()) {
			err = $pkg.ErrUnsupportedAlgorithm;
			return err;
		}
		_r = new crypto.Hash(hashType).New(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		h = _r;
		_r$1 = h.Write(signed); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = h.Sum(sliceType$3.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		digest = _r$2;
		_ref$1 = c.PublicKey;
		/* */ if ($assertType(_ref$1, ptrType$8, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref$1, ptrType$10, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref$1, ptrType$9, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref$1, ptrType$8, true)[1]) { */ case 4:
			pub = _ref$1.$val;
			err = rsa.VerifyPKCS1v15(pub, hashType, digest, signature);
			return err;
			$s = 7; continue;
		/* } else if ($assertType(_ref$1, ptrType$10, true)[1]) { */ case 5:
			pub$1 = _ref$1.$val;
			dsaSig = new dsaSignature.ptr();
			_r$3 = asn1.Unmarshal(signature, dsaSig); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3; err$1 = _tuple[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 9:
				err = err$1;
				return err;
			/* } */ case 10:
			if (dsaSig.R.Sign() <= 0 || dsaSig.S.Sign() <= 0) {
				err = errors.New("x509: DSA signature contained zero or negative values");
				return err;
			}
			if (!dsa.Verify(pub$1, digest, dsaSig.R, dsaSig.S)) {
				err = errors.New("x509: DSA verification failure");
				return err;
			}
			return err;
			$s = 7; continue;
		/* } else if ($assertType(_ref$1, ptrType$9, true)[1]) { */ case 6:
			pub$2 = _ref$1.$val;
			ecdsaSig = new ecdsaSignature.ptr();
			_r$4 = asn1.Unmarshal(signature, ecdsaSig); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4; err$2 = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 12:
				err = err$2;
				return err;
			/* } */ case 13:
			if (ecdsaSig.R.Sign() <= 0 || ecdsaSig.S.Sign() <= 0) {
				err = errors.New("x509: ECDSA signature contained zero or negative values");
				return err;
			}
			_r$5 = ecdsa.Verify(pub$2, digest, ecdsaSig.R, ecdsaSig.S); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!_r$5) { */ case 14:
				err = errors.New("x509: ECDSA verification failure");
				return err;
			/* } */ case 15:
			return err;
		/* } */ case 7:
		err = $pkg.ErrUnsupportedAlgorithm;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Certificate.ptr.prototype.CheckSignature }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.algo = algo; $f.c = c; $f.digest = digest; $f.dsaSig = dsaSig; $f.ecdsaSig = ecdsaSig; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.h = h; $f.hashType = hashType; $f.pub = pub; $f.pub$1 = pub$1; $f.pub$2 = pub$2; $f.signature = signature; $f.signed = signed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Certificate.prototype.CheckSignature = function(algo, signed, signature) { return this.$val.CheckSignature(algo, signed, signature); };
	Certificate.ptr.prototype.CheckCRLSignature = function(crl) {
		var $ptr, _r, algo, c, crl, err, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; algo = $f.algo; c = $f.c; crl = $f.crl; err = $f.err; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		c = this;
		algo = getSignatureAlgorithmFromOID(crl.SignatureAlgorithm.Algorithm);
		_r = c.CheckSignature(algo, (x = crl.TBSCertList.Raw, $subslice(new sliceType$3(x.$array), x.$offset, x.$offset + x.$length)), crl.SignatureValue.RightAlign()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Certificate.ptr.prototype.CheckCRLSignature }; } $f.$ptr = $ptr; $f._r = _r; $f.algo = algo; $f.c = c; $f.crl = crl; $f.err = err; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Certificate.prototype.CheckCRLSignature = function(crl) { return this.$val.CheckCRLSignature(crl); };
	UnhandledCriticalExtension.ptr.prototype.Error = function() {
		var $ptr, h;
		h = $clone(this, UnhandledCriticalExtension);
		return "x509: unhandled critical extension";
	};
	UnhandledCriticalExtension.prototype.Error = function() { return this.$val.Error(); };
	parsePublicKey = function(algo, keyData) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, algo, asn1Data, err, err$1, err$2, keyData, namedCurve, namedCurveOID, p, p$1, params, paramsData, paramsData$1, pub, pub$1, pub$2, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; algo = $f.algo; asn1Data = $f.asn1Data; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; keyData = $f.keyData; namedCurve = $f.namedCurve; namedCurveOID = $f.namedCurveOID; p = $f.p; p$1 = $f.p$1; params = $f.params; paramsData = $f.paramsData; paramsData$1 = $f.paramsData$1; pub = $f.pub; pub$1 = $f.pub$1; pub$2 = $f.pub$2; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = [p];
		asn1Data = keyData.PublicKey.RightAlign();
		_ref = algo;
		/* */ if (_ref === 1) { $s = 1; continue; }
		/* */ if (_ref === 2) { $s = 2; continue; }
		/* */ if (_ref === 3) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 1) { */ case 1:
			p$1 = new rsaPublicKey.ptr();
			_r = asn1.Unmarshal(asn1Data, p$1); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [$ifaceNil, err];
			}
			if (p$1.N.Sign() <= 0) {
				return [$ifaceNil, errors.New("x509: RSA modulus is not a positive number")];
			}
			if (p$1.E <= 0) {
				return [$ifaceNil, errors.New("x509: RSA public exponent is not a positive number")];
			}
			pub = new rsa.PublicKey.ptr(p$1.N, p$1.E);
			return [pub, $ifaceNil];
			$s = 5; continue;
		/* } else if (_ref === 2) { */ case 2:
			p[0] = ptrType$5.nil;
			_r$1 = asn1.Unmarshal(asn1Data, (p.$ptr || (p.$ptr = new ptrType$11(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, p)))); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [$ifaceNil, err$1];
			}
			paramsData = keyData.Algorithm.Parameters.FullBytes;
			params = new dsaAlgorithmParameters.ptr();
			_r$2 = asn1.Unmarshal(paramsData, params); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2; err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [$ifaceNil, err$1];
			}
			if (p[0].Sign() <= 0 || params.P.Sign() <= 0 || params.Q.Sign() <= 0 || params.G.Sign() <= 0) {
				return [$ifaceNil, errors.New("x509: zero or negative DSA parameter")];
			}
			pub$1 = new dsa.PublicKey.ptr(new dsa.Parameters.ptr(params.P, params.Q, params.G), p[0]);
			return [pub$1, $ifaceNil];
			$s = 5; continue;
		/* } else if (_ref === 3) { */ case 3:
			paramsData$1 = keyData.Algorithm.Parameters.FullBytes;
			namedCurveOID = $newDataPointer(asn1.ObjectIdentifier.nil, ptrType$6);
			_r$3 = asn1.Unmarshal(paramsData$1, namedCurveOID); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$3 = _r$3; err$2 = _tuple$3[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [$ifaceNil, err$2];
			}
			_r$4 = namedCurveFromOID(namedCurveOID.$get()); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			namedCurve = _r$4;
			if ($interfaceIsEqual(namedCurve, $ifaceNil)) {
				return [$ifaceNil, errors.New("x509: unsupported elliptic curve")];
			}
			_r$5 = elliptic.Unmarshal(namedCurve, asn1Data); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$4 = _r$5; x = _tuple$4[0]; y = _tuple$4[1];
			if (x === ptrType$5.nil) {
				return [$ifaceNil, errors.New("x509: failed to unmarshal elliptic curve point")];
			}
			pub$2 = new ecdsa.PublicKey.ptr(namedCurve, x, y);
			return [pub$2, $ifaceNil];
			$s = 5; continue;
		/* } else { */ case 4:
			return [$ifaceNil, $ifaceNil];
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parsePublicKey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.algo = algo; $f.asn1Data = asn1Data; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.keyData = keyData; $f.namedCurve = namedCurve; $f.namedCurveOID = namedCurveOID; $f.p = p; $f.p$1 = p$1; $f.params = params; $f.paramsData = paramsData; $f.paramsData$1 = paramsData$1; $f.pub = pub; $f.pub$1 = pub$1; $f.pub$2 = pub$2; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseSANExtension = function(value) {
		var $ptr, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, dnsNames, emailAddresses, err, ipAddresses, rest, seq, v, value, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dnsNames = $f.dnsNames; emailAddresses = $f.emailAddresses; err = $f.err; ipAddresses = $f.ipAddresses; rest = $f.rest; seq = $f.seq; v = $f.v; value = $f.value; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		seq = [seq];
		dnsNames = sliceType$12.nil;
		emailAddresses = sliceType$12.nil;
		ipAddresses = sliceType$13.nil;
		err = $ifaceNil;
		seq[0] = $clone(new asn1.RawValue.ptr(), asn1.RawValue);
		_r = asn1.Unmarshal(value, seq[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			return [dnsNames, emailAddresses, ipAddresses, err];
		/* } */ case 3:
		if (!seq[0].IsCompound || !((seq[0].Tag === 16)) || !((seq[0].Class === 0))) {
			err = (x = new asn1.StructuralError.ptr("bad SAN sequence"), new x.constructor.elem(x));
			return [dnsNames, emailAddresses, ipAddresses, err];
		}
		rest = seq[0].Bytes;
		/* while (true) { */ case 4:
			/* if (!(rest.$length > 0)) { break; } */ if(!(rest.$length > 0)) { $s = 5; continue; }
			v = [v];
			v[0] = $clone(new asn1.RawValue.ptr(), asn1.RawValue);
			_r$1 = asn1.Unmarshal(rest, v[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; rest = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [dnsNames, emailAddresses, ipAddresses, err];
			}
			_ref = v[0].Tag;
			if (_ref === 1) {
				emailAddresses = $append(emailAddresses, $bytesToString(v[0].Bytes));
			} else if (_ref === 2) {
				dnsNames = $append(dnsNames, $bytesToString(v[0].Bytes));
			} else if (_ref === 7) {
				_ref$1 = v[0].Bytes.$length;
				if (_ref$1 === 4 || _ref$1 === 16) {
					ipAddresses = $append(ipAddresses, (x$1 = v[0].Bytes, $subslice(new net.IP(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)));
				} else {
					err = errors.New("x509: certificate contained IP address of length " + strconv.Itoa(v[0].Bytes.$length));
					return [dnsNames, emailAddresses, ipAddresses, err];
				}
			}
		/* } */ $s = 4; continue; case 5:
		return [dnsNames, emailAddresses, ipAddresses, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parseSANExtension }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dnsNames = dnsNames; $f.emailAddresses = emailAddresses; $f.err = err; $f.ipAddresses = ipAddresses; $f.rest = rest; $f.seq = seq; $f.v = v; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseCertificate = function(in$1) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, a, aia, cdp, constraints, constraints$1, dp, e, err, err$1, err$2, err$3, err$4, err$5, err$6, extKeyUsage, i, i$1, in$1, issuer, keyUsage, keyid, n, ok, out, policies, policy, subject, subtree, u, usage, usageBits, v, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; a = $f.a; aia = $f.aia; cdp = $f.cdp; constraints = $f.constraints; constraints$1 = $f.constraints$1; dp = $f.dp; e = $f.e; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; extKeyUsage = $f.extKeyUsage; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; issuer = $f.issuer; keyUsage = $f.keyUsage; keyid = $f.keyid; n = $f.n; ok = $f.ok; out = $f.out; policies = $f.policies; policy = $f.policy; subject = $f.subject; subtree = $f.subtree; u = $f.u; usage = $f.usage; usageBits = $f.usageBits; v = $f.v; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		issuer = [issuer];
		subject = [subject];
		out = new Certificate.ptr();
		out.Raw = (x = in$1.Raw, $subslice(new sliceType$3(x.$array), x.$offset, x.$offset + x.$length));
		out.RawTBSCertificate = (x$1 = in$1.TBSCertificate.Raw, $subslice(new sliceType$3(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
		out.RawSubjectPublicKeyInfo = (x$2 = in$1.TBSCertificate.PublicKey.Raw, $subslice(new sliceType$3(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length));
		out.RawSubject = in$1.TBSCertificate.Subject.FullBytes;
		out.RawIssuer = in$1.TBSCertificate.Issuer.FullBytes;
		out.Signature = in$1.SignatureValue.RightAlign();
		out.SignatureAlgorithm = getSignatureAlgorithmFromOID(in$1.TBSCertificate.SignatureAlgorithm.Algorithm);
		out.PublicKeyAlgorithm = getPublicKeyAlgorithmFromOID(in$1.TBSCertificate.PublicKey.Algorithm.Algorithm);
		err = $ifaceNil;
		_r = parsePublicKey(out.PublicKeyAlgorithm, in$1.TBSCertificate.PublicKey); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; out.PublicKey = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$1.nil, err];
		}
		if (in$1.TBSCertificate.SerialNumber.Sign() < 0) {
			return [ptrType$1.nil, errors.New("x509: negative serial number")];
		}
		out.Version = in$1.TBSCertificate.Version + 1 >> 0;
		out.SerialNumber = in$1.TBSCertificate.SerialNumber;
		_tmp = pkix.RDNSequence.nil; _tmp$1 = pkix.RDNSequence.nil; issuer[0] = _tmp; subject[0] = _tmp$1;
		_r$1 = asn1.Unmarshal(in$1.TBSCertificate.Subject.FullBytes, (subject.$ptr || (subject.$ptr = new ptrType$12(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, subject)))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1; err$1 = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 3:
			return [ptrType$1.nil, err$1];
		/* } */ case 4:
		_r$2 = asn1.Unmarshal(in$1.TBSCertificate.Issuer.FullBytes, (issuer.$ptr || (issuer.$ptr = new ptrType$12(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, issuer)))); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; err$2 = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 6:
			return [ptrType$1.nil, err$2];
		/* } */ case 7:
		out.Issuer.FillFromRDNSequence((issuer.$ptr || (issuer.$ptr = new ptrType$12(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, issuer))));
		out.Subject.FillFromRDNSequence((subject.$ptr || (subject.$ptr = new ptrType$12(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, subject))));
		$copy(out.NotBefore, in$1.TBSCertificate.Validity.NotBefore, time.Time);
		$copy(out.NotAfter, in$1.TBSCertificate.Validity.NotAfter, time.Time);
		_ref = in$1.TBSCertificate.Extensions;
		_i = 0;
		/* while (true) { */ case 8:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
			a = [a];
			aia = [aia];
			cdp = [cdp];
			constraints = [constraints];
			constraints$1 = [constraints$1];
			keyUsage = [keyUsage];
			keyid = [keyid];
			policies = [policies];
			usageBits = [usageBits];
			e = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), pkix.Extension);
			out.Extensions = $append(out.Extensions, e);
			/* */ if ((e.Id.$length === 4) && ((x$3 = e.Id, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])) === 2) && ((x$4 = e.Id, (1 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1])) === 5) && ((x$5 = e.Id, (2 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 2])) === 29)) { $s = 10; continue; }
			/* */ if (e.Id.Equal($subslice(new asn1.ObjectIdentifier(oidExtensionAuthorityInfoAccess.$array), oidExtensionAuthorityInfoAccess.$offset, oidExtensionAuthorityInfoAccess.$offset + oidExtensionAuthorityInfoAccess.$length))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((e.Id.$length === 4) && ((x$3 = e.Id, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])) === 2) && ((x$4 = e.Id, (1 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1])) === 5) && ((x$5 = e.Id, (2 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 2])) === 29)) { */ case 10:
				_ref$1 = (x$6 = e.Id, (3 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 3]));
				/* */ if (_ref$1 === 15) { $s = 13; continue; }
				/* */ if (_ref$1 === 19) { $s = 14; continue; }
				/* */ if (_ref$1 === 17) { $s = 15; continue; }
				/* */ if (_ref$1 === 30) { $s = 16; continue; }
				/* */ if (_ref$1 === 31) { $s = 17; continue; }
				/* */ if (_ref$1 === 35) { $s = 18; continue; }
				/* */ if (_ref$1 === 37) { $s = 19; continue; }
				/* */ if (_ref$1 === 14) { $s = 20; continue; }
				/* */ if (_ref$1 === 32) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_ref$1 === 15) { */ case 13:
					usageBits[0] = $clone(new asn1.BitString.ptr(), asn1.BitString);
					_r$3 = asn1.Unmarshal(e.Value, usageBits[0]); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3; err$3 = _tuple$3[1];
					if ($interfaceIsEqual(err$3, $ifaceNil)) {
						usage = 0;
						i = 0;
						while (true) {
							if (!(i < 9)) { break; }
							if (!((usageBits[0].At(i) === 0))) {
								usage = usage | (((y = (i >>> 0), y < 32 ? (1 << y) : 0) >> 0));
							}
							i = i + (1) >> 0;
						}
						out.KeyUsage = (usage >> 0);
						_i++;
						/* continue; */ $s = 8; continue;
					}
					$s = 22; continue;
				/* } else if (_ref$1 === 19) { */ case 14:
					constraints[0] = $clone(new basicConstraints.ptr(), basicConstraints);
					_r$4 = asn1.Unmarshal(e.Value, constraints[0]); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$4 = _r$4; err$4 = _tuple$4[1];
					if ($interfaceIsEqual(err$4, $ifaceNil)) {
						out.BasicConstraintsValid = true;
						out.IsCA = constraints[0].IsCA;
						out.MaxPathLen = constraints[0].MaxPathLen;
						out.MaxPathLenZero = out.MaxPathLen === 0;
						_i++;
						/* continue; */ $s = 8; continue;
					}
					$s = 22; continue;
				/* } else if (_ref$1 === 17) { */ case 15:
					_r$5 = parseSANExtension(e.Value); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$5 = _r$5; out.DNSNames = _tuple$5[0]; out.EmailAddresses = _tuple$5[1]; out.IPAddresses = _tuple$5[2]; err = _tuple$5[3];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [ptrType$1.nil, err];
					}
					if (out.DNSNames.$length > 0 || out.EmailAddresses.$length > 0 || out.IPAddresses.$length > 0) {
						_i++;
						/* continue; */ $s = 8; continue;
					}
					$s = 22; continue;
				/* } else if (_ref$1 === 30) { */ case 16:
					constraints$1[0] = $clone(new nameConstraints.ptr(), nameConstraints);
					_r$6 = asn1.Unmarshal(e.Value, constraints$1[0]); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$6 = _r$6; err$5 = _tuple$6[1];
					if (!($interfaceIsEqual(err$5, $ifaceNil))) {
						return [ptrType$1.nil, err$5];
					}
					if (constraints$1[0].Excluded.$length > 0 && e.Critical) {
						return [out, (x$7 = new UnhandledCriticalExtension.ptr(), new x$7.constructor.elem(x$7))];
					}
					_ref$2 = constraints$1[0].Permitted;
					_i$1 = 0;
					/* while (true) { */ case 27:
						/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 28; continue; }
						subtree = $clone(((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]), generalSubtree);
						if (subtree.Name.length === 0) {
							if (e.Critical) {
								return [out, (x$8 = new UnhandledCriticalExtension.ptr(), new x$8.constructor.elem(x$8))];
							}
							_i$1++;
							/* continue; */ $s = 27; continue;
						}
						out.PermittedDNSDomains = $append(out.PermittedDNSDomains, subtree.Name);
						_i$1++;
					/* } */ $s = 27; continue; case 28:
					_i++;
					/* continue; */ $s = 8; continue;
					$s = 22; continue;
				/* } else if (_ref$1 === 31) { */ case 17:
					cdp[0] = sliceType$14.nil;
					_r$7 = asn1.Unmarshal(e.Value, (cdp.$ptr || (cdp.$ptr = new ptrType$13(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, cdp)))); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$7 = _r$7; err$6 = _tuple$7[1];
					if (!($interfaceIsEqual(err$6, $ifaceNil))) {
						return [ptrType$1.nil, err$6];
					}
					_ref$3 = cdp[0];
					_i$2 = 0;
					/* while (true) { */ case 30:
						/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 31; continue; }
						n = [n];
						dp = $clone(((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]), distributionPoint);
						n[0] = $clone(new asn1.RawValue.ptr(), asn1.RawValue);
						_r$8 = asn1.Unmarshal(dp.DistributionPoint.FullName.Bytes, n[0]); /* */ $s = 32; case 32: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_tuple$8 = _r$8; err$6 = _tuple$8[1];
						if (!($interfaceIsEqual(err$6, $ifaceNil))) {
							return [ptrType$1.nil, err$6];
						}
						if (n[0].Tag === 6) {
							out.CRLDistributionPoints = $append(out.CRLDistributionPoints, $bytesToString(n[0].Bytes));
						}
						_i$2++;
					/* } */ $s = 30; continue; case 31:
					_i++;
					/* continue; */ $s = 8; continue;
					$s = 22; continue;
				/* } else if (_ref$1 === 35) { */ case 18:
					a[0] = $clone(new authKeyId.ptr(), authKeyId);
					_r$9 = asn1.Unmarshal(e.Value, a[0]); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$9 = _r$9; err = _tuple$9[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [ptrType$1.nil, err];
					}
					out.AuthorityKeyId = a[0].Id;
					_i++;
					/* continue; */ $s = 8; continue;
					$s = 22; continue;
				/* } else if (_ref$1 === 37) { */ case 19:
					keyUsage[0] = sliceType$15.nil;
					_r$10 = asn1.Unmarshal(e.Value, (keyUsage.$ptr || (keyUsage.$ptr = new ptrType$14(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, keyUsage)))); /* */ $s = 34; case 34: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple$10 = _r$10; err = _tuple$10[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [ptrType$1.nil, err];
					}
					_ref$4 = keyUsage[0];
					_i$3 = 0;
					while (true) {
						if (!(_i$3 < _ref$4.$length)) { break; }
						u = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$3]);
						_tuple$11 = extKeyUsageFromOID(u); extKeyUsage = _tuple$11[0]; ok = _tuple$11[1];
						if (ok) {
							out.ExtKeyUsage = $append(out.ExtKeyUsage, extKeyUsage);
						} else {
							out.UnknownExtKeyUsage = $append(out.UnknownExtKeyUsage, u);
						}
						_i$3++;
					}
					_i++;
					/* continue; */ $s = 8; continue;
					$s = 22; continue;
				/* } else if (_ref$1 === 14) { */ case 20:
					keyid[0] = sliceType$3.nil;
					_r$11 = asn1.Unmarshal(e.Value, (keyid.$ptr || (keyid.$ptr = new ptrType$15(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, keyid)))); /* */ $s = 35; case 35: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$12 = _r$11; err = _tuple$12[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [ptrType$1.nil, err];
					}
					out.SubjectKeyId = keyid[0];
					_i++;
					/* continue; */ $s = 8; continue;
					$s = 22; continue;
				/* } else if (_ref$1 === 32) { */ case 21:
					policies[0] = sliceType$16.nil;
					_r$12 = asn1.Unmarshal(e.Value, (policies.$ptr || (policies.$ptr = new ptrType$16(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, policies)))); /* */ $s = 36; case 36: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$13 = _r$12; err = _tuple$13[1];
					/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 37; continue; }
					/* */ $s = 38; continue;
					/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 37:
						return [ptrType$1.nil, err];
					/* } */ case 38:
					out.PolicyIdentifiers = $makeSlice(sliceType$15, policies[0].$length);
					_ref$5 = policies[0];
					_i$4 = 0;
					while (true) {
						if (!(_i$4 < _ref$5.$length)) { break; }
						i$1 = _i$4;
						policy = $clone(((_i$4 < 0 || _i$4 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$4]), policyInformation);
						(x$9 = out.PolicyIdentifiers, ((i$1 < 0 || i$1 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i$1] = policy.Policy));
						_i$4++;
					}
				/* } */ case 22:
				$s = 12; continue;
			/* } else if (e.Id.Equal($subslice(new asn1.ObjectIdentifier(oidExtensionAuthorityInfoAccess.$array), oidExtensionAuthorityInfoAccess.$offset, oidExtensionAuthorityInfoAccess.$offset + oidExtensionAuthorityInfoAccess.$length))) { */ case 11:
				aia[0] = sliceType$17.nil;
				_r$13 = asn1.Unmarshal(e.Value, (aia.$ptr || (aia.$ptr = new ptrType$17(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, aia)))); /* */ $s = 39; case 39: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_tuple$14 = _r$13; err = _tuple$14[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 40; continue; }
				/* */ $s = 41; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 40:
					return [ptrType$1.nil, err];
				/* } */ case 41:
				_ref$6 = aia[0];
				_i$5 = 0;
				while (true) {
					if (!(_i$5 < _ref$6.$length)) { break; }
					v = $clone(((_i$5 < 0 || _i$5 >= _ref$6.$length) ? $throwRuntimeError("index out of range") : _ref$6.$array[_ref$6.$offset + _i$5]), authorityInfoAccess);
					if (!((v.Location.Tag === 6))) {
						_i$5++;
						continue;
					}
					if (v.Method.Equal(oidAuthorityInfoAccessOcsp)) {
						out.OCSPServer = $append(out.OCSPServer, $bytesToString(v.Location.Bytes));
					} else if (v.Method.Equal(oidAuthorityInfoAccessIssuers)) {
						out.IssuingCertificateURL = $append(out.IssuingCertificateURL, $bytesToString(v.Location.Bytes));
					}
					_i$5++;
				}
			/* } */ case 12:
			if (e.Critical) {
				return [out, (x$10 = new UnhandledCriticalExtension.ptr(), new x$10.constructor.elem(x$10))];
			}
			_i++;
		/* } */ $s = 8; continue; case 9:
		return [out, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parseCertificate }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.a = a; $f.aia = aia; $f.cdp = cdp; $f.constraints = constraints; $f.constraints$1 = constraints$1; $f.dp = dp; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.extKeyUsage = extKeyUsage; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.issuer = issuer; $f.keyUsage = keyUsage; $f.keyid = keyid; $f.n = n; $f.ok = ok; $f.out = out; $f.policies = policies; $f.policy = policy; $f.subject = subject; $f.subtree = subtree; $f.u = u; $f.usage = usage; $f.usageBits = usageBits; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParseCertificate = function(asn1Data) {
		var $ptr, _r, _r$1, _tuple, asn1Data, cert, err, rest, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; asn1Data = $f.asn1Data; cert = $f.cert; err = $f.err; rest = $f.rest; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cert = [cert];
		cert[0] = $clone(new certificate.ptr(), certificate);
		_r = asn1.Unmarshal(asn1Data, cert[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; rest = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$1.nil, err];
		}
		if (rest.$length > 0) {
			return [ptrType$1.nil, (x = new asn1.SyntaxError.ptr("trailing data"), new x.constructor.elem(x))];
		}
		_r$1 = parseCertificate(cert[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ParseCertificate }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.asn1Data = asn1Data; $f.cert = cert; $f.err = err; $f.rest = rest; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ParseCertificate = ParseCertificate;
	Certificate.ptr.prototype.CreateCRL = function(rand, priv, revokedCerts, now, expiry) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, c, crlBytes, digest, err, expiry, h, now, ok, priv, rand, revokedCerts, rsaPriv, signature, tbsCertList, tbsCertListContents, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; crlBytes = $f.crlBytes; digest = $f.digest; err = $f.err; expiry = $f.expiry; h = $f.h; now = $f.now; ok = $f.ok; priv = $f.priv; rand = $f.rand; revokedCerts = $f.revokedCerts; rsaPriv = $f.rsaPriv; signature = $f.signature; tbsCertList = $f.tbsCertList; tbsCertListContents = $f.tbsCertListContents; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		crlBytes = sliceType$3.nil;
		err = $ifaceNil;
		expiry = $clone(expiry, time.Time);
		now = $clone(now, time.Time);
		c = this;
		_tuple = $assertType(priv, ptrType$4, true); rsaPriv = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			_tmp = sliceType$3.nil; _tmp$1 = errors.New("x509: non-RSA private keys not supported"); crlBytes = _tmp; err = _tmp$1;
			return [crlBytes, err];
		}
		tbsCertList = new pkix.TBSCertificateList.ptr(asn1.RawContent.nil, 2, new pkix.AlgorithmIdentifier.ptr(oidSignatureSHA1WithRSA, new asn1.RawValue.ptr()), c.Subject.ToRDNSequence(), $clone(now.UTC(), time.Time), $clone(expiry.UTC(), time.Time), revokedCerts, sliceType$20.nil);
		_r = asn1.Marshal(new tbsCertList.constructor.elem(tbsCertList)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; tbsCertListContents = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [crlBytes, err];
		}
		h = sha1.New();
		_r$1 = h.Write(tbsCertListContents); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = h.Sum(sliceType$3.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		digest = _r$2;
		_r$3 = rsa.SignPKCS1v15(rand, rsaPriv, 3, digest); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3; signature = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [crlBytes, err];
		}
		_r$4 = asn1.Marshal((x = new pkix.CertificateList.ptr($clone(tbsCertList, pkix.TBSCertificateList), new pkix.AlgorithmIdentifier.ptr(oidSignatureSHA1WithRSA, new asn1.RawValue.ptr()), new asn1.BitString.ptr(signature, signature.$length * 8 >> 0)), new x.constructor.elem(x))); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$3 = _r$4; crlBytes = _tuple$3[0]; err = _tuple$3[1];
		return [crlBytes, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Certificate.ptr.prototype.CreateCRL }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.crlBytes = crlBytes; $f.digest = digest; $f.err = err; $f.expiry = expiry; $f.h = h; $f.now = now; $f.ok = ok; $f.priv = priv; $f.rand = rand; $f.revokedCerts = revokedCerts; $f.rsaPriv = rsaPriv; $f.signature = signature; $f.tbsCertList = tbsCertList; $f.tbsCertListContents = tbsCertListContents; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Certificate.prototype.CreateCRL = function(rand, priv, revokedCerts, now, expiry) { return this.$val.CreateCRL(rand, priv, revokedCerts, now, expiry); };
	ptrType.methods = [{prop: "findVerifiedParents", name: "findVerifiedParents", pkg: "crypto/x509", typ: $funcType([ptrType$1], [sliceType$4, ptrType$1, $error], false)}, {prop: "AddCert", name: "AddCert", pkg: "", typ: $funcType([ptrType$1], [], false)}, {prop: "AppendCertsFromPEM", name: "AppendCertsFromPEM", pkg: "", typ: $funcType([sliceType$3], [$Bool], false)}, {prop: "Subjects", name: "Subjects", pkg: "", typ: $funcType([], [sliceType$6], false)}];
	CertificateInvalidError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	HostnameError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnknownAuthorityError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	SystemRootsError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "systemVerify", name: "systemVerify", pkg: "crypto/x509", typ: $funcType([ptrType$21], [sliceType$10, $error], false)}, {prop: "isValid", name: "isValid", pkg: "crypto/x509", typ: $funcType([$Int, sliceType$5, ptrType$21], [$error], false)}, {prop: "Verify", name: "Verify", pkg: "", typ: $funcType([VerifyOptions], [sliceType$10, $error], false)}, {prop: "buildChains", name: "buildChains", pkg: "crypto/x509", typ: $funcType([mapType$1, sliceType$5, ptrType$21], [sliceType$10, $error], false)}, {prop: "VerifyHostname", name: "VerifyHostname", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$1], [$Bool], false)}, {prop: "CheckSignatureFrom", name: "CheckSignatureFrom", pkg: "", typ: $funcType([ptrType$1], [$error], false)}, {prop: "CheckSignature", name: "CheckSignature", pkg: "", typ: $funcType([SignatureAlgorithm, sliceType$3, sliceType$3], [$error], false)}, {prop: "CheckCRLSignature", name: "CheckCRLSignature", pkg: "", typ: $funcType([ptrType$19], [$error], false)}, {prop: "CreateCRL", name: "CreateCRL", pkg: "", typ: $funcType([io.Reader, $emptyInterface, sliceType$22, time.Time, time.Time], [sliceType$3, $error], false)}];
	ConstraintViolationError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnhandledCriticalExtension.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	CertPool.init([{prop: "bySubjectKeyId", name: "bySubjectKeyId", pkg: "crypto/x509", typ: mapType, tag: ""}, {prop: "byName", name: "byName", pkg: "crypto/x509", typ: mapType, tag: ""}, {prop: "certs", name: "certs", pkg: "crypto/x509", typ: sliceType$5, tag: ""}]);
	rsaPublicKey.init([{prop: "N", name: "N", pkg: "", typ: ptrType$5, tag: ""}, {prop: "E", name: "E", pkg: "", typ: $Int, tag: ""}]);
	CertificateInvalidError.init([{prop: "Cert", name: "Cert", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Reason", name: "Reason", pkg: "", typ: InvalidReason, tag: ""}]);
	HostnameError.init([{prop: "Certificate", name: "Certificate", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Host", name: "Host", pkg: "", typ: $String, tag: ""}]);
	UnknownAuthorityError.init([{prop: "cert", name: "cert", pkg: "crypto/x509", typ: ptrType$1, tag: ""}, {prop: "hintErr", name: "hintErr", pkg: "crypto/x509", typ: $error, tag: ""}, {prop: "hintCert", name: "hintCert", pkg: "crypto/x509", typ: ptrType$1, tag: ""}]);
	SystemRootsError.init([]);
	VerifyOptions.init([{prop: "DNSName", name: "DNSName", pkg: "", typ: $String, tag: ""}, {prop: "Intermediates", name: "Intermediates", pkg: "", typ: ptrType, tag: ""}, {prop: "Roots", name: "Roots", pkg: "", typ: ptrType, tag: ""}, {prop: "CurrentTime", name: "CurrentTime", pkg: "", typ: time.Time, tag: ""}, {prop: "KeyUsages", name: "KeyUsages", pkg: "", typ: sliceType$11, tag: ""}]);
	certificate.init([{prop: "Raw", name: "Raw", pkg: "", typ: asn1.RawContent, tag: ""}, {prop: "TBSCertificate", name: "TBSCertificate", pkg: "", typ: tbsCertificate, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", pkg: "", typ: pkix.AlgorithmIdentifier, tag: ""}, {prop: "SignatureValue", name: "SignatureValue", pkg: "", typ: asn1.BitString, tag: ""}]);
	tbsCertificate.init([{prop: "Raw", name: "Raw", pkg: "", typ: asn1.RawContent, tag: ""}, {prop: "Version", name: "Version", pkg: "", typ: $Int, tag: "asn1:\"optional,explicit,default:1,tag:0\""}, {prop: "SerialNumber", name: "SerialNumber", pkg: "", typ: ptrType$5, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", pkg: "", typ: pkix.AlgorithmIdentifier, tag: ""}, {prop: "Issuer", name: "Issuer", pkg: "", typ: asn1.RawValue, tag: ""}, {prop: "Validity", name: "Validity", pkg: "", typ: validity, tag: ""}, {prop: "Subject", name: "Subject", pkg: "", typ: asn1.RawValue, tag: ""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: publicKeyInfo, tag: ""}, {prop: "UniqueId", name: "UniqueId", pkg: "", typ: asn1.BitString, tag: "asn1:\"optional,tag:1\""}, {prop: "SubjectUniqueId", name: "SubjectUniqueId", pkg: "", typ: asn1.BitString, tag: "asn1:\"optional,tag:2\""}, {prop: "Extensions", name: "Extensions", pkg: "", typ: sliceType$20, tag: "asn1:\"optional,explicit,tag:3\""}]);
	dsaAlgorithmParameters.init([{prop: "P", name: "P", pkg: "", typ: ptrType$5, tag: ""}, {prop: "Q", name: "Q", pkg: "", typ: ptrType$5, tag: ""}, {prop: "G", name: "G", pkg: "", typ: ptrType$5, tag: ""}]);
	dsaSignature.init([{prop: "R", name: "R", pkg: "", typ: ptrType$5, tag: ""}, {prop: "S", name: "S", pkg: "", typ: ptrType$5, tag: ""}]);
	ecdsaSignature.init([{prop: "R", name: "R", pkg: "", typ: ptrType$5, tag: ""}, {prop: "S", name: "S", pkg: "", typ: ptrType$5, tag: ""}]);
	validity.init([{prop: "NotBefore", name: "NotBefore", pkg: "", typ: time.Time, tag: ""}, {prop: "NotAfter", name: "NotAfter", pkg: "", typ: time.Time, tag: ""}]);
	publicKeyInfo.init([{prop: "Raw", name: "Raw", pkg: "", typ: asn1.RawContent, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: pkix.AlgorithmIdentifier, tag: ""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: asn1.BitString, tag: ""}]);
	authKeyId.init([{prop: "Id", name: "Id", pkg: "", typ: sliceType$3, tag: "asn1:\"optional,tag:0\""}]);
	Certificate.init([{prop: "Raw", name: "Raw", pkg: "", typ: sliceType$3, tag: ""}, {prop: "RawTBSCertificate", name: "RawTBSCertificate", pkg: "", typ: sliceType$3, tag: ""}, {prop: "RawSubjectPublicKeyInfo", name: "RawSubjectPublicKeyInfo", pkg: "", typ: sliceType$3, tag: ""}, {prop: "RawSubject", name: "RawSubject", pkg: "", typ: sliceType$3, tag: ""}, {prop: "RawIssuer", name: "RawIssuer", pkg: "", typ: sliceType$3, tag: ""}, {prop: "Signature", name: "Signature", pkg: "", typ: sliceType$3, tag: ""}, {prop: "SignatureAlgorithm", name: "SignatureAlgorithm", pkg: "", typ: SignatureAlgorithm, tag: ""}, {prop: "PublicKeyAlgorithm", name: "PublicKeyAlgorithm", pkg: "", typ: PublicKeyAlgorithm, tag: ""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: $emptyInterface, tag: ""}, {prop: "Version", name: "Version", pkg: "", typ: $Int, tag: ""}, {prop: "SerialNumber", name: "SerialNumber", pkg: "", typ: ptrType$5, tag: ""}, {prop: "Issuer", name: "Issuer", pkg: "", typ: pkix.Name, tag: ""}, {prop: "Subject", name: "Subject", pkg: "", typ: pkix.Name, tag: ""}, {prop: "NotBefore", name: "NotBefore", pkg: "", typ: time.Time, tag: ""}, {prop: "NotAfter", name: "NotAfter", pkg: "", typ: time.Time, tag: ""}, {prop: "KeyUsage", name: "KeyUsage", pkg: "", typ: KeyUsage, tag: ""}, {prop: "Extensions", name: "Extensions", pkg: "", typ: sliceType$20, tag: ""}, {prop: "ExtraExtensions", name: "ExtraExtensions", pkg: "", typ: sliceType$20, tag: ""}, {prop: "ExtKeyUsage", name: "ExtKeyUsage", pkg: "", typ: sliceType$11, tag: ""}, {prop: "UnknownExtKeyUsage", name: "UnknownExtKeyUsage", pkg: "", typ: sliceType$15, tag: ""}, {prop: "BasicConstraintsValid", name: "BasicConstraintsValid", pkg: "", typ: $Bool, tag: ""}, {prop: "IsCA", name: "IsCA", pkg: "", typ: $Bool, tag: ""}, {prop: "MaxPathLen", name: "MaxPathLen", pkg: "", typ: $Int, tag: ""}, {prop: "MaxPathLenZero", name: "MaxPathLenZero", pkg: "", typ: $Bool, tag: ""}, {prop: "SubjectKeyId", name: "SubjectKeyId", pkg: "", typ: sliceType$3, tag: ""}, {prop: "AuthorityKeyId", name: "AuthorityKeyId", pkg: "", typ: sliceType$3, tag: ""}, {prop: "OCSPServer", name: "OCSPServer", pkg: "", typ: sliceType$12, tag: ""}, {prop: "IssuingCertificateURL", name: "IssuingCertificateURL", pkg: "", typ: sliceType$12, tag: ""}, {prop: "DNSNames", name: "DNSNames", pkg: "", typ: sliceType$12, tag: ""}, {prop: "EmailAddresses", name: "EmailAddresses", pkg: "", typ: sliceType$12, tag: ""}, {prop: "IPAddresses", name: "IPAddresses", pkg: "", typ: sliceType$13, tag: ""}, {prop: "PermittedDNSDomainsCritical", name: "PermittedDNSDomainsCritical", pkg: "", typ: $Bool, tag: ""}, {prop: "PermittedDNSDomains", name: "PermittedDNSDomains", pkg: "", typ: sliceType$12, tag: ""}, {prop: "CRLDistributionPoints", name: "CRLDistributionPoints", pkg: "", typ: sliceType$12, tag: ""}, {prop: "PolicyIdentifiers", name: "PolicyIdentifiers", pkg: "", typ: sliceType$15, tag: ""}]);
	ConstraintViolationError.init([]);
	UnhandledCriticalExtension.init([]);
	basicConstraints.init([{prop: "IsCA", name: "IsCA", pkg: "", typ: $Bool, tag: "asn1:\"optional\""}, {prop: "MaxPathLen", name: "MaxPathLen", pkg: "", typ: $Int, tag: "asn1:\"optional,default:-1\""}]);
	policyInformation.init([{prop: "Policy", name: "Policy", pkg: "", typ: asn1.ObjectIdentifier, tag: ""}]);
	nameConstraints.init([{prop: "Permitted", name: "Permitted", pkg: "", typ: sliceType$21, tag: "asn1:\"optional,tag:0\""}, {prop: "Excluded", name: "Excluded", pkg: "", typ: sliceType$21, tag: "asn1:\"optional,tag:1\""}]);
	generalSubtree.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: "asn1:\"tag:2,optional,ia5\""}]);
	authorityInfoAccess.init([{prop: "Method", name: "Method", pkg: "", typ: asn1.ObjectIdentifier, tag: ""}, {prop: "Location", name: "Location", pkg: "", typ: asn1.RawValue, tag: ""}]);
	distributionPoint.init([{prop: "DistributionPoint", name: "DistributionPoint", pkg: "", typ: distributionPointName, tag: "asn1:\"optional,tag:0\""}, {prop: "Reason", name: "Reason", pkg: "", typ: asn1.BitString, tag: "asn1:\"optional,tag:1\""}, {prop: "CRLIssuer", name: "CRLIssuer", pkg: "", typ: asn1.RawValue, tag: "asn1:\"optional,tag:2\""}]);
	distributionPointName.init([{prop: "FullName", name: "FullName", pkg: "", typ: asn1.RawValue, tag: "asn1:\"optional,tag:0\""}, {prop: "RelativeName", name: "RelativeName", pkg: "", typ: pkix.RDNSequence, tag: "asn1:\"optional,tag:1\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crypto.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = aes.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = cipher.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = des.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dsa.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ecdsa.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elliptic.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = md5.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rsa.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha1.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha256.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha512.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pkix.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = asn1.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hex.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pem.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = net.$init(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = exec.$init(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		once = new sync.Once.ptr();
		systemRoots = ptrType.nil;
		$pkg.IncorrectPasswordError = errors.New("x509: decryption password incorrect");
		oidSignatureMD2WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 2]);
		oidSignatureMD5WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 4]);
		oidSignatureSHA1WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 5]);
		oidSignatureSHA256WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 11]);
		oidSignatureSHA384WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 12]);
		oidSignatureSHA512WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 13]);
		oidSignatureDSAWithSHA1 = new asn1.ObjectIdentifier([1, 2, 840, 10040, 4, 3]);
		oidSignatureDSAWithSHA256 = new asn1.ObjectIdentifier([2, 16, 840, 1, 101, 4, 3, 2]);
		oidSignatureECDSAWithSHA1 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 1]);
		oidSignatureECDSAWithSHA256 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 2]);
		oidSignatureECDSAWithSHA384 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 3]);
		oidSignatureECDSAWithSHA512 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 4]);
		signatureAlgorithmDetails = new sliceType$1([new structType.ptr(1, oidSignatureMD2WithRSA, 1, 0), new structType.ptr(2, oidSignatureMD5WithRSA, 1, 2), new structType.ptr(3, oidSignatureSHA1WithRSA, 1, 3), new structType.ptr(4, oidSignatureSHA256WithRSA, 1, 5), new structType.ptr(5, oidSignatureSHA384WithRSA, 1, 6), new structType.ptr(6, oidSignatureSHA512WithRSA, 1, 7), new structType.ptr(7, oidSignatureDSAWithSHA1, 2, 3), new structType.ptr(8, oidSignatureDSAWithSHA256, 2, 5), new structType.ptr(9, oidSignatureECDSAWithSHA1, 3, 3), new structType.ptr(10, oidSignatureECDSAWithSHA256, 3, 5), new structType.ptr(11, oidSignatureECDSAWithSHA384, 3, 6), new structType.ptr(12, oidSignatureECDSAWithSHA512, 3, 7)]);
		oidPublicKeyRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 1]);
		oidPublicKeyDSA = new asn1.ObjectIdentifier([1, 2, 840, 10040, 4, 1]);
		oidPublicKeyECDSA = new asn1.ObjectIdentifier([1, 2, 840, 10045, 2, 1]);
		oidNamedCurveP224 = new asn1.ObjectIdentifier([1, 3, 132, 0, 33]);
		oidNamedCurveP256 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 3, 1, 7]);
		oidNamedCurveP384 = new asn1.ObjectIdentifier([1, 3, 132, 0, 34]);
		oidNamedCurveP521 = new asn1.ObjectIdentifier([1, 3, 132, 0, 35]);
		oidExtKeyUsageAny = new asn1.ObjectIdentifier([2, 5, 29, 37, 0]);
		oidExtKeyUsageServerAuth = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 1]);
		oidExtKeyUsageClientAuth = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 2]);
		oidExtKeyUsageCodeSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 3]);
		oidExtKeyUsageEmailProtection = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 4]);
		oidExtKeyUsageIPSECEndSystem = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 5]);
		oidExtKeyUsageIPSECTunnel = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 6]);
		oidExtKeyUsageIPSECUser = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 7]);
		oidExtKeyUsageTimeStamping = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 8]);
		oidExtKeyUsageOCSPSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 9]);
		oidExtKeyUsageMicrosoftServerGatedCrypto = new asn1.ObjectIdentifier([1, 3, 6, 1, 4, 1, 311, 10, 3, 3]);
		oidExtKeyUsageNetscapeServerGatedCrypto = new asn1.ObjectIdentifier([2, 16, 840, 1, 113730, 4, 1]);
		extKeyUsageOIDs = new sliceType$2([new structType$1.ptr(0, oidExtKeyUsageAny), new structType$1.ptr(1, oidExtKeyUsageServerAuth), new structType$1.ptr(2, oidExtKeyUsageClientAuth), new structType$1.ptr(3, oidExtKeyUsageCodeSigning), new structType$1.ptr(4, oidExtKeyUsageEmailProtection), new structType$1.ptr(5, oidExtKeyUsageIPSECEndSystem), new structType$1.ptr(6, oidExtKeyUsageIPSECTunnel), new structType$1.ptr(7, oidExtKeyUsageIPSECUser), new structType$1.ptr(8, oidExtKeyUsageTimeStamping), new structType$1.ptr(9, oidExtKeyUsageOCSPSigning), new structType$1.ptr(10, oidExtKeyUsageMicrosoftServerGatedCrypto), new structType$1.ptr(11, oidExtKeyUsageNetscapeServerGatedCrypto)]);
		$pkg.ErrUnsupportedAlgorithm = errors.New("x509: cannot verify signature: algorithm unimplemented");
		entrustBrokenSPKI = new sliceType$3([48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 151, 163, 45, 60, 158, 222, 5, 218, 19, 194, 17, 141, 157, 142, 227, 127, 199, 75, 126, 90, 159, 179, 255, 98, 171, 115, 200, 40, 107, 186, 16, 100, 130, 135, 19, 205, 87, 24, 255, 40, 206, 192, 230, 14, 6, 145, 80, 41, 131, 209, 242, 195, 42, 219, 216, 219, 78, 4, 204, 0, 235, 139, 182, 150, 220, 188, 170, 250, 82, 119, 4, 193, 219, 25, 228, 174, 156, 253, 60, 139, 3, 239, 77, 188, 26, 3, 101, 249, 193, 177, 63, 114, 134, 242, 56, 170, 25, 174, 16, 136, 120, 40, 218, 117, 195, 61, 2, 130, 2, 156, 185, 193, 101, 119, 118, 36, 76, 152, 247, 109, 49, 56, 251, 219, 254, 219, 55, 2, 118, 161, 24, 151, 166, 204, 222, 32, 9, 73, 54, 36, 105, 66, 246, 228, 55, 98, 241, 89, 109, 169, 60, 237, 52, 156, 163, 142, 219, 220, 58, 215, 247, 10, 111, 239, 46, 216, 213, 147, 90, 122, 237, 8, 73, 104, 226, 65, 227, 90, 144, 193, 134, 85, 252, 81, 67, 157, 224, 178, 196, 103, 180, 203, 50, 49, 37, 240, 84, 159, 75, 209, 111, 219, 212, 221, 252, 175, 94, 108, 120, 144, 149, 222, 202, 58, 72, 185, 121, 60, 155, 25, 214, 117, 5, 160, 249, 136, 215, 193, 232, 165, 9, 228, 26, 21, 220, 135, 35, 170, 178, 117, 140, 99, 37, 135, 216, 248, 61, 166, 194, 204, 102, 255, 165, 102, 104, 85, 2, 3, 1, 0, 1]);
		oidExtensionAuthorityInfoAccess = new sliceType$4([1, 3, 6, 1, 5, 5, 7, 1, 1]);
		oidAuthorityInfoAccessOcsp = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 48, 1]);
		oidAuthorityInfoAccessIssuers = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 48, 2]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base32"] = (function() {
	var $pkg = {}, $init, bytes, io, strconv, strings, Encoding, CorruptInputError, sliceType, ptrType, arrayType$2, arrayType$4, removeNewlinesMapper, NewEncoding;
	bytes = $packages["bytes"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base32.Encoding", "Encoding", "encoding/base32", function(encode_, decodeMap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = "";
			this.decodeMap = arrayType$4.zero();
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base32.CorruptInputError", "CorruptInputError", "encoding/base32", null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$2 = $arrayType($Uint8, 8);
	arrayType$4 = $arrayType($Uint8, 256);
	NewEncoding = function(encoder$1) {
		var $ptr, e, encoder$1, i, i$1, x, x$1, x$2;
		e = new Encoding.ptr();
		e.encode = encoder$1;
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			(x = e.decodeMap, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24)));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, b0, b1, b2, b3, b4, b5, b6, b7, dst, enc, src;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		while (true) {
			if (!(src.$length > 0)) { break; }
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; _tmp$3 = 0; _tmp$4 = 0; _tmp$5 = 0; _tmp$6 = 0; _tmp$7 = 0; b0 = _tmp; b1 = _tmp$1; b2 = _tmp$2; b3 = _tmp$3; b4 = _tmp$4; b5 = _tmp$5; b6 = _tmp$6; b7 = _tmp$7;
			_ref = src.$length;
			if (_ref === 4) {
				b6 = (b6 | ((((((3 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) << 3 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b5 = ((((3 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) >>> 2 << 24 >>> 24)) & 31) >>> 0;
				b4 = (3 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) >>> 7 << 24 >>> 24;
				b4 = (b4 | ((((((2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) << 1 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b3 = ((((2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 4 << 24 >>> 24)) & 31) >>> 0;
				b3 = (b3 | ((((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b2 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0;
				b1 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0;
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 3 << 24 >>> 24;
			} else if (_ref === 3) {
				b4 = (b4 | ((((((2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) << 1 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b3 = ((((2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 4 << 24 >>> 24)) & 31) >>> 0;
				b3 = (b3 | ((((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b2 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0;
				b1 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0;
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 3 << 24 >>> 24;
			} else if (_ref === 2) {
				b3 = (b3 | ((((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b2 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0;
				b1 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0;
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 3 << 24 >>> 24;
			} else if (_ref === 1) {
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 3 << 24 >>> 24;
			} else {
				b7 = ((4 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 4]) & 31) >>> 0;
				b6 = (4 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 4]) >>> 5 << 24 >>> 24;
				b6 = (b6 | ((((((3 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) << 3 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b5 = ((((3 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) >>> 2 << 24 >>> 24)) & 31) >>> 0;
				b4 = (3 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) >>> 7 << 24 >>> 24;
				b4 = (b4 | ((((((2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) << 1 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b3 = ((((2 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 4 << 24 >>> 24)) & 31) >>> 0;
				b3 = (b3 | ((((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 4 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b2 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 1 << 24 >>> 24)) & 31) >>> 0;
				b1 = ((((1 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 6 << 24 >>> 24)) & 31) >>> 0;
				b1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 2 << 24 >>> 24)) & 31) >>> 0))) >>> 0;
				b0 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 3 << 24 >>> 24;
			}
			(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = enc.encode.charCodeAt(b0));
			(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = enc.encode.charCodeAt(b1));
			(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = enc.encode.charCodeAt(b2));
			(3 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = enc.encode.charCodeAt(b3));
			(4 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 4] = enc.encode.charCodeAt(b4));
			(5 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 5] = enc.encode.charCodeAt(b5));
			(6 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 6] = enc.encode.charCodeAt(b6));
			(7 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 7] = enc.encode.charCodeAt(b7));
			if (src.$length < 5) {
				(7 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 7] = 61);
				if (src.$length < 4) {
					(6 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 6] = 61);
					(5 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 5] = 61);
					if (src.$length < 3) {
						(4 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 4] = 61);
						if (src.$length < 2) {
							(3 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = 61);
							(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = 61);
						}
					}
				}
				break;
			}
			src = $subslice(src, 5);
			dst = $subslice(dst, 8);
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var $ptr, buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var $ptr, _q, enc, n;
		enc = this;
		return (_q = ((n + 4 >> 0)) / 5, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) * 8 >> 0;
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "illegal base32 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var $ptr, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dlen, dst, enc, end, err, in$1, j, k, n, olen, src, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		olen = src.$length;
		while (true) {
			if (!(src.$length > 0 && !end)) { break; }
			dbuf = $clone(arrayType$2.zero(), arrayType$2);
			dlen = 8;
			j = 0;
			while (true) {
				if (!(j < 8)) { break; }
				if (src.$length === 0) {
					_tmp = n; _tmp$1 = false; _tmp$2 = new CorruptInputError(0, ((olen - src.$length >> 0) - j >> 0)); n = _tmp; end = _tmp$1; err = _tmp$2;
					return [n, end, err];
				}
				in$1 = (0 >= src.$length ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]);
				src = $subslice(src, 1);
				if ((in$1 === 61) && j >= 2 && src.$length < 8) {
					if ((src.$length + j >> 0) < 7) {
						_tmp$3 = n; _tmp$4 = false; _tmp$5 = new CorruptInputError(0, olen); n = _tmp$3; end = _tmp$4; err = _tmp$5;
						return [n, end, err];
					}
					k = 0;
					while (true) {
						if (!(k < (7 - j >> 0))) { break; }
						if (src.$length > k && !((((k < 0 || k >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + k]) === 61))) {
							_tmp$6 = n; _tmp$7 = false; _tmp$8 = new CorruptInputError(0, (((olen - src.$length >> 0) + k >> 0) - 1 >> 0)); n = _tmp$6; end = _tmp$7; err = _tmp$8;
							return [n, end, err];
						}
						k = k + (1) >> 0;
					}
					_tmp$9 = j; _tmp$10 = true; dlen = _tmp$9; end = _tmp$10;
					if ((dlen === 1) || (dlen === 3) || (dlen === 6)) {
						_tmp$11 = n; _tmp$12 = false; _tmp$13 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$11; end = _tmp$12; err = _tmp$13;
						return [n, end, err];
					}
					break;
				}
				((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1])));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$14 = n; _tmp$15 = false; _tmp$16 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$14; end = _tmp$15; err = _tmp$16;
					return [n, end, err];
				}
				j = j + (1) >> 0;
			}
			_ref = dlen;
			if (_ref === 8) {
				(4 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 4] = ((dbuf[6] << 5 << 24 >>> 24) | dbuf[7]) >>> 0);
				(3 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = ((((dbuf[4] << 7 << 24 >>> 24) | (dbuf[5] << 2 << 24 >>> 24)) >>> 0) | (dbuf[6] >>> 3 << 24 >>> 24)) >>> 0);
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((dbuf[3] << 4 << 24 >>> 24) | (dbuf[4] >>> 1 << 24 >>> 24)) >>> 0);
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((((dbuf[1] << 6 << 24 >>> 24) | (dbuf[2] << 1 << 24 >>> 24)) >>> 0) | (dbuf[3] >>> 4 << 24 >>> 24)) >>> 0);
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 3 << 24 >>> 24) | (dbuf[1] >>> 2 << 24 >>> 24)) >>> 0);
			} else if (_ref === 7) {
				(3 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = ((((dbuf[4] << 7 << 24 >>> 24) | (dbuf[5] << 2 << 24 >>> 24)) >>> 0) | (dbuf[6] >>> 3 << 24 >>> 24)) >>> 0);
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((dbuf[3] << 4 << 24 >>> 24) | (dbuf[4] >>> 1 << 24 >>> 24)) >>> 0);
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((((dbuf[1] << 6 << 24 >>> 24) | (dbuf[2] << 1 << 24 >>> 24)) >>> 0) | (dbuf[3] >>> 4 << 24 >>> 24)) >>> 0);
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 3 << 24 >>> 24) | (dbuf[1] >>> 2 << 24 >>> 24)) >>> 0);
			} else if (_ref === 5) {
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((dbuf[3] << 4 << 24 >>> 24) | (dbuf[4] >>> 1 << 24 >>> 24)) >>> 0);
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((((dbuf[1] << 6 << 24 >>> 24) | (dbuf[2] << 1 << 24 >>> 24)) >>> 0) | (dbuf[3] >>> 4 << 24 >>> 24)) >>> 0);
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 3 << 24 >>> 24) | (dbuf[1] >>> 2 << 24 >>> 24)) >>> 0);
			} else if (_ref === 4) {
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((((dbuf[1] << 6 << 24 >>> 24) | (dbuf[2] << 1 << 24 >>> 24)) >>> 0) | (dbuf[3] >>> 4 << 24 >>> 24)) >>> 0);
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 3 << 24 >>> 24) | (dbuf[1] >>> 2 << 24 >>> 24)) >>> 0);
			} else if (_ref === 2) {
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 3 << 24 >>> 24) | (dbuf[1] >>> 2 << 24 >>> 24)) >>> 0);
			}
			dst = $subslice(dst, 5);
			_ref$1 = dlen;
			if (_ref$1 === 2) {
				n = n + (1) >> 0;
			} else if (_ref$1 === 4) {
				n = n + (2) >> 0;
			} else if (_ref$1 === 5) {
				n = n + (3) >> 0;
			} else if (_ref$1 === 7) {
				n = n + (4) >> 0;
			} else if (_ref$1 === 8) {
				n = n + (5) >> 0;
			}
		}
		_tmp$17 = n; _tmp$18 = end; _tmp$19 = $ifaceNil; n = _tmp$17; end = _tmp$18; err = _tmp$19;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var $ptr, _r, _tuple, dst, enc, err, n, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; enc = $f.enc; err = $f.err; n = $f.n; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		enc = this;
		_r = bytes.Map(removeNewlinesMapper, src); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		src = _r;
		_tuple = enc.decode(dst, src); n = _tuple[0]; err = _tuple[2];
		return [n, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoding.ptr.prototype.Decode }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.enc = enc; $f.err = err; $f.n = n; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var $ptr, _r, _tuple, dbuf, enc, err, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dbuf = $f.dbuf; enc = $f.enc; err = $f.err; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r = strings.Map(removeNewlinesMapper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s))); n = _tuple[0]; err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoding.ptr.prototype.DecodeString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dbuf = dbuf; $f.enc = enc; $f.err = err; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var $ptr, _q, enc, n;
		enc = this;
		return (_q = n / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) * 5 >> 0;
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base32", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init([{prop: "encode", name: "encode", pkg: "encoding/base32", typ: $String, tag: ""}, {prop: "decodeMap", name: "decodeMap", pkg: "encoding/base32", typ: arrayType$4, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
		$pkg.HexEncoding = NewEncoding("0123456789ABCDEFGHIJKLMNOPQRSTUV");
		removeNewlinesMapper = (function(r) {
			var $ptr, r;
			if ((r === 13) || (r === 10)) {
				return -1;
			}
			return r;
		});
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Printf, Println;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	time = $packages["time"];
	Logger = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", "Logger", "log", function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new nosync.Mutex.ptr();
			this.prefix = "";
			this.flag = 0;
			this.out = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.mu = mu_;
		this.prefix = prefix_;
		this.flag = flag_;
		this.out = out_;
		this.buf = buf_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 32);
	ptrType = $ptrType(sliceType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Logger);
	New = function(out, prefix, flag) {
		var $ptr, flag, out, prefix;
		return new Logger.ptr(new nosync.Mutex.ptr(), prefix, flag, out, sliceType.nil);
	};
	$pkg.New = New;
	itoa = function(buf, i, wid) {
		var $ptr, _q, _r, b, bp, buf, i, u, wid;
		u = (i >>> 0);
		if ((u === 0) && wid <= 1) {
			buf.$set($append(buf.$get(), 48));
			return;
		}
		b = $clone(arrayType.zero(), arrayType);
		bp = 32;
		while (true) {
			if (!(u > 0 || wid > 0)) { break; }
			bp = bp - (1) >> 0;
			wid = wid - (1) >> 0;
			((bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = ((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		buf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));
	};
	Logger.ptr.prototype.formatHeader = function(buf, t, file, line) {
		var $ptr, _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(t, time.Time);
		l = this;
		buf.$set($appendSlice(buf.$get(), new sliceType($stringToBytes(l.prefix))));
		/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((l.flag & 7) === 0))) { */ case 1:
			/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((l.flag & 1) === 0))) { */ case 3:
				_r = t.Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; year = _tuple[0]; month = _tuple[1]; day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, (month >> 0), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			/* } */ case 4:
			/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(((l.flag & 6) === 0))) { */ case 6:
				_r$1 = t.Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1; hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = t.Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			/* } */ case 7:
		/* } */ case 2:
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (true) {
					if (!(i > 0)) { break; }
					if (file.charCodeAt(i) === 47) {
						short$1 = file.substring((i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), new sliceType($stringToBytes(file))));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), new sliceType($stringToBytes(": "))));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.ptr.prototype.Output = function(calldepth, s) {
		var $ptr, _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		now = $clone(time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth); file = _tuple[1]; line = _tuple[2]; ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), now, file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.buf = $appendSlice(l.buf, new sliceType($stringToBytes(s)));
		if (s.length > 0 && !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r; err = _tuple$1[1];
		return err;
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.ptr.prototype.Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.ptr.prototype.Print = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.ptr.prototype.Println = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.ptr.prototype.Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.ptr.prototype.Fatalf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.ptr.prototype.Fatalln = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.ptr.prototype.Panic = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.ptr.prototype.Panicf = function(format, v) {
		var $ptr, _r, _r$1, format, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.ptr.prototype.Panicln = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.ptr.prototype.Flags = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.ptr.prototype.SetFlags = function(flag) {
		var $ptr, flag, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.ptr.prototype.Prefix = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.ptr.prototype.SetPrefix = function(prefix) {
		var $ptr, l, prefix, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Println = function(v) {
		var $ptr, _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	ptrType$1.methods = [{prop: "formatHeader", name: "formatHeader", pkg: "log", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: "Output", name: "Output", pkg: "", typ: $funcType([$Int, $String], [$error], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Println", name: "Println", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatal", name: "Fatal", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatalf", name: "Fatalf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Fatalln", name: "Fatalln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panic", name: "Panic", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panicf", name: "Panicf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Panicln", name: "Panicln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Flags", name: "Flags", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetFlags", name: "SetFlags", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetPrefix", name: "SetPrefix", pkg: "", typ: $funcType([$String], [], false)}];
	Logger.init([{prop: "mu", name: "mu", pkg: "log", typ: nosync.Mutex, tag: ""}, {prop: "prefix", name: "prefix", pkg: "log", typ: $String, tag: ""}, {prop: "flag", name: "flag", pkg: "log", typ: $Int, tag: ""}, {prop: "out", name: "out", pkg: "log", typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", pkg: "log", typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		std = New(os.Stderr, "", 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["text/scanner"] = (function() {
	var $pkg = {}, $init, bytes, fmt, io, os, unicode, utf8, Position, sliceType, ptrType;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	os = $packages["os"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Position = $pkg.Position = $newType(0, $kindStruct, "scanner.Position", "Position", "text/scanner", function(Filename_, Offset_, Line_, Column_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Filename = "";
			this.Offset = 0;
			this.Line = 0;
			this.Column = 0;
			return;
		}
		this.Filename = Filename_;
		this.Offset = Offset_;
		this.Line = Line_;
		this.Column = Column_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Position);
	Position.ptr.prototype.IsValid = function() {
		var $ptr, pos;
		pos = this;
		return pos.Line > 0;
	};
	Position.prototype.IsValid = function() { return this.$val.IsValid(); };
	Position.ptr.prototype.String = function() {
		var $ptr, _r, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = $clone(this, Position);
		s = pos.Filename;
		/* */ if (pos.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (pos.IsValid()) { */ case 1:
			if (!(s === "")) {
				s = s + (":");
			}
			_r = fmt.Sprintf("%d:%d", new sliceType([new $Int(pos.Line), new $Int(pos.Column)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = s + (_r);
		/* } */ case 2:
		if (s === "") {
			s = "???";
		}
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Position.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Position.prototype.String = function() { return this.$val.String(); };
	Position.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}];
	Position.init([{prop: "Filename", name: "Filename", pkg: "", typ: $String, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Int, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Column", name: "Column", pkg: "", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/cloudflare/dns"] = (function() {
	var $pkg = {}, $init, bufio, bytes, crypto, dsa, ecdsa, elliptic, hmac, md5, rand, rsa, sha1, sha256, sha512, x509, asn1, base32, base64, hex, errors, fmt, hash, io, log, big, rand$1, net, os, reflect, sort, strconv, strings, sync, syscall, scanner, time, Error, RR, RR_Header, rrsigWireFmt, dnskeyWireFmt, wireSlice, OPT, EDNS0, EDNS0_NSID, EDNS0_SUBNET, EDNS0_UL, EDNS0_LLQ, EDNS0_DAU, EDNS0_DHU, EDNS0_N3U, EDNS0_LOCAL, MsgHdr, Msg, saltWireFmt, PrivateRdata, scan, Handler, ResponseWriter, ServeMux, HandlerFunc, TSIG, Type, Class, Header, Question, ANY, CNAME, HINFO, MB, MG, MINFO, MR, MF, MD, MX, AFSDB, X25, RT, NS, PTR, RP, SOA, TXT, SPF, SRV, NAPTR, CERT, DNAME, A, AAAA, PX, GPOS, LOC, SIG, RRSIG, NSEC, DLV, CDS, DS, KX, TA, TALINK, SSHFP, IPSECKEY, KEY, CDNSKEY, DNSKEY, RKEY, NSAP, NSAPPTR, NSEC3, NSEC3PARAM, TKEY, RFC3597, URI, DHCID, TLSA, HIP, NINFO, WKS, NID, L32, L64, LP, EUI48, EUI64, UID, GID, UINFO, EID, NIMLOC, OPENPGPKEY, debugging, ParseError, lex, Token, parserFunc, ptrType, ptrType$2, sliceType, ptrType$4, sliceType$1, sliceType$2, sliceType$3, ptrType$7, ptrType$8, ptrType$9, ptrType$10, structType, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, sliceType$4, ptrType$27, ptrType$28, ptrType$29, chanType, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, sliceType$5, arrayType, sliceType$6, sliceType$7, ptrType$38, sliceType$8, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$44, ptrType$45, ptrType$48, ptrType$49, ptrType$54, chanType$3, ptrType$55, ptrType$57, ptrType$59, ptrType$60, funcType, ptrType$62, mapType$1, ptrType$65, ptrType$66, ptrType$67, ptrType$68, ptrType$69, ptrType$70, ptrType$71, ptrType$72, ptrType$73, ptrType$74, ptrType$75, ptrType$76, ptrType$77, ptrType$78, ptrType$79, ptrType$80, ptrType$81, ptrType$82, ptrType$83, ptrType$84, ptrType$85, ptrType$86, ptrType$87, ptrType$88, ptrType$89, ptrType$90, ptrType$91, ptrType$92, ptrType$93, ptrType$94, ptrType$95, ptrType$96, ptrType$97, ptrType$98, ptrType$99, ptrType$100, ptrType$101, ptrType$102, ptrType$103, ptrType$104, ptrType$105, ptrType$106, ptrType$107, ptrType$108, ptrType$109, ptrType$110, ptrType$111, funcType$4, typeToRR, typeToparserFunc, _map, _key, _map$1, _key$1, _map$2, _key$2, _map$3, _key$3, _map$4, _key$4, _map$5, _key$5, _map$6, _key$6, _map$7, _key$7, _map$8, _key$8, _map$9, _key$9, IsDomainName, IsFqdn, Fqdn, divRoundUp, sign, rawSignatureData, exponentToBuf, curveToBuf, dsaToBuf, readPrivateKeyRSA, readPrivateKeyDSA, readPrivateKeyECDSA, parseKey, klexer, SplitDomainName, CountLabel, Split, NextLabel, PackDomainName, packDomainName, UnpackDomainName, packTxt, packTxtString, unpackTxt, unpackTxtString, packStructValue, structValue, PackStruct, packStructCompress, unpackStructValue, isDigit, dddToByte, UnpackStruct, intToBytes, unpackUint16, packUint16, toBase32, fromBase32, toBase64, fromBase64, PackRR, UnpackRR, reverseInt8, reverseInt16, reverseInt, compressionLenHelper, compressionLenSearch, compressionLenHelperType, compressionLenSearchType, id, HashName, rawSetRdlength, scanInit, NewServeMux, HandleFailed, failedHandler, CertificateToDANE, tsigTimeToString, sprintName, sprintTxt, appendDomainNameByte, appendTXTStringByte, nextByte, cmToM, rfc3597Header, TimeToString, StringToTime, saltToString, euiToString, copyIP, generate, modToPrintf, NewRR, ReadRR, ParseZone, parseZoneHelper, parseZone, zlexer, classToInt, typeToInt, stringToTtl, stringToCm, appendOrigin, locCheckNorth, locCheckEast, slurpRemainder, stringToNodeID, setRR, endingToString, endingToTxtSlice, setA, setAAAA, setNS, setPTR, setNSAPPTR, setRP, setMR, setMB, setMG, setHINFO, setMINFO, setMF, setMD, setMX, setRT, setAFSDB, setX25, setKX, setCNAME, setDNAME, setSOA, setSRV, setNAPTR, setTALINK, setLOC, setHIP, setCERT, setOPENPGPKEY, setSIG, setRRSIG, setNSEC, setNSEC3, setNSEC3PARAM, setEUI48, setEUI64, setWKS, setSSHFP, setDNSKEYs, setKEY, setDNSKEY, setCDNSKEY, setRKEY, setEID, setNIMLOC, setNSAP, setGPOS, setDSs, setDS, setDLV, setCDS, setTA, setTLSA, setRFC3597, setSPF, setTXT, setNINFO, setURI, setDHCID, setNID, setL32, setLP, setL64, setUID, setGID, setUINFO, setPX, setIPSECKEY;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	crypto = $packages["crypto"];
	dsa = $packages["crypto/dsa"];
	ecdsa = $packages["crypto/ecdsa"];
	elliptic = $packages["crypto/elliptic"];
	hmac = $packages["crypto/hmac"];
	md5 = $packages["crypto/md5"];
	rand = $packages["crypto/rand"];
	rsa = $packages["crypto/rsa"];
	sha1 = $packages["crypto/sha1"];
	sha256 = $packages["crypto/sha256"];
	sha512 = $packages["crypto/sha512"];
	x509 = $packages["crypto/x509"];
	asn1 = $packages["encoding/asn1"];
	base32 = $packages["encoding/base32"];
	base64 = $packages["encoding/base64"];
	hex = $packages["encoding/hex"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	io = $packages["io"];
	log = $packages["log"];
	big = $packages["math/big"];
	rand$1 = $packages["math/rand"];
	net = $packages["net"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	syscall = $packages["syscall"];
	scanner = $packages["text/scanner"];
	time = $packages["time"];
	Error = $pkg.Error = $newType(0, $kindStruct, "dns.Error", "Error", "github.com/cloudflare/dns", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = "";
			return;
		}
		this.err = err_;
	});
	RR = $pkg.RR = $newType(8, $kindInterface, "dns.RR", "RR", "github.com/cloudflare/dns", null);
	RR_Header = $pkg.RR_Header = $newType(0, $kindStruct, "dns.RR_Header", "RR_Header", "github.com/cloudflare/dns", function(Name_, Rrtype_, Class_, Ttl_, Rdlength_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Rrtype = 0;
			this.Class = 0;
			this.Ttl = 0;
			this.Rdlength = 0;
			return;
		}
		this.Name = Name_;
		this.Rrtype = Rrtype_;
		this.Class = Class_;
		this.Ttl = Ttl_;
		this.Rdlength = Rdlength_;
	});
	rrsigWireFmt = $pkg.rrsigWireFmt = $newType(0, $kindStruct, "dns.rrsigWireFmt", "rrsigWireFmt", "github.com/cloudflare/dns", function(TypeCovered_, Algorithm_, Labels_, OrigTtl_, Expiration_, Inception_, KeyTag_, SignerName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.TypeCovered = 0;
			this.Algorithm = 0;
			this.Labels = 0;
			this.OrigTtl = 0;
			this.Expiration = 0;
			this.Inception = 0;
			this.KeyTag = 0;
			this.SignerName = "";
			return;
		}
		this.TypeCovered = TypeCovered_;
		this.Algorithm = Algorithm_;
		this.Labels = Labels_;
		this.OrigTtl = OrigTtl_;
		this.Expiration = Expiration_;
		this.Inception = Inception_;
		this.KeyTag = KeyTag_;
		this.SignerName = SignerName_;
	});
	dnskeyWireFmt = $pkg.dnskeyWireFmt = $newType(0, $kindStruct, "dns.dnskeyWireFmt", "dnskeyWireFmt", "github.com/cloudflare/dns", function(Flags_, Protocol_, Algorithm_, PublicKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Flags = 0;
			this.Protocol = 0;
			this.Algorithm = 0;
			this.PublicKey = "";
			return;
		}
		this.Flags = Flags_;
		this.Protocol = Protocol_;
		this.Algorithm = Algorithm_;
		this.PublicKey = PublicKey_;
	});
	wireSlice = $pkg.wireSlice = $newType(12, $kindSlice, "dns.wireSlice", "wireSlice", "github.com/cloudflare/dns", null);
	OPT = $pkg.OPT = $newType(0, $kindStruct, "dns.OPT", "OPT", "github.com/cloudflare/dns", function(Hdr_, Option_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Option = sliceType$6.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.Option = Option_;
	});
	EDNS0 = $pkg.EDNS0 = $newType(8, $kindInterface, "dns.EDNS0", "EDNS0", "github.com/cloudflare/dns", null);
	EDNS0_NSID = $pkg.EDNS0_NSID = $newType(0, $kindStruct, "dns.EDNS0_NSID", "EDNS0_NSID", "github.com/cloudflare/dns", function(Code_, Nsid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.Nsid = "";
			return;
		}
		this.Code = Code_;
		this.Nsid = Nsid_;
	});
	EDNS0_SUBNET = $pkg.EDNS0_SUBNET = $newType(0, $kindStruct, "dns.EDNS0_SUBNET", "EDNS0_SUBNET", "github.com/cloudflare/dns", function(Code_, Family_, SourceNetmask_, SourceScope_, Address_, DraftOption_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.Family = 0;
			this.SourceNetmask = 0;
			this.SourceScope = 0;
			this.Address = net.IP.nil;
			this.DraftOption = false;
			return;
		}
		this.Code = Code_;
		this.Family = Family_;
		this.SourceNetmask = SourceNetmask_;
		this.SourceScope = SourceScope_;
		this.Address = Address_;
		this.DraftOption = DraftOption_;
	});
	EDNS0_UL = $pkg.EDNS0_UL = $newType(0, $kindStruct, "dns.EDNS0_UL", "EDNS0_UL", "github.com/cloudflare/dns", function(Code_, Lease_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.Lease = 0;
			return;
		}
		this.Code = Code_;
		this.Lease = Lease_;
	});
	EDNS0_LLQ = $pkg.EDNS0_LLQ = $newType(0, $kindStruct, "dns.EDNS0_LLQ", "EDNS0_LLQ", "github.com/cloudflare/dns", function(Code_, Version_, Opcode_, Error_, Id_, LeaseLife_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.Version = 0;
			this.Opcode = 0;
			this.Error = 0;
			this.Id = new $Uint64(0, 0);
			this.LeaseLife = 0;
			return;
		}
		this.Code = Code_;
		this.Version = Version_;
		this.Opcode = Opcode_;
		this.Error = Error_;
		this.Id = Id_;
		this.LeaseLife = LeaseLife_;
	});
	EDNS0_DAU = $pkg.EDNS0_DAU = $newType(0, $kindStruct, "dns.EDNS0_DAU", "EDNS0_DAU", "github.com/cloudflare/dns", function(Code_, AlgCode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.AlgCode = sliceType.nil;
			return;
		}
		this.Code = Code_;
		this.AlgCode = AlgCode_;
	});
	EDNS0_DHU = $pkg.EDNS0_DHU = $newType(0, $kindStruct, "dns.EDNS0_DHU", "EDNS0_DHU", "github.com/cloudflare/dns", function(Code_, AlgCode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.AlgCode = sliceType.nil;
			return;
		}
		this.Code = Code_;
		this.AlgCode = AlgCode_;
	});
	EDNS0_N3U = $pkg.EDNS0_N3U = $newType(0, $kindStruct, "dns.EDNS0_N3U", "EDNS0_N3U", "github.com/cloudflare/dns", function(Code_, AlgCode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.AlgCode = sliceType.nil;
			return;
		}
		this.Code = Code_;
		this.AlgCode = AlgCode_;
	});
	EDNS0_LOCAL = $pkg.EDNS0_LOCAL = $newType(0, $kindStruct, "dns.EDNS0_LOCAL", "EDNS0_LOCAL", "github.com/cloudflare/dns", function(Code_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = 0;
			this.Data = sliceType.nil;
			return;
		}
		this.Code = Code_;
		this.Data = Data_;
	});
	MsgHdr = $pkg.MsgHdr = $newType(0, $kindStruct, "dns.MsgHdr", "MsgHdr", "github.com/cloudflare/dns", function(Id_, Response_, Opcode_, Authoritative_, Truncated_, RecursionDesired_, RecursionAvailable_, Zero_, AuthenticatedData_, CheckingDisabled_, Rcode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Id = 0;
			this.Response = false;
			this.Opcode = 0;
			this.Authoritative = false;
			this.Truncated = false;
			this.RecursionDesired = false;
			this.RecursionAvailable = false;
			this.Zero = false;
			this.AuthenticatedData = false;
			this.CheckingDisabled = false;
			this.Rcode = 0;
			return;
		}
		this.Id = Id_;
		this.Response = Response_;
		this.Opcode = Opcode_;
		this.Authoritative = Authoritative_;
		this.Truncated = Truncated_;
		this.RecursionDesired = RecursionDesired_;
		this.RecursionAvailable = RecursionAvailable_;
		this.Zero = Zero_;
		this.AuthenticatedData = AuthenticatedData_;
		this.CheckingDisabled = CheckingDisabled_;
		this.Rcode = Rcode_;
	});
	Msg = $pkg.Msg = $newType(0, $kindStruct, "dns.Msg", "Msg", "github.com/cloudflare/dns", function(MsgHdr_, Compress_, Question_, Answer_, Ns_, Extra_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.MsgHdr = new MsgHdr.ptr();
			this.Compress = false;
			this.Question = sliceType$2.nil;
			this.Answer = sliceType$3.nil;
			this.Ns = sliceType$3.nil;
			this.Extra = sliceType$3.nil;
			return;
		}
		this.MsgHdr = MsgHdr_;
		this.Compress = Compress_;
		this.Question = Question_;
		this.Answer = Answer_;
		this.Ns = Ns_;
		this.Extra = Extra_;
	});
	saltWireFmt = $pkg.saltWireFmt = $newType(0, $kindStruct, "dns.saltWireFmt", "saltWireFmt", "github.com/cloudflare/dns", function(Salt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Salt = "";
			return;
		}
		this.Salt = Salt_;
	});
	PrivateRdata = $pkg.PrivateRdata = $newType(8, $kindInterface, "dns.PrivateRdata", "PrivateRdata", "github.com/cloudflare/dns", null);
	scan = $pkg.scan = $newType(0, $kindStruct, "dns.scan", "scan", "github.com/cloudflare/dns", function(src_, position_, eof_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = ptrType$59.nil;
			this.position = new scanner.Position.ptr();
			this.eof = false;
			return;
		}
		this.src = src_;
		this.position = position_;
		this.eof = eof_;
	});
	Handler = $pkg.Handler = $newType(8, $kindInterface, "dns.Handler", "Handler", "github.com/cloudflare/dns", null);
	ResponseWriter = $pkg.ResponseWriter = $newType(8, $kindInterface, "dns.ResponseWriter", "ResponseWriter", "github.com/cloudflare/dns", null);
	ServeMux = $pkg.ServeMux = $newType(0, $kindStruct, "dns.ServeMux", "ServeMux", "github.com/cloudflare/dns", function(z_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.z = false;
			this.m = ptrType$45.nil;
			return;
		}
		this.z = z_;
		this.m = m_;
	});
	HandlerFunc = $pkg.HandlerFunc = $newType(4, $kindFunc, "dns.HandlerFunc", "HandlerFunc", "github.com/cloudflare/dns", null);
	TSIG = $pkg.TSIG = $newType(0, $kindStruct, "dns.TSIG", "TSIG", "github.com/cloudflare/dns", function(Hdr_, Algorithm_, TimeSigned_, Fudge_, MACSize_, MAC_, OrigId_, Error_, OtherLen_, OtherData_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Algorithm = "";
			this.TimeSigned = new $Uint64(0, 0);
			this.Fudge = 0;
			this.MACSize = 0;
			this.MAC = "";
			this.OrigId = 0;
			this.Error = 0;
			this.OtherLen = 0;
			this.OtherData = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Algorithm = Algorithm_;
		this.TimeSigned = TimeSigned_;
		this.Fudge = Fudge_;
		this.MACSize = MACSize_;
		this.MAC = MAC_;
		this.OrigId = OrigId_;
		this.Error = Error_;
		this.OtherLen = OtherLen_;
		this.OtherData = OtherData_;
	});
	Type = $pkg.Type = $newType(2, $kindUint16, "dns.Type", "Type", "github.com/cloudflare/dns", null);
	Class = $pkg.Class = $newType(2, $kindUint16, "dns.Class", "Class", "github.com/cloudflare/dns", null);
	Header = $pkg.Header = $newType(0, $kindStruct, "dns.Header", "Header", "github.com/cloudflare/dns", function(Id_, Bits_, Qdcount_, Ancount_, Nscount_, Arcount_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Id = 0;
			this.Bits = 0;
			this.Qdcount = 0;
			this.Ancount = 0;
			this.Nscount = 0;
			this.Arcount = 0;
			return;
		}
		this.Id = Id_;
		this.Bits = Bits_;
		this.Qdcount = Qdcount_;
		this.Ancount = Ancount_;
		this.Nscount = Nscount_;
		this.Arcount = Arcount_;
	});
	Question = $pkg.Question = $newType(0, $kindStruct, "dns.Question", "Question", "github.com/cloudflare/dns", function(Name_, Qtype_, Qclass_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Qtype = 0;
			this.Qclass = 0;
			return;
		}
		this.Name = Name_;
		this.Qtype = Qtype_;
		this.Qclass = Qclass_;
	});
	ANY = $pkg.ANY = $newType(0, $kindStruct, "dns.ANY", "ANY", "github.com/cloudflare/dns", function(Hdr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			return;
		}
		this.Hdr = Hdr_;
	});
	CNAME = $pkg.CNAME = $newType(0, $kindStruct, "dns.CNAME", "CNAME", "github.com/cloudflare/dns", function(Hdr_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Target = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Target = Target_;
	});
	HINFO = $pkg.HINFO = $newType(0, $kindStruct, "dns.HINFO", "HINFO", "github.com/cloudflare/dns", function(Hdr_, Cpu_, Os_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Cpu = "";
			this.Os = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Cpu = Cpu_;
		this.Os = Os_;
	});
	MB = $pkg.MB = $newType(0, $kindStruct, "dns.MB", "MB", "github.com/cloudflare/dns", function(Hdr_, Mb_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Mb = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mb = Mb_;
	});
	MG = $pkg.MG = $newType(0, $kindStruct, "dns.MG", "MG", "github.com/cloudflare/dns", function(Hdr_, Mg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Mg = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mg = Mg_;
	});
	MINFO = $pkg.MINFO = $newType(0, $kindStruct, "dns.MINFO", "MINFO", "github.com/cloudflare/dns", function(Hdr_, Rmail_, Email_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Rmail = "";
			this.Email = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Rmail = Rmail_;
		this.Email = Email_;
	});
	MR = $pkg.MR = $newType(0, $kindStruct, "dns.MR", "MR", "github.com/cloudflare/dns", function(Hdr_, Mr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Mr = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mr = Mr_;
	});
	MF = $pkg.MF = $newType(0, $kindStruct, "dns.MF", "MF", "github.com/cloudflare/dns", function(Hdr_, Mf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Mf = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mf = Mf_;
	});
	MD = $pkg.MD = $newType(0, $kindStruct, "dns.MD", "MD", "github.com/cloudflare/dns", function(Hdr_, Md_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Md = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Md = Md_;
	});
	MX = $pkg.MX = $newType(0, $kindStruct, "dns.MX", "MX", "github.com/cloudflare/dns", function(Hdr_, Preference_, Mx_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.Mx = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.Mx = Mx_;
	});
	AFSDB = $pkg.AFSDB = $newType(0, $kindStruct, "dns.AFSDB", "AFSDB", "github.com/cloudflare/dns", function(Hdr_, Subtype_, Hostname_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Subtype = 0;
			this.Hostname = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Subtype = Subtype_;
		this.Hostname = Hostname_;
	});
	X25 = $pkg.X25 = $newType(0, $kindStruct, "dns.X25", "X25", "github.com/cloudflare/dns", function(Hdr_, PSDNAddress_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.PSDNAddress = "";
			return;
		}
		this.Hdr = Hdr_;
		this.PSDNAddress = PSDNAddress_;
	});
	RT = $pkg.RT = $newType(0, $kindStruct, "dns.RT", "RT", "github.com/cloudflare/dns", function(Hdr_, Preference_, Host_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.Host = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.Host = Host_;
	});
	NS = $pkg.NS = $newType(0, $kindStruct, "dns.NS", "NS", "github.com/cloudflare/dns", function(Hdr_, Ns_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Ns = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Ns = Ns_;
	});
	PTR = $pkg.PTR = $newType(0, $kindStruct, "dns.PTR", "PTR", "github.com/cloudflare/dns", function(Hdr_, Ptr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Ptr = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Ptr = Ptr_;
	});
	RP = $pkg.RP = $newType(0, $kindStruct, "dns.RP", "RP", "github.com/cloudflare/dns", function(Hdr_, Mbox_, Txt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Mbox = "";
			this.Txt = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Mbox = Mbox_;
		this.Txt = Txt_;
	});
	SOA = $pkg.SOA = $newType(0, $kindStruct, "dns.SOA", "SOA", "github.com/cloudflare/dns", function(Hdr_, Ns_, Mbox_, Serial_, Refresh_, Retry_, Expire_, Minttl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Ns = "";
			this.Mbox = "";
			this.Serial = 0;
			this.Refresh = 0;
			this.Retry = 0;
			this.Expire = 0;
			this.Minttl = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.Ns = Ns_;
		this.Mbox = Mbox_;
		this.Serial = Serial_;
		this.Refresh = Refresh_;
		this.Retry = Retry_;
		this.Expire = Expire_;
		this.Minttl = Minttl_;
	});
	TXT = $pkg.TXT = $newType(0, $kindStruct, "dns.TXT", "TXT", "github.com/cloudflare/dns", function(Hdr_, Txt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Txt = sliceType$1.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.Txt = Txt_;
	});
	SPF = $pkg.SPF = $newType(0, $kindStruct, "dns.SPF", "SPF", "github.com/cloudflare/dns", function(Hdr_, Txt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Txt = sliceType$1.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.Txt = Txt_;
	});
	SRV = $pkg.SRV = $newType(0, $kindStruct, "dns.SRV", "SRV", "github.com/cloudflare/dns", function(Hdr_, Priority_, Weight_, Port_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Priority = 0;
			this.Weight = 0;
			this.Port = 0;
			this.Target = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Priority = Priority_;
		this.Weight = Weight_;
		this.Port = Port_;
		this.Target = Target_;
	});
	NAPTR = $pkg.NAPTR = $newType(0, $kindStruct, "dns.NAPTR", "NAPTR", "github.com/cloudflare/dns", function(Hdr_, Order_, Preference_, Flags_, Service_, Regexp_, Replacement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Order = 0;
			this.Preference = 0;
			this.Flags = "";
			this.Service = "";
			this.Regexp = "";
			this.Replacement = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Order = Order_;
		this.Preference = Preference_;
		this.Flags = Flags_;
		this.Service = Service_;
		this.Regexp = Regexp_;
		this.Replacement = Replacement_;
	});
	CERT = $pkg.CERT = $newType(0, $kindStruct, "dns.CERT", "CERT", "github.com/cloudflare/dns", function(Hdr_, Type_, KeyTag_, Algorithm_, Certificate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Type = 0;
			this.KeyTag = 0;
			this.Algorithm = 0;
			this.Certificate = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Type = Type_;
		this.KeyTag = KeyTag_;
		this.Algorithm = Algorithm_;
		this.Certificate = Certificate_;
	});
	DNAME = $pkg.DNAME = $newType(0, $kindStruct, "dns.DNAME", "DNAME", "github.com/cloudflare/dns", function(Hdr_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Target = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Target = Target_;
	});
	A = $pkg.A = $newType(0, $kindStruct, "dns.A", "A", "github.com/cloudflare/dns", function(Hdr_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.A = net.IP.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.A = A_;
	});
	AAAA = $pkg.AAAA = $newType(0, $kindStruct, "dns.AAAA", "AAAA", "github.com/cloudflare/dns", function(Hdr_, AAAA_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.AAAA = net.IP.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.AAAA = AAAA_;
	});
	PX = $pkg.PX = $newType(0, $kindStruct, "dns.PX", "PX", "github.com/cloudflare/dns", function(Hdr_, Preference_, Map822_, Mapx400_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.Map822 = "";
			this.Mapx400 = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.Map822 = Map822_;
		this.Mapx400 = Mapx400_;
	});
	GPOS = $pkg.GPOS = $newType(0, $kindStruct, "dns.GPOS", "GPOS", "github.com/cloudflare/dns", function(Hdr_, Longitude_, Latitude_, Altitude_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Longitude = "";
			this.Latitude = "";
			this.Altitude = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Longitude = Longitude_;
		this.Latitude = Latitude_;
		this.Altitude = Altitude_;
	});
	LOC = $pkg.LOC = $newType(0, $kindStruct, "dns.LOC", "LOC", "github.com/cloudflare/dns", function(Hdr_, Version_, Size_, HorizPre_, VertPre_, Latitude_, Longitude_, Altitude_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Version = 0;
			this.Size = 0;
			this.HorizPre = 0;
			this.VertPre = 0;
			this.Latitude = 0;
			this.Longitude = 0;
			this.Altitude = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.Version = Version_;
		this.Size = Size_;
		this.HorizPre = HorizPre_;
		this.VertPre = VertPre_;
		this.Latitude = Latitude_;
		this.Longitude = Longitude_;
		this.Altitude = Altitude_;
	});
	SIG = $pkg.SIG = $newType(0, $kindStruct, "dns.SIG", "SIG", "github.com/cloudflare/dns", function(RRSIG_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RRSIG = new RRSIG.ptr();
			return;
		}
		this.RRSIG = RRSIG_;
	});
	RRSIG = $pkg.RRSIG = $newType(0, $kindStruct, "dns.RRSIG", "RRSIG", "github.com/cloudflare/dns", function(Hdr_, TypeCovered_, Algorithm_, Labels_, OrigTtl_, Expiration_, Inception_, KeyTag_, SignerName_, Signature_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.TypeCovered = 0;
			this.Algorithm = 0;
			this.Labels = 0;
			this.OrigTtl = 0;
			this.Expiration = 0;
			this.Inception = 0;
			this.KeyTag = 0;
			this.SignerName = "";
			this.Signature = "";
			return;
		}
		this.Hdr = Hdr_;
		this.TypeCovered = TypeCovered_;
		this.Algorithm = Algorithm_;
		this.Labels = Labels_;
		this.OrigTtl = OrigTtl_;
		this.Expiration = Expiration_;
		this.Inception = Inception_;
		this.KeyTag = KeyTag_;
		this.SignerName = SignerName_;
		this.Signature = Signature_;
	});
	NSEC = $pkg.NSEC = $newType(0, $kindStruct, "dns.NSEC", "NSEC", "github.com/cloudflare/dns", function(Hdr_, NextDomain_, TypeBitMap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.NextDomain = "";
			this.TypeBitMap = sliceType$7.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.NextDomain = NextDomain_;
		this.TypeBitMap = TypeBitMap_;
	});
	DLV = $pkg.DLV = $newType(0, $kindStruct, "dns.DLV", "DLV", "github.com/cloudflare/dns", function(DS_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DS = new DS.ptr();
			return;
		}
		this.DS = DS_;
	});
	CDS = $pkg.CDS = $newType(0, $kindStruct, "dns.CDS", "CDS", "github.com/cloudflare/dns", function(DS_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DS = new DS.ptr();
			return;
		}
		this.DS = DS_;
	});
	DS = $pkg.DS = $newType(0, $kindStruct, "dns.DS", "DS", "github.com/cloudflare/dns", function(Hdr_, KeyTag_, Algorithm_, DigestType_, Digest_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.KeyTag = 0;
			this.Algorithm = 0;
			this.DigestType = 0;
			this.Digest = "";
			return;
		}
		this.Hdr = Hdr_;
		this.KeyTag = KeyTag_;
		this.Algorithm = Algorithm_;
		this.DigestType = DigestType_;
		this.Digest = Digest_;
	});
	KX = $pkg.KX = $newType(0, $kindStruct, "dns.KX", "KX", "github.com/cloudflare/dns", function(Hdr_, Preference_, Exchanger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.Exchanger = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.Exchanger = Exchanger_;
	});
	TA = $pkg.TA = $newType(0, $kindStruct, "dns.TA", "TA", "github.com/cloudflare/dns", function(Hdr_, KeyTag_, Algorithm_, DigestType_, Digest_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.KeyTag = 0;
			this.Algorithm = 0;
			this.DigestType = 0;
			this.Digest = "";
			return;
		}
		this.Hdr = Hdr_;
		this.KeyTag = KeyTag_;
		this.Algorithm = Algorithm_;
		this.DigestType = DigestType_;
		this.Digest = Digest_;
	});
	TALINK = $pkg.TALINK = $newType(0, $kindStruct, "dns.TALINK", "TALINK", "github.com/cloudflare/dns", function(Hdr_, PreviousName_, NextName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.PreviousName = "";
			this.NextName = "";
			return;
		}
		this.Hdr = Hdr_;
		this.PreviousName = PreviousName_;
		this.NextName = NextName_;
	});
	SSHFP = $pkg.SSHFP = $newType(0, $kindStruct, "dns.SSHFP", "SSHFP", "github.com/cloudflare/dns", function(Hdr_, Algorithm_, Type_, FingerPrint_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Algorithm = 0;
			this.Type = 0;
			this.FingerPrint = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Algorithm = Algorithm_;
		this.Type = Type_;
		this.FingerPrint = FingerPrint_;
	});
	IPSECKEY = $pkg.IPSECKEY = $newType(0, $kindStruct, "dns.IPSECKEY", "IPSECKEY", "github.com/cloudflare/dns", function(Hdr_, Precedence_, GatewayType_, Algorithm_, GatewayA_, GatewayAAAA_, GatewayName_, PublicKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Precedence = 0;
			this.GatewayType = 0;
			this.Algorithm = 0;
			this.GatewayA = net.IP.nil;
			this.GatewayAAAA = net.IP.nil;
			this.GatewayName = "";
			this.PublicKey = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Precedence = Precedence_;
		this.GatewayType = GatewayType_;
		this.Algorithm = Algorithm_;
		this.GatewayA = GatewayA_;
		this.GatewayAAAA = GatewayAAAA_;
		this.GatewayName = GatewayName_;
		this.PublicKey = PublicKey_;
	});
	KEY = $pkg.KEY = $newType(0, $kindStruct, "dns.KEY", "KEY", "github.com/cloudflare/dns", function(DNSKEY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DNSKEY = new DNSKEY.ptr();
			return;
		}
		this.DNSKEY = DNSKEY_;
	});
	CDNSKEY = $pkg.CDNSKEY = $newType(0, $kindStruct, "dns.CDNSKEY", "CDNSKEY", "github.com/cloudflare/dns", function(DNSKEY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DNSKEY = new DNSKEY.ptr();
			return;
		}
		this.DNSKEY = DNSKEY_;
	});
	DNSKEY = $pkg.DNSKEY = $newType(0, $kindStruct, "dns.DNSKEY", "DNSKEY", "github.com/cloudflare/dns", function(Hdr_, Flags_, Protocol_, Algorithm_, PublicKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Flags = 0;
			this.Protocol = 0;
			this.Algorithm = 0;
			this.PublicKey = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Flags = Flags_;
		this.Protocol = Protocol_;
		this.Algorithm = Algorithm_;
		this.PublicKey = PublicKey_;
	});
	RKEY = $pkg.RKEY = $newType(0, $kindStruct, "dns.RKEY", "RKEY", "github.com/cloudflare/dns", function(Hdr_, Flags_, Protocol_, Algorithm_, PublicKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Flags = 0;
			this.Protocol = 0;
			this.Algorithm = 0;
			this.PublicKey = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Flags = Flags_;
		this.Protocol = Protocol_;
		this.Algorithm = Algorithm_;
		this.PublicKey = PublicKey_;
	});
	NSAP = $pkg.NSAP = $newType(0, $kindStruct, "dns.NSAP", "NSAP", "github.com/cloudflare/dns", function(Hdr_, Length_, Nsap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Length = 0;
			this.Nsap = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Length = Length_;
		this.Nsap = Nsap_;
	});
	NSAPPTR = $pkg.NSAPPTR = $newType(0, $kindStruct, "dns.NSAPPTR", "NSAPPTR", "github.com/cloudflare/dns", function(Hdr_, Ptr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Ptr = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Ptr = Ptr_;
	});
	NSEC3 = $pkg.NSEC3 = $newType(0, $kindStruct, "dns.NSEC3", "NSEC3", "github.com/cloudflare/dns", function(Hdr_, Hash_, Flags_, Iterations_, SaltLength_, Salt_, HashLength_, NextDomain_, TypeBitMap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Hash = 0;
			this.Flags = 0;
			this.Iterations = 0;
			this.SaltLength = 0;
			this.Salt = "";
			this.HashLength = 0;
			this.NextDomain = "";
			this.TypeBitMap = sliceType$7.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.Hash = Hash_;
		this.Flags = Flags_;
		this.Iterations = Iterations_;
		this.SaltLength = SaltLength_;
		this.Salt = Salt_;
		this.HashLength = HashLength_;
		this.NextDomain = NextDomain_;
		this.TypeBitMap = TypeBitMap_;
	});
	NSEC3PARAM = $pkg.NSEC3PARAM = $newType(0, $kindStruct, "dns.NSEC3PARAM", "NSEC3PARAM", "github.com/cloudflare/dns", function(Hdr_, Hash_, Flags_, Iterations_, SaltLength_, Salt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Hash = 0;
			this.Flags = 0;
			this.Iterations = 0;
			this.SaltLength = 0;
			this.Salt = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Hash = Hash_;
		this.Flags = Flags_;
		this.Iterations = Iterations_;
		this.SaltLength = SaltLength_;
		this.Salt = Salt_;
	});
	TKEY = $pkg.TKEY = $newType(0, $kindStruct, "dns.TKEY", "TKEY", "github.com/cloudflare/dns", function(Hdr_, Algorithm_, Inception_, Expiration_, Mode_, Error_, KeySize_, Key_, OtherLen_, OtherData_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Algorithm = "";
			this.Inception = 0;
			this.Expiration = 0;
			this.Mode = 0;
			this.Error = 0;
			this.KeySize = 0;
			this.Key = "";
			this.OtherLen = 0;
			this.OtherData = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Algorithm = Algorithm_;
		this.Inception = Inception_;
		this.Expiration = Expiration_;
		this.Mode = Mode_;
		this.Error = Error_;
		this.KeySize = KeySize_;
		this.Key = Key_;
		this.OtherLen = OtherLen_;
		this.OtherData = OtherData_;
	});
	RFC3597 = $pkg.RFC3597 = $newType(0, $kindStruct, "dns.RFC3597", "RFC3597", "github.com/cloudflare/dns", function(Hdr_, Rdata_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Rdata = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Rdata = Rdata_;
	});
	URI = $pkg.URI = $newType(0, $kindStruct, "dns.URI", "URI", "github.com/cloudflare/dns", function(Hdr_, Priority_, Weight_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Priority = 0;
			this.Weight = 0;
			this.Target = sliceType$1.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.Priority = Priority_;
		this.Weight = Weight_;
		this.Target = Target_;
	});
	DHCID = $pkg.DHCID = $newType(0, $kindStruct, "dns.DHCID", "DHCID", "github.com/cloudflare/dns", function(Hdr_, Digest_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Digest = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Digest = Digest_;
	});
	TLSA = $pkg.TLSA = $newType(0, $kindStruct, "dns.TLSA", "TLSA", "github.com/cloudflare/dns", function(Hdr_, Usage_, Selector_, MatchingType_, Certificate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Usage = 0;
			this.Selector = 0;
			this.MatchingType = 0;
			this.Certificate = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Usage = Usage_;
		this.Selector = Selector_;
		this.MatchingType = MatchingType_;
		this.Certificate = Certificate_;
	});
	HIP = $pkg.HIP = $newType(0, $kindStruct, "dns.HIP", "HIP", "github.com/cloudflare/dns", function(Hdr_, HitLength_, PublicKeyAlgorithm_, PublicKeyLength_, Hit_, PublicKey_, RendezvousServers_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.HitLength = 0;
			this.PublicKeyAlgorithm = 0;
			this.PublicKeyLength = 0;
			this.Hit = "";
			this.PublicKey = "";
			this.RendezvousServers = sliceType$1.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.HitLength = HitLength_;
		this.PublicKeyAlgorithm = PublicKeyAlgorithm_;
		this.PublicKeyLength = PublicKeyLength_;
		this.Hit = Hit_;
		this.PublicKey = PublicKey_;
		this.RendezvousServers = RendezvousServers_;
	});
	NINFO = $pkg.NINFO = $newType(0, $kindStruct, "dns.NINFO", "NINFO", "github.com/cloudflare/dns", function(Hdr_, ZSData_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.ZSData = sliceType$1.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.ZSData = ZSData_;
	});
	WKS = $pkg.WKS = $newType(0, $kindStruct, "dns.WKS", "WKS", "github.com/cloudflare/dns", function(Hdr_, Address_, Protocol_, BitMap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Address = net.IP.nil;
			this.Protocol = 0;
			this.BitMap = sliceType$7.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.Address = Address_;
		this.Protocol = Protocol_;
		this.BitMap = BitMap_;
	});
	NID = $pkg.NID = $newType(0, $kindStruct, "dns.NID", "NID", "github.com/cloudflare/dns", function(Hdr_, Preference_, NodeID_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.NodeID = new $Uint64(0, 0);
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.NodeID = NodeID_;
	});
	L32 = $pkg.L32 = $newType(0, $kindStruct, "dns.L32", "L32", "github.com/cloudflare/dns", function(Hdr_, Preference_, Locator32_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.Locator32 = net.IP.nil;
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.Locator32 = Locator32_;
	});
	L64 = $pkg.L64 = $newType(0, $kindStruct, "dns.L64", "L64", "github.com/cloudflare/dns", function(Hdr_, Preference_, Locator64_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.Locator64 = new $Uint64(0, 0);
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.Locator64 = Locator64_;
	});
	LP = $pkg.LP = $newType(0, $kindStruct, "dns.LP", "LP", "github.com/cloudflare/dns", function(Hdr_, Preference_, Fqdn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Preference = 0;
			this.Fqdn = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Preference = Preference_;
		this.Fqdn = Fqdn_;
	});
	EUI48 = $pkg.EUI48 = $newType(0, $kindStruct, "dns.EUI48", "EUI48", "github.com/cloudflare/dns", function(Hdr_, Address_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Address = new $Uint64(0, 0);
			return;
		}
		this.Hdr = Hdr_;
		this.Address = Address_;
	});
	EUI64 = $pkg.EUI64 = $newType(0, $kindStruct, "dns.EUI64", "EUI64", "github.com/cloudflare/dns", function(Hdr_, Address_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Address = new $Uint64(0, 0);
			return;
		}
		this.Hdr = Hdr_;
		this.Address = Address_;
	});
	UID = $pkg.UID = $newType(0, $kindStruct, "dns.UID", "UID", "github.com/cloudflare/dns", function(Hdr_, Uid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Uid = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.Uid = Uid_;
	});
	GID = $pkg.GID = $newType(0, $kindStruct, "dns.GID", "GID", "github.com/cloudflare/dns", function(Hdr_, Gid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Gid = 0;
			return;
		}
		this.Hdr = Hdr_;
		this.Gid = Gid_;
	});
	UINFO = $pkg.UINFO = $newType(0, $kindStruct, "dns.UINFO", "UINFO", "github.com/cloudflare/dns", function(Hdr_, Uinfo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Uinfo = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Uinfo = Uinfo_;
	});
	EID = $pkg.EID = $newType(0, $kindStruct, "dns.EID", "EID", "github.com/cloudflare/dns", function(Hdr_, Endpoint_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Endpoint = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Endpoint = Endpoint_;
	});
	NIMLOC = $pkg.NIMLOC = $newType(0, $kindStruct, "dns.NIMLOC", "NIMLOC", "github.com/cloudflare/dns", function(Hdr_, Locator_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.Locator = "";
			return;
		}
		this.Hdr = Hdr_;
		this.Locator = Locator_;
	});
	OPENPGPKEY = $pkg.OPENPGPKEY = $newType(0, $kindStruct, "dns.OPENPGPKEY", "OPENPGPKEY", "github.com/cloudflare/dns", function(Hdr_, PublicKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hdr = new RR_Header.ptr();
			this.PublicKey = "";
			return;
		}
		this.Hdr = Hdr_;
		this.PublicKey = PublicKey_;
	});
	debugging = $pkg.debugging = $newType(1, $kindBool, "dns.debugging", "debugging", "github.com/cloudflare/dns", null);
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "dns.ParseError", "ParseError", "github.com/cloudflare/dns", function(file_, err_, lex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = "";
			this.err = "";
			this.lex = new lex.ptr();
			return;
		}
		this.file = file_;
		this.err = err_;
		this.lex = lex_;
	});
	lex = $pkg.lex = $newType(0, $kindStruct, "dns.lex", "lex", "github.com/cloudflare/dns", function(token_, tokenUpper_, length_, err_, value_, line_, column_, torc_, comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.token = "";
			this.tokenUpper = "";
			this.length = 0;
			this.err = false;
			this.value = 0;
			this.line = 0;
			this.column = 0;
			this.torc = 0;
			this.comment = "";
			return;
		}
		this.token = token_;
		this.tokenUpper = tokenUpper_;
		this.length = length_;
		this.err = err_;
		this.value = value_;
		this.line = line_;
		this.column = column_;
		this.torc = torc_;
		this.comment = comment_;
	});
	Token = $pkg.Token = $newType(0, $kindStruct, "dns.Token", "Token", "github.com/cloudflare/dns", function(RR_, Error_, Comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RR = $ifaceNil;
			this.Error = ptrType$44.nil;
			this.Comment = "";
			return;
		}
		this.RR = RR_;
		this.Error = Error_;
		this.Comment = Comment_;
	});
	parserFunc = $pkg.parserFunc = $newType(0, $kindStruct, "dns.parserFunc", "parserFunc", "github.com/cloudflare/dns", function(Func_, Variable_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = $throwNilPointerError;
			this.Variable = false;
			return;
		}
		this.Func = Func_;
		this.Variable = Variable_;
	});
	ptrType = $ptrType(Msg);
	ptrType$2 = $ptrType(OPT);
	sliceType = $sliceType($Uint8);
	ptrType$4 = $ptrType(TSIG);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType(Question);
	sliceType$3 = $sliceType(RR);
	ptrType$7 = $ptrType(Error);
	ptrType$8 = $ptrType(DNSKEY);
	ptrType$9 = $ptrType(DS);
	ptrType$10 = $ptrType(big.Int);
	structType = $structType([{prop: "R", name: "R", pkg: "", typ: ptrType$10, tag: ""}, {prop: "S", name: "S", pkg: "", typ: ptrType$10, tag: ""}]);
	ptrType$11 = $ptrType(rsa.PublicKey);
	ptrType$12 = $ptrType(ecdsa.PublicKey);
	ptrType$13 = $ptrType(dsa.PublicKey);
	ptrType$14 = $ptrType(NS);
	ptrType$15 = $ptrType(CNAME);
	ptrType$16 = $ptrType(SOA);
	ptrType$17 = $ptrType(MB);
	ptrType$18 = $ptrType(MG);
	ptrType$19 = $ptrType(MR);
	ptrType$20 = $ptrType(PTR);
	ptrType$21 = $ptrType(MINFO);
	ptrType$22 = $ptrType(MX);
	ptrType$23 = $ptrType(NAPTR);
	ptrType$24 = $ptrType(KX);
	ptrType$25 = $ptrType(SRV);
	ptrType$26 = $ptrType(DNAME);
	sliceType$4 = $sliceType(ptrType$10);
	ptrType$27 = $ptrType(rsa.PrivateKey);
	ptrType$28 = $ptrType(dsa.PrivateKey);
	ptrType$29 = $ptrType(ecdsa.PrivateKey);
	chanType = $chanType(lex, false, false);
	ptrType$30 = $ptrType(EDNS0_NSID);
	ptrType$31 = $ptrType(EDNS0_SUBNET);
	ptrType$32 = $ptrType(EDNS0_UL);
	ptrType$33 = $ptrType(EDNS0_LLQ);
	ptrType$34 = $ptrType(EDNS0_DAU);
	ptrType$35 = $ptrType(EDNS0_DHU);
	ptrType$36 = $ptrType(EDNS0_N3U);
	ptrType$37 = $ptrType(EDNS0_LOCAL);
	sliceType$5 = $sliceType($Int);
	arrayType = $arrayType($Uint8, 3);
	sliceType$6 = $sliceType(EDNS0);
	sliceType$7 = $sliceType($Uint16);
	ptrType$38 = $ptrType(MsgHdr);
	sliceType$8 = $sliceType($emptyInterface);
	ptrType$39 = $ptrType(MF);
	ptrType$40 = $ptrType(MD);
	ptrType$41 = $ptrType(RT);
	ptrType$42 = $ptrType(AFSDB);
	ptrType$44 = $ptrType(ParseError);
	ptrType$45 = $ptrType(sync.RWMutex);
	ptrType$48 = $ptrType($Uint8);
	ptrType$49 = $ptrType(KEY);
	ptrType$54 = $ptrType(Token);
	chanType$3 = $chanType(ptrType$54, false, false);
	ptrType$55 = $ptrType(RRSIG);
	ptrType$57 = $ptrType(RR_Header);
	ptrType$59 = $ptrType(bufio.Reader);
	ptrType$60 = $ptrType(scan);
	funcType = $funcType([ResponseWriter, ptrType], [], false);
	ptrType$62 = $ptrType(ServeMux);
	mapType$1 = $mapType($String, Handler);
	ptrType$65 = $ptrType(Question);
	ptrType$66 = $ptrType(ANY);
	ptrType$67 = $ptrType(HINFO);
	ptrType$68 = $ptrType(X25);
	ptrType$69 = $ptrType(RP);
	ptrType$70 = $ptrType(TXT);
	ptrType$71 = $ptrType(SPF);
	ptrType$72 = $ptrType(CERT);
	ptrType$73 = $ptrType(A);
	ptrType$74 = $ptrType(AAAA);
	ptrType$75 = $ptrType(PX);
	ptrType$76 = $ptrType(GPOS);
	ptrType$77 = $ptrType(LOC);
	ptrType$78 = $ptrType(SIG);
	ptrType$79 = $ptrType(NSEC);
	ptrType$80 = $ptrType(CDS);
	ptrType$81 = $ptrType(TA);
	ptrType$82 = $ptrType(TALINK);
	ptrType$83 = $ptrType(SSHFP);
	ptrType$84 = $ptrType(IPSECKEY);
	ptrType$85 = $ptrType(CDNSKEY);
	ptrType$86 = $ptrType(RKEY);
	ptrType$87 = $ptrType(NSAP);
	ptrType$88 = $ptrType(NSAPPTR);
	ptrType$89 = $ptrType(NSEC3);
	ptrType$90 = $ptrType(NSEC3PARAM);
	ptrType$91 = $ptrType(TKEY);
	ptrType$92 = $ptrType(RFC3597);
	ptrType$93 = $ptrType(URI);
	ptrType$94 = $ptrType(DHCID);
	ptrType$95 = $ptrType(x509.Certificate);
	ptrType$96 = $ptrType(TLSA);
	ptrType$97 = $ptrType(HIP);
	ptrType$98 = $ptrType(NINFO);
	ptrType$99 = $ptrType(WKS);
	ptrType$100 = $ptrType(NID);
	ptrType$101 = $ptrType(L32);
	ptrType$102 = $ptrType(L64);
	ptrType$103 = $ptrType(LP);
	ptrType$104 = $ptrType(EUI48);
	ptrType$105 = $ptrType(EUI64);
	ptrType$106 = $ptrType(UID);
	ptrType$107 = $ptrType(GID);
	ptrType$108 = $ptrType(UINFO);
	ptrType$109 = $ptrType(EID);
	ptrType$110 = $ptrType(NIMLOC);
	ptrType$111 = $ptrType(OPENPGPKEY);
	funcType$4 = $funcType([RR_Header, chanType, $String, $String], [RR, ptrType$44, $String], false);
	Msg.ptr.prototype.SetReply = function(request) {
		var $ptr, dns, request, x, x$1;
		dns = this;
		dns.MsgHdr.Id = request.MsgHdr.Id;
		dns.MsgHdr.RecursionDesired = request.MsgHdr.RecursionDesired;
		dns.MsgHdr.Response = true;
		dns.MsgHdr.Opcode = 0;
		dns.MsgHdr.Rcode = 0;
		if (request.Question.$length > 0) {
			dns.Question = $makeSlice(sliceType$2, 1);
			$copy((x$1 = dns.Question, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])), (x = request.Question, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), Question);
		}
		return dns;
	};
	Msg.prototype.SetReply = function(request) { return this.$val.SetReply(request); };
	Msg.ptr.prototype.SetQuestion = function(z, t) {
		var $ptr, _r, dns, t, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dns = $f.dns; t = $f.t; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		_r = $pkg.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		dns.MsgHdr.Id = _r;
		dns.MsgHdr.RecursionDesired = true;
		dns.Question = $makeSlice(sliceType$2, 1);
		$copy((x = dns.Question, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), new Question.ptr(z, t, 1), Question);
		return dns;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.SetQuestion }; } $f.$ptr = $ptr; $f._r = _r; $f.dns = dns; $f.t = t; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.SetQuestion = function(z, t) { return this.$val.SetQuestion(z, t); };
	Msg.ptr.prototype.SetNotify = function(z) {
		var $ptr, _r, dns, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dns = $f.dns; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		dns.MsgHdr.Opcode = 4;
		dns.MsgHdr.Authoritative = true;
		_r = $pkg.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		dns.MsgHdr.Id = _r;
		dns.Question = $makeSlice(sliceType$2, 1);
		$copy((x = dns.Question, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), new Question.ptr(z, 6, 1), Question);
		return dns;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.SetNotify }; } $f.$ptr = $ptr; $f._r = _r; $f.dns = dns; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.SetNotify = function(z) { return this.$val.SetNotify(z); };
	Msg.ptr.prototype.SetRcode = function(request, rcode) {
		var $ptr, dns, rcode, request;
		dns = this;
		dns.SetReply(request);
		dns.MsgHdr.Rcode = rcode;
		return dns;
	};
	Msg.prototype.SetRcode = function(request, rcode) { return this.$val.SetRcode(request, rcode); };
	Msg.ptr.prototype.SetRcodeFormatError = function(request) {
		var $ptr, dns, request;
		dns = this;
		dns.MsgHdr.Rcode = 1;
		dns.MsgHdr.Opcode = 0;
		dns.MsgHdr.Response = true;
		dns.MsgHdr.Authoritative = false;
		dns.MsgHdr.Id = request.MsgHdr.Id;
		return dns;
	};
	Msg.prototype.SetRcodeFormatError = function(request) { return this.$val.SetRcodeFormatError(request); };
	Msg.ptr.prototype.SetUpdate = function(z) {
		var $ptr, _r, dns, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dns = $f.dns; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		_r = $pkg.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		dns.MsgHdr.Id = _r;
		dns.MsgHdr.Response = false;
		dns.MsgHdr.Opcode = 5;
		dns.Compress = false;
		dns.Question = $makeSlice(sliceType$2, 1);
		$copy((x = dns.Question, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), new Question.ptr(z, 6, 1), Question);
		return dns;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.SetUpdate }; } $f.$ptr = $ptr; $f._r = _r; $f.dns = dns; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.SetUpdate = function(z) { return this.$val.SetUpdate(z); };
	Msg.ptr.prototype.SetIxfr = function(z, serial, ns, mbox) {
		var $ptr, _r, dns, mbox, ns, s, serial, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dns = $f.dns; mbox = $f.mbox; ns = $f.ns; s = $f.s; serial = $f.serial; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		_r = $pkg.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		dns.MsgHdr.Id = _r;
		dns.Question = $makeSlice(sliceType$2, 1);
		dns.Ns = $makeSlice(sliceType$3, 1);
		s = new SOA.ptr();
		$copy(s.Hdr, new RR_Header.ptr(z, 6, 1, 3600, 0), RR_Header);
		s.Serial = serial;
		s.Ns = ns;
		s.Mbox = mbox;
		$copy((x = dns.Question, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), new Question.ptr(z, 251, 1), Question);
		(x$1 = dns.Ns, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = s));
		return dns;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.SetIxfr }; } $f.$ptr = $ptr; $f._r = _r; $f.dns = dns; $f.mbox = mbox; $f.ns = ns; $f.s = s; $f.serial = serial; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.SetIxfr = function(z, serial, ns, mbox) { return this.$val.SetIxfr(z, serial, ns, mbox); };
	Msg.ptr.prototype.SetAxfr = function(z) {
		var $ptr, _r, dns, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dns = $f.dns; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		_r = $pkg.Id(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		dns.MsgHdr.Id = _r;
		dns.Question = $makeSlice(sliceType$2, 1);
		$copy((x = dns.Question, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), new Question.ptr(z, 252, 1), Question);
		return dns;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.SetAxfr }; } $f.$ptr = $ptr; $f._r = _r; $f.dns = dns; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.SetAxfr = function(z) { return this.$val.SetAxfr(z); };
	Msg.ptr.prototype.SetTsig = function(z, algo, fudge, timesigned) {
		var $ptr, algo, dns, fudge, t, timesigned, z;
		dns = this;
		t = new TSIG.ptr();
		$copy(t.Hdr, new RR_Header.ptr(z, 250, 255, 0, 0), RR_Header);
		t.Algorithm = algo;
		t.Fudge = 300;
		t.TimeSigned = new $Uint64(timesigned.$high, timesigned.$low);
		t.OrigId = dns.MsgHdr.Id;
		dns.Extra = $append(dns.Extra, t);
		return dns;
	};
	Msg.prototype.SetTsig = function(z, algo, fudge, timesigned) { return this.$val.SetTsig(z, algo, fudge, timesigned); };
	Msg.ptr.prototype.SetEdns0 = function(udpsize, do$1) {
		var $ptr, dns, do$1, e, udpsize;
		dns = this;
		e = new OPT.ptr();
		e.Hdr.Name = ".";
		e.Hdr.Rrtype = 41;
		e.SetUDPSize(udpsize);
		if (do$1) {
			e.SetDo();
		}
		dns.Extra = $append(dns.Extra, e);
		return dns;
	};
	Msg.prototype.SetEdns0 = function(udpsize, do$1) { return this.$val.SetEdns0(udpsize, do$1); };
	Msg.ptr.prototype.IsTsig = function() {
		var $ptr, _r, dns, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dns = $f.dns; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		/* */ if (dns.Extra.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dns.Extra.$length > 0) { */ case 1:
			_r = (x = dns.Extra, x$1 = dns.Extra.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Header(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r.Rrtype === 250) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r.Rrtype === 250) { */ case 3:
				return $assertType((x$2 = dns.Extra, x$3 = dns.Extra.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])), ptrType$4);
			/* } */ case 4:
		/* } */ case 2:
		return ptrType$4.nil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.IsTsig }; } $f.$ptr = $ptr; $f._r = _r; $f.dns = dns; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.IsTsig = function() { return this.$val.IsTsig(); };
	Msg.ptr.prototype.IsEdns0 = function() {
		var $ptr, _i, _r, _ref, dns, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; dns = $f.dns; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		_ref = dns.Extra;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = r.Header(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r.Rrtype === 41) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r.Rrtype === 41) { */ case 3:
				return $assertType(r, ptrType$2);
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return ptrType$2.nil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.IsEdns0 }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.dns = dns; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.IsEdns0 = function() { return this.$val.IsEdns0(); };
	IsDomainName = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, labels, ok, s;
		labels = 0;
		ok = false;
		_tuple = packDomainName(s, sliceType.nil, 0, false, false); labels = _tuple[1]; err = _tuple[2];
		_tmp = labels; _tmp$1 = $interfaceIsEqual(err, $ifaceNil); labels = _tmp; ok = _tmp$1;
		return [labels, ok];
	};
	$pkg.IsDomainName = IsDomainName;
	IsFqdn = function(s) {
		var $ptr, l, s;
		l = s.length;
		if (l === 0) {
			return false;
		}
		return s.charCodeAt((l - 1 >> 0)) === 46;
	};
	$pkg.IsFqdn = IsFqdn;
	Fqdn = function(s) {
		var $ptr, s;
		if (IsFqdn(s)) {
			return s;
		}
		return s + ".";
	};
	$pkg.Fqdn = Fqdn;
	Type.prototype.String = function() {
		var $ptr, _entry, _tuple, ok, t, t1;
		t = this.$val;
		_tuple = (_entry = $pkg.TypeToString[$Uint16.keyFor((t << 16 >>> 16))], _entry !== undefined ? [_entry.v, true] : ["", false]); t1 = _tuple[0]; ok = _tuple[1];
		if (ok) {
			return t1;
		}
		return "TYPE" + strconv.Itoa((t >> 0));
	};
	$ptrType(Type).prototype.String = function() { return new Type(this.$get()).String(); };
	Class.prototype.String = function() {
		var $ptr, _entry, _tuple, c, c1, ok;
		c = this.$val;
		_tuple = (_entry = $pkg.ClassToString[$Uint16.keyFor((c << 16 >>> 16))], _entry !== undefined ? [_entry.v, true] : ["", false]); c1 = _tuple[0]; ok = _tuple[1];
		if (ok) {
			return c1;
		}
		return "CLASS" + strconv.Itoa((c >> 0));
	};
	$ptrType(Class).prototype.String = function() { return new Class(this.$get()).String(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e === ptrType$7.nil) {
			return "dns: <nil>";
		}
		return "dns: " + e.err;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	RR_Header.ptr.prototype.Header = function() {
		var $ptr, h;
		h = this;
		return h;
	};
	RR_Header.prototype.Header = function() { return this.$val.Header(); };
	RR_Header.ptr.prototype.copy = function() {
		var $ptr, h;
		h = this;
		return $ifaceNil;
	};
	RR_Header.prototype.copy = function() { return this.$val.copy(); };
	RR_Header.ptr.prototype.copyHeader = function() {
		var $ptr, h, r;
		h = this;
		r = new RR_Header.ptr();
		r.Name = h.Name;
		r.Rrtype = h.Rrtype;
		r.Class = h.Class;
		r.Ttl = h.Ttl;
		r.Rdlength = h.Rdlength;
		return r;
	};
	RR_Header.prototype.copyHeader = function() { return this.$val.copyHeader(); };
	RR_Header.ptr.prototype.String = function() {
		var $ptr, h, s;
		h = this;
		s = "";
		if (h.Rrtype === 41) {
			s = ";";
		}
		s = s + (sprintName(h.Name) + "\t");
		s = s + (strconv.FormatInt(new $Int64(0, h.Ttl), 10) + "\t");
		s = s + (new Class((h.Class << 16 >>> 16)).String() + "\t");
		s = s + (new Type((h.Rrtype << 16 >>> 16)).String() + "\t");
		return s;
	};
	RR_Header.prototype.String = function() { return this.$val.String(); };
	RR_Header.ptr.prototype.len = function() {
		var $ptr, h, l;
		h = this;
		l = h.Name.length + 1 >> 0;
		l = l + (10) >> 0;
		return l;
	};
	RR_Header.prototype.len = function() { return this.$val.len(); };
	RFC3597.ptr.prototype.ToRFC3597 = function(r) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, buf, err, off, r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; err = $f.err; off = $f.off; r = $f.r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = r.len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		buf = $makeSlice(sliceType, (_r * 2 >> 0));
		_r$1 = PackStruct(r, buf, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; off = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		buf = $subslice(buf, 0, off);
		rawSetRdlength(buf, 0, off);
		_r$2 = UnpackStruct(rr, buf, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RFC3597.ptr.prototype.ToRFC3597 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.err = err; $f.off = off; $f.r = r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	RFC3597.prototype.ToRFC3597 = function(r) { return this.$val.ToRFC3597(r); };
	divRoundUp = function(a, b) {
		var $ptr, _q, a, b;
		return (_q = (((a + b >> 0) - 1 >> 0)) / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	DNSKEY.ptr.prototype.KeyTag = function() {
		var $ptr, _i, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, err, i, k, keytag, keywire, modulus, n, v, wire, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; i = $f.i; k = $f.k; keytag = $f.keytag; keywire = $f.keywire; modulus = $f.modulus; n = $f.n; v = $f.v; wire = $f.wire; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		if (k === ptrType$8.nil) {
			return 0;
		}
		keytag = 0;
		_ref = k.Algorithm;
		/* */ if (_ref === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_ref === 1) { */ case 1:
			_r = fromBase64(new sliceType($stringToBytes(k.PublicKey))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; modulus = _tuple[0];
			if (modulus.$length > 1) {
				_tuple$1 = unpackUint16(modulus, modulus.$length - 2 >> 0); x = _tuple$1[0];
				keytag = (x >> 0);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			keywire = new dnskeyWireFmt.ptr();
			keywire.Flags = k.Flags;
			keywire.Protocol = k.Protocol;
			keywire.Algorithm = k.Algorithm;
			keywire.PublicKey = k.PublicKey;
			wire = $makeSlice(sliceType, 4096);
			_r$1 = PackStruct(keywire, wire, 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1; n = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return 0;
			}
			wire = $subslice(wire, 0, n);
			_ref$1 = wire;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				v = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!(((i & 1) === 0))) {
					keytag = keytag + ((v >> 0)) >> 0;
				} else {
					keytag = keytag + (((v >> 0) << 8 >> 0)) >> 0;
				}
				_i++;
			}
			keytag = keytag + ((((keytag >> 16 >> 0)) & 65535)) >> 0;
			keytag = keytag & (65535);
		/* } */ case 3:
		return (keytag << 16 >>> 16);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.KeyTag }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.i = i; $f.k = k; $f.keytag = keytag; $f.keywire = keywire; $f.modulus = modulus; $f.n = n; $f.v = v; $f.wire = wire; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.KeyTag = function() { return this.$val.KeyTag(); };
	DNSKEY.ptr.prototype.ToDS = function(h) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, digest, ds, err, err1, h, hash$1, k, keywire, n, off, owner, s, wire, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; digest = $f.digest; ds = $f.ds; err = $f.err; err1 = $f.err1; h = $f.h; hash$1 = $f.hash$1; k = $f.k; keywire = $f.keywire; n = $f.n; off = $f.off; owner = $f.owner; s = $f.s; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		if (k === ptrType$8.nil) {
			return ptrType$9.nil;
		}
		ds = new DS.ptr();
		ds.Hdr.Name = k.Hdr.Name;
		ds.Hdr.Class = k.Hdr.Class;
		ds.Hdr.Rrtype = 43;
		ds.Hdr.Ttl = k.Hdr.Ttl;
		ds.Algorithm = k.Algorithm;
		ds.DigestType = h;
		_r = k.KeyTag(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ds.KeyTag = _r;
		keywire = new dnskeyWireFmt.ptr();
		keywire.Flags = k.Flags;
		keywire.Protocol = k.Protocol;
		keywire.Algorithm = k.Algorithm;
		keywire.PublicKey = k.PublicKey;
		wire = $makeSlice(sliceType, 4096);
		_r$1 = PackStruct(keywire, wire, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return ptrType$9.nil;
		}
		wire = $subslice(wire, 0, n);
		owner = $makeSlice(sliceType, 255);
		_r$2 = strings.ToLower(k.Hdr.Name); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = PackDomainName(_r$2, owner, 0, false, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3; off = _tuple$1[0]; err1 = _tuple$1[1];
		if (!($interfaceIsEqual(err1, $ifaceNil))) {
			return ptrType$9.nil;
		}
		owner = $subslice(owner, 0, off);
		digest = $appendSlice(owner, wire);
		hash$1 = 0;
		_ref = h;
		if (_ref === 1) {
			hash$1 = 3;
		} else if (_ref === 2) {
			hash$1 = 5;
		} else if (_ref === 4) {
			hash$1 = 6;
		} else if (_ref === 5) {
			hash$1 = 7;
		} else {
			return ptrType$9.nil;
		}
		_r$4 = new crypto.Hash(hash$1).New(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		s = _r$4;
		_r$5 = s.Write(digest); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = s.Sum(sliceType.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = hex.EncodeToString(_r$6); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		ds.Digest = _r$7;
		return ds;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.ToDS }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.digest = digest; $f.ds = ds; $f.err = err; $f.err1 = err1; $f.h = h; $f.hash$1 = hash$1; $f.k = k; $f.keywire = keywire; $f.n = n; $f.off = off; $f.owner = owner; $f.s = s; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.ToDS = function(h) { return this.$val.ToDS(h); };
	DNSKEY.ptr.prototype.ToCDNSKEY = function() {
		var $ptr, c, k;
		k = this;
		c = new CDNSKEY.ptr($clone(k, DNSKEY));
		$copy(c.DNSKEY.Hdr, k.Hdr.copyHeader(), RR_Header);
		c.DNSKEY.Hdr.Rrtype = 60;
		return c;
	};
	DNSKEY.prototype.ToCDNSKEY = function() { return this.$val.ToCDNSKEY(); };
	DS.ptr.prototype.ToCDS = function() {
		var $ptr, c, d;
		d = this;
		c = new CDS.ptr($clone(d, DS));
		$copy(c.DS.Hdr, d.Hdr.copyHeader(), RR_Header);
		c.DS.Hdr.Rrtype = 59;
		return c;
	};
	DS.prototype.ToCDS = function() { return this.$val.ToCDS(); };
	RRSIG.ptr.prototype.Sign = function(k, rrset) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _entry, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, err, h, hash$1, k, n, ok, rr, rrset, signature, signdata, sigwire, wire, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; h = $f.h; hash$1 = $f.hash$1; k = $f.k; n = $f.n; ok = $f.ok; rr = $f.rr; rrset = $f.rrset; signature = $f.signature; signdata = $f.signdata; sigwire = $f.sigwire; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		if ($interfaceIsEqual(k, $ifaceNil)) {
			return $pkg.ErrPrivKey;
		}
		if ((rr.KeyTag === 0) || (rr.SignerName.length === 0) || (rr.Algorithm === 0)) {
			return $pkg.ErrKey;
		}
		rr.Hdr.Rrtype = 46;
		_r = (0 >= rrset.$length ? $throwRuntimeError("index out of range") : rrset.$array[rrset.$offset + 0]).Header(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rr.Hdr.Name = _r.Name;
		_r$1 = (0 >= rrset.$length ? $throwRuntimeError("index out of range") : rrset.$array[rrset.$offset + 0]).Header(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		rr.Hdr.Class = _r$1.Class;
		/* */ if (rr.OrigTtl === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (rr.OrigTtl === 0) { */ case 3:
			_r$2 = (0 >= rrset.$length ? $throwRuntimeError("index out of range") : rrset.$array[rrset.$offset + 0]).Header(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			rr.OrigTtl = _r$2.Ttl;
		/* } */ case 4:
		_r$3 = (0 >= rrset.$length ? $throwRuntimeError("index out of range") : rrset.$array[rrset.$offset + 0]).Header(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rr.TypeCovered = _r$3.Rrtype;
		_r$4 = (0 >= rrset.$length ? $throwRuntimeError("index out of range") : rrset.$array[rrset.$offset + 0]).Header(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = CountLabel(_r$4.Name); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		rr.Labels = (_r$5 << 24 >>> 24);
		_r$6 = (0 >= rrset.$length ? $throwRuntimeError("index out of range") : rrset.$array[rrset.$offset + 0]).Header(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = strings.HasPrefix(_r$6.Name, "*"); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (_r$7) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_r$7) { */ case 9:
			rr.Labels = rr.Labels - (1) << 24 >>> 24;
		/* } */ case 10:
		sigwire = new rrsigWireFmt.ptr();
		sigwire.TypeCovered = rr.TypeCovered;
		sigwire.Algorithm = rr.Algorithm;
		sigwire.Labels = rr.Labels;
		sigwire.OrigTtl = rr.OrigTtl;
		sigwire.Expiration = rr.Expiration;
		sigwire.Inception = rr.Inception;
		sigwire.KeyTag = rr.KeyTag;
		_r$8 = strings.ToLower(rr.SignerName); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		sigwire.SignerName = _r$8;
		signdata = $makeSlice(sliceType, 4096);
		_r$9 = PackStruct(sigwire, signdata, 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple = _r$9; n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		signdata = $subslice(signdata, 0, n);
		_r$10 = rawSignatureData(rrset, rr); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_tuple$1 = _r$10; wire = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		signdata = $appendSlice(signdata, wire);
		_tuple$2 = (_entry = $pkg.AlgorithmToHash[$Uint8.keyFor(rr.Algorithm)], _entry !== undefined ? [_entry.v, true] : [0, false]); hash$1 = _tuple$2[0]; ok = _tuple$2[1];
		if (!ok) {
			return $pkg.ErrAlg;
		}
		_r$11 = new crypto.Hash(hash$1).New(); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		h = _r$11;
		_r$12 = h.Write(signdata); /* */ $s = 17; case 17: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		_arg = k;
		_r$13 = h.Sum(sliceType.nil); /* */ $s = 18; case 18: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_arg$1 = _r$13;
		_arg$2 = hash$1;
		_arg$3 = rr.Algorithm;
		_r$14 = sign(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 19; case 19: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_tuple$3 = _r$14; signature = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		rr.Signature = toBase64(signature);
		return $ifaceNil;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RRSIG.ptr.prototype.Sign }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.h = h; $f.hash$1 = hash$1; $f.k = k; $f.n = n; $f.ok = ok; $f.rr = rr; $f.rrset = rrset; $f.signature = signature; $f.signdata = signdata; $f.sigwire = sigwire; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;
	};
	RRSIG.prototype.Sign = function(k, rrset) { return this.$val.Sign(k, rrset); };
	sign = function(k, hashed, hash$1, alg) {
		var $ptr, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, alg, ecdsaSignature, err, err$1, hash$1, hashed, intlen, k, signature, signature$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; alg = $f.alg; ecdsaSignature = $f.ecdsaSignature; err = $f.err; err$1 = $f.err$1; hash$1 = $f.hash$1; hashed = $f.hashed; intlen = $f.intlen; k = $f.k; signature = $f.signature; signature$1 = $f.signature$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = k.Sign(rand.Reader, hashed, new crypto.Hash(hash$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; signature = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		_ref = alg;
		/* */ if (_ref === 5 || _ref === 7 || _ref === 8 || _ref === 10) { $s = 2; continue; }
		/* */ if (_ref === 13 || _ref === 14) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 5 || _ref === 7 || _ref === 8 || _ref === 10) { */ case 2:
			return [signature, $ifaceNil];
			$s = 4; continue;
		/* } else if (_ref === 13 || _ref === 14) { */ case 3:
			ecdsaSignature = new structType.ptr(ptrType$10.nil, ptrType$10.nil);
			_r$1 = asn1.Unmarshal(signature, ecdsaSignature); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; err$1 = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 6:
				return [sliceType.nil, err$1];
			/* } */ case 7:
			intlen = 0;
			_ref$1 = alg;
			if (_ref$1 === 13) {
				intlen = 32;
			} else if (_ref$1 === 14) {
				intlen = 48;
			}
			signature$1 = intToBytes(ecdsaSignature.R, intlen);
			signature$1 = $appendSlice(signature$1, intToBytes(ecdsaSignature.S, intlen));
			return [signature$1, $ifaceNil];
		/* } */ case 4:
		return [sliceType.nil, $pkg.ErrAlg];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sign }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.alg = alg; $f.ecdsaSignature = ecdsaSignature; $f.err = err; $f.err$1 = err$1; $f.hash$1 = hash$1; $f.hashed = hashed; $f.intlen = intlen; $f.k = k; $f.signature = signature; $f.signature$1 = signature$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	RRSIG.ptr.prototype.Verify = function(k, rrset) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _entry, _i, _q, _q$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, err, h, h$1, hash$1, k, n, ok, pubkey, pubkey$1, r, r$1, rr, rrset, s, sigbuf, signeddata, sigwire, wire, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _entry = $f._entry; _i = $f._i; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; h = $f.h; h$1 = $f.h$1; hash$1 = $f.hash$1; k = $f.k; n = $f.n; ok = $f.ok; pubkey = $f.pubkey; pubkey$1 = $f.pubkey$1; r = $f.r; r$1 = $f.r$1; rr = $f.rr; rrset = $f.rrset; s = $f.s; sigbuf = $f.sigbuf; signeddata = $f.signeddata; sigwire = $f.sigwire; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		if (rrset.$length === 0) {
			return $pkg.ErrRRset;
		}
		_r = k.KeyTag(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((rr.KeyTag === _r))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((rr.KeyTag === _r))) { */ case 1:
			return $pkg.ErrKey;
		/* } */ case 2:
		if (!((rr.Hdr.Class === k.Hdr.Class))) {
			return $pkg.ErrKey;
		}
		if (!((rr.Algorithm === k.Algorithm))) {
			return $pkg.ErrKey;
		}
		_r$1 = strings.ToLower(rr.SignerName); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = strings.ToLower(k.Hdr.Name); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!(_r$1 === _r$2)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(_r$1 === _r$2)) { */ case 4:
			return $pkg.ErrKey;
		/* } */ case 5:
		if (!((k.Protocol === 3))) {
			return $pkg.ErrKey;
		}
		_ref = rrset;
		_i = 0;
		/* while (true) { */ case 8:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$3 = r.Header(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!((_r$3.Class === rr.Hdr.Class))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!((_r$3.Class === rr.Hdr.Class))) { */ case 10:
				return $pkg.ErrRRset;
			/* } */ case 11:
			_r$4 = r.Header(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!((_r$4.Rrtype === rr.TypeCovered))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!((_r$4.Rrtype === rr.TypeCovered))) { */ case 13:
				return $pkg.ErrRRset;
			/* } */ case 14:
			_i++;
		/* } */ $s = 8; continue; case 9:
		sigwire = new rrsigWireFmt.ptr();
		sigwire.TypeCovered = rr.TypeCovered;
		sigwire.Algorithm = rr.Algorithm;
		sigwire.Labels = rr.Labels;
		sigwire.OrigTtl = rr.OrigTtl;
		sigwire.Expiration = rr.Expiration;
		sigwire.Inception = rr.Inception;
		sigwire.KeyTag = rr.KeyTag;
		_r$5 = strings.ToLower(rr.SignerName); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		sigwire.SignerName = _r$5;
		signeddata = $makeSlice(sliceType, 4096);
		_r$6 = PackStruct(sigwire, signeddata, 0); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6; n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		signeddata = $subslice(signeddata, 0, n);
		_r$7 = rawSignatureData(rrset, rr); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$1 = _r$7; wire = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		signeddata = $appendSlice(signeddata, wire);
		_r$8 = rr.sigBuf(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		sigbuf = _r$8;
		_tuple$2 = (_entry = $pkg.AlgorithmToHash[$Uint8.keyFor(rr.Algorithm)], _entry !== undefined ? [_entry.v, true] : [0, false]); hash$1 = _tuple$2[0]; ok = _tuple$2[1];
		if (!ok) {
			return $pkg.ErrAlg;
		}
		_ref$1 = rr.Algorithm;
		/* */ if (_ref$1 === 5 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 10 || _ref$1 === 1) { $s = 20; continue; }
		/* */ if (_ref$1 === 13 || _ref$1 === 14) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_ref$1 === 5 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 10 || _ref$1 === 1) { */ case 20:
			_r$9 = k.publicKeyRSA(); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			pubkey = _r$9;
			if (pubkey === ptrType$11.nil) {
				return $pkg.ErrKey;
			}
			_r$10 = new crypto.Hash(hash$1).New(); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			h = _r$10;
			_r$11 = h.Write(signeddata); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			_arg = pubkey;
			_arg$1 = hash$1;
			_r$12 = h.Sum(sliceType.nil); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_arg$2 = _r$12;
			_arg$3 = sigbuf;
			_r$13 = rsa.VerifyPKCS1v15(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			return _r$13;
			$s = 23; continue;
		/* } else if (_ref$1 === 13 || _ref$1 === 14) { */ case 21:
			_r$14 = k.publicKeyECDSA(); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			pubkey$1 = _r$14;
			if (pubkey$1 === ptrType$12.nil) {
				return $pkg.ErrKey;
			}
			r$1 = new big.Int.ptr().SetBytes($subslice(sigbuf, 0, (_q = sigbuf.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
			s = new big.Int.ptr().SetBytes($subslice(sigbuf, (_q$1 = sigbuf.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))));
			_r$15 = new crypto.Hash(hash$1).New(); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			h$1 = _r$15;
			_r$16 = h$1.Write(signeddata); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
			_arg$4 = pubkey$1;
			_r$17 = h$1.Sum(sliceType.nil); /* */ $s = 34; case 34: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_arg$5 = _r$17;
			_arg$6 = r$1;
			_arg$7 = s;
			_r$18 = ecdsa.Verify(_arg$4, _arg$5, _arg$6, _arg$7); /* */ $s = 35; case 35: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			/* */ if (_r$18) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (_r$18) { */ case 32:
				return $ifaceNil;
			/* } */ case 33:
			return $pkg.ErrSig;
			$s = 23; continue;
		/* } else { */ case 22:
			return $pkg.ErrAlg;
		/* } */ case 23:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RRSIG.ptr.prototype.Verify }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._entry = _entry; $f._i = _i; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.h = h; $f.h$1 = h$1; $f.hash$1 = hash$1; $f.k = k; $f.n = n; $f.ok = ok; $f.pubkey = pubkey; $f.pubkey$1 = pubkey$1; $f.r = r; $f.r$1 = r$1; $f.rr = rr; $f.rrset = rrset; $f.s = s; $f.sigbuf = sigbuf; $f.signeddata = signeddata; $f.sigwire = sigwire; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;
	};
	RRSIG.prototype.Verify = function(k, rrset) { return this.$val.Verify(k, rrset); };
	RRSIG.ptr.prototype.ValidityPeriod = function(t) {
		var $ptr, mode, modi, rr, t, te, ti, utc, x, x$1, x$2, x$3, x$4, x$5;
		t = $clone(t, time.Time);
		rr = this;
		utc = new $Int64(0, 0);
		if (t.IsZero()) {
			utc = time.Now().UTC().Unix();
		} else {
			utc = t.UTC().Unix();
		}
		modi = $div64(((x = new $Int64(0, rr.Inception), new $Int64(x.$high - utc.$high, x.$low - utc.$low))), new $Int64(0, 2147483648), false);
		mode = $div64(((x$1 = new $Int64(0, rr.Expiration), new $Int64(x$1.$high - utc.$high, x$1.$low - utc.$low))), new $Int64(0, 2147483648), false);
		ti = (x$2 = new $Int64(0, rr.Inception), x$3 = $mul64(modi, new $Int64(0, 2147483648)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		te = (x$4 = new $Int64(0, rr.Expiration), x$5 = $mul64(mode, new $Int64(0, 2147483648)), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return (ti.$high < utc.$high || (ti.$high === utc.$high && ti.$low <= utc.$low)) && (utc.$high < te.$high || (utc.$high === te.$high && utc.$low <= te.$low));
	};
	RRSIG.prototype.ValidityPeriod = function(t) { return this.$val.ValidityPeriod(t); };
	RRSIG.ptr.prototype.sigBuf = function() {
		var $ptr, _r, _tuple, err, rr, sigbuf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; rr = $f.rr; sigbuf = $f.sigbuf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = fromBase64(new sliceType($stringToBytes(rr.Signature))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; sigbuf = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return sliceType.nil;
		}
		return sigbuf;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RRSIG.ptr.prototype.sigBuf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.rr = rr; $f.sigbuf = sigbuf; $f.$s = $s; $f.$r = $r; return $f;
	};
	RRSIG.prototype.sigBuf = function() { return this.$val.sigBuf(); };
	DNSKEY.ptr.prototype.publicKeyRSA = function() {
		var $ptr, _r, _tuple, err, explen, expo, i, k, keybuf, keyoff, pubkey, shift, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; explen = $f.explen; expo = $f.expo; i = $f.i; k = $f.k; keybuf = $f.keybuf; keyoff = $f.keyoff; pubkey = $f.pubkey; shift = $f.shift; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		_r = fromBase64(new sliceType($stringToBytes(k.PublicKey))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; keybuf = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return ptrType$11.nil;
		}
		explen = ((0 >= keybuf.$length ? $throwRuntimeError("index out of range") : keybuf.$array[keybuf.$offset + 0]) << 16 >>> 16);
		keyoff = 1;
		if (explen === 0) {
			explen = ((((1 >= keybuf.$length ? $throwRuntimeError("index out of range") : keybuf.$array[keybuf.$offset + 1]) << 16 >>> 16) << 8 << 16 >>> 16) | ((2 >= keybuf.$length ? $throwRuntimeError("index out of range") : keybuf.$array[keybuf.$offset + 2]) << 16 >>> 16)) >>> 0;
			keyoff = 3;
		}
		pubkey = new rsa.PublicKey.ptr();
		pubkey.N = big.NewInt(new $Int64(0, 0));
		shift = new $Uint64(0, (((explen - 1 << 16 >>> 16)) * 8 << 16 >>> 16));
		expo = new $Uint64(0, 0);
		i = ((explen - 1 << 16 >>> 16) >> 0);
		while (true) {
			if (!(i > 0)) { break; }
			expo = (x = $shiftLeft64(new $Uint64(0, (x$1 = keyoff + i >> 0, ((x$1 < 0 || x$1 >= keybuf.$length) ? $throwRuntimeError("index out of range") : keybuf.$array[keybuf.$offset + x$1]))), $flatten64(shift)), new $Uint64(expo.$high + x.$high, expo.$low + x.$low));
			shift = (x$2 = new $Uint64(0, 8), new $Uint64(shift.$high - x$2.$high, shift.$low - x$2.$low));
			i = i - (1) >> 0;
		}
		expo = (x$3 = new $Uint64(0, ((keyoff < 0 || keyoff >= keybuf.$length) ? $throwRuntimeError("index out of range") : keybuf.$array[keybuf.$offset + keyoff])), new $Uint64(expo.$high + x$3.$high, expo.$low + x$3.$low));
		if ((expo.$high > 1 || (expo.$high === 1 && expo.$low > 0))) {
			return ptrType$11.nil;
		}
		pubkey.E = (expo.$low >> 0);
		pubkey.N.SetBytes($subslice(keybuf, (keyoff + (explen >> 0) >> 0)));
		return pubkey;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.publicKeyRSA }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.explen = explen; $f.expo = expo; $f.i = i; $f.k = k; $f.keybuf = keybuf; $f.keyoff = keyoff; $f.pubkey = pubkey; $f.shift = shift; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.publicKeyRSA = function() { return this.$val.publicKeyRSA(); };
	DNSKEY.ptr.prototype.publicKeyECDSA = function() {
		var $ptr, _q, _q$1, _r, _r$1, _r$2, _ref, _tuple, err, k, keybuf, pubkey, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; k = $f.k; keybuf = $f.keybuf; pubkey = $f.pubkey; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		_r = fromBase64(new sliceType($stringToBytes(k.PublicKey))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; keybuf = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return ptrType$12.nil;
		}
		pubkey = new ecdsa.PublicKey.ptr();
		_ref = k.Algorithm;
		/* */ if (_ref === 13) { $s = 2; continue; }
		/* */ if (_ref === 14) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 13) { */ case 2:
			_r$1 = elliptic.P256(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			pubkey.Curve = _r$1;
			if (!((keybuf.$length === 64))) {
				return ptrType$12.nil;
			}
			$s = 4; continue;
		/* } else if (_ref === 14) { */ case 3:
			_r$2 = elliptic.P384(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			pubkey.Curve = _r$2;
			if (!((keybuf.$length === 96))) {
				return ptrType$12.nil;
			}
		/* } */ case 4:
		pubkey.X = big.NewInt(new $Int64(0, 0));
		pubkey.X.SetBytes($subslice(keybuf, 0, (_q = keybuf.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
		pubkey.Y = big.NewInt(new $Int64(0, 0));
		pubkey.Y.SetBytes($subslice(keybuf, (_q$1 = keybuf.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))));
		return pubkey;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.publicKeyECDSA }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.k = k; $f.keybuf = keybuf; $f.pubkey = pubkey; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.publicKeyECDSA = function() { return this.$val.publicKeyECDSA(); };
	DNSKEY.ptr.prototype.publicKeyDSA = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, err, g, k, keybuf, p, pubkey, q, size, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; err = $f.err; g = $f.g; k = $f.k; keybuf = $f.keybuf; p = $f.p; pubkey = $f.pubkey; q = $f.q; size = $f.size; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		_r = fromBase64(new sliceType($stringToBytes(k.PublicKey))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; keybuf = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return ptrType$13.nil;
		}
		if (keybuf.$length < 22) {
			return ptrType$13.nil;
		}
		_tmp = ((0 >= keybuf.$length ? $throwRuntimeError("index out of range") : keybuf.$array[keybuf.$offset + 0]) >> 0); _tmp$1 = $subslice(keybuf, 1); t = _tmp; keybuf = _tmp$1;
		size = 64 + (t * 8 >> 0) >> 0;
		_tmp$2 = $subslice(keybuf, 0, 20); _tmp$3 = $subslice(keybuf, 20); q = _tmp$2; keybuf = _tmp$3;
		if (!((keybuf.$length === (3 * size >> 0)))) {
			return ptrType$13.nil;
		}
		_tmp$4 = $subslice(keybuf, 0, size); _tmp$5 = $subslice(keybuf, size); p = _tmp$4; keybuf = _tmp$5;
		_tmp$6 = $subslice(keybuf, 0, size); _tmp$7 = $subslice(keybuf, size); g = _tmp$6; y = _tmp$7;
		pubkey = new dsa.PublicKey.ptr();
		pubkey.Parameters.Q = big.NewInt(new $Int64(0, 0)).SetBytes(q);
		pubkey.Parameters.P = big.NewInt(new $Int64(0, 0)).SetBytes(p);
		pubkey.Parameters.G = big.NewInt(new $Int64(0, 0)).SetBytes(g);
		pubkey.Y = big.NewInt(new $Int64(0, 0)).SetBytes(y);
		return pubkey;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.publicKeyDSA }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.err = err; $f.g = g; $f.k = k; $f.keybuf = keybuf; $f.p = p; $f.pubkey = pubkey; $f.q = q; $f.size = size; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.publicKeyDSA = function() { return this.$val.publicKeyDSA(); };
	wireSlice.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(wireSlice).prototype.Len = function() { return this.$get().Len(); };
	wireSlice.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]); _tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]); ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp); ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(wireSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	wireSlice.prototype.Less = function(i, j) {
		var $ptr, _tuple, _tuple$1, i, ioff, j, joff, p;
		p = this;
		_tuple = UnpackDomainName(((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]), 0); ioff = _tuple[1];
		_tuple$1 = UnpackDomainName(((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]), 0); joff = _tuple$1[1];
		return bytes.Compare($subslice(((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]), (ioff + 10 >> 0)), $subslice(((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]), (joff + 10 >> 0))) < 0;
	};
	$ptrType(wireSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	rawSignatureData = function(rrset, s) {
		var $ptr, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, buf, err, err1, i, i$1, labels, off, r, r1, rrset, s, wire, wire$1, wires, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; buf = $f.buf; err = $f.err; err1 = $f.err1; i = $f.i; i$1 = $f.i$1; labels = $f.labels; off = $f.off; r = $f.r; r1 = $f.r1; rrset = $f.rrset; s = $f.s; wire = $f.wire; wire$1 = $f.wire$1; wires = $f.wires; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = sliceType.nil;
		err = $ifaceNil;
		wires = $makeSlice(wireSlice, rrset.$length);
		_ref = rrset;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = r.copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r1 = _r;
			_r$1 = r1.Header(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1.Ttl = s.OrigTtl;
			_r$2 = r1.Header(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = SplitDomainName(_r$2.Name); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			labels = _r$3;
			/* */ if (labels.$length > (s.Labels >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (labels.$length > (s.Labels >> 0)) { */ case 7:
				_r$4 = r1.Header(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4.Name = "*." + strings.Join($subslice(labels, (labels.$length - (s.Labels >> 0) >> 0)), ".") + ".";
			/* } */ case 8:
			_r$5 = r1.Header(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = strings.ToLower(_r$5.Name); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = r1.Header(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7.Name = _r$6;
			_ref$1 = r1;
			/* */ if ($assertType(_ref$1, ptrType$14, true)[1]) { $s = 13; continue; }
			/* */ if ($assertType(_ref$1, ptrType$15, true)[1]) { $s = 14; continue; }
			/* */ if ($assertType(_ref$1, ptrType$16, true)[1]) { $s = 15; continue; }
			/* */ if ($assertType(_ref$1, ptrType$17, true)[1]) { $s = 16; continue; }
			/* */ if ($assertType(_ref$1, ptrType$18, true)[1]) { $s = 17; continue; }
			/* */ if ($assertType(_ref$1, ptrType$19, true)[1]) { $s = 18; continue; }
			/* */ if ($assertType(_ref$1, ptrType$20, true)[1]) { $s = 19; continue; }
			/* */ if ($assertType(_ref$1, ptrType$21, true)[1]) { $s = 20; continue; }
			/* */ if ($assertType(_ref$1, ptrType$22, true)[1]) { $s = 21; continue; }
			/* */ if ($assertType(_ref$1, ptrType$23, true)[1]) { $s = 22; continue; }
			/* */ if ($assertType(_ref$1, ptrType$24, true)[1]) { $s = 23; continue; }
			/* */ if ($assertType(_ref$1, ptrType$25, true)[1]) { $s = 24; continue; }
			/* */ if ($assertType(_ref$1, ptrType$26, true)[1]) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ($assertType(_ref$1, ptrType$14, true)[1]) { */ case 13:
				x = _ref$1.$val;
				_r$8 = strings.ToLower(x.Ns); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				x.Ns = _r$8;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$15, true)[1]) { */ case 14:
				x$1 = _ref$1.$val;
				_r$9 = strings.ToLower(x$1.Target); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				x$1.Target = _r$9;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$16, true)[1]) { */ case 15:
				x$2 = _ref$1.$val;
				_r$10 = strings.ToLower(x$2.Ns); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				x$2.Ns = _r$10;
				_r$11 = strings.ToLower(x$2.Mbox); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				x$2.Mbox = _r$11;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$17, true)[1]) { */ case 16:
				x$3 = _ref$1.$val;
				_r$12 = strings.ToLower(x$3.Mb); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				x$3.Mb = _r$12;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$18, true)[1]) { */ case 17:
				x$4 = _ref$1.$val;
				_r$13 = strings.ToLower(x$4.Mg); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				x$4.Mg = _r$13;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$19, true)[1]) { */ case 18:
				x$5 = _ref$1.$val;
				_r$14 = strings.ToLower(x$5.Mr); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				x$5.Mr = _r$14;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$20, true)[1]) { */ case 19:
				x$6 = _ref$1.$val;
				_r$15 = strings.ToLower(x$6.Ptr); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				x$6.Ptr = _r$15;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$21, true)[1]) { */ case 20:
				x$7 = _ref$1.$val;
				_r$16 = strings.ToLower(x$7.Rmail); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				x$7.Rmail = _r$16;
				_r$17 = strings.ToLower(x$7.Email); /* */ $s = 36; case 36: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				x$7.Email = _r$17;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$22, true)[1]) { */ case 21:
				x$8 = _ref$1.$val;
				_r$18 = strings.ToLower(x$8.Mx); /* */ $s = 37; case 37: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				x$8.Mx = _r$18;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$23, true)[1]) { */ case 22:
				x$9 = _ref$1.$val;
				_r$19 = strings.ToLower(x$9.Replacement); /* */ $s = 38; case 38: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				x$9.Replacement = _r$19;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$24, true)[1]) { */ case 23:
				x$10 = _ref$1.$val;
				_r$20 = strings.ToLower(x$10.Exchanger); /* */ $s = 39; case 39: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				x$10.Exchanger = _r$20;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$25, true)[1]) { */ case 24:
				x$11 = _ref$1.$val;
				_r$21 = strings.ToLower(x$11.Target); /* */ $s = 40; case 40: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				x$11.Target = _r$21;
				$s = 26; continue;
			/* } else if ($assertType(_ref$1, ptrType$26, true)[1]) { */ case 25:
				x$12 = _ref$1.$val;
				_r$22 = strings.ToLower(x$12.Target); /* */ $s = 41; case 41: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				x$12.Target = _r$22;
			/* } */ case 26:
			_r$23 = r1.len(); /* */ $s = 42; case 42: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			wire = $makeSlice(sliceType, (_r$23 + 1 >> 0));
			_r$24 = PackRR(r1, wire, 0, false, false); /* */ $s = 43; case 43: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_tuple = _r$24; off = _tuple[0]; err1 = _tuple[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				_tmp = sliceType.nil; _tmp$1 = err1; buf = _tmp; err = _tmp$1;
				return [buf, err];
			}
			wire = $subslice(wire, 0, off);
			((i < 0 || i >= wires.$length) ? $throwRuntimeError("index out of range") : wires.$array[wires.$offset + i] = wire);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort(wires); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$2 = wires;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$2.$length)) { break; }
			i$1 = _i$1;
			wire$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
			if (i$1 > 0 && bytes.Equal(wire$1, (x$13 = i$1 - 1 >> 0, ((x$13 < 0 || x$13 >= wires.$length) ? $throwRuntimeError("index out of range") : wires.$array[wires.$offset + x$13])))) {
				_i$1++;
				continue;
			}
			buf = $appendSlice(buf, wire$1);
			_i$1++;
		}
		_tmp$2 = buf; _tmp$3 = $ifaceNil; buf = _tmp$2; err = _tmp$3;
		return [buf, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rawSignatureData }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.err1 = err1; $f.i = i; $f.i$1 = i$1; $f.labels = labels; $f.off = off; $f.r = r; $f.r1 = r1; $f.rrset = rrset; $f.s = s; $f.wire = wire; $f.wire$1 = wire$1; $f.wires = wires; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.ptr.prototype.Generate = function(bits) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _ref$2, _tuple, _tuple$1, bits, c, err, err$1, err$2, err$3, k, params, priv, priv$1, priv$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bits = $f.bits; c = $f.c; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; k = $f.k; params = $f.params; priv = $f.priv; priv$1 = $f.priv$1; priv$2 = $f.priv$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		_ref = k.Algorithm;
		if (_ref === 3 || _ref === 6) {
			if (!((bits === 1024))) {
				return [$ifaceNil, $pkg.ErrKeySize];
			}
		} else if (_ref === 1 || _ref === 5 || _ref === 8 || _ref === 7) {
			if (bits < 512 || bits > 4096) {
				return [$ifaceNil, $pkg.ErrKeySize];
			}
		} else if (_ref === 10) {
			if (bits < 1024 || bits > 4096) {
				return [$ifaceNil, $pkg.ErrKeySize];
			}
		} else if (_ref === 13) {
			if (!((bits === 256))) {
				return [$ifaceNil, $pkg.ErrKeySize];
			}
		} else if (_ref === 14) {
			if (!((bits === 384))) {
				return [$ifaceNil, $pkg.ErrKeySize];
			}
		}
		_ref$1 = k.Algorithm;
		/* */ if (_ref$1 === 3 || _ref$1 === 6) { $s = 1; continue; }
		/* */ if (_ref$1 === 1 || _ref$1 === 5 || _ref$1 === 8 || _ref$1 === 10 || _ref$1 === 7) { $s = 2; continue; }
		/* */ if (_ref$1 === 13 || _ref$1 === 14) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref$1 === 3 || _ref$1 === 6) { */ case 1:
			params = new dsa.Parameters.ptr();
			_r = dsa.GenerateParameters(params, rand.Reader, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
				return [$ifaceNil, err];
			/* } */ case 8:
			priv = new dsa.PrivateKey.ptr();
			$copy(priv.PublicKey.Parameters, params, dsa.Parameters);
			_r$1 = dsa.GenerateKey(priv, rand.Reader); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$1 = _r$1;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [$ifaceNil, err$1];
			}
			k.setPublicKeyDSA(params.Q, params.P, params.G, priv.PublicKey.Y);
			return [priv, $ifaceNil];
			$s = 5; continue;
		/* } else if (_ref$1 === 1 || _ref$1 === 5 || _ref$1 === 8 || _ref$1 === 10 || _ref$1 === 7) { */ case 2:
			_r$2 = rsa.GenerateKey(rand.Reader, bits); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2; priv$1 = _tuple[0]; err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [$ifaceNil, err$2];
			}
			k.setPublicKeyRSA(priv$1.PublicKey.E, priv$1.PublicKey.N);
			return [priv$1, $ifaceNil];
			$s = 5; continue;
		/* } else if (_ref$1 === 13 || _ref$1 === 14) { */ case 3:
			c = $ifaceNil;
			_ref$2 = k.Algorithm;
			/* */ if (_ref$2 === 13) { $s = 11; continue; }
			/* */ if (_ref$2 === 14) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_ref$2 === 13) { */ case 11:
				_r$3 = elliptic.P256(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				c = _r$3;
				$s = 13; continue;
			/* } else if (_ref$2 === 14) { */ case 12:
				_r$4 = elliptic.P384(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				c = _r$4;
			/* } */ case 13:
			_r$5 = ecdsa.GenerateKey(c, rand.Reader); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5; priv$2 = _tuple$1[0]; err$3 = _tuple$1[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				return [$ifaceNil, err$3];
			}
			k.setPublicKeyECDSA(priv$2.PublicKey.X, priv$2.PublicKey.Y);
			return [priv$2, $ifaceNil];
			$s = 5; continue;
		/* } else { */ case 4:
			return [$ifaceNil, $pkg.ErrAlg];
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.Generate }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bits = bits; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.k = k; $f.params = params; $f.priv = priv; $f.priv$1 = priv$1; $f.priv$2 = priv$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.Generate = function(bits) { return this.$val.Generate(bits); };
	DNSKEY.ptr.prototype.setPublicKeyRSA = function(_E, _N) {
		var $ptr, _E, _N, buf, k;
		k = this;
		if ((_E === 0) || _N === ptrType$10.nil) {
			return false;
		}
		buf = exponentToBuf(_E);
		buf = $appendSlice(buf, _N.Bytes());
		k.PublicKey = toBase64(buf);
		return true;
	};
	DNSKEY.prototype.setPublicKeyRSA = function(_E, _N) { return this.$val.setPublicKeyRSA(_E, _N); };
	DNSKEY.ptr.prototype.setPublicKeyECDSA = function(_X, _Y) {
		var $ptr, _X, _Y, _ref, intlen, k;
		k = this;
		if (_X === ptrType$10.nil || _Y === ptrType$10.nil) {
			return false;
		}
		intlen = 0;
		_ref = k.Algorithm;
		if (_ref === 13) {
			intlen = 32;
		} else if (_ref === 14) {
			intlen = 48;
		}
		k.PublicKey = toBase64(curveToBuf(_X, _Y, intlen));
		return true;
	};
	DNSKEY.prototype.setPublicKeyECDSA = function(_X, _Y) { return this.$val.setPublicKeyECDSA(_X, _Y); };
	DNSKEY.ptr.prototype.setPublicKeyDSA = function(_Q, _P, _G, _Y) {
		var $ptr, _G, _P, _Q, _Y, buf, k;
		k = this;
		if (_Q === ptrType$10.nil || _P === ptrType$10.nil || _G === ptrType$10.nil || _Y === ptrType$10.nil) {
			return false;
		}
		buf = dsaToBuf(_Q, _P, _G, _Y);
		k.PublicKey = toBase64(buf);
		return true;
	};
	DNSKEY.prototype.setPublicKeyDSA = function(_Q, _P, _G, _Y) { return this.$val.setPublicKeyDSA(_Q, _P, _G, _Y); };
	exponentToBuf = function(_E) {
		var $ptr, _E, buf, i;
		buf = sliceType.nil;
		i = big.NewInt(new $Int64(0, _E));
		if (i.Bytes().$length < 256) {
			buf = $makeSlice(sliceType, 1);
			(0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0] = (i.Bytes().$length << 24 >>> 24));
		} else {
			buf = $makeSlice(sliceType, 3);
			(0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0] = 0);
			(1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1] = ((i.Bytes().$length >> 8 >> 0) << 24 >>> 24));
			(2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2] = (i.Bytes().$length << 24 >>> 24));
		}
		buf = $appendSlice(buf, i.Bytes());
		return buf;
	};
	curveToBuf = function(_X, _Y, intlen) {
		var $ptr, _X, _Y, buf, intlen;
		buf = intToBytes(_X, intlen);
		buf = $appendSlice(buf, intToBytes(_Y, intlen));
		return buf;
	};
	dsaToBuf = function(_Q, _P, _G, _Y) {
		var $ptr, _G, _P, _Q, _Y, buf, t;
		t = divRoundUp(divRoundUp(_G.BitLen(), 8) - 64 >> 0, 8);
		buf = new sliceType([(t << 24 >>> 24)]);
		buf = $appendSlice(buf, intToBytes(_Q, 20));
		buf = $appendSlice(buf, intToBytes(_P, 64 + (t * 8 >> 0) >> 0));
		buf = $appendSlice(buf, intToBytes(_G, 64 + (t * 8 >> 0) >> 0));
		buf = $appendSlice(buf, intToBytes(_Y, 64 + (t * 8 >> 0) >> 0));
		return buf;
	};
	DNSKEY.ptr.prototype.NewPrivateKey = function(s) {
		var $ptr, _r, _r$1, k, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; k = $f.k; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		/* */ if (!((s.charCodeAt((s.length - 1 >> 0)) === 10))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((s.charCodeAt((s.length - 1 >> 0)) === 10))) { */ case 1:
			_r = k.ReadPrivateKey(strings.NewReader(s + "\n"), ""); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		_r$1 = k.ReadPrivateKey(strings.NewReader(s), ""); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.NewPrivateKey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.k = k; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.NewPrivateKey = function(s) { return this.$val.NewPrivateKey(s); };
	DNSKEY.ptr.prototype.ReadPrivateKey = function(q, file) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, e, e$1, e$2, e$3, file, k, m, ok, priv, priv$1, priv$2, pub, pub$1, pub$2, q, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; e$3 = $f.e$3; file = $f.file; k = $f.k; m = $f.m; ok = $f.ok; priv = $f.priv; priv$1 = $f.priv$1; priv$2 = $f.priv$2; pub = $f.pub; pub$1 = $f.pub$1; pub$2 = $f.pub$2; q = $f.q; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		_r = parseKey(q, file); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; m = _tuple[0]; e = _tuple[1];
		if (m === false) {
			return [$ifaceNil, e];
		}
		_tuple$1 = (_entry = m[$String.keyFor("private-key-format")], _entry !== undefined ? [_entry.v, true] : ["", false]); ok = _tuple$1[1];
		if (!ok) {
			return [$ifaceNil, $pkg.ErrPrivKey];
		}
		if (!((_entry$1 = m[$String.keyFor("private-key-format")], _entry$1 !== undefined ? _entry$1.v : "") === "v1.2") && !((_entry$2 = m[$String.keyFor("private-key-format")], _entry$2 !== undefined ? _entry$2.v : "") === "v1.3")) {
			return [$ifaceNil, $pkg.ErrPrivKey];
		}
		_ref = (_entry$3 = m[$String.keyFor("algorithm")], _entry$3 !== undefined ? _entry$3.v : "");
		/* */ if (_ref === "3 (DSA)") { $s = 2; continue; }
		/* */ if (_ref === "1 (RSAMD5)") { $s = 3; continue; }
		/* */ if (_ref === "5 (RSASHA1)") { $s = 4; continue; }
		/* */ if (_ref === "7 (RSASHA1NSEC3SHA1)") { $s = 5; continue; }
		/* */ if (_ref === "8 (RSASHA256)") { $s = 6; continue; }
		/* */ if (_ref === "10 (RSASHA512)") { $s = 7; continue; }
		/* */ if (_ref === "12 (ECC-GOST)") { $s = 8; continue; }
		/* */ if (_ref === "13 (ECDSAP256SHA256)") { $s = 9; continue; }
		/* */ if (_ref === "14 (ECDSAP384SHA384)") { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_ref === "3 (DSA)") { */ case 2:
			_r$1 = readPrivateKeyDSA(m); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1; priv = _tuple$2[0]; e$1 = _tuple$2[1];
			if (!($interfaceIsEqual(e$1, $ifaceNil))) {
				return [$ifaceNil, e$1];
			}
			_r$2 = k.publicKeyDSA(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			pub = _r$2;
			if (pub === ptrType$13.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv.PublicKey, pub, dsa.PublicKey);
			return [priv, e$1];
			$s = 12; continue;
		/* } else if (_ref === "1 (RSAMD5)") { */ case 3:
			_r$3 = readPrivateKeyRSA(m); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$3 = _r$3; priv$1 = _tuple$3[0]; e$2 = _tuple$3[1];
			if (!($interfaceIsEqual(e$2, $ifaceNil))) {
				return [$ifaceNil, e$2];
			}
			_r$4 = k.publicKeyRSA(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			pub$1 = _r$4;
			if (pub$1 === ptrType$11.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv$1.PublicKey, pub$1, rsa.PublicKey);
			return [priv$1, e$2];
			$s = 12; continue;
		/* } else if (_ref === "5 (RSASHA1)") { */ case 4:
			_r$5 = readPrivateKeyRSA(m); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$4 = _r$5; priv$1 = _tuple$4[0]; e$2 = _tuple$4[1];
			if (!($interfaceIsEqual(e$2, $ifaceNil))) {
				return [$ifaceNil, e$2];
			}
			_r$6 = k.publicKeyRSA(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			pub$1 = _r$6;
			if (pub$1 === ptrType$11.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv$1.PublicKey, pub$1, rsa.PublicKey);
			return [priv$1, e$2];
			$s = 12; continue;
		/* } else if (_ref === "7 (RSASHA1NSEC3SHA1)") { */ case 5:
			_r$7 = readPrivateKeyRSA(m); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$5 = _r$7; priv$1 = _tuple$5[0]; e$2 = _tuple$5[1];
			if (!($interfaceIsEqual(e$2, $ifaceNil))) {
				return [$ifaceNil, e$2];
			}
			_r$8 = k.publicKeyRSA(); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			pub$1 = _r$8;
			if (pub$1 === ptrType$11.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv$1.PublicKey, pub$1, rsa.PublicKey);
			return [priv$1, e$2];
			$s = 12; continue;
		/* } else if (_ref === "8 (RSASHA256)") { */ case 6:
			_r$9 = readPrivateKeyRSA(m); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$6 = _r$9; priv$1 = _tuple$6[0]; e$2 = _tuple$6[1];
			if (!($interfaceIsEqual(e$2, $ifaceNil))) {
				return [$ifaceNil, e$2];
			}
			_r$10 = k.publicKeyRSA(); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			pub$1 = _r$10;
			if (pub$1 === ptrType$11.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv$1.PublicKey, pub$1, rsa.PublicKey);
			return [priv$1, e$2];
			$s = 12; continue;
		/* } else if (_ref === "10 (RSASHA512)") { */ case 7:
			_r$11 = readPrivateKeyRSA(m); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple$7 = _r$11; priv$1 = _tuple$7[0]; e$2 = _tuple$7[1];
			if (!($interfaceIsEqual(e$2, $ifaceNil))) {
				return [$ifaceNil, e$2];
			}
			_r$12 = k.publicKeyRSA(); /* */ $s = 24; case 24: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			pub$1 = _r$12;
			if (pub$1 === ptrType$11.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv$1.PublicKey, pub$1, rsa.PublicKey);
			return [priv$1, e$2];
			$s = 12; continue;
		/* } else if (_ref === "12 (ECC-GOST)") { */ case 8:
			return [$ifaceNil, $pkg.ErrPrivKey];
			$s = 12; continue;
		/* } else if (_ref === "13 (ECDSAP256SHA256)") { */ case 9:
			_r$13 = readPrivateKeyECDSA(m); /* */ $s = 25; case 25: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_tuple$8 = _r$13; priv$2 = _tuple$8[0]; e$3 = _tuple$8[1];
			if (!($interfaceIsEqual(e$3, $ifaceNil))) {
				return [$ifaceNil, e$3];
			}
			_r$14 = k.publicKeyECDSA(); /* */ $s = 26; case 26: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			pub$2 = _r$14;
			if (pub$2 === ptrType$12.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv$2.PublicKey, pub$2, ecdsa.PublicKey);
			return [priv$2, e$3];
			$s = 12; continue;
		/* } else if (_ref === "14 (ECDSAP384SHA384)") { */ case 10:
			_r$15 = readPrivateKeyECDSA(m); /* */ $s = 27; case 27: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_tuple$9 = _r$15; priv$2 = _tuple$9[0]; e$3 = _tuple$9[1];
			if (!($interfaceIsEqual(e$3, $ifaceNil))) {
				return [$ifaceNil, e$3];
			}
			_r$16 = k.publicKeyECDSA(); /* */ $s = 28; case 28: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			pub$2 = _r$16;
			if (pub$2 === ptrType$12.nil) {
				return [$ifaceNil, $pkg.ErrKey];
			}
			$copy(priv$2.PublicKey, pub$2, ecdsa.PublicKey);
			return [priv$2, e$3];
			$s = 12; continue;
		/* } else { */ case 11:
			return [$ifaceNil, $pkg.ErrPrivKey];
		/* } */ case 12:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DNSKEY.ptr.prototype.ReadPrivateKey }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.e$3 = e$3; $f.file = file; $f.k = k; $f.m = m; $f.ok = ok; $f.priv = priv; $f.priv$1 = priv$1; $f.priv$2 = priv$2; $f.pub = pub; $f.pub$1 = pub$1; $f.pub$2 = pub$2; $f.q = q; $f.$s = $s; $f.$r = $r; return $f;
	};
	DNSKEY.prototype.ReadPrivateKey = function(q, file) { return this.$val.ReadPrivateKey(q, file); };
	readPrivateKeyRSA = function(m) {
		var $ptr, _entry, _i, _keys, _r, _ref, _ref$1, _ref$2, _tuple, err, i, k, m, p, v, v1, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; err = $f.err; i = $f.i; k = $f.k; m = $f.m; p = $f.p; v = $f.v; v1 = $f.v1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = new rsa.PrivateKey.ptr();
		p.Primes = new sliceType$4([ptrType$10.nil, ptrType$10.nil]);
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			_ref$1 = k;
			/* */ if (_ref$1 === "modulus" || _ref$1 === "publicexponent" || _ref$1 === "privateexponent" || _ref$1 === "prime1" || _ref$1 === "prime2") { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_ref$1 === "modulus" || _ref$1 === "publicexponent" || _ref$1 === "privateexponent" || _ref$1 === "prime1" || _ref$1 === "prime2") { */ case 3:
				_r = fromBase64(new sliceType($stringToBytes(v))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; v1 = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [ptrType$27.nil, err];
				}
				_ref$2 = k;
				if (_ref$2 === "modulus") {
					p.PublicKey.N = big.NewInt(new $Int64(0, 0));
					p.PublicKey.N.SetBytes(v1);
				} else if (_ref$2 === "publicexponent") {
					i = big.NewInt(new $Int64(0, 0));
					i.SetBytes(v1);
					p.PublicKey.E = ((x = i.Int64(), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
				} else if (_ref$2 === "privateexponent") {
					p.D = big.NewInt(new $Int64(0, 0));
					p.D.SetBytes(v1);
				} else if (_ref$2 === "prime1") {
					(x$1 = p.Primes, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = big.NewInt(new $Int64(0, 0))));
					(x$2 = p.Primes, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).SetBytes(v1);
				} else if (_ref$2 === "prime2") {
					(x$3 = p.Primes, (1 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 1] = big.NewInt(new $Int64(0, 0))));
					(x$4 = p.Primes, (1 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1])).SetBytes(v1);
				}
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return [p, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: readPrivateKeyRSA }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.k = k; $f.m = m; $f.p = p; $f.v = v; $f.v1 = v1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	readPrivateKeyDSA = function(m) {
		var $ptr, _entry, _i, _keys, _r, _ref, _ref$1, _tuple, err, k, m, p, v, v1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; err = $f.err; k = $f.k; m = $f.m; p = $f.p; v = $f.v; v1 = $f.v1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = new dsa.PrivateKey.ptr();
		p.X = big.NewInt(new $Int64(0, 0));
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			_ref$1 = k;
			/* */ if (_ref$1 === "private_value(x)") { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_ref$1 === "private_value(x)") { */ case 3:
				_r = fromBase64(new sliceType($stringToBytes(v))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; v1 = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [ptrType$28.nil, err];
				}
				p.X.SetBytes(v1);
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return [p, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: readPrivateKeyDSA }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.err = err; $f.k = k; $f.m = m; $f.p = p; $f.v = v; $f.v1 = v1; $f.$s = $s; $f.$r = $r; return $f;
	};
	readPrivateKeyECDSA = function(m) {
		var $ptr, _entry, _i, _keys, _r, _ref, _ref$1, _tuple, err, k, m, p, v, v1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; err = $f.err; k = $f.k; m = $f.m; p = $f.p; v = $f.v; v1 = $f.v1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = new ecdsa.PrivateKey.ptr();
		p.D = big.NewInt(new $Int64(0, 0));
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			_ref$1 = k;
			/* */ if (_ref$1 === "privatekey") { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_ref$1 === "privatekey") { */ case 3:
				_r = fromBase64(new sliceType($stringToBytes(v))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; v1 = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [ptrType$29.nil, err];
				}
				p.D.SetBytes(v1);
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return [p, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: readPrivateKeyECDSA }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.err = err; $f.k = k; $f.m = m; $f.p = p; $f.v = v; $f.v1 = v1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseKey = function(r, file) {
		var $ptr, _key$10, _ok, _r, _r$1, _ref, _ref$1, _tuple, c, file, k, l, m, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key$10 = $f._key$10; _ok = $f._ok; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; c = $f.c; file = $f.file; k = $f.k; l = $f.l; m = $f.m; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = scanInit(r);
		m = new $Map();
		c = new chanType(0);
		k = "";
		$go(klexer, [s, c]);
		_ref = c;
		/* while (true) { */ case 1:
			_r = $recv(_ref); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; l = $clone(_tuple[0], lex); _ok = _tuple[1];
			if (!_ok) {
				/* break; */ $s = 2; continue;
			}
			_ref$1 = l.value;
			/* */ if (_ref$1 === 13) { $s = 4; continue; }
			/* */ if (_ref$1 === 12) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_ref$1 === 13) { */ case 4:
				k = l.token;
				$s = 6; continue;
			/* } else if (_ref$1 === 12) { */ case 5:
				if (k === "") {
					return [false, new ParseError.ptr(file, "no private key seen", $clone(l, lex))];
				}
				_r$1 = strings.ToLower(k); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_key$10 = _r$1; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: l.token };
				k = "";
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		return [m, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parseKey }; } $f.$ptr = $ptr; $f._key$10 = _key$10; $f._ok = _ok; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.c = c; $f.file = file; $f.k = k; $f.l = l; $f.m = m; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	klexer = function(s, c) {
		var $ptr, _arg, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, c, commt, err, key, l, s, str, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; commt = $f.commt; err = $f.err; key = $f.key; l = $f.l; s = $f.s; str = $f.str; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = $clone(new lex.ptr(), lex);
		str = "";
		commt = false;
		key = true;
		_r = s.tokenText(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; x = _tuple[0]; err = _tuple[1];
		$deferred.push([function(_arg) { $close(_arg); }, [c]]);
		/* while (true) { */ case 2:
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
			l.column = s.position.Column;
			l.line = s.position.Line;
			_ref = x;
			/* */ if (_ref === 58) { $s = 4; continue; }
			/* */ if (_ref === 59) { $s = 5; continue; }
			/* */ if (_ref === 10) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* switch (0) { default: if (_ref === 58) { */ case 4:
				if (commt) {
					/* break; */ $s = 8; continue;
				}
				l.token = str;
				/* */ if (key) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (key) { */ case 9:
					l.value = 13;
					$r = $send(c, $clone(l, lex)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$1 = s.tokenText(); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					key = false;
					str = "";
					$s = 11; continue;
				/* } else { */ case 10:
					l.value = 12;
				/* } */ case 11:
				$s = 8; continue;
			/* } else if (_ref === 59) { */ case 5:
				commt = true;
				$s = 8; continue;
			/* } else if (_ref === 10) { */ case 6:
				if (commt) {
					commt = false;
				}
				l.value = 12;
				l.token = str;
				$r = $send(c, $clone(l, lex)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				str = "";
				commt = false;
				key = true;
				$s = 8; continue;
			/* } else { */ case 7:
				if (commt) {
					/* break; */ $s = 8; continue;
				}
				str = str + ($encodeRune(x));
			/* } } */ case 8:
			_r$2 = s.tokenText(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2; x = _tuple$1[0]; err = _tuple$1[1];
		/* } */ $s = 2; continue; case 3:
		/* */ if (str.length > 0) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (str.length > 0) { */ case 16:
			l.token = str;
			l.value = 12;
			$r = $send(c, $clone(l, lex)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 17:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: klexer }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.commt = commt; $f.err = err; $f.key = key; $f.l = l; $f.s = s; $f.str = str; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DNSKEY.ptr.prototype.PrivateKeyString = function(p) {
		var $ptr, T, _entry, _ref, _ref$1, algorithm, base, coeff, coefficient, e, exp1, exp2, exponent1, exponent2, intlen, modulus, one, p, p$1, p$2, p$3, p$4, p1, prime, prime1, prime2, priv, private$1, privateExponent, pub, publicExponent, q1, r, subprime, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		algorithm = strconv.Itoa((r.Algorithm >> 0));
		algorithm = algorithm + (" (" + (_entry = $pkg.AlgorithmToString[$Uint8.keyFor(r.Algorithm)], _entry !== undefined ? _entry.v : "") + ")");
		_ref = p;
		if ($assertType(_ref, ptrType$27, true)[1]) {
			p$1 = _ref.$val;
			modulus = toBase64(p$1.PublicKey.N.Bytes());
			e = big.NewInt(new $Int64(0, p$1.PublicKey.E));
			publicExponent = toBase64(e.Bytes());
			privateExponent = toBase64(p$1.D.Bytes());
			prime1 = toBase64((x = p$1.Primes, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Bytes());
			prime2 = toBase64((x$1 = p$1.Primes, (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])).Bytes());
			one = big.NewInt(new $Int64(0, 1));
			p1 = big.NewInt(new $Int64(0, 0)).Sub((x$2 = p$1.Primes, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])), one);
			q1 = big.NewInt(new $Int64(0, 0)).Sub((x$3 = p$1.Primes, (1 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 1])), one);
			exp1 = big.NewInt(new $Int64(0, 0)).Mod(p$1.D, p1);
			exp2 = big.NewInt(new $Int64(0, 0)).Mod(p$1.D, q1);
			coeff = big.NewInt(new $Int64(0, 0)).ModInverse((x$4 = p$1.Primes, (1 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1])), (x$5 = p$1.Primes, (0 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 0])));
			exponent1 = toBase64(exp1.Bytes());
			exponent2 = toBase64(exp2.Bytes());
			coefficient = toBase64(coeff.Bytes());
			return "Private-key-format: v1.3\nAlgorithm: " + algorithm + "\n" + "Modulus: " + modulus + "\n" + "PublicExponent: " + publicExponent + "\n" + "PrivateExponent: " + privateExponent + "\n" + "Prime1: " + prime1 + "\n" + "Prime2: " + prime2 + "\n" + "Exponent1: " + exponent1 + "\n" + "Exponent2: " + exponent2 + "\n" + "Coefficient: " + coefficient + "\n";
		} else if ($assertType(_ref, ptrType$29, true)[1]) {
			p$2 = _ref.$val;
			intlen = 0;
			_ref$1 = r.Algorithm;
			if (_ref$1 === 13) {
				intlen = 32;
			} else if (_ref$1 === 14) {
				intlen = 48;
			}
			private$1 = toBase64(intToBytes(p$2.D, intlen));
			return "Private-key-format: v1.3\nAlgorithm: " + algorithm + "\n" + "PrivateKey: " + private$1 + "\n";
		} else if ($assertType(_ref, ptrType$28, true)[1]) {
			p$3 = _ref.$val;
			T = divRoundUp(divRoundUp(p$3.PublicKey.Parameters.G.BitLen(), 8) - 64 >> 0, 8);
			prime = toBase64(intToBytes(p$3.PublicKey.Parameters.P, 64 + (T * 8 >> 0) >> 0));
			subprime = toBase64(intToBytes(p$3.PublicKey.Parameters.Q, 20));
			base = toBase64(intToBytes(p$3.PublicKey.Parameters.G, 64 + (T * 8 >> 0) >> 0));
			priv = toBase64(intToBytes(p$3.X, 20));
			pub = toBase64(intToBytes(p$3.PublicKey.Y, 64 + (T * 8 >> 0) >> 0));
			return "Private-key-format: v1.3\nAlgorithm: " + algorithm + "\n" + "Prime(p): " + prime + "\n" + "Subprime(q): " + subprime + "\n" + "Base(g): " + base + "\n" + "Private_value(x): " + priv + "\n" + "Public_value(y): " + pub + "\n";
		} else {
			p$4 = _ref;
			return "";
		}
	};
	DNSKEY.prototype.PrivateKeyString = function(p) { return this.$val.PrivateKeyString(p); };
	OPT.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	OPT.prototype.Header = function() { return this.$val.Header(); };
	OPT.ptr.prototype.String = function() {
		var $ptr, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, _ref$2, _tuple, c, e, h, o, r, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; c = $f.c; e = $f.e; h = $f.h; o = $f.o; r = $f.r; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = "\n;; OPT PSEUDOSECTION:\n; EDNS: version " + strconv.Itoa((rr.Version() >> 0)) + "; ";
		if (rr.Do()) {
			s = s + ("flags: do; ");
		} else {
			s = s + ("flags: ; ");
		}
		s = s + ("udp: " + strconv.Itoa((rr.UDPSize() >> 0)));
		_ref = rr.Option;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			o = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = o;
			/* */ if ($assertType(_ref$1, ptrType$30, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref$1, ptrType$31, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref$1, ptrType$32, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref$1, ptrType$33, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref$1, ptrType$34, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref$1, ptrType$35, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref$1, ptrType$36, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref$1, ptrType$37, true)[1]) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($assertType(_ref$1, ptrType$30, true)[1]) { */ case 3:
				_r = o.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = s + ("\n; NSID: " + _r);
				_r$1 = o.pack(); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1; h = _tuple[0]; e = _tuple[1];
				r = "";
				if ($interfaceIsEqual(e, $ifaceNil)) {
					_ref$2 = h;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$2.$length)) { break; }
						c = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
						r = r + ("(" + $encodeRune(c) + ")");
						_i$1++;
					}
					s = s + ("  " + r);
				}
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$31, true)[1]) { */ case 4:
				_r$2 = o.String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				s = s + ("\n; SUBNET: " + _r$2);
				if ($assertType(o, ptrType$31).DraftOption) {
					s = s + (" (draft)");
				}
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$32, true)[1]) { */ case 5:
				_r$3 = o.String(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				s = s + ("\n; UPDATE LEASE: " + _r$3);
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$33, true)[1]) { */ case 6:
				_r$4 = o.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				s = s + ("\n; LONG LIVED QUERIES: " + _r$4);
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$34, true)[1]) { */ case 7:
				_r$5 = o.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				s = s + ("\n; DNSSEC ALGORITHM UNDERSTOOD: " + _r$5);
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$35, true)[1]) { */ case 8:
				_r$6 = o.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				s = s + ("\n; DS HASH UNDERSTOOD: " + _r$6);
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$36, true)[1]) { */ case 9:
				_r$7 = o.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				s = s + ("\n; NSEC3 HASH UNDERSTOOD: " + _r$7);
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$37, true)[1]) { */ case 10:
				_r$8 = o.String(); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				s = s + ("\n; LOCAL OPT: " + _r$8);
			/* } */ case 11:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: OPT.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.h = h; $f.o = o; $f.r = r; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	OPT.prototype.String = function() { return this.$val.String(); };
	OPT.ptr.prototype.len = function() {
		var $ptr, _r, _tuple, i, l, lo, rr, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; i = $f.i; l = $f.l; lo = $f.lo; rr = $f.rr; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		l = rr.Hdr.len();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < rr.Option.$length)) { break; } */ if(!(i < rr.Option.$length)) { $s = 2; continue; }
			l = l + (4) >> 0;
			_r = (x = rr.Option, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).pack(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r; lo = _tuple[0];
			l = l + (lo.$length) >> 0;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return l;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: OPT.ptr.prototype.len }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.i = i; $f.l = l; $f.lo = lo; $f.rr = rr; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	OPT.prototype.len = function() { return this.$val.len(); };
	OPT.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new OPT.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Option);
	};
	OPT.prototype.copy = function() { return this.$val.copy(); };
	OPT.ptr.prototype.Version = function() {
		var $ptr, rr;
		rr = this;
		return (((((rr.Hdr.Ttl & 16711680) >>> 0)) >>> 16 >>> 0) << 24 >>> 24);
	};
	OPT.prototype.Version = function() { return this.$val.Version(); };
	OPT.ptr.prototype.SetVersion = function(v) {
		var $ptr, rr, v;
		rr = this;
		rr.Hdr.Ttl = (((rr.Hdr.Ttl & 4278255615) >>> 0) | (((v >>> 0) << 16 >>> 0))) >>> 0;
	};
	OPT.prototype.SetVersion = function(v) { return this.$val.SetVersion(v); };
	OPT.ptr.prototype.ExtendedRcode = function() {
		var $ptr, rr;
		rr = this;
		return (((((rr.Hdr.Ttl & 4278190080) >>> 0)) >>> 24 >>> 0) << 24 >>> 24);
	};
	OPT.prototype.ExtendedRcode = function() { return this.$val.ExtendedRcode(); };
	OPT.ptr.prototype.SetExtendedRcode = function(v) {
		var $ptr, rr, v;
		rr = this;
		rr.Hdr.Ttl = (((rr.Hdr.Ttl & 16777215) >>> 0) | (((v >>> 0) << 24 >>> 0))) >>> 0;
	};
	OPT.prototype.SetExtendedRcode = function(v) { return this.$val.SetExtendedRcode(v); };
	OPT.ptr.prototype.UDPSize = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.Class;
	};
	OPT.prototype.UDPSize = function() { return this.$val.UDPSize(); };
	OPT.ptr.prototype.SetUDPSize = function(size) {
		var $ptr, rr, size;
		rr = this;
		rr.Hdr.Class = size;
	};
	OPT.prototype.SetUDPSize = function(size) { return this.$val.SetUDPSize(size); };
	OPT.ptr.prototype.Do = function() {
		var $ptr, rr;
		rr = this;
		return ((rr.Hdr.Ttl & 32768) >>> 0) === 32768;
	};
	OPT.prototype.Do = function() { return this.$val.Do(); };
	OPT.ptr.prototype.SetDo = function() {
		var $ptr, rr;
		rr = this;
		rr.Hdr.Ttl = (rr.Hdr.Ttl | (32768)) >>> 0;
	};
	OPT.prototype.SetDo = function() { return this.$val.SetDo(); };
	EDNS0_NSID.ptr.prototype.pack = function() {
		var $ptr, _tuple, e, err, h;
		e = this;
		_tuple = hex.DecodeString(e.Nsid); h = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		return [h, $ifaceNil];
	};
	EDNS0_NSID.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_NSID.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		return 3;
	};
	EDNS0_NSID.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_NSID.ptr.prototype.unpack = function(b) {
		var $ptr, b, e;
		e = this;
		e.Nsid = hex.EncodeToString(b);
		return $ifaceNil;
	};
	EDNS0_NSID.prototype.unpack = function(b) { return this.$val.unpack(b); };
	EDNS0_NSID.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return e.Nsid;
	};
	EDNS0_NSID.prototype.String = function() { return this.$val.String(); };
	EDNS0_SUBNET.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		if (e.DraftOption) {
			return 20730;
		}
		return 8;
	};
	EDNS0_SUBNET.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_SUBNET.ptr.prototype.pack = function() {
		var $ptr, _q, _q$1, _r, _r$1, _ref, _tuple, a, a$1, b, e, i, i$1, ip, ip$1, needLength, needLength$1;
		e = this;
		b = $makeSlice(sliceType, 4);
		_tuple = packUint16(e.Family); (0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = _tuple[0]); (1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = _tuple[1]);
		(2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2] = e.SourceNetmask);
		(3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3] = e.SourceScope);
		_ref = e.Family;
		if (_ref === 1) {
			if (e.SourceNetmask > 32) {
				return [sliceType.nil, errors.New("dns: bad netmask")];
			}
			ip = $makeSlice(sliceType, 4);
			a = e.Address.To4().Mask(net.CIDRMask((e.SourceNetmask >> 0), 32));
			i = 0;
			while (true) {
				if (!(i < 4)) { break; }
				if ((i + 1 >> 0) > e.Address.$length) {
					break;
				}
				((i < 0 || i >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + i] = ((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]));
				i = i + (1) >> 0;
			}
			needLength = (_q = e.SourceNetmask / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			if ((_r = e.SourceNetmask % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) > 0) {
				needLength = needLength + (1) << 24 >>> 24;
			}
			ip = $subslice(ip, 0, needLength);
			b = $appendSlice(b, ip);
		} else if (_ref === 2) {
			if (e.SourceNetmask > 128) {
				return [sliceType.nil, errors.New("dns: bad netmask")];
			}
			ip$1 = $makeSlice(sliceType, 16);
			a$1 = e.Address.Mask(net.CIDRMask((e.SourceNetmask >> 0), 128));
			i$1 = 0;
			while (true) {
				if (!(i$1 < 16)) { break; }
				if ((i$1 + 1 >> 0) > e.Address.$length) {
					break;
				}
				((i$1 < 0 || i$1 >= ip$1.$length) ? $throwRuntimeError("index out of range") : ip$1.$array[ip$1.$offset + i$1] = ((i$1 < 0 || i$1 >= a$1.$length) ? $throwRuntimeError("index out of range") : a$1.$array[a$1.$offset + i$1]));
				i$1 = i$1 + (1) >> 0;
			}
			needLength$1 = (_q$1 = e.SourceNetmask / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			if ((_r$1 = e.SourceNetmask % 8, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) > 0) {
				needLength$1 = needLength$1 + (1) << 24 >>> 24;
			}
			ip$1 = $subslice(ip$1, 0, needLength$1);
			b = $appendSlice(b, ip$1);
		} else {
			return [sliceType.nil, errors.New("dns: bad address family")];
		}
		return [b, $ifaceNil];
	};
	EDNS0_SUBNET.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_SUBNET.ptr.prototype.unpack = function(b) {
		var $ptr, _q, _q$1, _ref, _tuple, addr, addr$1, b, e, i, i$1, lb, x, x$1;
		e = this;
		lb = b.$length;
		if (lb < 4) {
			return $pkg.ErrBuf;
		}
		_tuple = unpackUint16(b, 0); e.Family = _tuple[0];
		e.SourceNetmask = (2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2]);
		e.SourceScope = (3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3]);
		_ref = e.Family;
		if (_ref === 1) {
			addr = $makeSlice(sliceType, 4);
			i = 0;
			while (true) {
				if (!(i < ((_q = e.SourceNetmask / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0))) { break; }
				if (i >= addr.$length || (4 + i >> 0) >= b.$length) {
					return $pkg.ErrBuf;
				}
				((i < 0 || i >= addr.$length) ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + i] = (x = 4 + i >> 0, ((x < 0 || x >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x])));
				i = i + (1) >> 0;
			}
			e.Address = net.IPv4((0 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 0]), (1 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 1]), (2 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 2]), (3 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 3]));
		} else if (_ref === 2) {
			addr$1 = $makeSlice(sliceType, 16);
			i$1 = 0;
			while (true) {
				if (!(i$1 < ((_q$1 = e.SourceNetmask / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0))) { break; }
				if (i$1 >= addr$1.$length || (4 + i$1 >> 0) >= b.$length) {
					return $pkg.ErrBuf;
				}
				((i$1 < 0 || i$1 >= addr$1.$length) ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + i$1] = (x$1 = 4 + i$1 >> 0, ((x$1 < 0 || x$1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$1])));
				i$1 = i$1 + (1) >> 0;
			}
			e.Address = new net.IP([(0 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 0]), (1 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 1]), (2 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 2]), (3 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 3]), (4 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 4]), (5 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 5]), (6 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 6]), (7 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 7]), (8 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 8]), (9 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 9]), (10 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 10]), (11 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 11]), (12 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 12]), (13 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 13]), (14 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 14]), (15 >= addr$1.$length ? $throwRuntimeError("index out of range") : addr$1.$array[addr$1.$offset + 15])]);
		}
		return $ifaceNil;
	};
	EDNS0_SUBNET.prototype.unpack = function(b) { return this.$val.unpack(b); };
	EDNS0_SUBNET.ptr.prototype.String = function() {
		var $ptr, e, s;
		s = "";
		e = this;
		if (e.Address === net.IP.nil) {
			s = "<nil>";
		} else if (!(e.Address.To4() === net.IP.nil)) {
			s = e.Address.String();
		} else {
			s = "[" + e.Address.String() + "]";
		}
		s = s + ("/" + strconv.Itoa((e.SourceNetmask >> 0)) + "/" + strconv.Itoa((e.SourceScope >> 0)));
		return s;
	};
	EDNS0_SUBNET.prototype.String = function() { return this.$val.String(); };
	EDNS0_UL.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		return 2;
	};
	EDNS0_UL.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_UL.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return strconv.FormatUint(new $Uint64(0, e.Lease), 10);
	};
	EDNS0_UL.prototype.String = function() { return this.$val.String(); };
	EDNS0_UL.ptr.prototype.pack = function() {
		var $ptr, b, e;
		e = this;
		b = $makeSlice(sliceType, 4);
		(0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = ((e.Lease >>> 24 >>> 0) << 24 >>> 24));
		(1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = ((e.Lease >>> 16 >>> 0) << 24 >>> 24));
		(2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2] = ((e.Lease >>> 8 >>> 0) << 24 >>> 24));
		(3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3] = (e.Lease << 24 >>> 24));
		return [b, $ifaceNil];
	};
	EDNS0_UL.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_UL.ptr.prototype.unpack = function(b) {
		var $ptr, b, e;
		e = this;
		if (b.$length < 4) {
			return $pkg.ErrBuf;
		}
		e.Lease = ((((((((0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0]) >>> 0) << 24 >>> 0) | (((1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1]) >>> 0) << 16 >>> 0)) >>> 0) | (((2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | ((3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3]) >>> 0)) >>> 0;
		return $ifaceNil;
	};
	EDNS0_UL.prototype.unpack = function(b) { return this.$val.unpack(b); };
	EDNS0_LLQ.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		return 1;
	};
	EDNS0_LLQ.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_LLQ.ptr.prototype.pack = function() {
		var $ptr, _tuple, _tuple$1, _tuple$2, b, e;
		e = this;
		b = $makeSlice(sliceType, 18);
		_tuple = packUint16(e.Version); (0 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = _tuple[0]); (1 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = _tuple[1]);
		_tuple$1 = packUint16(e.Opcode); (2 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2] = _tuple$1[0]); (3 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3] = _tuple$1[1]);
		_tuple$2 = packUint16(e.Error); (4 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 4] = _tuple$2[0]); (5 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 5] = _tuple$2[1]);
		(6 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 6] = ($shiftRightUint64(e.Id, 56).$low << 24 >>> 24));
		(7 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 7] = ($shiftRightUint64(e.Id, 48).$low << 24 >>> 24));
		(8 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 8] = ($shiftRightUint64(e.Id, 40).$low << 24 >>> 24));
		(9 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 9] = ($shiftRightUint64(e.Id, 32).$low << 24 >>> 24));
		(10 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 10] = ($shiftRightUint64(e.Id, 24).$low << 24 >>> 24));
		(11 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 11] = ($shiftRightUint64(e.Id, 16).$low << 24 >>> 24));
		(12 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 12] = ($shiftRightUint64(e.Id, 8).$low << 24 >>> 24));
		(13 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 13] = (e.Id.$low << 24 >>> 24));
		(14 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 14] = ((e.LeaseLife >>> 24 >>> 0) << 24 >>> 24));
		(15 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 15] = ((e.LeaseLife >>> 16 >>> 0) << 24 >>> 24));
		(16 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 16] = ((e.LeaseLife >>> 8 >>> 0) << 24 >>> 24));
		(17 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 17] = (e.LeaseLife << 24 >>> 24));
		return [b, $ifaceNil];
	};
	EDNS0_LLQ.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_LLQ.ptr.prototype.unpack = function(b) {
		var $ptr, _tuple, _tuple$1, _tuple$2, b, e, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		e = this;
		if (b.$length < 18) {
			return $pkg.ErrBuf;
		}
		_tuple = unpackUint16(b, 0); e.Version = _tuple[0];
		_tuple$1 = unpackUint16(b, 2); e.Opcode = _tuple$1[0];
		_tuple$2 = unpackUint16(b, 4); e.Error = _tuple$2[0];
		e.Id = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 6])), 56), x$7 = $shiftLeft64(new $Uint64(0, (7 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 7])), 48), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, (8 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 8])), 40), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (9 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 9])), 32), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, (10 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 10])), 24), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (11 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 11])), 16), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, (12 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 12])), 8), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = new $Uint64(0, (13 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 13])), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		e.LeaseLife = ((((((((14 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 14]) >>> 0) << 24 >>> 0) | (((15 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 15]) >>> 0) << 16 >>> 0)) >>> 0) | (((16 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 16]) >>> 0) << 8 >>> 0)) >>> 0) | ((17 >= b.$length ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 17]) >>> 0)) >>> 0;
		return $ifaceNil;
	};
	EDNS0_LLQ.prototype.unpack = function(b) { return this.$val.unpack(b); };
	EDNS0_LLQ.ptr.prototype.String = function() {
		var $ptr, e, s;
		e = this;
		s = strconv.FormatUint(new $Uint64(0, e.Version), 10) + " " + strconv.FormatUint(new $Uint64(0, e.Opcode), 10) + " " + strconv.FormatUint(new $Uint64(0, e.Error), 10) + " " + strconv.FormatUint(e.Id, 10) + " " + strconv.FormatUint(new $Uint64(0, e.LeaseLife), 10);
		return s;
	};
	EDNS0_LLQ.prototype.String = function() { return this.$val.String(); };
	EDNS0_DAU.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		return 5;
	};
	EDNS0_DAU.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_DAU.ptr.prototype.pack = function() {
		var $ptr, e;
		e = this;
		return [e.AlgCode, $ifaceNil];
	};
	EDNS0_DAU.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_DAU.ptr.prototype.unpack = function(b) {
		var $ptr, b, e;
		e = this;
		e.AlgCode = b;
		return $ifaceNil;
	};
	EDNS0_DAU.prototype.unpack = function(b) { return this.$val.unpack(b); };
	EDNS0_DAU.ptr.prototype.String = function() {
		var $ptr, _entry, _tuple, a, e, i, ok, s, x, x$1;
		e = this;
		s = "";
		i = 0;
		while (true) {
			if (!(i < e.AlgCode.$length)) { break; }
			_tuple = (_entry = $pkg.AlgorithmToString[$Uint8.keyFor((x = e.AlgCode, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))], _entry !== undefined ? [_entry.v, true] : ["", false]); a = _tuple[0]; ok = _tuple[1];
			if (ok) {
				s = s + (" " + a);
			} else {
				s = s + (" " + strconv.Itoa(((x$1 = e.AlgCode, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])) >> 0)));
			}
			i = i + (1) >> 0;
		}
		return s;
	};
	EDNS0_DAU.prototype.String = function() { return this.$val.String(); };
	EDNS0_DHU.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		return 6;
	};
	EDNS0_DHU.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_DHU.ptr.prototype.pack = function() {
		var $ptr, e;
		e = this;
		return [e.AlgCode, $ifaceNil];
	};
	EDNS0_DHU.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_DHU.ptr.prototype.unpack = function(b) {
		var $ptr, b, e;
		e = this;
		e.AlgCode = b;
		return $ifaceNil;
	};
	EDNS0_DHU.prototype.unpack = function(b) { return this.$val.unpack(b); };
	EDNS0_DHU.ptr.prototype.String = function() {
		var $ptr, _entry, _tuple, a, e, i, ok, s, x, x$1;
		e = this;
		s = "";
		i = 0;
		while (true) {
			if (!(i < e.AlgCode.$length)) { break; }
			_tuple = (_entry = $pkg.HashToString[$Uint8.keyFor((x = e.AlgCode, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))], _entry !== undefined ? [_entry.v, true] : ["", false]); a = _tuple[0]; ok = _tuple[1];
			if (ok) {
				s = s + (" " + a);
			} else {
				s = s + (" " + strconv.Itoa(((x$1 = e.AlgCode, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])) >> 0)));
			}
			i = i + (1) >> 0;
		}
		return s;
	};
	EDNS0_DHU.prototype.String = function() { return this.$val.String(); };
	EDNS0_N3U.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		return 7;
	};
	EDNS0_N3U.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_N3U.ptr.prototype.pack = function() {
		var $ptr, e;
		e = this;
		return [e.AlgCode, $ifaceNil];
	};
	EDNS0_N3U.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_N3U.ptr.prototype.unpack = function(b) {
		var $ptr, b, e;
		e = this;
		e.AlgCode = b;
		return $ifaceNil;
	};
	EDNS0_N3U.prototype.unpack = function(b) { return this.$val.unpack(b); };
	EDNS0_N3U.ptr.prototype.String = function() {
		var $ptr, _entry, _tuple, a, e, i, ok, s, x, x$1;
		e = this;
		s = "";
		i = 0;
		while (true) {
			if (!(i < e.AlgCode.$length)) { break; }
			_tuple = (_entry = $pkg.HashToString[$Uint8.keyFor((x = e.AlgCode, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))], _entry !== undefined ? [_entry.v, true] : ["", false]); a = _tuple[0]; ok = _tuple[1];
			if (ok) {
				s = s + (" " + a);
			} else {
				s = s + (" " + strconv.Itoa(((x$1 = e.AlgCode, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])) >> 0)));
			}
			i = i + (1) >> 0;
		}
		return s;
	};
	EDNS0_N3U.prototype.String = function() { return this.$val.String(); };
	EDNS0_LOCAL.ptr.prototype.Option = function() {
		var $ptr, e;
		e = this;
		return e.Code;
	};
	EDNS0_LOCAL.prototype.Option = function() { return this.$val.Option(); };
	EDNS0_LOCAL.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return strconv.FormatInt(new $Int64(0, e.Code), 10) + ":0x" + hex.EncodeToString(e.Data);
	};
	EDNS0_LOCAL.prototype.String = function() { return this.$val.String(); };
	EDNS0_LOCAL.ptr.prototype.pack = function() {
		var $ptr, b, copied, e;
		e = this;
		b = $makeSlice(sliceType, e.Data.$length);
		copied = $copySlice(b, e.Data);
		if (!((copied === e.Data.$length))) {
			return [sliceType.nil, $pkg.ErrBuf];
		}
		return [b, $ifaceNil];
	};
	EDNS0_LOCAL.prototype.pack = function() { return this.$val.pack(); };
	EDNS0_LOCAL.ptr.prototype.unpack = function(b) {
		var $ptr, b, copied, e;
		e = this;
		e.Data = $makeSlice(sliceType, b.$length);
		copied = $copySlice(e.Data, b);
		if (!((copied === b.$length))) {
			return $pkg.ErrBuf;
		}
		return $ifaceNil;
	};
	EDNS0_LOCAL.prototype.unpack = function(b) { return this.$val.unpack(b); };
	SplitDomainName = function(s) {
		var $ptr, _ref, begin, end, fqdnEnd, i, idx, labels, s;
		labels = sliceType$1.nil;
		if (s.length === 0) {
			labels = sliceType$1.nil;
			return labels;
		}
		fqdnEnd = 0;
		idx = Split(s);
		begin = 0;
		if (s.charCodeAt((s.length - 1 >> 0)) === 46) {
			fqdnEnd = s.length - 1 >> 0;
		} else {
			fqdnEnd = s.length;
		}
		_ref = idx.$length;
		if (_ref === 0) {
			labels = sliceType$1.nil;
			return labels;
		} else if (_ref === 1) {
		} else {
			end = 0;
			i = 1;
			while (true) {
				if (!(i < idx.$length)) { break; }
				end = ((i < 0 || i >= idx.$length) ? $throwRuntimeError("index out of range") : idx.$array[idx.$offset + i]);
				labels = $append(labels, s.substring(begin, (end - 1 >> 0)));
				begin = end;
				i = i + (1) >> 0;
			}
		}
		labels = $append(labels, s.substring(begin, fqdnEnd));
		labels = labels;
		return labels;
	};
	$pkg.SplitDomainName = SplitDomainName;
	CountLabel = function(s) {
		var $ptr, _tuple, end, labels, off, s;
		labels = 0;
		if (s === ".") {
			return labels;
		}
		off = 0;
		end = false;
		while (true) {
			_tuple = NextLabel(s, off); off = _tuple[0]; end = _tuple[1];
			labels = labels + (1) >> 0;
			if (end) {
				return labels;
			}
		}
		$panic(new $String("dns: not reached"));
	};
	$pkg.CountLabel = CountLabel;
	Split = function(s) {
		var $ptr, _tuple, end, idx, off, s;
		if (s === ".") {
			return sliceType$5.nil;
		}
		idx = $makeSlice(sliceType$5, 1, 3);
		off = 0;
		end = false;
		while (true) {
			_tuple = NextLabel(s, off); off = _tuple[0]; end = _tuple[1];
			if (end) {
				return idx;
			}
			idx = $append(idx, off);
		}
		$panic(new $String("dns: not reached"));
	};
	$pkg.Split = Split;
	NextLabel = function(s, offset) {
		var $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, end, i, offset, quote, s;
		i = 0;
		end = false;
		quote = false;
		i = offset;
		while (true) {
			if (!(i < (s.length - 1 >> 0))) { break; }
			_ref = s.charCodeAt(i);
			if (_ref === 92) {
				quote = !quote;
			} else if (_ref === 46) {
				if (quote) {
					quote = !quote;
					i = i + (1) >> 0;
					continue;
				}
				_tmp = i + 1 >> 0; _tmp$1 = false; i = _tmp; end = _tmp$1;
				return [i, end];
			} else {
				quote = false;
			}
			i = i + (1) >> 0;
		}
		_tmp$2 = i + 1 >> 0; _tmp$3 = true; i = _tmp$2; end = _tmp$3;
		return [i, end];
	};
	$pkg.NextLabel = NextLabel;
	PackDomainName = function(s, msg, off, compression, compress) {
		var $ptr, _tuple, compress, compression, err, msg, off, off1, s;
		off1 = 0;
		err = $ifaceNil;
		_tuple = packDomainName(s, msg, off, compression, compress); off1 = _tuple[0]; err = _tuple[2];
		return [off1, err];
	};
	$pkg.PackDomainName = PackDomainName;
	packDomainName = function(s, msg, off, compression, compress) {
		var $ptr, _entry, _key$10, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, begin, bs, bsFresh, compress, compression, err, escapedDot, i, j, j$1, j$2, labels, lenmsg, ls, msg, nameoffset, off, off1, offset, ok, p, pointer, roBs, s, x, x$1, x$2, x$3, x$4, x$5, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		off1 = 0;
		labels = 0;
		err = $ifaceNil;
		lenmsg = 256;
		if (!(msg === sliceType.nil)) {
			lenmsg = msg.$length;
		}
		ls = s.length;
		if (ls === 0) {
			_tmp = off; _tmp$1 = 0; _tmp$2 = $ifaceNil; off1 = _tmp; labels = _tmp$1; err = _tmp$2;
			return [off1, labels, err];
		}
		if (msg === sliceType.nil) {
			if (!((s.charCodeAt((ls - 1 >> 0)) === 46))) {
				s = s + (".");
				ls = ls + (1) >> 0;
			}
		} else if (!(msg === sliceType.nil)) {
			if (!((s.charCodeAt((ls - 1 >> 0)) === 46))) {
				_tmp$3 = lenmsg; _tmp$4 = 0; _tmp$5 = $pkg.ErrFqdn; off1 = _tmp$3; labels = _tmp$4; err = _tmp$5;
				return [off1, labels, err];
			}
		}
		nameoffset = -1;
		pointer = -1;
		begin = 0;
		bs = new sliceType($stringToBytes(s));
		_tmp$6 = s; _tmp$7 = true; _tmp$8 = false; roBs = _tmp$6; bsFresh = _tmp$7; escapedDot = _tmp$8;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ls)) { break; } */ if(!(i < ls)) { $s = 2; continue; }
			if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 92) {
				j = i;
				while (true) {
					if (!(j < (ls - 1 >> 0))) { break; }
					((j < 0 || j >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + j] = (x = j + 1 >> 0, ((x < 0 || x >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + x])));
					j = j + (1) >> 0;
				}
				ls = ls - (1) >> 0;
				if ((off + 1 >> 0) > lenmsg) {
					_tmp$9 = lenmsg; _tmp$10 = labels; _tmp$11 = $pkg.ErrBuf; off1 = _tmp$9; labels = _tmp$10; err = _tmp$11;
					return [off1, labels, err];
				}
				if ((i + 2 >> 0) < ls && isDigit(((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i])) && isDigit((x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + x$1]))) && isDigit((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + x$2])))) {
					((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i] = dddToByte($subslice(bs, i)));
					j$1 = i + 1 >> 0;
					while (true) {
						if (!(j$1 < (ls - 2 >> 0))) { break; }
						((j$1 < 0 || j$1 >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + j$1] = (x$3 = j$1 + 2 >> 0, ((x$3 < 0 || x$3 >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + x$3])));
						j$1 = j$1 + (1) >> 0;
					}
					ls = ls - (2) >> 0;
				} else if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 116) {
					((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i] = 9);
				} else if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 114) {
					((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i] = 13);
				} else if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 110) {
					((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i] = 10);
				}
				escapedDot = ((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 46;
				bsFresh = false;
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			}
			if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 46) {
				if (i > 0 && ((x$4 = i - 1 >> 0, ((x$4 < 0 || x$4 >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + x$4])) === 46) && !escapedDot) {
					_tmp$12 = lenmsg; _tmp$13 = labels; _tmp$14 = $pkg.ErrRdata; off1 = _tmp$12; labels = _tmp$13; err = _tmp$14;
					return [off1, labels, err];
				}
				if ((i - begin >> 0) >= 64) {
					_tmp$15 = lenmsg; _tmp$16 = labels; _tmp$17 = $pkg.ErrRdata; off1 = _tmp$15; labels = _tmp$16; err = _tmp$17;
					return [off1, labels, err];
				}
				if ((off + 1 >> 0) > lenmsg) {
					_tmp$18 = lenmsg; _tmp$19 = labels; _tmp$20 = $pkg.ErrBuf; off1 = _tmp$18; labels = _tmp$19; err = _tmp$20;
					return [off1, labels, err];
				}
				if (!(msg === sliceType.nil)) {
					((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = ((i - begin >> 0) << 24 >>> 24));
				}
				offset = off;
				off = off + (1) >> 0;
				j$2 = begin;
				while (true) {
					if (!(j$2 < i)) { break; }
					if ((off + 1 >> 0) > lenmsg) {
						_tmp$21 = lenmsg; _tmp$22 = labels; _tmp$23 = $pkg.ErrBuf; off1 = _tmp$21; labels = _tmp$22; err = _tmp$23;
						return [off1, labels, err];
					}
					if (!(msg === sliceType.nil)) {
						((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = ((j$2 < 0 || j$2 >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + j$2]));
					}
					off = off + (1) >> 0;
					j$2 = j$2 + (1) >> 0;
				}
				if (compress && !bsFresh) {
					roBs = $bytesToString(bs);
					bsFresh = true;
				}
				if (compress && !(roBs.substring(begin) === ".")) {
					_tuple = (_entry = compression[$String.keyFor(roBs.substring(begin))], _entry !== undefined ? [_entry.v, true] : [0, false]); p = _tuple[0]; ok = _tuple[1];
					if (!ok) {
						if (offset < 16384) {
							_key$10 = roBs.substring(begin); (compression || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: offset };
						}
					} else {
						if ((pointer === -1) && compress) {
							pointer = p;
							nameoffset = offset;
							/* break; */ $s = 2; continue;
						}
					}
				}
				labels = labels + (1) >> 0;
				begin = i + 1 >> 0;
			}
			escapedDot = false;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if ((bs.$length === 1) && ((0 >= bs.$length ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + 0]) === 46)) {
			_tmp$24 = off; _tmp$25 = labels; _tmp$26 = $ifaceNil; off1 = _tmp$24; labels = _tmp$25; err = _tmp$26;
			return [off1, labels, err];
		}
		/* */ if (!((pointer === -1))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((pointer === -1))) { */ case 3:
			_tuple$1 = packUint16((((pointer ^ 49152) >> 0) << 16 >>> 16)); ((nameoffset < 0 || nameoffset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + nameoffset] = _tuple$1[0]); (x$5 = nameoffset + 1 >> 0, ((x$5 < 0 || x$5 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$5] = _tuple$1[1]));
			off = nameoffset + 1 >> 0;
			/* goto End */ $s = 5; continue;
		/* } */ case 4:
		if (!(msg === sliceType.nil)) {
			((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = 0);
		}
		/* End: */ case 5:
		off = off + (1) >> 0;
		_tmp$27 = off; _tmp$28 = labels; _tmp$29 = $ifaceNil; off1 = _tmp$27; labels = _tmp$28; err = _tmp$29;
		return [off1, labels, err];
		/* */ $s = -1; case -1: } return; }
	};
	UnpackDomainName = function(msg, off) {
		var $ptr, _i, _ref, _ref$1, _ref$2, b, buf, bufs, c, c1, i, j, lenmsg, msg, off, off1, ptr, r, s;
		s = $makeSlice(sliceType, 0, 64);
		off1 = 0;
		lenmsg = msg.$length;
		ptr = 0;
		Loop:
		while (true) {
			if (off >= lenmsg) {
				return ["", lenmsg, $pkg.ErrBuf];
			}
			c = (((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]) >> 0);
			off = off + (1) >> 0;
			_ref = c & 192;
			if (_ref === 0) {
				if (c === 0) {
					if (s.$length === 0) {
						return [".", off, $ifaceNil];
					}
					break Loop;
				}
				if ((off + c >> 0) > lenmsg) {
					return ["", lenmsg, $pkg.ErrBuf];
				}
				j = off;
				while (true) {
					if (!(j < (off + c >> 0))) { break; }
					b = ((j < 0 || j >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + j]);
					_ref$1 = b;
					if (_ref$1 === 46 || _ref$1 === 40 || _ref$1 === 41 || _ref$1 === 59 || _ref$1 === 32 || _ref$1 === 64) {
						s = $append(s, 92, b);
					} else if (_ref$1 === 34 || _ref$1 === 92) {
						s = $append(s, 92, b);
					} else if (_ref$1 === 9) {
						s = $append(s, 92, 116);
					} else if (_ref$1 === 13) {
						s = $append(s, 92, 114);
					} else {
						if (b < 32 || b >= 127) {
							buf = $clone(arrayType.zero(), arrayType);
							bufs = strconv.AppendInt($subslice(new sliceType(buf), 0, 0), new $Int64(0, b), 10);
							s = $append(s, 92);
							i = 0;
							while (true) {
								if (!(i < (3 - bufs.$length >> 0))) { break; }
								s = $append(s, 48);
								i = i + (1) >> 0;
							}
							_ref$2 = bufs;
							_i = 0;
							while (true) {
								if (!(_i < _ref$2.$length)) { break; }
								r = ((_i < 0 || _i >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i]);
								s = $append(s, r);
								_i++;
							}
						} else {
							s = $append(s, b);
						}
					}
					j = j + (1) >> 0;
				}
				s = $append(s, 46);
				off = off + (c) >> 0;
			} else if (_ref === 192) {
				if (off >= lenmsg) {
					return ["", lenmsg, $pkg.ErrBuf];
				}
				c1 = ((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]);
				off = off + (1) >> 0;
				if (ptr === 0) {
					off1 = off;
				}
				ptr = ptr + (1) >> 0;
				if (ptr > 10) {
					return ["", lenmsg, new Error.ptr("too many compression pointers")];
				}
				off = ((((c ^ 192) >> 0)) << 8 >> 0) | (c1 >> 0);
			} else {
				return ["", lenmsg, $pkg.ErrRdata];
			}
		}
		if (ptr === 0) {
			off1 = off;
		}
		return [$bytesToString(s), off1, $ifaceNil];
	};
	$pkg.UnpackDomainName = UnpackDomainName;
	packTxt = function(txt, msg, offset, tmp) {
		var $ptr, _i, _ref, _tuple, err, i, msg, offset, tmp, txt;
		err = $ifaceNil;
		if (txt.$length === 0) {
			if (offset >= msg.$length) {
				return [offset, $pkg.ErrBuf];
			}
			((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset] = 0);
			return [offset, $ifaceNil];
		}
		_ref = txt;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (((i < 0 || i >= txt.$length) ? $throwRuntimeError("index out of range") : txt.$array[txt.$offset + i]).length > tmp.$length) {
				return [offset, $pkg.ErrBuf];
			}
			_tuple = packTxtString(((i < 0 || i >= txt.$length) ? $throwRuntimeError("index out of range") : txt.$array[txt.$offset + i]), msg, offset, tmp); offset = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [offset, err];
			}
			_i++;
		}
		return [offset, err];
	};
	packTxtString = function(s, msg, offset, tmp) {
		var $ptr, bs, i, l, lenByteOffset, msg, offset, s, tmp, x, x$1;
		lenByteOffset = offset;
		if (offset >= msg.$length) {
			return [offset, $pkg.ErrBuf];
		}
		offset = offset + (1) >> 0;
		bs = $subslice(tmp, 0, s.length);
		$copyString(bs, s);
		i = 0;
		while (true) {
			if (!(i < bs.$length)) { break; }
			if (msg.$length <= offset) {
				return [offset, $pkg.ErrBuf];
			}
			if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 92) {
				i = i + (1) >> 0;
				if (i === bs.$length) {
					break;
				}
				if ((i + 2 >> 0) < bs.$length && isDigit(((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i])) && isDigit((x = i + 1 >> 0, ((x < 0 || x >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + x]))) && isDigit((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + x$1])))) {
					((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset] = dddToByte($subslice(bs, i)));
					i = i + (2) >> 0;
				} else if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 116) {
					((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset] = 9);
				} else if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 114) {
					((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset] = 13);
				} else if (((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]) === 110) {
					((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset] = 10);
				} else {
					((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset] = ((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]));
				}
			} else {
				((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset] = ((i < 0 || i >= bs.$length) ? $throwRuntimeError("index out of range") : bs.$array[bs.$offset + i]));
			}
			offset = offset + (1) >> 0;
			i = i + (1) >> 0;
		}
		l = (offset - lenByteOffset >> 0) - 1 >> 0;
		if (l > 255) {
			return [offset, new Error.ptr("string exceeded 255 bytes in txt")];
		}
		((lenByteOffset < 0 || lenByteOffset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + lenByteOffset] = (l << 24 >>> 24));
		return [offset, $ifaceNil];
	};
	unpackTxt = function(msg, offset, rdend) {
		var $ptr, _tuple, err, msg, offset, rdend, s, ss;
		err = $ifaceNil;
		ss = sliceType$1.nil;
		s = "";
		while (true) {
			if (!(offset < rdend && $interfaceIsEqual(err, $ifaceNil))) { break; }
			_tuple = unpackTxtString(msg, offset); s = _tuple[0]; offset = _tuple[1]; err = _tuple[2];
			if ($interfaceIsEqual(err, $ifaceNil)) {
				ss = $append(ss, s);
			}
		}
		return [ss, offset, err];
	};
	unpackTxtString = function(msg, offset) {
		var $ptr, _i, _i$1, _ref, _ref$1, _ref$2, b, buf, bufs, i, l, msg, offset, r, s;
		if ((offset + 1 >> 0) > msg.$length) {
			return ["", offset, new Error.ptr("overflow unpacking txt")];
		}
		l = (((offset < 0 || offset >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + offset]) >> 0);
		if (((offset + l >> 0) + 1 >> 0) > msg.$length) {
			return ["", offset, new Error.ptr("overflow unpacking txt")];
		}
		s = $makeSlice(sliceType, 0, l);
		_ref = $subslice(msg, (offset + 1 >> 0), ((offset + 1 >> 0) + l >> 0));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = b;
			if (_ref$1 === 34 || _ref$1 === 92) {
				s = $append(s, 92, b);
			} else if (_ref$1 === 9) {
				s = $appendSlice(s, new sliceType($stringToBytes("\\t")));
			} else if (_ref$1 === 13) {
				s = $appendSlice(s, new sliceType($stringToBytes("\\r")));
			} else if (_ref$1 === 10) {
				s = $appendSlice(s, new sliceType($stringToBytes("\\n")));
			} else {
				if (b < 32 || b > 127) {
					buf = $clone(arrayType.zero(), arrayType);
					bufs = strconv.AppendInt($subslice(new sliceType(buf), 0, 0), new $Int64(0, b), 10);
					s = $append(s, 92);
					i = 0;
					while (true) {
						if (!(i < (3 - bufs.$length >> 0))) { break; }
						s = $append(s, 48);
						i = i + (1) >> 0;
					}
					_ref$2 = bufs;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$2.$length)) { break; }
						r = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
						s = $append(s, r);
						_i$1++;
					}
				} else {
					s = $append(s, b);
				}
			}
			_i++;
		}
		offset = offset + ((1 + l >> 0)) >> 0;
		return [$bytesToString(s), offset, $ifaceNil];
	};
	packStructValue = function(val, msg, off, compression, compress) {
		var $ptr, _index, _q, _q$1, _q$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$5, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$6, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _r$66, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, b, b32, b64, bit, bit$1, bitmapbyte, compress, compression, data, data$1, e, e$1, e$2, e$3, element, element$1, err, err$1, fv, h, i, i$1, i$2, i$3, i$4, j, j$1, j$2, j$3, j$4, lastwindow, length, lenmsg, msg, n, numfield, off, off1, s, serv, t, txtTmp, typefield, val, window, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _index = $f._index; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$5 = $f._r$5; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$54 = $f._r$54; _r$55 = $f._r$55; _r$56 = $f._r$56; _r$57 = $f._r$57; _r$58 = $f._r$58; _r$59 = $f._r$59; _r$6 = $f._r$6; _r$60 = $f._r$60; _r$61 = $f._r$61; _r$62 = $f._r$62; _r$63 = $f._r$63; _r$64 = $f._r$64; _r$65 = $f._r$65; _r$66 = $f._r$66; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$44 = $f._tmp$44; _tmp$45 = $f._tmp$45; _tmp$46 = $f._tmp$46; _tmp$47 = $f._tmp$47; _tmp$48 = $f._tmp$48; _tmp$49 = $f._tmp$49; _tmp$5 = $f._tmp$5; _tmp$50 = $f._tmp$50; _tmp$51 = $f._tmp$51; _tmp$52 = $f._tmp$52; _tmp$53 = $f._tmp$53; _tmp$54 = $f._tmp$54; _tmp$55 = $f._tmp$55; _tmp$56 = $f._tmp$56; _tmp$57 = $f._tmp$57; _tmp$58 = $f._tmp$58; _tmp$59 = $f._tmp$59; _tmp$6 = $f._tmp$6; _tmp$60 = $f._tmp$60; _tmp$61 = $f._tmp$61; _tmp$62 = $f._tmp$62; _tmp$63 = $f._tmp$63; _tmp$64 = $f._tmp$64; _tmp$65 = $f._tmp$65; _tmp$66 = $f._tmp$66; _tmp$67 = $f._tmp$67; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; b = $f.b; b32 = $f.b32; b64 = $f.b64; bit = $f.bit; bit$1 = $f.bit$1; bitmapbyte = $f.bitmapbyte; compress = $f.compress; compression = $f.compression; data = $f.data; data$1 = $f.data$1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; e$3 = $f.e$3; element = $f.element; element$1 = $f.element$1; err = $f.err; err$1 = $f.err$1; fv = $f.fv; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; j = $f.j; j$1 = $f.j$1; j$2 = $f.j$2; j$3 = $f.j$3; j$4 = $f.j$4; lastwindow = $f.lastwindow; length = $f.length; lenmsg = $f.lenmsg; msg = $f.msg; n = $f.n; numfield = $f.numfield; off = $f.off; off1 = $f.off1; s = $f.s; serv = $f.serv; t = $f.t; txtTmp = $f.txtTmp; typefield = $f.typefield; val = $f.val; window = $f.window; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off1 = 0;
		err = $ifaceNil;
		val = val;
		txtTmp = sliceType.nil;
		lenmsg = msg.$length;
		numfield = val.NumField();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < numfield)) { break; } */ if(!(i < numfield)) { $s = 2; continue; }
			_r = val.Type().Field(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			typefield = $clone(_r, reflect.StructField);
			/* */ if (typefield.Tag === "dns:\"-\"") { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (typefield.Tag === "dns:\"-\"") { */ case 4:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			_r$1 = val.Field(i); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			fv = _r$1;
			_ref = fv.Kind();
			/* */ if (_ref === 20) { $s = 7; continue; }
			/* */ if (_ref === 23) { $s = 8; continue; }
			/* */ if (_ref === 25) { $s = 9; continue; }
			/* */ if (_ref === 8) { $s = 10; continue; }
			/* */ if (_ref === 9) { $s = 11; continue; }
			/* */ if (_ref === 10) { $s = 12; continue; }
			/* */ if (_ref === 11) { $s = 13; continue; }
			/* */ if (_ref === 24) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_ref === 20) { */ case 7:
				_r$2 = fv.Interface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_ref$1 = _r$2;
				/* */ if ($assertType(_ref$1, PrivateRdata, true)[1]) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if ($assertType(_ref$1, PrivateRdata, true)[1]) { */ case 18:
					data = _ref$1;
					_r$3 = data.Pack($subslice(msg, off)); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple = _r$3; n = _tuple[0]; err$1 = _tuple[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						_tmp = lenmsg; _tmp$1 = err$1; off1 = _tmp; err = _tmp$1;
						return [off1, err];
					}
					off = off + (n) >> 0;
					$s = 20; continue;
				/* } else { */ case 19:
					data$1 = _ref$1;
					_tmp$2 = lenmsg; _tmp$3 = new Error.ptr("bad kind interface packing"); off1 = _tmp$2; err = _tmp$3;
					return [off1, err];
				/* } */ case 20:
				$s = 16; continue;
			/* } else if (_ref === 23) { */ case 8:
				_ref$2 = typefield.Tag;
				/* */ if (_ref$2 === "dns:\"domain-name\"") { $s = 22; continue; }
				/* */ if (_ref$2 === "dns:\"txt\"") { $s = 23; continue; }
				/* */ if (_ref$2 === "dns:\"opt\"") { $s = 24; continue; }
				/* */ if (_ref$2 === "dns:\"a\"") { $s = 25; continue; }
				/* */ if (_ref$2 === "dns:\"aaaa\"") { $s = 26; continue; }
				/* */ if (_ref$2 === "dns:\"wks\"") { $s = 27; continue; }
				/* */ if (_ref$2 === "dns:\"nsec\"") { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* switch (0) { default: if (_ref$2 === "dns:\"domain-name\"") { */ case 22:
					j = 0;
					/* while (true) { */ case 31:
						_r$4 = val.Field(i); /* */ $s = 33; case 33: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$5 = _r$4.Len(); /* */ $s = 34; case 34: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						/* if (!(j < _r$5)) { break; } */ if(!(j < _r$5)) { $s = 32; continue; }
						_r$6 = val.Field(i); /* */ $s = 35; case 35: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$7 = _r$6.Index(j); /* */ $s = 36; case 36: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_r$8 = _r$7.String(); /* */ $s = 37; case 37: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						element = _r$8;
						_tuple$1 = PackDomainName(element, msg, off, compression, false && compress); off = _tuple$1[0]; err = _tuple$1[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							_tmp$4 = lenmsg; _tmp$5 = err; off1 = _tmp$4; err = _tmp$5;
							return [off1, err];
						}
						j = j + (1) >> 0;
					/* } */ $s = 31; continue; case 32:
					$s = 30; continue;
				/* } else if (_ref$2 === "dns:\"txt\"") { */ case 23:
					if (txtTmp === sliceType.nil) {
						txtTmp = $makeSlice(sliceType, 1025);
					}
					_r$9 = fv.Interface(); /* */ $s = 38; case 38: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$10 = packTxt($assertType(_r$9, sliceType$1), msg, off, txtTmp); /* */ $s = 39; case 39: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple$2 = _r$10; off = _tuple$2[0]; err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$6 = lenmsg; _tmp$7 = err; off1 = _tmp$6; err = _tmp$7;
						return [off1, err];
					}
					$s = 30; continue;
				/* } else if (_ref$2 === "dns:\"opt\"") { */ case 24:
					j$1 = 0;
					/* while (true) { */ case 40:
						_r$11 = val.Field(i); /* */ $s = 42; case 42: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.Len(); /* */ $s = 43; case 43: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* if (!(j$1 < _r$12)) { break; } */ if(!(j$1 < _r$12)) { $s = 41; continue; }
						_r$13 = val.Field(i); /* */ $s = 44; case 44: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$14 = _r$13.Index(j$1); /* */ $s = 45; case 45: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						_r$15 = _r$14.Interface(); /* */ $s = 46; case 46: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						element$1 = _r$15;
						_r$16 = $assertType(element$1, EDNS0).pack(); /* */ $s = 47; case 47: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_tuple$3 = _r$16; b = _tuple$3[0]; e = _tuple$3[1];
						if (!($interfaceIsEqual(e, $ifaceNil))) {
							_tmp$8 = lenmsg; _tmp$9 = new Error.ptr("overflow packing opt"); off1 = _tmp$8; err = _tmp$9;
							return [off1, err];
						}
						_r$17 = $assertType(element$1, EDNS0).Option(); /* */ $s = 48; case 48: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_r$18 = packUint16(_r$17); /* */ $s = 49; case 49: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_tuple$4 = _r$18; ((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = _tuple$4[0]); (x = off + 1 >> 0, ((x < 0 || x >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x] = _tuple$4[1]));
						_tuple$5 = packUint16((b.$length << 16 >>> 16)); (x$1 = off + 2 >> 0, ((x$1 < 0 || x$1 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$1] = _tuple$5[0])); (x$2 = off + 3 >> 0, ((x$2 < 0 || x$2 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$2] = _tuple$5[1]));
						off = off + (4) >> 0;
						if ((off + b.$length >> 0) > lenmsg) {
							$copySlice($subslice(msg, off), b);
							off = lenmsg;
							j$1 = j$1 + (1) >> 0;
							/* continue; */ $s = 40; continue;
						}
						$copySlice($subslice(msg, off, (off + b.$length >> 0)), b);
						off = off + (b.$length) >> 0;
						j$1 = j$1 + (1) >> 0;
					/* } */ $s = 40; continue; case 41:
					$s = 30; continue;
				/* } else if (_ref$2 === "dns:\"a\"") { */ case 25:
					_r$19 = val.Type().String(); /* */ $s = 52; case 52: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					/* */ if (_r$19 === "dns.IPSECKEY") { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if (_r$19 === "dns.IPSECKEY") { */ case 50:
						_r$20 = val.Field(2); /* */ $s = 55; case 55: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						_r$21 = _r$20.Uint(); /* */ $s = 56; case 56: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						/* */ if (!((x$3 = _r$21, (x$3.$high === 0 && x$3.$low === 1)))) { $s = 53; continue; }
						/* */ $s = 54; continue;
						/* if (!((x$3 = _r$21, (x$3.$high === 0 && x$3.$low === 1)))) { */ case 53:
							i = i + (1) >> 0;
							/* continue; */ $s = 1; continue;
						/* } */ case 54:
					/* } */ case 51:
					if ((off + 4 >> 0) > lenmsg) {
						_tmp$10 = lenmsg; _tmp$11 = new Error.ptr("overflow packing a"); off1 = _tmp$10; err = _tmp$11;
						return [off1, err];
					}
					_ref$3 = fv.Len();
					/* */ if (_ref$3 === 16) { $s = 57; continue; }
					/* */ if (_ref$3 === 4) { $s = 58; continue; }
					/* */ if (_ref$3 === 0) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (_ref$3 === 16) { */ case 57:
						_r$22 = fv.Index(12); /* */ $s = 62; case 62: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						_r$23 = _r$22.Uint(); /* */ $s = 63; case 63: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = (_r$23.$low << 24 >>> 24));
						_r$24 = fv.Index(13); /* */ $s = 64; case 64: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						_r$25 = _r$24.Uint(); /* */ $s = 65; case 65: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
						(x$4 = off + 1 >> 0, ((x$4 < 0 || x$4 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$4] = (_r$25.$low << 24 >>> 24)));
						_r$26 = fv.Index(14); /* */ $s = 66; case 66: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						_r$27 = _r$26.Uint(); /* */ $s = 67; case 67: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						(x$5 = off + 2 >> 0, ((x$5 < 0 || x$5 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$5] = (_r$27.$low << 24 >>> 24)));
						_r$28 = fv.Index(15); /* */ $s = 68; case 68: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						_r$29 = _r$28.Uint(); /* */ $s = 69; case 69: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						(x$6 = off + 3 >> 0, ((x$6 < 0 || x$6 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$6] = (_r$29.$low << 24 >>> 24)));
						off = off + (4) >> 0;
						$s = 61; continue;
					/* } else if (_ref$3 === 4) { */ case 58:
						_r$30 = fv.Index(0); /* */ $s = 70; case 70: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
						_r$31 = _r$30.Uint(); /* */ $s = 71; case 71: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
						((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = (_r$31.$low << 24 >>> 24));
						_r$32 = fv.Index(1); /* */ $s = 72; case 72: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
						_r$33 = _r$32.Uint(); /* */ $s = 73; case 73: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
						(x$7 = off + 1 >> 0, ((x$7 < 0 || x$7 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$7] = (_r$33.$low << 24 >>> 24)));
						_r$34 = fv.Index(2); /* */ $s = 74; case 74: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
						_r$35 = _r$34.Uint(); /* */ $s = 75; case 75: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
						(x$8 = off + 2 >> 0, ((x$8 < 0 || x$8 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$8] = (_r$35.$low << 24 >>> 24)));
						_r$36 = fv.Index(3); /* */ $s = 76; case 76: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
						_r$37 = _r$36.Uint(); /* */ $s = 77; case 77: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						(x$9 = off + 3 >> 0, ((x$9 < 0 || x$9 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$9] = (_r$37.$low << 24 >>> 24)));
						off = off + (4) >> 0;
						$s = 61; continue;
					/* } else if (_ref$3 === 0) { */ case 59:
						$s = 61; continue;
					/* } else { */ case 60:
						_tmp$12 = lenmsg; _tmp$13 = new Error.ptr("overflow packing a"); off1 = _tmp$12; err = _tmp$13;
						return [off1, err];
					/* } */ case 61:
					$s = 30; continue;
				/* } else if (_ref$2 === "dns:\"aaaa\"") { */ case 26:
					_r$38 = val.Type().String(); /* */ $s = 80; case 80: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					/* */ if (_r$38 === "dns.IPSECKEY") { $s = 78; continue; }
					/* */ $s = 79; continue;
					/* if (_r$38 === "dns.IPSECKEY") { */ case 78:
						_r$39 = val.Field(2); /* */ $s = 83; case 83: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
						_r$40 = _r$39.Uint(); /* */ $s = 84; case 84: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						/* */ if (!((x$10 = _r$40, (x$10.$high === 0 && x$10.$low === 2)))) { $s = 81; continue; }
						/* */ $s = 82; continue;
						/* if (!((x$10 = _r$40, (x$10.$high === 0 && x$10.$low === 2)))) { */ case 81:
							i = i + (1) >> 0;
							/* continue; */ $s = 1; continue;
						/* } */ case 82:
					/* } */ case 79:
					if (fv.Len() === 0) {
						/* break; */ $s = 30; continue;
					}
					if (fv.Len() > 16 || (off + fv.Len() >> 0) > lenmsg) {
						_tmp$14 = lenmsg; _tmp$15 = new Error.ptr("overflow packing aaaa"); off1 = _tmp$14; err = _tmp$15;
						return [off1, err];
					}
					j$2 = 0;
					/* while (true) { */ case 85:
						/* if (!(j$2 < 16)) { break; } */ if(!(j$2 < 16)) { $s = 86; continue; }
						_r$41 = fv.Index(j$2); /* */ $s = 87; case 87: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						_r$42 = _r$41.Uint(); /* */ $s = 88; case 88: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
						((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = (_r$42.$low << 24 >>> 24));
						off = off + (1) >> 0;
						j$2 = j$2 + (1) >> 0;
					/* } */ $s = 85; continue; case 86:
					$s = 30; continue;
				/* } else if (_ref$2 === "dns:\"wks\"") { */ case 27:
					if (off === lenmsg) {
						/* break; */ $s = 30; continue;
					}
					_r$43 = val.Field(i); /* */ $s = 91; case 91: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
					_r$44 = _r$43.Len(); /* */ $s = 92; case 92: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					/* */ if (_r$44 === 0) { $s = 89; continue; }
					/* */ $s = 90; continue;
					/* if (_r$44 === 0) { */ case 89:
						/* break; */ $s = 30; continue;
					/* } */ case 90:
					bitmapbyte = 0;
					j$3 = 0;
					/* while (true) { */ case 93:
						_r$45 = val.Field(i); /* */ $s = 95; case 95: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
						_r$46 = _r$45.Len(); /* */ $s = 96; case 96: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
						/* if (!(j$3 < _r$46)) { break; } */ if(!(j$3 < _r$46)) { $s = 94; continue; }
						_r$47 = fv.Index(j$3); /* */ $s = 97; case 97: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
						_r$48 = _r$47.Uint(); /* */ $s = 98; case 98: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
						serv = ((_r$48).$low << 16 >>> 16);
						bitmapbyte = (_q = serv / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						if ((bitmapbyte >> 0) > lenmsg) {
							_tmp$16 = lenmsg; _tmp$17 = new Error.ptr("overflow packing wks"); off1 = _tmp$16; err = _tmp$17;
							return [off1, err];
						}
						bit = serv - (bitmapbyte * 8 << 16 >>> 16) << 16 >>> 16;
						((bitmapbyte < 0 || bitmapbyte >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + bitmapbyte] = ((y = ((7 - bit << 16 >>> 16)), y < 32 ? (1 << y) : 0) << 24 >>> 24));
						j$3 = j$3 + (1) >> 0;
					/* } */ $s = 93; continue; case 94:
					off = off + ((bitmapbyte >> 0)) >> 0;
					$s = 30; continue;
				/* } else if (_ref$2 === "dns:\"nsec\"") { */ case 28:
					_r$49 = val.Field(i); /* */ $s = 101; case 101: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
					_r$50 = _r$49.Len(); /* */ $s = 102; case 102: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
					/* */ if (_r$50 === 0) { $s = 99; continue; }
					/* */ $s = 100; continue;
					/* if (_r$50 === 0) { */ case 99:
						/* break; */ $s = 30; continue;
					/* } */ case 100:
					lastwindow = 0;
					length = 0;
					if ((off + 2 >> 0) > lenmsg) {
						_tmp$18 = lenmsg; _tmp$19 = new Error.ptr("overflow packing nsecx"); off1 = _tmp$18; err = _tmp$19;
						return [off1, err];
					}
					j$4 = 0;
					/* while (true) { */ case 103:
						_r$51 = val.Field(i); /* */ $s = 105; case 105: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
						_r$52 = _r$51.Len(); /* */ $s = 106; case 106: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
						/* if (!(j$4 < _r$52)) { break; } */ if(!(j$4 < _r$52)) { $s = 104; continue; }
						_r$53 = fv.Index(j$4); /* */ $s = 107; case 107: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
						_r$54 = _r$53.Uint(); /* */ $s = 108; case 108: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
						t = ((_r$54).$low << 16 >>> 16);
						window = (_q$1 = t / 256, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
						if (!((lastwindow === window))) {
							off = off + (((length >> 0) + 3 >> 0)) >> 0;
							if (off > lenmsg) {
								_tmp$20 = lenmsg; _tmp$21 = new Error.ptr("overflow packing nsecx bitmap"); off1 = _tmp$20; err = _tmp$21;
								return [off1, err];
							}
						}
						length = (_q$2 = ((t - (window * 256 << 16 >>> 16) << 16 >>> 16)) / 8, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
						bit$1 = (t - ((window * 256 << 16 >>> 16)) << 16 >>> 16) - ((length * 8 << 16 >>> 16)) << 16 >>> 16;
						if (((off + 2 >> 0) + (length >> 0) >> 0) > lenmsg) {
							_tmp$22 = lenmsg; _tmp$23 = new Error.ptr("overflow packing nsecx bitmap"); off1 = _tmp$22; err = _tmp$23;
							return [off1, err];
						}
						((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = (window << 24 >>> 24));
						(x$11 = off + 1 >> 0, ((x$11 < 0 || x$11 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$11] = ((length + 1 << 16 >>> 16) << 24 >>> 24)));
						_index = (off + 2 >> 0) + (length >> 0) >> 0;
						((_index < 0 || _index >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + _index] = (((_index < 0 || _index >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + _index]) | (((y$1 = ((7 - bit$1 << 16 >>> 16)), y$1 < 32 ? (1 << y$1) : 0) << 24 >>> 24))) >>> 0);
						lastwindow = window;
						j$4 = j$4 + (1) >> 0;
					/* } */ $s = 103; continue; case 104:
					off = off + ((2 + (length >> 0) >> 0)) >> 0;
					off = off + (1) >> 0;
					if (off > lenmsg) {
						_tmp$24 = lenmsg; _tmp$25 = new Error.ptr("overflow packing nsecx bitmap"); off1 = _tmp$24; err = _tmp$25;
						return [off1, err];
					}
					$s = 30; continue;
				/* } else { */ case 29:
					_tmp$26 = lenmsg; _tmp$27 = new Error.ptr("bad tag packing slice: " + new reflect.StructTag(typefield.Tag).Get("dns")); off1 = _tmp$26; err = _tmp$27;
					return [off1, err];
				/* } } */ case 30:
				$s = 16; continue;
			/* } else if (_ref === 25) { */ case 9:
				_r$55 = packStructValue(fv, msg, off, compression, compress); /* */ $s = 109; case 109: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
				_tuple$6 = _r$55; off = _tuple$6[0]; err = _tuple$6[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$28 = lenmsg; _tmp$29 = err; off1 = _tmp$28; err = _tmp$29;
					return [off1, err];
				}
				$s = 16; continue;
			/* } else if (_ref === 8) { */ case 10:
				if ((off + 1 >> 0) > lenmsg) {
					_tmp$30 = lenmsg; _tmp$31 = new Error.ptr("overflow packing uint8"); off1 = _tmp$30; err = _tmp$31;
					return [off1, err];
				}
				((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = (fv.Uint().$low << 24 >>> 24));
				off = off + (1) >> 0;
				$s = 16; continue;
			/* } else if (_ref === 9) { */ case 11:
				if ((off + 2 >> 0) > lenmsg) {
					_tmp$32 = lenmsg; _tmp$33 = new Error.ptr("overflow packing uint16"); off1 = _tmp$32; err = _tmp$33;
					return [off1, err];
				}
				i$1 = fv.Uint();
				((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = ($shiftRightUint64(i$1, 8).$low << 24 >>> 24));
				(x$12 = off + 1 >> 0, ((x$12 < 0 || x$12 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$12] = (i$1.$low << 24 >>> 24)));
				off = off + (2) >> 0;
				$s = 16; continue;
			/* } else if (_ref === 10) { */ case 12:
				if ((off + 4 >> 0) > lenmsg) {
					_tmp$34 = lenmsg; _tmp$35 = new Error.ptr("overflow packing uint32"); off1 = _tmp$34; err = _tmp$35;
					return [off1, err];
				}
				i$2 = fv.Uint();
				((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = ($shiftRightUint64(i$2, 24).$low << 24 >>> 24));
				(x$13 = off + 1 >> 0, ((x$13 < 0 || x$13 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$13] = ($shiftRightUint64(i$2, 16).$low << 24 >>> 24)));
				(x$14 = off + 2 >> 0, ((x$14 < 0 || x$14 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$14] = ($shiftRightUint64(i$2, 8).$low << 24 >>> 24)));
				(x$15 = off + 3 >> 0, ((x$15 < 0 || x$15 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$15] = (i$2.$low << 24 >>> 24)));
				off = off + (4) >> 0;
				$s = 16; continue;
			/* } else if (_ref === 11) { */ case 13:
				_ref$4 = typefield.Tag;
				if (_ref$4 === "dns:\"uint48\"") {
					if ((off + 6 >> 0) > lenmsg) {
						_tmp$36 = lenmsg; _tmp$37 = new Error.ptr("overflow packing uint64 as uint48"); off1 = _tmp$36; err = _tmp$37;
						return [off1, err];
					}
					i$3 = fv.Uint();
					((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = ($shiftRightUint64(i$3, 40).$low << 24 >>> 24));
					(x$16 = off + 1 >> 0, ((x$16 < 0 || x$16 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$16] = ($shiftRightUint64(i$3, 32).$low << 24 >>> 24)));
					(x$17 = off + 2 >> 0, ((x$17 < 0 || x$17 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$17] = ($shiftRightUint64(i$3, 24).$low << 24 >>> 24)));
					(x$18 = off + 3 >> 0, ((x$18 < 0 || x$18 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$18] = ($shiftRightUint64(i$3, 16).$low << 24 >>> 24)));
					(x$19 = off + 4 >> 0, ((x$19 < 0 || x$19 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$19] = ($shiftRightUint64(i$3, 8).$low << 24 >>> 24)));
					(x$20 = off + 5 >> 0, ((x$20 < 0 || x$20 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$20] = (i$3.$low << 24 >>> 24)));
					off = off + (6) >> 0;
				} else {
					if ((off + 8 >> 0) > lenmsg) {
						_tmp$38 = lenmsg; _tmp$39 = new Error.ptr("overflow packing uint64"); off1 = _tmp$38; err = _tmp$39;
						return [off1, err];
					}
					i$4 = fv.Uint();
					((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = ($shiftRightUint64(i$4, 56).$low << 24 >>> 24));
					(x$21 = off + 1 >> 0, ((x$21 < 0 || x$21 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$21] = ($shiftRightUint64(i$4, 48).$low << 24 >>> 24)));
					(x$22 = off + 2 >> 0, ((x$22 < 0 || x$22 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$22] = ($shiftRightUint64(i$4, 40).$low << 24 >>> 24)));
					(x$23 = off + 3 >> 0, ((x$23 < 0 || x$23 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$23] = ($shiftRightUint64(i$4, 32).$low << 24 >>> 24)));
					(x$24 = off + 4 >> 0, ((x$24 < 0 || x$24 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$24] = ($shiftRightUint64(i$4, 24).$low << 24 >>> 24)));
					(x$25 = off + 5 >> 0, ((x$25 < 0 || x$25 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$25] = ($shiftRightUint64(i$4, 16).$low << 24 >>> 24)));
					(x$26 = off + 6 >> 0, ((x$26 < 0 || x$26 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$26] = ($shiftRightUint64(i$4, 8).$low << 24 >>> 24)));
					(x$27 = off + 7 >> 0, ((x$27 < 0 || x$27 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$27] = (i$4.$low << 24 >>> 24)));
					off = off + (8) >> 0;
				}
				$s = 16; continue;
			/* } else if (_ref === 24) { */ case 14:
				_r$56 = fv.String(); /* */ $s = 110; case 110: if($c) { $c = false; _r$56 = _r$56.$blk(); } if (_r$56 && _r$56.$blk !== undefined) { break s; }
				s = _r$56;
				_ref$5 = typefield.Tag;
				/* */ if (_ref$5 === "dns:\"base64\"") { $s = 111; continue; }
				/* */ if (_ref$5 === "dns:\"domain-name\"") { $s = 112; continue; }
				/* */ if (_ref$5 === "dns:\"cdomain-name\"") { $s = 113; continue; }
				/* */ if (_ref$5 === "dns:\"size-base32\"") { $s = 114; continue; }
				/* */ if (_ref$5 === "dns:\"base32\"") { $s = 115; continue; }
				/* */ if (_ref$5 === "dns:\"size-hex\"") { $s = 116; continue; }
				/* */ if (_ref$5 === "dns:\"hex\"") { $s = 117; continue; }
				/* */ if (_ref$5 === "dns:\"size\"") { $s = 118; continue; }
				/* */ if (_ref$5 === "dns:\"txt\"") { $s = 119; continue; }
				/* */ if (_ref$5 === "") { $s = 120; continue; }
				/* */ $s = 121; continue;
				/* if (_ref$5 === "dns:\"base64\"") { */ case 111:
					_r$57 = fromBase64(new sliceType($stringToBytes(s))); /* */ $s = 123; case 123: if($c) { $c = false; _r$57 = _r$57.$blk(); } if (_r$57 && _r$57.$blk !== undefined) { break s; }
					_tuple$7 = _r$57; b64 = _tuple$7[0]; e$1 = _tuple$7[1];
					if (!($interfaceIsEqual(e$1, $ifaceNil))) {
						_tmp$40 = lenmsg; _tmp$41 = e$1; off1 = _tmp$40; err = _tmp$41;
						return [off1, err];
					}
					$copySlice($subslice(msg, off, (off + b64.$length >> 0)), b64);
					off = off + (b64.$length) >> 0;
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"domain-name\"") { */ case 112:
					_r$58 = val.Type().String(); /* */ $s = 126; case 126: if($c) { $c = false; _r$58 = _r$58.$blk(); } if (_r$58 && _r$58.$blk !== undefined) { break s; }
					/* */ if (_r$58 === "dns.IPSECKEY") { $s = 124; continue; }
					/* */ $s = 125; continue;
					/* if (_r$58 === "dns.IPSECKEY") { */ case 124:
						_r$59 = val.Field(2); /* */ $s = 127; case 127: if($c) { $c = false; _r$59 = _r$59.$blk(); } if (_r$59 && _r$59.$blk !== undefined) { break s; }
						_r$60 = _r$59.Uint(); /* */ $s = 128; case 128: if($c) { $c = false; _r$60 = _r$60.$blk(); } if (_r$60 && _r$60.$blk !== undefined) { break s; }
						x$28 = _r$60;
						if ((x$28.$high === 0 && x$28.$low === 1) || (x$28.$high === 0 && x$28.$low === 2)) {
							i = i + (1) >> 0;
							/* continue; */ $s = 1; continue;
						}
					/* } */ case 125:
					_tuple$8 = PackDomainName(s, msg, off, compression, false && compress); off = _tuple$8[0]; err = _tuple$8[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$42 = lenmsg; _tmp$43 = err; off1 = _tmp$42; err = _tmp$43;
						return [off1, err];
					}
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"cdomain-name\"") { */ case 113:
					_tuple$9 = PackDomainName(s, msg, off, compression, true && compress); off = _tuple$9[0]; err = _tuple$9[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$44 = lenmsg; _tmp$45 = err; off1 = _tmp$44; err = _tmp$45;
						return [off1, err];
					}
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"size-base32\"") { */ case 114:
					(x$29 = off - 1 >> 0, ((x$29 < 0 || x$29 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$29] = 20));
					_r$61 = fromBase32(new sliceType($stringToBytes(s))); /* */ $s = 129; case 129: if($c) { $c = false; _r$61 = _r$61.$blk(); } if (_r$61 && _r$61.$blk !== undefined) { break s; }
					_tuple$10 = _r$61; b32 = _tuple$10[0]; e$2 = _tuple$10[1];
					if (!($interfaceIsEqual(e$2, $ifaceNil))) {
						_tmp$46 = lenmsg; _tmp$47 = e$2; off1 = _tmp$46; err = _tmp$47;
						return [off1, err];
					}
					$copySlice($subslice(msg, off, (off + b32.$length >> 0)), b32);
					off = off + (b32.$length) >> 0;
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"base32\"") { */ case 115:
					_r$62 = fromBase32(new sliceType($stringToBytes(s))); /* */ $s = 130; case 130: if($c) { $c = false; _r$62 = _r$62.$blk(); } if (_r$62 && _r$62.$blk !== undefined) { break s; }
					_tuple$11 = _r$62; b32 = _tuple$11[0]; e$2 = _tuple$11[1];
					if (!($interfaceIsEqual(e$2, $ifaceNil))) {
						_tmp$48 = lenmsg; _tmp$49 = e$2; off1 = _tmp$48; err = _tmp$49;
						return [off1, err];
					}
					$copySlice($subslice(msg, off, (off + b32.$length >> 0)), b32);
					off = off + (b32.$length) >> 0;
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"size-hex\"") { */ case 116:
					_tuple$12 = hex.DecodeString(s); h = _tuple$12[0]; e$3 = _tuple$12[1];
					if (!($interfaceIsEqual(e$3, $ifaceNil))) {
						_tmp$50 = lenmsg; _tmp$51 = e$3; off1 = _tmp$50; err = _tmp$51;
						return [off1, err];
					}
					if ((off + hex.DecodedLen(s.length) >> 0) > lenmsg) {
						_tmp$52 = lenmsg; _tmp$53 = new Error.ptr("overflow packing hex"); off1 = _tmp$52; err = _tmp$53;
						return [off1, err];
					}
					$copySlice($subslice(msg, off, (off + hex.DecodedLen(s.length) >> 0)), h);
					off = off + (hex.DecodedLen(s.length)) >> 0;
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"hex\"") { */ case 117:
					_tuple$13 = hex.DecodeString(s); h = _tuple$13[0]; e$3 = _tuple$13[1];
					if (!($interfaceIsEqual(e$3, $ifaceNil))) {
						_tmp$54 = lenmsg; _tmp$55 = e$3; off1 = _tmp$54; err = _tmp$55;
						return [off1, err];
					}
					if ((off + hex.DecodedLen(s.length) >> 0) > lenmsg) {
						_tmp$56 = lenmsg; _tmp$57 = new Error.ptr("overflow packing hex"); off1 = _tmp$56; err = _tmp$57;
						return [off1, err];
					}
					$copySlice($subslice(msg, off, (off + hex.DecodedLen(s.length) >> 0)), h);
					off = off + (hex.DecodedLen(s.length)) >> 0;
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"size\"") { */ case 118:
					$copyString($subslice(msg, off, (off + s.length >> 0)), s);
					off = off + (s.length) >> 0;
					$s = 122; continue;
				/* } else if (_ref$5 === "dns:\"txt\"") { */ case 119:
					if (txtTmp === sliceType.nil) {
						txtTmp = $makeSlice(sliceType, 1025);
					}
					_r$63 = fv.String(); /* */ $s = 131; case 131: if($c) { $c = false; _r$63 = _r$63.$blk(); } if (_r$63 && _r$63.$blk !== undefined) { break s; }
					_r$64 = packTxtString(_r$63, msg, off, txtTmp); /* */ $s = 132; case 132: if($c) { $c = false; _r$64 = _r$64.$blk(); } if (_r$64 && _r$64.$blk !== undefined) { break s; }
					_tuple$14 = _r$64; off = _tuple$14[0]; err = _tuple$14[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$58 = lenmsg; _tmp$59 = err; off1 = _tmp$58; err = _tmp$59;
						return [off1, err];
					}
					$s = 122; continue;
				/* } else if (_ref$5 === "") { */ case 120:
					if (txtTmp === sliceType.nil) {
						txtTmp = $makeSlice(sliceType, 1025);
					}
					_r$65 = fv.String(); /* */ $s = 133; case 133: if($c) { $c = false; _r$65 = _r$65.$blk(); } if (_r$65 && _r$65.$blk !== undefined) { break s; }
					_r$66 = packTxtString(_r$65, msg, off, txtTmp); /* */ $s = 134; case 134: if($c) { $c = false; _r$66 = _r$66.$blk(); } if (_r$66 && _r$66.$blk !== undefined) { break s; }
					_tuple$15 = _r$66; off = _tuple$15[0]; err = _tuple$15[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$60 = lenmsg; _tmp$61 = err; off1 = _tmp$60; err = _tmp$61;
						return [off1, err];
					}
					$s = 122; continue;
				/* } else { */ case 121:
					_tmp$62 = lenmsg; _tmp$63 = new Error.ptr("bad tag packing string: " + new reflect.StructTag(typefield.Tag).Get("dns")); off1 = _tmp$62; err = _tmp$63;
					return [off1, err];
				/* } */ case 122:
				$s = 16; continue;
			/* } else { */ case 15:
				_tmp$64 = lenmsg; _tmp$65 = new Error.ptr("bad kind packing"); off1 = _tmp$64; err = _tmp$65;
				return [off1, err];
			/* } */ case 16:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$66 = off; _tmp$67 = $ifaceNil; off1 = _tmp$66; err = _tmp$67;
		return [off1, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: packStructValue }; } $f.$ptr = $ptr; $f._index = _index; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$5 = _r$5; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$54 = _r$54; $f._r$55 = _r$55; $f._r$56 = _r$56; $f._r$57 = _r$57; $f._r$58 = _r$58; $f._r$59 = _r$59; $f._r$6 = _r$6; $f._r$60 = _r$60; $f._r$61 = _r$61; $f._r$62 = _r$62; $f._r$63 = _r$63; $f._r$64 = _r$64; $f._r$65 = _r$65; $f._r$66 = _r$66; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$44 = _tmp$44; $f._tmp$45 = _tmp$45; $f._tmp$46 = _tmp$46; $f._tmp$47 = _tmp$47; $f._tmp$48 = _tmp$48; $f._tmp$49 = _tmp$49; $f._tmp$5 = _tmp$5; $f._tmp$50 = _tmp$50; $f._tmp$51 = _tmp$51; $f._tmp$52 = _tmp$52; $f._tmp$53 = _tmp$53; $f._tmp$54 = _tmp$54; $f._tmp$55 = _tmp$55; $f._tmp$56 = _tmp$56; $f._tmp$57 = _tmp$57; $f._tmp$58 = _tmp$58; $f._tmp$59 = _tmp$59; $f._tmp$6 = _tmp$6; $f._tmp$60 = _tmp$60; $f._tmp$61 = _tmp$61; $f._tmp$62 = _tmp$62; $f._tmp$63 = _tmp$63; $f._tmp$64 = _tmp$64; $f._tmp$65 = _tmp$65; $f._tmp$66 = _tmp$66; $f._tmp$67 = _tmp$67; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.b = b; $f.b32 = b32; $f.b64 = b64; $f.bit = bit; $f.bit$1 = bit$1; $f.bitmapbyte = bitmapbyte; $f.compress = compress; $f.compression = compression; $f.data = data; $f.data$1 = data$1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.e$3 = e$3; $f.element = element; $f.element$1 = element$1; $f.err = err; $f.err$1 = err$1; $f.fv = fv; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.j = j; $f.j$1 = j$1; $f.j$2 = j$2; $f.j$3 = j$3; $f.j$4 = j$4; $f.lastwindow = lastwindow; $f.length = length; $f.lenmsg = lenmsg; $f.msg = msg; $f.n = n; $f.numfield = numfield; $f.off = off; $f.off1 = off1; $f.s = s; $f.serv = serv; $f.t = t; $f.txtTmp = txtTmp; $f.typefield = typefield; $f.val = val; $f.window = window; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	structValue = function(any) {
		var $ptr, _r, _r$1, any, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; any = $f.any; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = reflect.ValueOf(any); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.any = any; $f.$s = $s; $f.$r = $r; return $f;
	};
	PackStruct = function(any, msg, off) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, any, err, msg, off, off1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; any = $f.any; err = $f.err; msg = $f.msg; off = $f.off; off1 = $f.off1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off1 = 0;
		err = $ifaceNil;
		_r = structValue(any); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = packStructValue(_r, msg, off, false, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; off = _tuple[0]; err = _tuple[1];
		_tmp = off; _tmp$1 = err; off1 = _tmp; err = _tmp$1;
		return [off1, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PackStruct }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.any = any; $f.err = err; $f.msg = msg; $f.off = off; $f.off1 = off1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PackStruct = PackStruct;
	packStructCompress = function(any, msg, off, compression, compress) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, any, compress, compression, err, msg, off, off1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; any = $f.any; compress = $f.compress; compression = $f.compression; err = $f.err; msg = $f.msg; off = $f.off; off1 = $f.off1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off1 = 0;
		err = $ifaceNil;
		_r = structValue(any); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = packStructValue(_r, msg, off, compression, compress); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; off = _tuple[0]; err = _tuple[1];
		_tmp = off; _tmp$1 = err; off1 = _tmp; err = _tmp$1;
		return [off1, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: packStructCompress }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.any = any; $f.compress = compress; $f.compression = compression; $f.err = err; $f.msg = msg; $f.off = off; $f.off1 = off1; $f.$s = $s; $f.$r = $r; return $f;
	};
	unpackStructValue = function(val, msg, off) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$5, _r$50, _r$51, _r$52, _r$53, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$10, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, b, b$1, b64end, code, data, data$1, e, e$1, e$2, e$3, e$4, e$5, e$6, e$7, edns, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, fv, hexend, i, i$1, j, j$1, length, lenmsg, lenrd, msg, n, name, name$1, name$2, name$3, name$4, nsec, off, off1, off1$1, optlen, s, s$1, serv, servers, size, size$1, txt, val, window, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$5 = $f._r$5; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$10 = $f._ref$10; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$44 = $f._tmp$44; _tmp$45 = $f._tmp$45; _tmp$46 = $f._tmp$46; _tmp$47 = $f._tmp$47; _tmp$48 = $f._tmp$48; _tmp$49 = $f._tmp$49; _tmp$5 = $f._tmp$5; _tmp$50 = $f._tmp$50; _tmp$51 = $f._tmp$51; _tmp$52 = $f._tmp$52; _tmp$53 = $f._tmp$53; _tmp$54 = $f._tmp$54; _tmp$55 = $f._tmp$55; _tmp$56 = $f._tmp$56; _tmp$57 = $f._tmp$57; _tmp$58 = $f._tmp$58; _tmp$59 = $f._tmp$59; _tmp$6 = $f._tmp$6; _tmp$60 = $f._tmp$60; _tmp$61 = $f._tmp$61; _tmp$62 = $f._tmp$62; _tmp$63 = $f._tmp$63; _tmp$64 = $f._tmp$64; _tmp$65 = $f._tmp$65; _tmp$66 = $f._tmp$66; _tmp$67 = $f._tmp$67; _tmp$68 = $f._tmp$68; _tmp$69 = $f._tmp$69; _tmp$7 = $f._tmp$7; _tmp$70 = $f._tmp$70; _tmp$71 = $f._tmp$71; _tmp$72 = $f._tmp$72; _tmp$73 = $f._tmp$73; _tmp$74 = $f._tmp$74; _tmp$75 = $f._tmp$75; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; b = $f.b; b$1 = $f.b$1; b64end = $f.b64end; code = $f.code; data = $f.data; data$1 = $f.data$1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; e$3 = $f.e$3; e$4 = $f.e$4; e$5 = $f.e$5; e$6 = $f.e$6; e$7 = $f.e$7; edns = $f.edns; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; fv = $f.fv; hexend = $f.hexend; i = $f.i; i$1 = $f.i$1; j = $f.j; j$1 = $f.j$1; length = $f.length; lenmsg = $f.lenmsg; lenrd = $f.lenrd; msg = $f.msg; n = $f.n; name = $f.name; name$1 = $f.name$1; name$2 = $f.name$2; name$3 = $f.name$3; name$4 = $f.name$4; nsec = $f.nsec; off = $f.off; off1 = $f.off1; off1$1 = $f.off1$1; optlen = $f.optlen; s = $f.s; s$1 = $f.s$1; serv = $f.serv; servers = $f.servers; size = $f.size; size$1 = $f.size$1; txt = $f.txt; val = $f.val; window = $f.window; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$56 = $f.x$56; x$57 = $f.x$57; x$58 = $f.x$58; x$59 = $f.x$59; x$6 = $f.x$6; x$60 = $f.x$60; x$61 = $f.x$61; x$62 = $f.x$62; x$63 = $f.x$63; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off1 = 0;
		err = $ifaceNil;
		val = val;
		lenrd = 0;
		lenmsg = msg.$length;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < val.NumField())) { break; } */ if(!(i < val.NumField())) { $s = 2; continue; }
			if (!((lenrd === 0)) && (lenrd === off)) {
				/* break; */ $s = 2; continue;
			}
			if (off > lenmsg) {
				_tmp = lenmsg; _tmp$1 = new Error.ptr("bad offset unpacking"); off1 = _tmp; err = _tmp$1;
				return [off1, err];
			}
			_r = val.Field(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			fv = _r;
			_ref = fv.Kind();
			/* */ if (_ref === 20) { $s = 4; continue; }
			/* */ if (_ref === 23) { $s = 5; continue; }
			/* */ if (_ref === 25) { $s = 6; continue; }
			/* */ if (_ref === 8) { $s = 7; continue; }
			/* */ if (_ref === 9) { $s = 8; continue; }
			/* */ if (_ref === 10) { $s = 9; continue; }
			/* */ if (_ref === 11) { $s = 10; continue; }
			/* */ if (_ref === 24) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* switch (0) { default: if (_ref === 20) { */ case 4:
				_r$1 = fv.Interface(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_ref$1 = _r$1;
				/* */ if ($assertType(_ref$1, PrivateRdata, true)[1]) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if ($assertType(_ref$1, PrivateRdata, true)[1]) { */ case 15:
					data = _ref$1;
					_r$2 = data.Unpack($subslice(msg, off, lenrd)); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple = _r$2; n = _tuple[0]; err$1 = _tuple[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						_tmp$2 = lenmsg; _tmp$3 = err$1; off1 = _tmp$2; err = _tmp$3;
						return [off1, err];
					}
					off = off + (n) >> 0;
					$s = 17; continue;
				/* } else { */ case 16:
					data$1 = _ref$1;
					_tmp$4 = lenmsg; _tmp$5 = new Error.ptr("bad kind interface unpacking"); off1 = _tmp$4; err = _tmp$5;
					return [off1, err];
				/* } */ case 17:
				$s = 13; continue;
			/* } else if (_ref === 23) { */ case 5:
				_r$3 = val.Type().Field(i); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_ref$2 = _r$3.Tag;
				/* */ if (_ref$2 === "dns:\"domain-name\"") { $s = 20; continue; }
				/* */ if (_ref$2 === "dns:\"txt\"") { $s = 21; continue; }
				/* */ if (_ref$2 === "dns:\"opt\"") { $s = 22; continue; }
				/* */ if (_ref$2 === "dns:\"a\"") { $s = 23; continue; }
				/* */ if (_ref$2 === "dns:\"aaaa\"") { $s = 24; continue; }
				/* */ if (_ref$2 === "dns:\"wks\"") { $s = 25; continue; }
				/* */ if (_ref$2 === "dns:\"nsec\"") { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* switch (0) { default: if (_ref$2 === "dns:\"domain-name\"") { */ case 20:
					servers = sliceType$1.nil;
					s = "";
					while (true) {
						if (!(off < lenrd)) { break; }
						_tuple$1 = UnpackDomainName(msg, off); s = _tuple$1[0]; off = _tuple$1[1]; err = _tuple$1[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							_tmp$6 = lenmsg; _tmp$7 = err; off1 = _tmp$6; err = _tmp$7;
							return [off1, err];
						}
						servers = $append(servers, s);
					}
					_r$4 = reflect.ValueOf(servers); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$r = fv.Set(_r$4); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else if (_ref$2 === "dns:\"txt\"") { */ case 21:
					if ((off === lenmsg) || (lenrd === off)) {
						/* break; */ $s = 28; continue;
					}
					txt = sliceType$1.nil;
					_tuple$2 = unpackTxt(msg, off, lenrd); txt = _tuple$2[0]; off = _tuple$2[1]; err = _tuple$2[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$8 = lenmsg; _tmp$9 = err; off1 = _tmp$8; err = _tmp$9;
						return [off1, err];
					}
					_r$5 = reflect.ValueOf(txt); /* */ $s = 31; case 31: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = fv.Set(_r$5); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else if (_ref$2 === "dns:\"opt\"") { */ case 22:
					if (off === lenrd) {
						/* break; */ $s = 28; continue;
					}
					edns = sliceType$6.nil;
					/* Option: */ case 33:
					code = 0;
					if ((off + 2 >> 0) > lenmsg) {
						_tmp$10 = lenmsg; _tmp$11 = new Error.ptr("overflow unpacking opt"); off1 = _tmp$10; err = _tmp$11;
						return [off1, err];
					}
					_tuple$3 = unpackUint16(msg, off); code = _tuple$3[0]; off = _tuple$3[1];
					_tuple$4 = unpackUint16(msg, off); optlen = _tuple$4[0]; off1$1 = _tuple$4[1];
					if ((off1$1 + (optlen >> 0) >> 0) > lenrd) {
						_tmp$12 = lenmsg; _tmp$13 = new Error.ptr("overflow unpacking opt"); off1 = _tmp$12; err = _tmp$13;
						return [off1, err];
					}
					_ref$3 = code;
					if (_ref$3 === 3) {
						e = new EDNS0_NSID.ptr();
						err$2 = e.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							_tmp$14 = lenmsg; _tmp$15 = err$2; off1 = _tmp$14; err = _tmp$15;
							return [off1, err];
						}
						edns = $append(edns, e);
						off = off1$1 + (optlen >> 0) >> 0;
					} else if (_ref$3 === 8 || _ref$3 === 20730) {
						e$1 = new EDNS0_SUBNET.ptr();
						err$3 = e$1.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$3, $ifaceNil))) {
							_tmp$16 = lenmsg; _tmp$17 = err$3; off1 = _tmp$16; err = _tmp$17;
							return [off1, err];
						}
						edns = $append(edns, e$1);
						off = off1$1 + (optlen >> 0) >> 0;
						if (code === 20730) {
							e$1.DraftOption = true;
						}
					} else if (_ref$3 === 2) {
						e$2 = new EDNS0_UL.ptr();
						err$4 = e$2.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$4, $ifaceNil))) {
							_tmp$18 = lenmsg; _tmp$19 = err$4; off1 = _tmp$18; err = _tmp$19;
							return [off1, err];
						}
						edns = $append(edns, e$2);
						off = off1$1 + (optlen >> 0) >> 0;
					} else if (_ref$3 === 1) {
						e$3 = new EDNS0_LLQ.ptr();
						err$5 = e$3.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$5, $ifaceNil))) {
							_tmp$20 = lenmsg; _tmp$21 = err$5; off1 = _tmp$20; err = _tmp$21;
							return [off1, err];
						}
						edns = $append(edns, e$3);
						off = off1$1 + (optlen >> 0) >> 0;
					} else if (_ref$3 === 5) {
						e$4 = new EDNS0_DAU.ptr();
						err$6 = e$4.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$6, $ifaceNil))) {
							_tmp$22 = lenmsg; _tmp$23 = err$6; off1 = _tmp$22; err = _tmp$23;
							return [off1, err];
						}
						edns = $append(edns, e$4);
						off = off1$1 + (optlen >> 0) >> 0;
					} else if (_ref$3 === 6) {
						e$5 = new EDNS0_DHU.ptr();
						err$7 = e$5.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$7, $ifaceNil))) {
							_tmp$24 = lenmsg; _tmp$25 = err$7; off1 = _tmp$24; err = _tmp$25;
							return [off1, err];
						}
						edns = $append(edns, e$5);
						off = off1$1 + (optlen >> 0) >> 0;
					} else if (_ref$3 === 7) {
						e$6 = new EDNS0_N3U.ptr();
						err$8 = e$6.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$8, $ifaceNil))) {
							_tmp$26 = lenmsg; _tmp$27 = err$8; off1 = _tmp$26; err = _tmp$27;
							return [off1, err];
						}
						edns = $append(edns, e$6);
						off = off1$1 + (optlen >> 0) >> 0;
					} else {
						e$7 = new EDNS0_LOCAL.ptr();
						e$7.Code = code;
						err$9 = e$7.unpack($subslice(msg, off1$1, (off1$1 + (optlen >> 0) >> 0)));
						if (!($interfaceIsEqual(err$9, $ifaceNil))) {
							_tmp$28 = lenmsg; _tmp$29 = err$9; off1 = _tmp$28; err = _tmp$29;
							return [off1, err];
						}
						edns = $append(edns, e$7);
						off = off1$1 + (optlen >> 0) >> 0;
					}
					/* */ if (off < lenrd) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (off < lenrd) { */ case 34:
						/* goto Option */ $s = 33; continue;
					/* } */ case 35:
					_r$6 = reflect.ValueOf(edns); /* */ $s = 36; case 36: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = fv.Set(_r$6); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else if (_ref$2 === "dns:\"a\"") { */ case 23:
					_r$7 = val.Type().String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					/* */ if (_r$7 === "dns.IPSECKEY") { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (_r$7 === "dns.IPSECKEY") { */ case 38:
						_r$8 = val.Field(2); /* */ $s = 43; case 43: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$9 = _r$8.Uint(); /* */ $s = 44; case 44: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						/* */ if (!((x = _r$9, (x.$high === 0 && x.$low === 1)))) { $s = 41; continue; }
						/* */ $s = 42; continue;
						/* if (!((x = _r$9, (x.$high === 0 && x.$low === 1)))) { */ case 41:
							i = i + (1) >> 0;
							/* continue; */ $s = 1; continue;
						/* } */ case 42:
					/* } */ case 39:
					if (off === lenrd) {
						/* break; */ $s = 28; continue;
					}
					if ((off + 4 >> 0) > lenrd || (off + 4 >> 0) > lenmsg) {
						_tmp$30 = lenmsg; _tmp$31 = new Error.ptr("overflow unpacking a"); off1 = _tmp$30; err = _tmp$31;
						return [off1, err];
					}
					_r$10 = reflect.ValueOf(net.IPv4(((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]), (x$1 = off + 1 >> 0, ((x$1 < 0 || x$1 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$1])), (x$2 = off + 2 >> 0, ((x$2 < 0 || x$2 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$2])), (x$3 = off + 3 >> 0, ((x$3 < 0 || x$3 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$3])))); /* */ $s = 45; case 45: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$r = fv.Set(_r$10); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					off = off + (4) >> 0;
					$s = 28; continue;
				/* } else if (_ref$2 === "dns:\"aaaa\"") { */ case 24:
					_r$11 = val.Type().String(); /* */ $s = 49; case 49: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (_r$11 === "dns.IPSECKEY") { $s = 47; continue; }
					/* */ $s = 48; continue;
					/* if (_r$11 === "dns.IPSECKEY") { */ case 47:
						_r$12 = val.Field(2); /* */ $s = 52; case 52: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_r$13 = _r$12.Uint(); /* */ $s = 53; case 53: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						/* */ if (!((x$4 = _r$13, (x$4.$high === 0 && x$4.$low === 2)))) { $s = 50; continue; }
						/* */ $s = 51; continue;
						/* if (!((x$4 = _r$13, (x$4.$high === 0 && x$4.$low === 2)))) { */ case 50:
							i = i + (1) >> 0;
							/* continue; */ $s = 1; continue;
						/* } */ case 51:
					/* } */ case 48:
					if (off === lenrd) {
						/* break; */ $s = 28; continue;
					}
					if ((off + 16 >> 0) > lenrd || (off + 16 >> 0) > lenmsg) {
						_tmp$32 = lenmsg; _tmp$33 = new Error.ptr("overflow unpacking aaaa"); off1 = _tmp$32; err = _tmp$33;
						return [off1, err];
					}
					_r$14 = reflect.ValueOf(new net.IP([((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]), (x$5 = off + 1 >> 0, ((x$5 < 0 || x$5 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$5])), (x$6 = off + 2 >> 0, ((x$6 < 0 || x$6 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$6])), (x$7 = off + 3 >> 0, ((x$7 < 0 || x$7 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$7])), (x$8 = off + 4 >> 0, ((x$8 < 0 || x$8 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$8])), (x$9 = off + 5 >> 0, ((x$9 < 0 || x$9 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$9])), (x$10 = off + 6 >> 0, ((x$10 < 0 || x$10 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$10])), (x$11 = off + 7 >> 0, ((x$11 < 0 || x$11 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$11])), (x$12 = off + 8 >> 0, ((x$12 < 0 || x$12 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$12])), (x$13 = off + 9 >> 0, ((x$13 < 0 || x$13 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$13])), (x$14 = off + 10 >> 0, ((x$14 < 0 || x$14 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$14])), (x$15 = off + 11 >> 0, ((x$15 < 0 || x$15 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$15])), (x$16 = off + 12 >> 0, ((x$16 < 0 || x$16 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$16])), (x$17 = off + 13 >> 0, ((x$17 < 0 || x$17 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$17])), (x$18 = off + 14 >> 0, ((x$18 < 0 || x$18 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$18])), (x$19 = off + 15 >> 0, ((x$19 < 0 || x$19 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$19]))])); /* */ $s = 54; case 54: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					$r = fv.Set(_r$14); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					off = off + (16) >> 0;
					$s = 28; continue;
				/* } else if (_ref$2 === "dns:\"wks\"") { */ case 25:
					serv = sliceType$7.nil;
					j = 0;
					while (true) {
						if (!(off < lenrd)) { break; }
						if ((off + 1 >> 0) > lenmsg) {
							_tmp$34 = lenmsg; _tmp$35 = new Error.ptr("overflow unpacking wks"); off1 = _tmp$34; err = _tmp$35;
							return [off1, err];
						}
						b = ((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]);
						if (((b & 128) >>> 0) === 128) {
							serv = $append(serv, (((j * 8 >> 0) + 0 >> 0) << 16 >>> 16));
						}
						if (((b & 64) >>> 0) === 64) {
							serv = $append(serv, (((j * 8 >> 0) + 1 >> 0) << 16 >>> 16));
						}
						if (((b & 32) >>> 0) === 32) {
							serv = $append(serv, (((j * 8 >> 0) + 2 >> 0) << 16 >>> 16));
						}
						if (((b & 16) >>> 0) === 16) {
							serv = $append(serv, (((j * 8 >> 0) + 3 >> 0) << 16 >>> 16));
						}
						if (((b & 8) >>> 0) === 8) {
							serv = $append(serv, (((j * 8 >> 0) + 4 >> 0) << 16 >>> 16));
						}
						if (((b & 4) >>> 0) === 4) {
							serv = $append(serv, (((j * 8 >> 0) + 5 >> 0) << 16 >>> 16));
						}
						if (((b & 2) >>> 0) === 2) {
							serv = $append(serv, (((j * 8 >> 0) + 6 >> 0) << 16 >>> 16));
						}
						if (((b & 1) >>> 0) === 1) {
							serv = $append(serv, (((j * 8 >> 0) + 7 >> 0) << 16 >>> 16));
						}
						j = j + (1) >> 0;
						off = off + (1) >> 0;
					}
					_r$15 = reflect.ValueOf(serv); /* */ $s = 56; case 56: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					$r = fv.Set(_r$15); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else if (_ref$2 === "dns:\"nsec\"") { */ case 26:
					if (off === lenrd) {
						/* break; */ $s = 28; continue;
					}
					if ((off + 2 >> 0) > lenrd || (off + 2 >> 0) > lenmsg) {
						_tmp$36 = lenmsg; _tmp$37 = new Error.ptr("overflow unpacking nsecx"); off1 = _tmp$36; err = _tmp$37;
						return [off1, err];
					}
					nsec = sliceType$7.nil;
					length = 0;
					window = 0;
					while (true) {
						if (!((off + 2 >> 0) < lenrd)) { break; }
						window = (((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]) >> 0);
						length = ((x$20 = off + 1 >> 0, ((x$20 < 0 || x$20 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$20])) >> 0);
						if (length === 0) {
							_tmp$38 = lenmsg; _tmp$39 = new Error.ptr("overflow unpacking nsecx"); off1 = _tmp$38; err = _tmp$39;
							return [off1, err];
						}
						if (length > 32) {
							_tmp$40 = lenmsg; _tmp$41 = new Error.ptr("overflow unpacking nsecx"); off1 = _tmp$40; err = _tmp$41;
							return [off1, err];
						}
						off = off + (2) >> 0;
						j$1 = 0;
						while (true) {
							if (!(j$1 < length)) { break; }
							if (((off + j$1 >> 0) + 1 >> 0) > lenmsg) {
								_tmp$42 = lenmsg; _tmp$43 = new Error.ptr("overflow unpacking nsecx"); off1 = _tmp$42; err = _tmp$43;
								return [off1, err];
							}
							b$1 = (x$21 = off + j$1 >> 0, ((x$21 < 0 || x$21 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$21]));
							if (((b$1 & 128) >>> 0) === 128) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 0 >> 0) << 16 >>> 16));
							}
							if (((b$1 & 64) >>> 0) === 64) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 1 >> 0) << 16 >>> 16));
							}
							if (((b$1 & 32) >>> 0) === 32) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 2 >> 0) << 16 >>> 16));
							}
							if (((b$1 & 16) >>> 0) === 16) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 3 >> 0) << 16 >>> 16));
							}
							if (((b$1 & 8) >>> 0) === 8) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 4 >> 0) << 16 >>> 16));
							}
							if (((b$1 & 4) >>> 0) === 4) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 5 >> 0) << 16 >>> 16));
							}
							if (((b$1 & 2) >>> 0) === 2) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 6 >> 0) << 16 >>> 16));
							}
							if (((b$1 & 1) >>> 0) === 1) {
								nsec = $append(nsec, ((((window * 256 >> 0) + (j$1 * 8 >> 0) >> 0) + 7 >> 0) << 16 >>> 16));
							}
							j$1 = j$1 + (1) >> 0;
						}
						off = off + (length) >> 0;
					}
					_r$16 = reflect.ValueOf(nsec); /* */ $s = 58; case 58: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$r = fv.Set(_r$16); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else { */ case 27:
					_r$17 = val.Type().Field(i); /* */ $s = 60; case 60: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$18 = new reflect.StructTag(_r$17.Tag).Get("dns"); /* */ $s = 61; case 61: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_tmp$44 = lenmsg; _tmp$45 = new Error.ptr("bad tag unpacking slice: " + _r$18); off1 = _tmp$44; err = _tmp$45;
					return [off1, err];
				/* } } */ case 28:
				$s = 13; continue;
			/* } else if (_ref === 25) { */ case 6:
				_r$19 = unpackStructValue(fv, msg, off); /* */ $s = 62; case 62: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_tuple$5 = _r$19; off = _tuple$5[0]; err = _tuple$5[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$46 = lenmsg; _tmp$47 = err; off1 = _tmp$46; err = _tmp$47;
					return [off1, err];
				}
				_r$20 = val.Type().Field(i); /* */ $s = 65; case 65: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ if (_r$20.Name === "Hdr") { $s = 63; continue; }
				/* */ $s = 64; continue;
				/* if (_r$20.Name === "Hdr") { */ case 63:
					_r$21 = val.FieldByName("Hdr"); /* */ $s = 66; case 66: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_r$22 = _r$21.FieldByName("Rdlength"); /* */ $s = 67; case 67: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_r$23 = _r$22.Uint(); /* */ $s = 68; case 68: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					lenrd = off + (_r$23.$low >> 0) >> 0;
				/* } */ case 64:
				$s = 13; continue;
			/* } else if (_ref === 8) { */ case 7:
				if (off === lenmsg) {
					/* break; */ $s = 13; continue;
				}
				if ((off + 1 >> 0) > lenmsg) {
					_tmp$48 = lenmsg; _tmp$49 = new Error.ptr("overflow unpacking uint8"); off1 = _tmp$48; err = _tmp$49;
					return [off1, err];
				}
				fv.SetUint(new $Uint64(0, ((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off])));
				off = off + (1) >> 0;
				$s = 13; continue;
			/* } else if (_ref === 9) { */ case 8:
				if (off === lenmsg) {
					/* break; */ $s = 13; continue;
				}
				i$1 = 0;
				if ((off + 2 >> 0) > lenmsg) {
					_tmp$50 = lenmsg; _tmp$51 = new Error.ptr("overflow unpacking uint16"); off1 = _tmp$50; err = _tmp$51;
					return [off1, err];
				}
				_tuple$6 = unpackUint16(msg, off); i$1 = _tuple$6[0]; off = _tuple$6[1];
				fv.SetUint(new $Uint64(0, i$1));
				$s = 13; continue;
			/* } else if (_ref === 10) { */ case 9:
				if (off === lenmsg) {
					/* break; */ $s = 13; continue;
				}
				if ((off + 4 >> 0) > lenmsg) {
					_tmp$52 = lenmsg; _tmp$53 = new Error.ptr("overflow unpacking uint32"); off1 = _tmp$52; err = _tmp$53;
					return [off1, err];
				}
				fv.SetUint(new $Uint64(0, ((((((((((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]) >>> 0) << 24 >>> 0) | (((x$22 = off + 1 >> 0, ((x$22 < 0 || x$22 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$22])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$23 = off + 2 >> 0, ((x$23 < 0 || x$23 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$23])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$24 = off + 3 >> 0, ((x$24 < 0 || x$24 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$24])) >>> 0)) >>> 0)));
				off = off + (4) >> 0;
				$s = 13; continue;
			/* } else if (_ref === 11) { */ case 10:
				_r$24 = val.Type().Field(i); /* */ $s = 69; case 69: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_ref$4 = _r$24.Tag;
				/* */ if (_ref$4 === "dns:\"uint48\"") { $s = 70; continue; }
				/* */ $s = 71; continue;
				/* if (_ref$4 === "dns:\"uint48\"") { */ case 70:
					if ((off + 6 >> 0) > lenmsg) {
						_tmp$54 = lenmsg; _tmp$55 = new Error.ptr("overflow unpacking uint64 as uint48"); off1 = _tmp$54; err = _tmp$55;
						return [off1, err];
					}
					fv.SetUint((x$25 = (x$26 = (x$27 = (x$28 = (x$29 = $shiftLeft64(new $Uint64(0, ((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off])), 40), x$30 = $shiftLeft64(new $Uint64(0, (x$31 = off + 1 >> 0, ((x$31 < 0 || x$31 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$31]))), 32), new $Uint64(x$29.$high | x$30.$high, (x$29.$low | x$30.$low) >>> 0)), x$32 = $shiftLeft64(new $Uint64(0, (x$33 = off + 2 >> 0, ((x$33 < 0 || x$33 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$33]))), 24), new $Uint64(x$28.$high | x$32.$high, (x$28.$low | x$32.$low) >>> 0)), x$34 = $shiftLeft64(new $Uint64(0, (x$35 = off + 3 >> 0, ((x$35 < 0 || x$35 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$35]))), 16), new $Uint64(x$27.$high | x$34.$high, (x$27.$low | x$34.$low) >>> 0)), x$36 = $shiftLeft64(new $Uint64(0, (x$37 = off + 4 >> 0, ((x$37 < 0 || x$37 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$37]))), 8), new $Uint64(x$26.$high | x$36.$high, (x$26.$low | x$36.$low) >>> 0)), x$38 = new $Uint64(0, (x$39 = off + 5 >> 0, ((x$39 < 0 || x$39 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$39]))), new $Uint64(x$25.$high | x$38.$high, (x$25.$low | x$38.$low) >>> 0)));
					off = off + (6) >> 0;
					$s = 72; continue;
				/* } else { */ case 71:
					if ((off + 8 >> 0) > lenmsg) {
						_tmp$56 = lenmsg; _tmp$57 = new Error.ptr("overflow unpacking uint64"); off1 = _tmp$56; err = _tmp$57;
						return [off1, err];
					}
					fv.SetUint((x$40 = (x$41 = (x$42 = (x$43 = (x$44 = (x$45 = (x$46 = $shiftLeft64(new $Uint64(0, ((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off])), 56), x$47 = $shiftLeft64(new $Uint64(0, (x$48 = off + 1 >> 0, ((x$48 < 0 || x$48 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$48]))), 48), new $Uint64(x$46.$high | x$47.$high, (x$46.$low | x$47.$low) >>> 0)), x$49 = $shiftLeft64(new $Uint64(0, (x$50 = off + 2 >> 0, ((x$50 < 0 || x$50 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$50]))), 40), new $Uint64(x$45.$high | x$49.$high, (x$45.$low | x$49.$low) >>> 0)), x$51 = $shiftLeft64(new $Uint64(0, (x$52 = off + 3 >> 0, ((x$52 < 0 || x$52 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$52]))), 32), new $Uint64(x$44.$high | x$51.$high, (x$44.$low | x$51.$low) >>> 0)), x$53 = $shiftLeft64(new $Uint64(0, (x$54 = off + 4 >> 0, ((x$54 < 0 || x$54 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$54]))), 24), new $Uint64(x$43.$high | x$53.$high, (x$43.$low | x$53.$low) >>> 0)), x$55 = $shiftLeft64(new $Uint64(0, (x$56 = off + 5 >> 0, ((x$56 < 0 || x$56 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$56]))), 16), new $Uint64(x$42.$high | x$55.$high, (x$42.$low | x$55.$low) >>> 0)), x$57 = $shiftLeft64(new $Uint64(0, (x$58 = off + 6 >> 0, ((x$58 < 0 || x$58 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$58]))), 8), new $Uint64(x$41.$high | x$57.$high, (x$41.$low | x$57.$low) >>> 0)), x$59 = new $Uint64(0, (x$60 = off + 7 >> 0, ((x$60 < 0 || x$60 >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x$60]))), new $Uint64(x$40.$high | x$59.$high, (x$40.$low | x$59.$low) >>> 0)));
					off = off + (8) >> 0;
				/* } */ case 72:
				$s = 13; continue;
			/* } else if (_ref === 24) { */ case 11:
				s$1 = "";
				if (off === lenmsg) {
					/* break; */ $s = 13; continue;
				}
				_r$25 = val.Type().Field(i); /* */ $s = 73; case 73: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_ref$5 = _r$25.Tag;
				/* */ if (_ref$5 === "dns:\"hex\"") { $s = 74; continue; }
				/* */ if (_ref$5 === "dns:\"base64\"") { $s = 75; continue; }
				/* */ if (_ref$5 === "dns:\"cdomain-name\"") { $s = 76; continue; }
				/* */ if (_ref$5 === "dns:\"domain-name\"") { $s = 77; continue; }
				/* */ if (_ref$5 === "dns:\"size-base32\"") { $s = 78; continue; }
				/* */ if (_ref$5 === "dns:\"size-hex\"") { $s = 79; continue; }
				/* */ if (_ref$5 === "dns:\"txt\"") { $s = 80; continue; }
				/* */ if (_ref$5 === "") { $s = 81; continue; }
				/* */ $s = 82; continue;
				/* switch (0) { default: if (_ref$5 === "dns:\"hex\"") { */ case 74:
					hexend = lenrd;
					_r$26 = val.FieldByName("Hdr"); /* */ $s = 86; case 86: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_r$27 = _r$26.FieldByName("Rrtype"); /* */ $s = 87; case 87: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_r$28 = _r$27.Uint(); /* */ $s = 88; case 88: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					/* */ if ((x$61 = _r$28, (x$61.$high === 0 && x$61.$low === 55))) { $s = 84; continue; }
					/* */ $s = 85; continue;
					/* if ((x$61 = _r$28, (x$61.$high === 0 && x$61.$low === 55))) { */ case 84:
						_r$29 = val.FieldByName("HitLength"); /* */ $s = 89; case 89: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						_r$30 = _r$29.Uint(); /* */ $s = 90; case 90: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
						hexend = off + (_r$30.$low >> 0) >> 0;
					/* } */ case 85:
					if (hexend > lenrd || hexend > lenmsg) {
						_tmp$58 = lenmsg; _tmp$59 = new Error.ptr("overflow unpacking hex"); off1 = _tmp$58; err = _tmp$59;
						return [off1, err];
					}
					s$1 = hex.EncodeToString($subslice(msg, off, hexend));
					off = hexend;
					$s = 83; continue;
				/* } else if (_ref$5 === "dns:\"base64\"") { */ case 75:
					b64end = lenrd;
					_r$31 = val.FieldByName("Hdr"); /* */ $s = 93; case 93: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					_r$32 = _r$31.FieldByName("Rrtype"); /* */ $s = 94; case 94: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					_r$33 = _r$32.Uint(); /* */ $s = 95; case 95: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					/* */ if ((x$62 = _r$33, (x$62.$high === 0 && x$62.$low === 55))) { $s = 91; continue; }
					/* */ $s = 92; continue;
					/* if ((x$62 = _r$33, (x$62.$high === 0 && x$62.$low === 55))) { */ case 91:
						_r$34 = val.FieldByName("PublicKeyLength"); /* */ $s = 96; case 96: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
						_r$35 = _r$34.Uint(); /* */ $s = 97; case 97: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
						b64end = off + (_r$35.$low >> 0) >> 0;
					/* } */ case 92:
					if (b64end > lenrd || b64end > lenmsg) {
						_tmp$60 = lenmsg; _tmp$61 = new Error.ptr("overflow unpacking base64"); off1 = _tmp$60; err = _tmp$61;
						return [off1, err];
					}
					s$1 = toBase64($subslice(msg, off, b64end));
					off = b64end;
					$s = 83; continue;
				/* } else if (_ref$5 === "dns:\"cdomain-name\"") { */ case 76:
					_r$36 = val.Type().String(); /* */ $s = 100; case 100: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					/* */ if (_r$36 === "dns.IPSECKEY") { $s = 98; continue; }
					/* */ $s = 99; continue;
					/* if (_r$36 === "dns.IPSECKEY") { */ case 98:
						_r$37 = val.Field(2); /* */ $s = 101; case 101: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						_r$38 = _r$37.Uint(); /* */ $s = 102; case 102: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
						x$63 = _r$38;
						if ((x$63.$high === 0 && x$63.$low === 1) || (x$63.$high === 0 && x$63.$low === 2)) {
							i = i + (1) >> 0;
							/* continue; */ $s = 1; continue;
						}
					/* } */ case 99:
					if (off === lenmsg) {
						/* break; */ $s = 83; continue;
					}
					_tuple$7 = UnpackDomainName(msg, off); s$1 = _tuple$7[0]; off = _tuple$7[1]; err = _tuple$7[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$62 = lenmsg; _tmp$63 = err; off1 = _tmp$62; err = _tmp$63;
						return [off1, err];
					}
					$s = 83; continue;
				/* } else if (_ref$5 === "dns:\"domain-name\"") { */ case 77:
					_r$39 = val.Type().String(); /* */ $s = 105; case 105: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					/* */ if (_r$39 === "dns.IPSECKEY") { $s = 103; continue; }
					/* */ $s = 104; continue;
					/* if (_r$39 === "dns.IPSECKEY") { */ case 103:
						_r$40 = val.Field(2); /* */ $s = 106; case 106: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						_r$41 = _r$40.Uint(); /* */ $s = 107; case 107: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						x$63 = _r$41;
						if ((x$63.$high === 0 && x$63.$low === 1) || (x$63.$high === 0 && x$63.$low === 2)) {
							i = i + (1) >> 0;
							/* continue; */ $s = 1; continue;
						}
					/* } */ case 104:
					if (off === lenmsg) {
						/* break; */ $s = 83; continue;
					}
					_tuple$8 = UnpackDomainName(msg, off); s$1 = _tuple$8[0]; off = _tuple$8[1]; err = _tuple$8[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						_tmp$64 = lenmsg; _tmp$65 = err; off1 = _tmp$64; err = _tmp$65;
						return [off1, err];
					}
					$s = 83; continue;
				/* } else if (_ref$5 === "dns:\"size-base32\"") { */ case 78:
					size = 0;
					_r$42 = val.Type().Name(); /* */ $s = 108; case 108: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
					_ref$6 = _r$42;
					/* */ if (_ref$6 === "NSEC3") { $s = 109; continue; }
					/* */ $s = 110; continue;
					/* if (_ref$6 === "NSEC3") { */ case 109:
						_r$43 = val.Type().Field(i); /* */ $s = 111; case 111: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
						_ref$7 = _r$43.Name;
						/* */ if (_ref$7 === "NextDomain") { $s = 112; continue; }
						/* */ $s = 113; continue;
						/* if (_ref$7 === "NextDomain") { */ case 112:
							_r$44 = val.FieldByName("HashLength"); /* */ $s = 114; case 114: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
							name = _r$44;
							size = (name.Uint().$low >> 0);
						/* } */ case 113:
					/* } */ case 110:
					if ((off + size >> 0) > lenmsg) {
						_tmp$66 = lenmsg; _tmp$67 = new Error.ptr("overflow unpacking base32"); off1 = _tmp$66; err = _tmp$67;
						return [off1, err];
					}
					s$1 = toBase32($subslice(msg, off, (off + size >> 0)));
					off = off + (size) >> 0;
					$s = 83; continue;
				/* } else if (_ref$5 === "dns:\"size-hex\"") { */ case 79:
					size$1 = 0;
					_r$45 = val.Type().Name(); /* */ $s = 115; case 115: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
					_ref$8 = _r$45;
					/* */ if (_ref$8 === "NSEC3") { $s = 116; continue; }
					/* */ if (_ref$8 === "TSIG") { $s = 117; continue; }
					/* */ $s = 118; continue;
					/* if (_ref$8 === "NSEC3") { */ case 116:
						_r$46 = val.Type().Field(i); /* */ $s = 119; case 119: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
						_ref$9 = _r$46.Name;
						/* */ if (_ref$9 === "Salt") { $s = 120; continue; }
						/* */ if (_ref$9 === "NextDomain") { $s = 121; continue; }
						/* */ $s = 122; continue;
						/* if (_ref$9 === "Salt") { */ case 120:
							_r$47 = val.FieldByName("SaltLength"); /* */ $s = 123; case 123: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
							name$1 = _r$47;
							size$1 = (name$1.Uint().$low >> 0);
							$s = 122; continue;
						/* } else if (_ref$9 === "NextDomain") { */ case 121:
							_r$48 = val.FieldByName("HashLength"); /* */ $s = 124; case 124: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
							name$2 = _r$48;
							size$1 = (name$2.Uint().$low >> 0);
						/* } */ case 122:
						$s = 118; continue;
					/* } else if (_ref$8 === "TSIG") { */ case 117:
						_r$49 = val.Type().Field(i); /* */ $s = 125; case 125: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
						_ref$10 = _r$49.Name;
						/* */ if (_ref$10 === "MAC") { $s = 126; continue; }
						/* */ if (_ref$10 === "OtherData") { $s = 127; continue; }
						/* */ $s = 128; continue;
						/* if (_ref$10 === "MAC") { */ case 126:
							_r$50 = val.FieldByName("MACSize"); /* */ $s = 129; case 129: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
							name$3 = _r$50;
							size$1 = (name$3.Uint().$low >> 0);
							$s = 128; continue;
						/* } else if (_ref$10 === "OtherData") { */ case 127:
							_r$51 = val.FieldByName("OtherLen"); /* */ $s = 130; case 130: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
							name$4 = _r$51;
							size$1 = (name$4.Uint().$low >> 0);
						/* } */ case 128:
					/* } */ case 118:
					if ((off + size$1 >> 0) > lenmsg) {
						_tmp$68 = lenmsg; _tmp$69 = new Error.ptr("overflow unpacking hex"); off1 = _tmp$68; err = _tmp$69;
						return [off1, err];
					}
					s$1 = hex.EncodeToString($subslice(msg, off, (off + size$1 >> 0)));
					off = off + (size$1) >> 0;
					$s = 83; continue;
				/* } else if (_ref$5 === "dns:\"txt\"") { */ case 80:
					_tuple$9 = unpackTxtString(msg, off); s$1 = _tuple$9[0]; off = _tuple$9[1]; err = _tuple$9[2];
					$s = 83; continue;
				/* } else if (_ref$5 === "") { */ case 81:
					_tuple$10 = unpackTxtString(msg, off); s$1 = _tuple$10[0]; off = _tuple$10[1]; err = _tuple$10[2];
					$s = 83; continue;
				/* } else { */ case 82:
					_r$52 = val.Type().Field(i); /* */ $s = 131; case 131: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
					_r$53 = new reflect.StructTag(_r$52.Tag).Get("dns"); /* */ $s = 132; case 132: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
					_tmp$70 = lenmsg; _tmp$71 = new Error.ptr("bad tag unpacking string: " + _r$53); off1 = _tmp$70; err = _tmp$71;
					return [off1, err];
				/* } } */ case 83:
				fv.SetString(s$1);
				$s = 13; continue;
			/* } else { */ case 12:
				_tmp$72 = lenmsg; _tmp$73 = new Error.ptr("bad kind unpacking"); off1 = _tmp$72; err = _tmp$73;
				return [off1, err];
			/* } } */ case 13:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$74 = off; _tmp$75 = $ifaceNil; off1 = _tmp$74; err = _tmp$75;
		return [off1, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: unpackStructValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$5 = _r$5; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$10 = _ref$10; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$44 = _tmp$44; $f._tmp$45 = _tmp$45; $f._tmp$46 = _tmp$46; $f._tmp$47 = _tmp$47; $f._tmp$48 = _tmp$48; $f._tmp$49 = _tmp$49; $f._tmp$5 = _tmp$5; $f._tmp$50 = _tmp$50; $f._tmp$51 = _tmp$51; $f._tmp$52 = _tmp$52; $f._tmp$53 = _tmp$53; $f._tmp$54 = _tmp$54; $f._tmp$55 = _tmp$55; $f._tmp$56 = _tmp$56; $f._tmp$57 = _tmp$57; $f._tmp$58 = _tmp$58; $f._tmp$59 = _tmp$59; $f._tmp$6 = _tmp$6; $f._tmp$60 = _tmp$60; $f._tmp$61 = _tmp$61; $f._tmp$62 = _tmp$62; $f._tmp$63 = _tmp$63; $f._tmp$64 = _tmp$64; $f._tmp$65 = _tmp$65; $f._tmp$66 = _tmp$66; $f._tmp$67 = _tmp$67; $f._tmp$68 = _tmp$68; $f._tmp$69 = _tmp$69; $f._tmp$7 = _tmp$7; $f._tmp$70 = _tmp$70; $f._tmp$71 = _tmp$71; $f._tmp$72 = _tmp$72; $f._tmp$73 = _tmp$73; $f._tmp$74 = _tmp$74; $f._tmp$75 = _tmp$75; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.b = b; $f.b$1 = b$1; $f.b64end = b64end; $f.code = code; $f.data = data; $f.data$1 = data$1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.e$3 = e$3; $f.e$4 = e$4; $f.e$5 = e$5; $f.e$6 = e$6; $f.e$7 = e$7; $f.edns = edns; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.fv = fv; $f.hexend = hexend; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.j$1 = j$1; $f.length = length; $f.lenmsg = lenmsg; $f.lenrd = lenrd; $f.msg = msg; $f.n = n; $f.name = name; $f.name$1 = name$1; $f.name$2 = name$2; $f.name$3 = name$3; $f.name$4 = name$4; $f.nsec = nsec; $f.off = off; $f.off1 = off1; $f.off1$1 = off1$1; $f.optlen = optlen; $f.s = s; $f.s$1 = s$1; $f.serv = serv; $f.servers = servers; $f.size = size; $f.size$1 = size$1; $f.txt = txt; $f.val = val; $f.window = window; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$56 = x$56; $f.x$57 = x$57; $f.x$58 = x$58; $f.x$59 = x$59; $f.x$6 = x$6; $f.x$60 = x$60; $f.x$61 = x$61; $f.x$62 = x$62; $f.x$63 = x$63; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	isDigit = function(b) {
		var $ptr, b;
		return b >= 48 && b <= 57;
	};
	dddToByte = function(s) {
		var $ptr, s;
		return ((((((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) - 48 << 24 >>> 24)) * 100 << 24 >>> 24) + ((((1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1]) - 48 << 24 >>> 24)) * 10 << 24 >>> 24) << 24 >>> 24) + (((2 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 2]) - 48 << 24 >>> 24)) << 24 >>> 24);
	};
	UnpackStruct = function(any, msg, off) {
		var $ptr, _r, _r$1, any, msg, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; any = $f.any; msg = $f.msg; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = structValue(any); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unpackStructValue(_r, msg, off); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnpackStruct }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.any = any; $f.msg = msg; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.UnpackStruct = UnpackStruct;
	intToBytes = function(i, length) {
		var $ptr, b, buf, i, length;
		buf = i.Bytes();
		if (buf.$length < length) {
			b = $makeSlice(sliceType, length);
			$copySlice($subslice(b, (length - buf.$length >> 0)), buf);
			return b;
		}
		return buf;
	};
	unpackUint16 = function(msg, off) {
		var $ptr, msg, off, x;
		return [(((((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]) << 16 >>> 16) << 8 << 16 >>> 16) | ((x = off + 1 >> 0, ((x < 0 || x >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x])) << 16 >>> 16)) >>> 0, off + 2 >> 0];
	};
	packUint16 = function(i) {
		var $ptr, i;
		return [((i >>> 8 << 16 >>> 16) << 24 >>> 24), (i << 24 >>> 24)];
	};
	toBase32 = function(b) {
		var $ptr, b;
		return base32.HexEncoding.EncodeToString(b);
	};
	fromBase32 = function(s) {
		var $ptr, _r, _tuple, buf, buflen, err, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; buflen = $f.buflen; err = $f.err; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = sliceType.nil;
		err = $ifaceNil;
		buflen = base32.HexEncoding.DecodedLen(s.$length);
		buf = $makeSlice(sliceType, buflen);
		_r = base32.HexEncoding.Decode(buf, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		buf = $subslice(buf, 0, n);
		return [buf, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: fromBase32 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.buflen = buflen; $f.err = err; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	toBase64 = function(b) {
		var $ptr, b;
		return base64.StdEncoding.EncodeToString(b);
	};
	fromBase64 = function(s) {
		var $ptr, _r, _tuple, buf, buflen, err, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; buflen = $f.buflen; err = $f.err; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = sliceType.nil;
		err = $ifaceNil;
		buflen = base64.StdEncoding.DecodedLen(s.$length);
		buf = $makeSlice(sliceType, buflen);
		_r = base64.StdEncoding.Decode(buf, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		buf = $subslice(buf, 0, n);
		return [buf, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: fromBase64 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.buflen = buflen; $f.err = err; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PackRR = function(rr, msg, off, compression, compress) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, compress, compression, err, msg, off, off1, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; compress = $f.compress; compression = $f.compression; err = $f.err; msg = $f.msg; off = $f.off; off1 = $f.off1; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		off1 = 0;
		err = $ifaceNil;
		if ($interfaceIsEqual(rr, $ifaceNil)) {
			_tmp = msg.$length; _tmp$1 = new Error.ptr("nil rr"); off1 = _tmp; err = _tmp$1;
			return [off1, err];
		}
		_r = packStructCompress(rr, msg, off, compression, compress); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; off1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = msg.$length; _tmp$3 = err; off1 = _tmp$2; err = _tmp$3;
			return [off1, err];
		}
		if (rawSetRdlength(msg, off, off1)) {
			_tmp$4 = off1; _tmp$5 = $ifaceNil; off1 = _tmp$4; err = _tmp$5;
			return [off1, err];
		}
		_tmp$6 = off; _tmp$7 = $pkg.ErrRdata; off1 = _tmp$6; err = _tmp$7;
		return [off1, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PackRR }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.compress = compress; $f.compression = compression; $f.err = err; $f.msg = msg; $f.off = off; $f.off1 = off1; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PackRR = PackRR;
	UnpackRR = function(msg, off) {
		var $ptr, _entry, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, _tuple$1, _tuple$2, end, err, h, known, mk, msg, off, off0, off1, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; end = $f.end; err = $f.err; h = $f.h; known = $f.known; mk = $f.mk; msg = $f.msg; off = $f.off; off0 = $f.off0; off1 = $f.off1; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = [h];
		rr = $ifaceNil;
		off1 = 0;
		err = $ifaceNil;
		h[0] = $clone(new RR_Header.ptr(), RR_Header);
		off0 = off;
		_r = UnpackStruct(h[0], msg, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; off = _tuple[0]; err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_tmp = $ifaceNil; _tmp$1 = msg.$length; _tmp$2 = err; rr = _tmp; off1 = _tmp$1; err = _tmp$2;
			return [rr, off1, err];
		/* } */ case 3:
		end = off + (h[0].Rdlength >> 0) >> 0;
		_tuple$1 = (_entry = typeToRR[$Uint16.keyFor(h[0].Rrtype)], _entry !== undefined ? [_entry.v, true] : [$throwNilPointerError, false]); mk = _tuple$1[0]; known = _tuple$1[1];
		/* */ if (!known) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!known) { */ case 4:
			rr = new RFC3597.ptr();
			$s = 6; continue;
		/* } else { */ case 5:
			_r$1 = mk(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			rr = _r$1;
		/* } */ case 6:
		_r$2 = UnpackStruct(rr, msg, off0); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2; off = _tuple$2[0]; err = _tuple$2[1];
		if (!((off === end))) {
			_tmp$3 = h[0]; _tmp$4 = end; _tmp$5 = new Error.ptr("bad rdlength"); rr = _tmp$3; off1 = _tmp$4; err = _tmp$5;
			return [rr, off1, err];
		}
		_tmp$6 = rr; _tmp$7 = off; _tmp$8 = err; rr = _tmp$6; off1 = _tmp$7; err = _tmp$8;
		return [rr, off1, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnpackRR }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.end = end; $f.err = err; $f.h = h; $f.known = known; $f.mk = mk; $f.msg = msg; $f.off = off; $f.off0 = off0; $f.off1 = off1; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.UnpackRR = UnpackRR;
	reverseInt8 = function(m) {
		var $ptr, _entry, _i, _key$10, _keys, _ref, m, n, s, u;
		n = new $Map();
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			u = _entry.k;
			s = _entry.v;
			_key$10 = s; (n || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: u };
			_i++;
		}
		return n;
	};
	reverseInt16 = function(m) {
		var $ptr, _entry, _i, _key$10, _keys, _ref, m, n, s, u;
		n = new $Map();
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			u = _entry.k;
			s = _entry.v;
			_key$10 = s; (n || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: u };
			_i++;
		}
		return n;
	};
	reverseInt = function(m) {
		var $ptr, _entry, _i, _key$10, _keys, _ref, m, n, s, u;
		n = new $Map();
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			u = _entry.k;
			s = _entry.v;
			_key$10 = s; (n || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: u };
			_i++;
		}
		return n;
	};
	MsgHdr.ptr.prototype.String = function() {
		var $ptr, _entry, _entry$1, h, s;
		h = this;
		if (h === ptrType$38.nil) {
			return "<nil> MsgHdr";
		}
		s = ";; opcode: " + (_entry = $pkg.OpcodeToString[$Int.keyFor(h.Opcode)], _entry !== undefined ? _entry.v : "");
		s = s + (", status: " + (_entry$1 = $pkg.RcodeToString[$Int.keyFor(h.Rcode)], _entry$1 !== undefined ? _entry$1.v : ""));
		s = s + (", id: " + strconv.Itoa((h.Id >> 0)) + "\n");
		s = s + (";; flags:");
		if (h.Response) {
			s = s + (" qr");
		}
		if (h.Authoritative) {
			s = s + (" aa");
		}
		if (h.Truncated) {
			s = s + (" tc");
		}
		if (h.RecursionDesired) {
			s = s + (" rd");
		}
		if (h.RecursionAvailable) {
			s = s + (" ra");
		}
		if (h.Zero) {
			s = s + (" z");
		}
		if (h.AuthenticatedData) {
			s = s + (" ad");
		}
		if (h.CheckingDisabled) {
			s = s + (" cd");
		}
		s = s + (";");
		return s;
	};
	MsgHdr.prototype.String = function() { return this.$val.String(); };
	Msg.ptr.prototype.Pack = function() {
		var $ptr, _r, _tuple, dns, err, msg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dns = $f.dns; err = $f.err; msg = $f.msg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		msg = sliceType.nil;
		err = $ifaceNil;
		dns = this;
		_r = dns.PackBuffer(sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; msg = _tuple[0]; err = _tuple[1];
		return [msg, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.Pack }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dns = dns; $f.err = err; $f.msg = msg; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.Pack = function() { return this.$val.Pack(); };
	Msg.ptr.prototype.PackBuffer = function(buf) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, answer, buf, compress, compression, dh, dns, err, extra, i, i$1, i$2, i$3, msg, ns, off, opt, packLen, question, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; answer = $f.answer; buf = $f.buf; compress = $f.compress; compression = $f.compression; dh = $f.dh; dns = $f.dns; err = $f.err; extra = $f.extra; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; msg = $f.msg; ns = $f.ns; off = $f.off; opt = $f.opt; packLen = $f.packLen; question = $f.question; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dh = [dh];
		msg = sliceType.nil;
		err = $ifaceNil;
		dns = this;
		dh[0] = $clone(new Header.ptr(), Header);
		compression = false;
		if (dns.Compress) {
			compression = new $Map();
		}
		if (dns.MsgHdr.Rcode < 0 || dns.MsgHdr.Rcode > 4095) {
			_tmp = sliceType.nil; _tmp$1 = $pkg.ErrRcode; msg = _tmp; err = _tmp$1;
			return [msg, err];
		}
		/* */ if (dns.MsgHdr.Rcode > 15) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dns.MsgHdr.Rcode > 15) { */ case 1:
			_r = dns.IsEdns0(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			opt = _r;
			if (opt === ptrType$2.nil) {
				_tmp$2 = sliceType.nil; _tmp$3 = $pkg.ErrExtendedRcode; msg = _tmp$2; err = _tmp$3;
				return [msg, err];
			}
			opt.SetExtendedRcode(((dns.MsgHdr.Rcode >> 4 >> 0) << 24 >>> 24));
			dns.MsgHdr.Rcode = dns.MsgHdr.Rcode & (15);
		/* } */ case 2:
		dh[0].Id = dns.MsgHdr.Id;
		dh[0].Bits = (((dns.MsgHdr.Opcode << 16 >>> 16) << 11 << 16 >>> 16) | (dns.MsgHdr.Rcode << 16 >>> 16)) >>> 0;
		if (dns.MsgHdr.Response) {
			dh[0].Bits = (dh[0].Bits | (32768)) >>> 0;
		}
		if (dns.MsgHdr.Authoritative) {
			dh[0].Bits = (dh[0].Bits | (1024)) >>> 0;
		}
		if (dns.MsgHdr.Truncated) {
			dh[0].Bits = (dh[0].Bits | (512)) >>> 0;
		}
		if (dns.MsgHdr.RecursionDesired) {
			dh[0].Bits = (dh[0].Bits | (256)) >>> 0;
		}
		if (dns.MsgHdr.RecursionAvailable) {
			dh[0].Bits = (dh[0].Bits | (128)) >>> 0;
		}
		if (dns.MsgHdr.Zero) {
			dh[0].Bits = (dh[0].Bits | (64)) >>> 0;
		}
		if (dns.MsgHdr.AuthenticatedData) {
			dh[0].Bits = (dh[0].Bits | (32)) >>> 0;
		}
		if (dns.MsgHdr.CheckingDisabled) {
			dh[0].Bits = (dh[0].Bits | (16)) >>> 0;
		}
		question = dns.Question;
		answer = dns.Answer;
		ns = dns.Ns;
		extra = dns.Extra;
		dh[0].Qdcount = (question.$length << 16 >>> 16);
		dh[0].Ancount = (answer.$length << 16 >>> 16);
		dh[0].Nscount = (ns.$length << 16 >>> 16);
		dh[0].Arcount = (extra.$length << 16 >>> 16);
		msg = buf;
		compress = dns.Compress;
		dns.Compress = false;
		_r$1 = dns.Len(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		packLen = _r$1 + 1 >> 0;
		/* */ if (msg.$length < packLen) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (msg.$length < packLen) { */ case 5:
			msg = $makeSlice(sliceType, packLen);
		/* } */ case 6:
		dns.Compress = compress;
		off = 0;
		_r$2 = packStructCompress(dh[0], msg, off, compression, dns.Compress); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2; off = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = sliceType.nil; _tmp$5 = err; msg = _tmp$4; err = _tmp$5;
			return [msg, err];
		}
		i = 0;
		/* while (true) { */ case 8:
			/* if (!(i < question.$length)) { break; } */ if(!(i < question.$length)) { $s = 9; continue; }
			_r$3 = packStructCompress(((i < 0 || i >= question.$length) ? $throwRuntimeError("index out of range") : question.$array[question.$offset + i]), msg, off, compression, dns.Compress); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3; off = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = sliceType.nil; _tmp$7 = err; msg = _tmp$6; err = _tmp$7;
				return [msg, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 8; continue; case 9:
		i$1 = 0;
		/* while (true) { */ case 11:
			/* if (!(i$1 < answer.$length)) { break; } */ if(!(i$1 < answer.$length)) { $s = 12; continue; }
			_r$4 = PackRR(((i$1 < 0 || i$1 >= answer.$length) ? $throwRuntimeError("index out of range") : answer.$array[answer.$offset + i$1]), msg, off, compression, dns.Compress); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4; off = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$8 = sliceType.nil; _tmp$9 = err; msg = _tmp$8; err = _tmp$9;
				return [msg, err];
			}
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		i$2 = 0;
		/* while (true) { */ case 14:
			/* if (!(i$2 < ns.$length)) { break; } */ if(!(i$2 < ns.$length)) { $s = 15; continue; }
			_r$5 = PackRR(((i$2 < 0 || i$2 >= ns.$length) ? $throwRuntimeError("index out of range") : ns.$array[ns.$offset + i$2]), msg, off, compression, dns.Compress); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$3 = _r$5; off = _tuple$3[0]; err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$10 = sliceType.nil; _tmp$11 = err; msg = _tmp$10; err = _tmp$11;
				return [msg, err];
			}
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 14; continue; case 15:
		i$3 = 0;
		/* while (true) { */ case 17:
			/* if (!(i$3 < extra.$length)) { break; } */ if(!(i$3 < extra.$length)) { $s = 18; continue; }
			_r$6 = PackRR(((i$3 < 0 || i$3 >= extra.$length) ? $throwRuntimeError("index out of range") : extra.$array[extra.$offset + i$3]), msg, off, compression, dns.Compress); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$4 = _r$6; off = _tuple$4[0]; err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$12 = sliceType.nil; _tmp$13 = err; msg = _tmp$12; err = _tmp$13;
				return [msg, err];
			}
			i$3 = i$3 + (1) >> 0;
		/* } */ $s = 17; continue; case 18:
		_tmp$14 = $subslice(msg, 0, off); _tmp$15 = $ifaceNil; msg = _tmp$14; err = _tmp$15;
		return [msg, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.PackBuffer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.answer = answer; $f.buf = buf; $f.compress = compress; $f.compression = compression; $f.dh = dh; $f.dns = dns; $f.err = err; $f.extra = extra; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.msg = msg; $f.ns = ns; $f.off = off; $f.opt = opt; $f.packLen = packLen; $f.question = question; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.PackBuffer = function(buf) { return this.$val.PackBuffer(buf); };
	Msg.ptr.prototype.Unpack = function(msg) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, dh, dns, err, i, i$1, i$2, i$3, msg, off, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; dh = $f.dh; dns = $f.dns; err = $f.err; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; msg = $f.msg; off = $f.off; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dh = [dh];
		err = $ifaceNil;
		dns = this;
		dh[0] = $clone(new Header.ptr(), Header);
		off = 0;
		_r = UnpackStruct(dh[0], msg, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; off = _tuple[0]; err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			err = err;
			return err;
		/* } */ case 3:
		dns.MsgHdr.Id = dh[0].Id;
		dns.MsgHdr.Response = !(((((dh[0].Bits & 32768) >>> 0)) === 0));
		dns.MsgHdr.Opcode = ((dh[0].Bits >>> 11 << 16 >>> 16) >> 0) & 15;
		dns.MsgHdr.Authoritative = !(((((dh[0].Bits & 1024) >>> 0)) === 0));
		dns.MsgHdr.Truncated = !(((((dh[0].Bits & 512) >>> 0)) === 0));
		dns.MsgHdr.RecursionDesired = !(((((dh[0].Bits & 256) >>> 0)) === 0));
		dns.MsgHdr.RecursionAvailable = !(((((dh[0].Bits & 128) >>> 0)) === 0));
		dns.MsgHdr.Zero = !(((((dh[0].Bits & 64) >>> 0)) === 0));
		dns.MsgHdr.AuthenticatedData = !(((((dh[0].Bits & 32) >>> 0)) === 0));
		dns.MsgHdr.CheckingDisabled = !(((((dh[0].Bits & 16) >>> 0)) === 0));
		dns.MsgHdr.Rcode = (((dh[0].Bits & 15) >>> 0) >> 0);
		dns.Question = $makeSlice(sliceType$2, dh[0].Qdcount);
		dns.Answer = $makeSlice(sliceType$3, dh[0].Ancount);
		dns.Ns = $makeSlice(sliceType$3, dh[0].Nscount);
		dns.Extra = $makeSlice(sliceType$3, dh[0].Arcount);
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < dns.Question.$length)) { break; } */ if(!(i < dns.Question.$length)) { $s = 5; continue; }
			_r$1 = UnpackStruct((x = dns.Question, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])), msg, off); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1; off = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				err = err;
				return err;
			}
			i = i + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		if (dns.MsgHdr.Truncated) {
			dns.Answer = sliceType$3.nil;
			dns.Ns = sliceType$3.nil;
			dns.Extra = sliceType$3.nil;
			err = $ifaceNil;
			return err;
		}
		i$1 = 0;
		/* while (true) { */ case 7:
			/* if (!(i$1 < dns.Answer.$length)) { break; } */ if(!(i$1 < dns.Answer.$length)) { $s = 8; continue; }
			_r$2 = UnpackRR(msg, off); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2; (x$1 = dns.Answer, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1] = _tuple$2[0])); off = _tuple$2[1]; err = _tuple$2[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				err = err;
				return err;
			}
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		i$2 = 0;
		/* while (true) { */ case 10:
			/* if (!(i$2 < dns.Ns.$length)) { break; } */ if(!(i$2 < dns.Ns.$length)) { $s = 11; continue; }
			_r$3 = UnpackRR(msg, off); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$3 = _r$3; (x$2 = dns.Ns, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2] = _tuple$3[0])); off = _tuple$3[1]; err = _tuple$3[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				err = err;
				return err;
			}
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		i$3 = 0;
		/* while (true) { */ case 13:
			/* if (!(i$3 < dns.Extra.$length)) { break; } */ if(!(i$3 < dns.Extra.$length)) { $s = 14; continue; }
			_r$4 = UnpackRR(msg, off); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$4 = _r$4; (x$3 = dns.Extra, ((i$3 < 0 || i$3 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$3] = _tuple$4[0])); off = _tuple$4[1]; err = _tuple$4[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				err = err;
				return err;
			}
			i$3 = i$3 + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		/* */ if (!((off === msg.$length))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!((off === msg.$length))) { */ case 16:
			_r$5 = fmt.Errorf("extra bytes in dns packet %d !=  %d", new sliceType$8([new $Int(off), new $Int(msg.$length)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			return err;
		/* } */ case 17:
		err = $ifaceNil;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.Unpack }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.dh = dh; $f.dns = dns; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.msg = msg; $f.off = off; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.Unpack = function(msg) { return this.$val.Unpack(msg); };
	Msg.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, _r$2, dns, i, i$1, i$2, i$3, s, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; dns = $f.dns; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		if (dns === ptrType.nil) {
			return "<nil> MsgHdr";
		}
		s = dns.MsgHdr.String() + " ";
		s = s + ("QUERY: " + strconv.Itoa(dns.Question.$length) + ", ");
		s = s + ("ANSWER: " + strconv.Itoa(dns.Answer.$length) + ", ");
		s = s + ("AUTHORITY: " + strconv.Itoa(dns.Ns.$length) + ", ");
		s = s + ("ADDITIONAL: " + strconv.Itoa(dns.Extra.$length) + "\n");
		if (dns.Question.$length > 0) {
			s = s + ("\n;; QUESTION SECTION:\n");
			i = 0;
			while (true) {
				if (!(i < dns.Question.$length)) { break; }
				s = s + ((x = dns.Question, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).String() + "\n");
				i = i + (1) >> 0;
			}
		}
		/* */ if (dns.Answer.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dns.Answer.$length > 0) { */ case 1:
			s = s + ("\n;; ANSWER SECTION:\n");
			i$1 = 0;
			/* while (true) { */ case 3:
				/* if (!(i$1 < dns.Answer.$length)) { break; } */ if(!(i$1 < dns.Answer.$length)) { $s = 4; continue; }
				/* */ if (!($interfaceIsEqual((x$1 = dns.Answer, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])), $ifaceNil))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!($interfaceIsEqual((x$1 = dns.Answer, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])), $ifaceNil))) { */ case 5:
					_r = (x$2 = dns.Answer, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1])).String(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					s = s + (_r + "\n");
				/* } */ case 6:
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		/* */ if (dns.Ns.$length > 0) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (dns.Ns.$length > 0) { */ case 8:
			s = s + ("\n;; AUTHORITY SECTION:\n");
			i$2 = 0;
			/* while (true) { */ case 10:
				/* if (!(i$2 < dns.Ns.$length)) { break; } */ if(!(i$2 < dns.Ns.$length)) { $s = 11; continue; }
				/* */ if (!($interfaceIsEqual((x$3 = dns.Ns, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2])), $ifaceNil))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!($interfaceIsEqual((x$3 = dns.Ns, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2])), $ifaceNil))) { */ case 12:
					_r$1 = (x$4 = dns.Ns, ((i$2 < 0 || i$2 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i$2])).String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					s = s + (_r$1 + "\n");
				/* } */ case 13:
				i$2 = i$2 + (1) >> 0;
			/* } */ $s = 10; continue; case 11:
		/* } */ case 9:
		/* */ if (dns.Extra.$length > 0) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (dns.Extra.$length > 0) { */ case 15:
			s = s + ("\n;; ADDITIONAL SECTION:\n");
			i$3 = 0;
			/* while (true) { */ case 17:
				/* if (!(i$3 < dns.Extra.$length)) { break; } */ if(!(i$3 < dns.Extra.$length)) { $s = 18; continue; }
				/* */ if (!($interfaceIsEqual((x$5 = dns.Extra, ((i$3 < 0 || i$3 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + i$3])), $ifaceNil))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!($interfaceIsEqual((x$5 = dns.Extra, ((i$3 < 0 || i$3 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + i$3])), $ifaceNil))) { */ case 19:
					_r$2 = (x$6 = dns.Extra, ((i$3 < 0 || i$3 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i$3])).String(); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					s = s + (_r$2 + "\n");
				/* } */ case 20:
				i$3 = i$3 + (1) >> 0;
			/* } */ $s = 17; continue; case 18:
		/* } */ case 16:
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.dns = dns; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.String = function() { return this.$val.String(); };
	Msg.ptr.prototype.Len = function() {
		var $ptr, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, compression, dns, i, i$1, i$2, i$3, k, k$1, k$2, l, ok, ok$1, ok$2, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; compression = $f.compression; dns = $f.dns; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; k = $f.k; k$1 = $f.k$1; k$2 = $f.k$2; l = $f.l; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		l = 12;
		compression = false;
		if (dns.Compress) {
			compression = new $Map();
		}
		i = 0;
		while (true) {
			if (!(i < dns.Question.$length)) { break; }
			l = l + ((x = dns.Question, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).len()) >> 0;
			if (dns.Compress) {
				compressionLenHelper(compression, (x$1 = dns.Question, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Name);
			}
			i = i + (1) >> 0;
		}
		i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(i$1 < dns.Answer.$length)) { break; } */ if(!(i$1 < dns.Answer.$length)) { $s = 2; continue; }
			_r = (x$2 = dns.Answer, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1])).len(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = l + (_r) >> 0;
			/* */ if (dns.Compress) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (dns.Compress) { */ case 4:
				_arg = compression;
				_r$1 = (x$3 = dns.Answer, ((i$1 < 0 || i$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$1])).Header(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_arg$1 = _r$1.Name;
				_r$2 = compressionLenSearch(_arg, _arg$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2; k = _tuple[0]; ok = _tuple[1];
				if (ok) {
					l = l + ((1 - k >> 0)) >> 0;
				}
				_arg$2 = compression;
				_r$3 = (x$4 = dns.Answer, ((i$1 < 0 || i$1 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i$1])).Header(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$3 = _r$3.Name;
				$r = compressionLenHelper(_arg$2, _arg$3); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple$1 = compressionLenSearchType(compression, (x$5 = dns.Answer, ((i$1 < 0 || i$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + i$1]))); k = _tuple$1[0]; ok = _tuple$1[1];
				if (ok) {
					l = l + ((1 - k >> 0)) >> 0;
				}
				compressionLenHelperType(compression, (x$6 = dns.Answer, ((i$1 < 0 || i$1 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i$1])));
			/* } */ case 5:
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$2 = 0;
		/* while (true) { */ case 10:
			/* if (!(i$2 < dns.Ns.$length)) { break; } */ if(!(i$2 < dns.Ns.$length)) { $s = 11; continue; }
			_r$4 = (x$7 = dns.Ns, ((i$2 < 0 || i$2 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i$2])).len(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			l = l + (_r$4) >> 0;
			/* */ if (dns.Compress) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (dns.Compress) { */ case 13:
				_arg$4 = compression;
				_r$5 = (x$8 = dns.Ns, ((i$2 < 0 || i$2 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + i$2])).Header(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$5 = _r$5.Name;
				_r$6 = compressionLenSearch(_arg$4, _arg$5); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$2 = _r$6; k$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
				if (ok$1) {
					l = l + ((1 - k$1 >> 0)) >> 0;
				}
				_arg$6 = compression;
				_r$7 = (x$9 = dns.Ns, ((i$2 < 0 || i$2 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i$2])).Header(); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$7 = _r$7.Name;
				$r = compressionLenHelper(_arg$6, _arg$7); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple$3 = compressionLenSearchType(compression, (x$10 = dns.Ns, ((i$2 < 0 || i$2 >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i$2]))); k$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
				if (ok$1) {
					l = l + ((1 - k$1 >> 0)) >> 0;
				}
				compressionLenHelperType(compression, (x$11 = dns.Ns, ((i$2 < 0 || i$2 >= x$11.$length) ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + i$2])));
			/* } */ case 14:
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		i$3 = 0;
		/* while (true) { */ case 19:
			/* if (!(i$3 < dns.Extra.$length)) { break; } */ if(!(i$3 < dns.Extra.$length)) { $s = 20; continue; }
			_r$8 = (x$12 = dns.Extra, ((i$3 < 0 || i$3 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + i$3])).len(); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			l = l + (_r$8) >> 0;
			/* */ if (dns.Compress) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (dns.Compress) { */ case 22:
				_arg$8 = compression;
				_r$9 = (x$13 = dns.Extra, ((i$3 < 0 || i$3 >= x$13.$length) ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + i$3])).Header(); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$9 = _r$9.Name;
				_r$10 = compressionLenSearch(_arg$8, _arg$9); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple$4 = _r$10; k$2 = _tuple$4[0]; ok$2 = _tuple$4[1];
				if (ok$2) {
					l = l + ((1 - k$2 >> 0)) >> 0;
				}
				_arg$10 = compression;
				_r$11 = (x$14 = dns.Extra, ((i$3 < 0 || i$3 >= x$14.$length) ? $throwRuntimeError("index out of range") : x$14.$array[x$14.$offset + i$3])).Header(); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_arg$11 = _r$11.Name;
				$r = compressionLenHelper(_arg$10, _arg$11); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple$5 = compressionLenSearchType(compression, (x$15 = dns.Extra, ((i$3 < 0 || i$3 >= x$15.$length) ? $throwRuntimeError("index out of range") : x$15.$array[x$15.$offset + i$3]))); k$2 = _tuple$5[0]; ok$2 = _tuple$5[1];
				if (ok$2) {
					l = l + ((1 - k$2 >> 0)) >> 0;
				}
				compressionLenHelperType(compression, (x$16 = dns.Extra, ((i$3 < 0 || i$3 >= x$16.$length) ? $throwRuntimeError("index out of range") : x$16.$array[x$16.$offset + i$3])));
			/* } */ case 23:
			i$3 = i$3 + (1) >> 0;
		/* } */ $s = 19; continue; case 20:
		return l;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.Len }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.compression = compression; $f.dns = dns; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.k = k; $f.k$1 = k$1; $f.k$2 = k$2; $f.l = l; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.Len = function() { return this.$val.Len(); };
	compressionLenHelper = function(c, s) {
		var $ptr, _entry, _key$10, _tuple, c, j, lbs, ok, pref, s;
		pref = "";
		lbs = Split(s);
		j = lbs.$length - 1 >> 0;
		while (true) {
			if (!(j >= 0)) { break; }
			pref = s.substring(((j < 0 || j >= lbs.$length) ? $throwRuntimeError("index out of range") : lbs.$array[lbs.$offset + j]));
			_tuple = (_entry = c[$String.keyFor(pref)], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];
			if (!ok) {
				_key$10 = pref; (c || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: pref.length };
			}
			j = j - (1) >> 0;
		}
	};
	compressionLenSearch = function(c, s) {
		var $ptr, _entry, _tuple, _tuple$1, c, end, off, ok, s;
		off = 0;
		end = false;
		if (s === "") {
			return [0, false];
		}
		while (true) {
			_tuple = (_entry = c[$String.keyFor(s.substring(off))], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];
			if (ok) {
				return [s.substring(off).length, true];
			}
			if (end) {
				break;
			}
			_tuple$1 = NextLabel(s, off); off = _tuple$1[0]; end = _tuple$1[1];
		}
		return [0, false];
	};
	compressionLenHelperType = function(c, r) {
		var $ptr, _ref, c, r, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_ref = r;
		if ($assertType(_ref, ptrType$14, true)[1]) {
			x = _ref.$val;
			compressionLenHelper(c, x.Ns);
		} else if ($assertType(_ref, ptrType$22, true)[1]) {
			x$1 = _ref.$val;
			compressionLenHelper(c, x$1.Mx);
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			x$2 = _ref.$val;
			compressionLenHelper(c, x$2.Target);
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			x$3 = _ref.$val;
			compressionLenHelper(c, x$3.Ptr);
		} else if ($assertType(_ref, ptrType$16, true)[1]) {
			x$4 = _ref.$val;
			compressionLenHelper(c, x$4.Ns);
			compressionLenHelper(c, x$4.Mbox);
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			x$5 = _ref.$val;
			compressionLenHelper(c, x$5.Mb);
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			x$6 = _ref.$val;
			compressionLenHelper(c, x$6.Mg);
		} else if ($assertType(_ref, ptrType$19, true)[1]) {
			x$7 = _ref.$val;
			compressionLenHelper(c, x$7.Mr);
		} else if ($assertType(_ref, ptrType$39, true)[1]) {
			x$8 = _ref.$val;
			compressionLenHelper(c, x$8.Mf);
		} else if ($assertType(_ref, ptrType$40, true)[1]) {
			x$9 = _ref.$val;
			compressionLenHelper(c, x$9.Md);
		} else if ($assertType(_ref, ptrType$41, true)[1]) {
			x$10 = _ref.$val;
			compressionLenHelper(c, x$10.Host);
		} else if ($assertType(_ref, ptrType$21, true)[1]) {
			x$11 = _ref.$val;
			compressionLenHelper(c, x$11.Rmail);
			compressionLenHelper(c, x$11.Email);
		} else if ($assertType(_ref, ptrType$42, true)[1]) {
			x$12 = _ref.$val;
			compressionLenHelper(c, x$12.Hostname);
		}
	};
	compressionLenSearchType = function(c, r) {
		var $ptr, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, c, k, k$1, k1, k1$1, ok, ok$1, ok1, ok1$1, r, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_ref = r;
		if ($assertType(_ref, ptrType$14, true)[1]) {
			x = _ref.$val;
			return compressionLenSearch(c, x.Ns);
		} else if ($assertType(_ref, ptrType$22, true)[1]) {
			x$1 = _ref.$val;
			return compressionLenSearch(c, x$1.Mx);
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			x$2 = _ref.$val;
			return compressionLenSearch(c, x$2.Target);
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			x$3 = _ref.$val;
			return compressionLenSearch(c, x$3.Ptr);
		} else if ($assertType(_ref, ptrType$16, true)[1]) {
			x$4 = _ref.$val;
			_tuple = compressionLenSearch(c, x$4.Ns); k = _tuple[0]; ok = _tuple[1];
			_tuple$1 = compressionLenSearch(c, x$4.Mbox); k1 = _tuple$1[0]; ok1 = _tuple$1[1];
			if (!ok && !ok1) {
				return [0, false];
			}
			return [k + k1 >> 0, true];
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			x$5 = _ref.$val;
			return compressionLenSearch(c, x$5.Mb);
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			x$6 = _ref.$val;
			return compressionLenSearch(c, x$6.Mg);
		} else if ($assertType(_ref, ptrType$19, true)[1]) {
			x$7 = _ref.$val;
			return compressionLenSearch(c, x$7.Mr);
		} else if ($assertType(_ref, ptrType$39, true)[1]) {
			x$8 = _ref.$val;
			return compressionLenSearch(c, x$8.Mf);
		} else if ($assertType(_ref, ptrType$40, true)[1]) {
			x$9 = _ref.$val;
			return compressionLenSearch(c, x$9.Md);
		} else if ($assertType(_ref, ptrType$41, true)[1]) {
			x$10 = _ref.$val;
			return compressionLenSearch(c, x$10.Host);
		} else if ($assertType(_ref, ptrType$21, true)[1]) {
			x$11 = _ref.$val;
			_tuple$2 = compressionLenSearch(c, x$11.Rmail); k$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
			_tuple$3 = compressionLenSearch(c, x$11.Email); k1$1 = _tuple$3[0]; ok1$1 = _tuple$3[1];
			if (!ok$1 && !ok1$1) {
				return [0, false];
			}
			return [k$1 + k1$1 >> 0, true];
		} else if ($assertType(_ref, ptrType$42, true)[1]) {
			x$12 = _ref.$val;
			return compressionLenSearch(c, x$12.Hostname);
		}
		return [0, false];
	};
	id = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = rand$1.Int(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return ((_r << 16 >>> 16) ^ (time.Now().Nanosecond() << 16 >>> 16)) << 16 >>> 16;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: id }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.ptr.prototype.Copy = function() {
		var $ptr, _r, dns, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dns = $f.dns; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		_r = dns.CopyTo(new Msg.ptr()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f.dns = dns; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.Copy = function() { return this.$val.Copy(); };
	Msg.ptr.prototype.CopyTo = function(r1) {
		var $ptr, _r, _r$1, _r$2, dns, i, i$1, i$2, r1, rrArr, rrbegin, rrbegin$1, rrbegin$2, rri, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; dns = $f.dns; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; r1 = $f.r1; rrArr = $f.rrArr; rrbegin = $f.rrbegin; rrbegin$1 = $f.rrbegin$1; rrbegin$2 = $f.rrbegin$2; rri = $f.rri; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dns = this;
		$copy(r1.MsgHdr, dns.MsgHdr, MsgHdr);
		r1.Compress = dns.Compress;
		if (dns.Question.$length > 0) {
			r1.Question = $makeSlice(sliceType$2, dns.Question.$length);
			$copySlice(r1.Question, dns.Question);
		}
		rrArr = $makeSlice(sliceType$3, ((dns.Answer.$length + dns.Ns.$length >> 0) + dns.Extra.$length >> 0));
		rri = 0;
		/* */ if (dns.Answer.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dns.Answer.$length > 0) { */ case 1:
			rrbegin = rri;
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(i < dns.Answer.$length)) { break; } */ if(!(i < dns.Answer.$length)) { $s = 4; continue; }
				_r = (x = dns.Answer, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).copy(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				((rri < 0 || rri >= rrArr.$length) ? $throwRuntimeError("index out of range") : rrArr.$array[rrArr.$offset + rri] = _r);
				rri = rri + (1) >> 0;
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			r1.Answer = $subslice(rrArr, rrbegin, rri, rri);
		/* } */ case 2:
		/* */ if (dns.Ns.$length > 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (dns.Ns.$length > 0) { */ case 6:
			rrbegin$1 = rri;
			i$1 = 0;
			/* while (true) { */ case 8:
				/* if (!(i$1 < dns.Ns.$length)) { break; } */ if(!(i$1 < dns.Ns.$length)) { $s = 9; continue; }
				_r$1 = (x$1 = dns.Ns, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])).copy(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				((rri < 0 || rri >= rrArr.$length) ? $throwRuntimeError("index out of range") : rrArr.$array[rrArr.$offset + rri] = _r$1);
				rri = rri + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 8; continue; case 9:
			r1.Ns = $subslice(rrArr, rrbegin$1, rri, rri);
		/* } */ case 7:
		/* */ if (dns.Extra.$length > 0) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (dns.Extra.$length > 0) { */ case 11:
			rrbegin$2 = rri;
			i$2 = 0;
			/* while (true) { */ case 13:
				/* if (!(i$2 < dns.Extra.$length)) { break; } */ if(!(i$2 < dns.Extra.$length)) { $s = 14; continue; }
				_r$2 = (x$2 = dns.Extra, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2])).copy(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				((rri < 0 || rri >= rrArr.$length) ? $throwRuntimeError("index out of range") : rrArr.$array[rrArr.$offset + rri] = _r$2);
				rri = rri + (1) >> 0;
				i$2 = i$2 + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			r1.Extra = $subslice(rrArr, rrbegin$2, rri, rri);
		/* } */ case 12:
		return r1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.CopyTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.dns = dns; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.r1 = r1; $f.rrArr = rrArr; $f.rrbegin = rrbegin; $f.rrbegin$1 = rrbegin$1; $f.rrbegin$2 = rrbegin$2; $f.rri = rri; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.CopyTo = function(r1) { return this.$val.CopyTo(r1); };
	HashName = function(label, ha, iter, salt) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, err, ha, iter, k, label, n, name, nsec3, off, s, salt, saltwire, wire, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; ha = $f.ha; iter = $f.iter; k = $f.k; label = $f.label; n = $f.n; name = $f.name; nsec3 = $f.nsec3; off = $f.off; s = $f.s; salt = $f.salt; saltwire = $f.saltwire; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		saltwire = new saltWireFmt.ptr();
		saltwire.Salt = salt;
		wire = $makeSlice(sliceType, 4096);
		_r = PackStruct(saltwire, wire, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return "";
		}
		wire = $subslice(wire, 0, n);
		name = $makeSlice(sliceType, 255);
		_r$1 = strings.ToLower(label); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = PackDomainName(_r$1, name, 0, false, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; off = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return "";
		}
		name = $subslice(name, 0, off);
		s = $ifaceNil;
		_ref = ha;
		if (_ref === 1) {
			s = sha1.New();
		} else {
			return "";
		}
		name = $appendSlice(name, wire);
		_r$3 = io.WriteString(s, $bytesToString(name)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = s.Sum(sliceType.nil); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		nsec3 = _r$4;
		k = 0;
		/* while (true) { */ case 6:
			/* if (!(k < iter)) { break; } */ if(!(k < iter)) { $s = 7; continue; }
			$r = s.Reset(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			nsec3 = $appendSlice(nsec3, wire);
			_r$5 = io.WriteString(s, $bytesToString(nsec3)); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = s.Sum(sliceType.nil); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			nsec3 = _r$6;
			k = k + (1) << 16 >>> 16;
		/* } */ $s = 6; continue; case 7:
		return toBase32(nsec3);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: HashName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.ha = ha; $f.iter = iter; $f.k = k; $f.label = label; $f.n = n; $f.name = name; $f.nsec3 = nsec3; $f.off = off; $f.s = s; $f.salt = salt; $f.saltwire = saltwire; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HashName = HashName;
	NSEC.ptr.prototype.Cover = function(name) {
		var $ptr, name, rr;
		rr = this;
		return true;
	};
	NSEC.prototype.Cover = function(name) { return this.$val.Cover(name); };
	NSEC.ptr.prototype.Match = function(name) {
		var $ptr, name, rr;
		rr = this;
		return true;
	};
	NSEC.prototype.Match = function(name) { return this.$val.Match(name); };
	NSEC3.ptr.prototype.Cover = function(name) {
		var $ptr, _r, _r$1, hash$1, hname, labels, name, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; hash$1 = $f.hash$1; hname = $f.hname; labels = $f.labels; name = $f.name; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = HashName(name, rr.Hash, rr.Iterations, rr.Salt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hname = _r;
		labels = Split(rr.Hdr.Name);
		if (labels.$length < 2) {
			return false;
		}
		_r$1 = strings.ToUpper(rr.Hdr.Name.substring((0 >= labels.$length ? $throwRuntimeError("index out of range") : labels.$array[labels.$offset + 0]), ((1 >= labels.$length ? $throwRuntimeError("index out of range") : labels.$array[labels.$offset + 1]) - 1 >> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		hash$1 = _r$1;
		if (hash$1 === rr.NextDomain) {
			return false;
		}
		if (hname <= hash$1) {
			return false;
		}
		if (hname >= rr.NextDomain) {
			return false;
		}
		return true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NSEC3.ptr.prototype.Cover }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.hash$1 = hash$1; $f.hname = hname; $f.labels = labels; $f.name = name; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	NSEC3.prototype.Cover = function(name) { return this.$val.Cover(name); };
	NSEC3.ptr.prototype.Match = function(name) {
		var $ptr, _r, _r$1, hash$1, hname, labels, name, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; hash$1 = $f.hash$1; hname = $f.hname; labels = $f.labels; name = $f.name; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = HashName(name, rr.Hash, rr.Iterations, rr.Salt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hname = _r;
		labels = Split(rr.Hdr.Name);
		if (labels.$length < 2) {
			return false;
		}
		_r$1 = strings.ToUpper(rr.Hdr.Name.substring((0 >= labels.$length ? $throwRuntimeError("index out of range") : labels.$array[labels.$offset + 0]), ((1 >= labels.$length ? $throwRuntimeError("index out of range") : labels.$array[labels.$offset + 1]) - 1 >> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		hash$1 = _r$1;
		if (hash$1 === hname) {
			return true;
		}
		return false;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NSEC3.ptr.prototype.Match }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.hash$1 = hash$1; $f.hname = hname; $f.labels = labels; $f.name = name; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	NSEC3.prototype.Match = function(name) { return this.$val.Match(name); };
	rawSetRdlength = function(msg, off, end) {
		var $ptr, _ref, _tuple, c, end, l, msg, off, rdatalen, x;
		l = msg.$length;
		Loop:
		while (true) {
			if ((off + 1 >> 0) > l) {
				return false;
			}
			c = (((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off]) >> 0);
			off = off + (1) >> 0;
			_ref = c & 192;
			if (_ref === 0) {
				if (c === 0) {
					break Loop;
				}
				if ((off + c >> 0) > l) {
					return false;
				}
				off = off + (c) >> 0;
			} else if (_ref === 192) {
				off = off + (1) >> 0;
				break Loop;
			}
		}
		off = off + (8) >> 0;
		if ((off + 2 >> 0) > l) {
			return false;
		}
		rdatalen = end - ((off + 2 >> 0)) >> 0;
		if (rdatalen > 65535) {
			return false;
		}
		_tuple = packUint16((rdatalen << 16 >>> 16)); ((off < 0 || off >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + off] = _tuple[0]); (x = off + 1 >> 0, ((x < 0 || x >= msg.$length) ? $throwRuntimeError("index out of range") : msg.$array[msg.$offset + x] = _tuple[1]));
		return true;
	};
	scanInit = function(r) {
		var $ptr, r, s;
		s = new scan.ptr();
		s.src = bufio.NewReader(r);
		s.position.Line = 1;
		return s;
	};
	scan.ptr.prototype.tokenText = function() {
		var $ptr, _r, _tuple, c, err, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.src.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; c = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [c, err];
		}
		if (s.eof) {
			s.position.Line = s.position.Line + (1) >> 0;
			s.position.Column = 0;
			s.eof = false;
		}
		if (c === 10) {
			s.eof = true;
			return [c, $ifaceNil];
		}
		s.position.Column = s.position.Column + (1) >> 0;
		return [c, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: scan.ptr.prototype.tokenText }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	scan.prototype.tokenText = function() { return this.$val.tokenText(); };
	NewServeMux = function() {
		var $ptr;
		return new ServeMux.ptr(new $Map(), new sync.RWMutex.ptr());
	};
	$pkg.NewServeMux = NewServeMux;
	HandlerFunc.prototype.ServeDNS = function(w, r) {
		var $ptr, f, r, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; r = $f.r; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		$r = f(w, r); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: HandlerFunc.prototype.ServeDNS }; } $f.$ptr = $ptr; $f.f = f; $f.r = r; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(HandlerFunc).prototype.ServeDNS = function(w, r) { return new HandlerFunc(this.$get()).ServeDNS(w, r); };
	HandleFailed = function(w, r) {
		var $ptr, _r, m, r, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; r = $f.r; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Msg.ptr();
		m.SetRcode(r, 2);
		_r = w.WriteMsg(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: HandleFailed }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.r = r; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HandleFailed = HandleFailed;
	failedHandler = function() {
		var $ptr;
		return new HandlerFunc(HandleFailed);
	};
	ServeMux.ptr.prototype.match = function(q, t) {
		var $ptr, _entry, _entry$1, _tuple, _tuple$1, _tuple$2, b, end, h, h$1, handler, i, l, mux, off, ok, ok$1, q, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; end = $f.end; h = $f.h; h$1 = $f.h$1; handler = $f.handler; i = $f.i; l = $f.l; mux = $f.mux; off = $f.off; ok = $f.ok; ok$1 = $f.ok$1; q = $f.q; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		mux = this;
		$r = mux.m.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(mux.m, "RUnlock"), []]);
		handler = $ifaceNil;
		b = $makeSlice(sliceType, q.length);
		off = 0;
		end = false;
		while (true) {
			l = q.substring(off).length;
			i = 0;
			while (true) {
				if (!(i < l)) { break; }
				((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i] = q.charCodeAt((off + i >> 0)));
				if (((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) >= 65 && ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) <= 90) {
					((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i] = (((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) | (32)) >>> 0);
				}
				i = i + (1) >> 0;
			}
			_tuple = (_entry = mux.z[$String.keyFor($bytesToString($subslice(b, 0, l)))], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]); h = _tuple[0]; ok = _tuple[1];
			if (ok) {
				if (!((t === 43))) {
					return h;
				}
				handler = h;
			}
			_tuple$1 = NextLabel(q, off); off = _tuple$1[0]; end = _tuple$1[1];
			if (end) {
				break;
			}
		}
		_tuple$2 = (_entry$1 = mux.z[$String.keyFor(".")], _entry$1 !== undefined ? [_entry$1.v, true] : [$ifaceNil, false]); h$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
		if (ok$1) {
			return h$1;
		}
		return handler;
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ServeMux.ptr.prototype.match }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.end = end; $f.h = h; $f.h$1 = h$1; $f.handler = handler; $f.i = i; $f.l = l; $f.mux = mux; $f.off = off; $f.ok = ok; $f.ok$1 = ok$1; $f.q = q; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ServeMux.prototype.match = function(q, t) { return this.$val.match(q, t); };
	ServeMux.ptr.prototype.Handle = function(pattern, handler) {
		var $ptr, _key$10, handler, mux, pattern, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key$10 = $f._key$10; handler = $f.handler; mux = $f.mux; pattern = $f.pattern; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mux = this;
		if (pattern === "") {
			$panic(new $String("dns: invalid pattern " + pattern));
		}
		$r = mux.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key$10 = Fqdn(pattern); (mux.z || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$10)] = { k: _key$10, v: handler };
		$r = mux.m.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ServeMux.ptr.prototype.Handle }; } $f.$ptr = $ptr; $f._key$10 = _key$10; $f.handler = handler; $f.mux = mux; $f.pattern = pattern; $f.$s = $s; $f.$r = $r; return $f;
	};
	ServeMux.prototype.Handle = function(pattern, handler) { return this.$val.Handle(pattern, handler); };
	ServeMux.ptr.prototype.HandleFunc = function(pattern, handler) {
		var $ptr, handler, mux, pattern, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; handler = $f.handler; mux = $f.mux; pattern = $f.pattern; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mux = this;
		$r = mux.Handle(pattern, new HandlerFunc(handler)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ServeMux.ptr.prototype.HandleFunc }; } $f.$ptr = $ptr; $f.handler = handler; $f.mux = mux; $f.pattern = pattern; $f.$s = $s; $f.$r = $r; return $f;
	};
	ServeMux.prototype.HandleFunc = function(pattern, handler) { return this.$val.HandleFunc(pattern, handler); };
	ServeMux.ptr.prototype.HandleRemove = function(pattern) {
		var $ptr, mux, pattern;
		mux = this;
		if (pattern === "") {
			$panic(new $String("dns: invalid pattern " + pattern));
		}
		delete mux.z[$String.keyFor(Fqdn(pattern))];
	};
	ServeMux.prototype.HandleRemove = function(pattern) { return this.$val.HandleRemove(pattern); };
	ServeMux.ptr.prototype.ServeDNS = function(w, request) {
		var $ptr, _r, h, mux, request, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; h = $f.h; mux = $f.mux; request = $f.request; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mux = this;
		h = $ifaceNil;
		/* */ if (request.Question.$length < 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (request.Question.$length < 1) { */ case 1:
			h = failedHandler();
			$s = 3; continue;
		/* } else { */ case 2:
			_r = mux.match((x = request.Question, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Name, (x$1 = request.Question, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).Qtype); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			h = _r;
			/* */ if ($interfaceIsEqual(h, $ifaceNil)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($interfaceIsEqual(h, $ifaceNil)) { */ case 5:
				h = failedHandler();
			/* } */ case 6:
		/* } */ case 3:
		$r = h.ServeDNS(w, request); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ServeMux.ptr.prototype.ServeDNS }; } $f.$ptr = $ptr; $f._r = _r; $f.h = h; $f.mux = mux; $f.request = request; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ServeMux.prototype.ServeDNS = function(w, request) { return this.$val.ServeDNS(w, request); };
	SIG.ptr.prototype.Sign = function(k, m) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, adc, buf, err, hash$1, hasher, k, m, mbuf, off, ok, rdlen, rdoff, rr, sig, signature, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; adc = $f.adc; buf = $f.buf; err = $f.err; hash$1 = $f.hash$1; hasher = $f.hasher; k = $f.k; m = $f.m; mbuf = $f.mbuf; off = $f.off; ok = $f.ok; rdlen = $f.rdlen; rdoff = $f.rdoff; rr = $f.rr; sig = $f.sig; signature = $f.signature; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		if ($interfaceIsEqual(k, $ifaceNil)) {
			return [sliceType.nil, $pkg.ErrPrivKey];
		}
		if ((rr.RRSIG.KeyTag === 0) || (rr.RRSIG.SignerName.length === 0) || (rr.RRSIG.Algorithm === 0)) {
			return [sliceType.nil, $pkg.ErrKey];
		}
		rr.RRSIG.Header().Rrtype = 24;
		rr.RRSIG.Header().Class = 255;
		rr.RRSIG.Header().Ttl = 0;
		rr.RRSIG.Header().Name = ".";
		rr.RRSIG.OrigTtl = 0;
		rr.RRSIG.TypeCovered = 0;
		rr.RRSIG.Labels = 0;
		_r = m.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		buf = $makeSlice(sliceType, (_r + rr.RRSIG.len() >> 0));
		_r$1 = m.PackBuffer(buf); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1; mbuf = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		if (!($indexPtr(buf.$array, buf.$offset + 0, ptrType$48) === $indexPtr(mbuf.$array, mbuf.$offset + 0, ptrType$48))) {
			return [sliceType.nil, $pkg.ErrBuf];
		}
		_r$2 = PackRR(rr, buf, mbuf.$length, false, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; off = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		buf = $subslice(buf, 0, off, buf.$capacity);
		_tuple$2 = (_entry = $pkg.AlgorithmToHash[$Uint8.keyFor(rr.RRSIG.Algorithm)], _entry !== undefined ? [_entry.v, true] : [0, false]); hash$1 = _tuple$2[0]; ok = _tuple$2[1];
		if (!ok) {
			return [sliceType.nil, $pkg.ErrAlg];
		}
		_r$3 = new crypto.Hash(hash$1).New(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		hasher = _r$3;
		_r$4 = hasher.Write($subslice(buf, (((((mbuf.$length + 1 >> 0) + 2 >> 0) + 2 >> 0) + 4 >> 0) + 2 >> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = hasher.Write($subslice(buf, 0, mbuf.$length)); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_arg = k;
		_r$6 = hasher.Sum(sliceType.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_arg$2 = hash$1;
		_arg$3 = rr.RRSIG.Algorithm;
		_r$7 = sign(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$3 = _r$7; signature = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		rr.RRSIG.Signature = toBase64(signature);
		sig = $bytesToString(signature);
		buf = $appendSlice(buf, new sliceType($stringToBytes(sig)));
		if (buf.$length > 65535) {
			return [sliceType.nil, $pkg.ErrBuf];
		}
		rdoff = (((mbuf.$length + 1 >> 0) + 2 >> 0) + 2 >> 0) + 4 >> 0;
		_tuple$4 = unpackUint16(buf, rdoff); rdlen = _tuple$4[0];
		rdlen = rdlen + ((sig.length << 16 >>> 16)) << 16 >>> 16;
		_tuple$5 = packUint16(rdlen); ((rdoff < 0 || rdoff >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + rdoff] = _tuple$5[0]); (x = rdoff + 1 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x] = _tuple$5[1]));
		_tuple$6 = unpackUint16(buf, 10); adc = _tuple$6[0];
		adc = adc + (1) << 16 >>> 16;
		_tuple$7 = packUint16(adc); (10 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 10] = _tuple$7[0]); (11 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 11] = _tuple$7[1]);
		return [buf, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SIG.ptr.prototype.Sign }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.adc = adc; $f.buf = buf; $f.err = err; $f.hash$1 = hash$1; $f.hasher = hasher; $f.k = k; $f.m = m; $f.mbuf = mbuf; $f.off = off; $f.ok = ok; $f.rdlen = rdlen; $f.rdoff = rdoff; $f.rr = rr; $f.sig = sig; $f.signature = signature; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SIG.prototype.Sign = function(k, m) { return this.$val.Sign(k, m); };
	SIG.ptr.prototype.Verify = function(k, buf) {
		var $ptr, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, adc, anc, auc, bodyend, buf, buflen, err, expire, hash$1, hashed, hasher, i, i$1, incept, k, now, offset, pk, pk$1, pk$2, qdc, r, r$1, rdlen, rr, s, s$1, sig, sigend, signername, sigstart, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; adc = $f.adc; anc = $f.anc; auc = $f.auc; bodyend = $f.bodyend; buf = $f.buf; buflen = $f.buflen; err = $f.err; expire = $f.expire; hash$1 = $f.hash$1; hashed = $f.hashed; hasher = $f.hasher; i = $f.i; i$1 = $f.i$1; incept = $f.incept; k = $f.k; now = $f.now; offset = $f.offset; pk = $f.pk; pk$1 = $f.pk$1; pk$2 = $f.pk$2; qdc = $f.qdc; r = $f.r; r$1 = $f.r$1; rdlen = $f.rdlen; rr = $f.rr; s = $f.s; s$1 = $f.s$1; sig = $f.sig; sigend = $f.sigend; signername = $f.signername; sigstart = $f.sigstart; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		if (k === ptrType$49.nil) {
			return $pkg.ErrKey;
		}
		if ((rr.RRSIG.KeyTag === 0) || (rr.RRSIG.SignerName.length === 0) || (rr.RRSIG.Algorithm === 0)) {
			return $pkg.ErrKey;
		}
		hash$1 = 0;
		_ref = rr.RRSIG.Algorithm;
		if (_ref === 3 || _ref === 5) {
			hash$1 = 3;
		} else if (_ref === 8 || _ref === 13) {
			hash$1 = 5;
		} else if (_ref === 14) {
			hash$1 = 6;
		} else if (_ref === 10) {
			hash$1 = 7;
		} else {
			return $pkg.ErrAlg;
		}
		_r = new crypto.Hash(hash$1).New(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		hasher = _r;
		buflen = buf.$length;
		_tuple = unpackUint16(buf, 4); qdc = _tuple[0];
		_tuple$1 = unpackUint16(buf, 6); anc = _tuple$1[0];
		_tuple$2 = unpackUint16(buf, 8); auc = _tuple$2[0];
		_tuple$3 = unpackUint16(buf, 10); adc = _tuple$3[0]; offset = _tuple$3[1];
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < qdc && offset < buflen)) { break; }
			_tuple$4 = UnpackDomainName(buf, offset); offset = _tuple$4[1]; err = _tuple$4[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			offset = offset + (4) >> 0;
			i = i + (1) << 16 >>> 16;
		}
		i$1 = 1;
		/* while (true) { */ case 2:
			/* if (!(i$1 < ((anc + auc << 16 >>> 16) + adc << 16 >>> 16) && offset < buflen)) { break; } */ if(!(i$1 < ((anc + auc << 16 >>> 16) + adc << 16 >>> 16) && offset < buflen)) { $s = 3; continue; }
			_tuple$5 = UnpackDomainName(buf, offset); offset = _tuple$5[1]; err = _tuple$5[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			offset = offset + (8) >> 0;
			if ((offset + 1 >> 0) >= buflen) {
				i$1 = i$1 + (1) << 16 >>> 16;
				/* continue; */ $s = 2; continue;
			}
			rdlen = 0;
			_tuple$6 = unpackUint16(buf, offset); rdlen = _tuple$6[0]; offset = _tuple$6[1];
			offset = offset + ((rdlen >> 0)) >> 0;
			i$1 = i$1 + (1) << 16 >>> 16;
		/* } */ $s = 2; continue; case 3:
		if (offset >= buflen) {
			return new Error.ptr("overflowing unpacking signed message");
		}
		bodyend = offset;
		_tuple$7 = UnpackDomainName(buf, offset); offset = _tuple$7[1]; err = _tuple$7[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		offset = offset + (10) >> 0;
		sigstart = offset;
		offset = offset + (8) >> 0;
		if (((offset + 4 >> 0) + 4 >> 0) >= buflen) {
			return new Error.ptr("overflow unpacking signed message");
		}
		expire = (((((((((offset < 0 || offset >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + offset]) >>> 0) << 24 >>> 0) | (((x = offset + 1 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$1 = offset + 2 >> 0, ((x$1 < 0 || x$1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = offset + 3 >> 0, ((x$2 < 0 || x$2 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x$2])) >>> 0)) >>> 0;
		offset = offset + (4) >> 0;
		incept = (((((((((offset < 0 || offset >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + offset]) >>> 0) << 24 >>> 0) | (((x$3 = offset + 1 >> 0, ((x$3 < 0 || x$3 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x$3])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$4 = offset + 2 >> 0, ((x$4 < 0 || x$4 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x$4])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$5 = offset + 3 >> 0, ((x$5 < 0 || x$5 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x$5])) >>> 0)) >>> 0;
		offset = offset + (4) >> 0;
		now = (time.Now().Unix().$low >>> 0);
		if (now < incept || now > expire) {
			return $pkg.ErrTime;
		}
		offset = offset + (2) >> 0;
		signername = "";
		_tuple$8 = UnpackDomainName(buf, offset); signername = _tuple$8[0]; offset = _tuple$8[1]; err = _tuple$8[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$1 = strings.ToLower(signername); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = strings.ToLower(k.DNSKEY.Header().Name); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!(_r$1 === _r$2)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(_r$1 === _r$2)) { */ case 4:
			return new Error.ptr("signer name doesn't match key name");
		/* } */ case 5:
		sigend = offset;
		_r$3 = hasher.Write($subslice(buf, sigstart, sigend)); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = hasher.Write($subslice(buf, 0, 10)); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = hasher.Write(new sliceType([((((adc - 1 << 16 >>> 16)) << 8 << 16 >>> 16) << 24 >>> 24), ((adc - 1 << 16 >>> 16) << 24 >>> 24)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = hasher.Write($subslice(buf, 12, bodyend)); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		_r$7 = hasher.Sum(sliceType.nil); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		hashed = _r$7;
		sig = $subslice(buf, sigend);
		_ref$1 = k.DNSKEY.Algorithm;
		/* */ if (_ref$1 === 3) { $s = 13; continue; }
		/* */ if (_ref$1 === 5 || _ref$1 === 8 || _ref$1 === 10) { $s = 14; continue; }
		/* */ if (_ref$1 === 13 || _ref$1 === 14) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (_ref$1 === 3) { */ case 13:
			_r$8 = k.DNSKEY.publicKeyDSA(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			pk = _r$8;
			sig = $subslice(sig, 1);
			r = big.NewInt(new $Int64(0, 0));
			r.SetBytes($subslice(sig, 0, (_q = sig.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
			s = big.NewInt(new $Int64(0, 0));
			s.SetBytes($subslice(sig, (_q$1 = sig.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))));
			if (!(pk === ptrType$13.nil)) {
				if (dsa.Verify(pk, hashed, r, s)) {
					return $ifaceNil;
				}
				return $pkg.ErrSig;
			}
			$s = 16; continue;
		/* } else if (_ref$1 === 5 || _ref$1 === 8 || _ref$1 === 10) { */ case 14:
			_r$9 = k.DNSKEY.publicKeyRSA(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			pk$1 = _r$9;
			if (!(pk$1 === ptrType$11.nil)) {
				return rsa.VerifyPKCS1v15(pk$1, hash$1, hashed, sig);
			}
			$s = 16; continue;
		/* } else if (_ref$1 === 13 || _ref$1 === 14) { */ case 15:
			_r$10 = k.DNSKEY.publicKeyECDSA(); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			pk$2 = _r$10;
			r$1 = big.NewInt(new $Int64(0, 0));
			r$1.SetBytes($subslice(sig, 0, (_q$2 = sig.$length / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))));
			s$1 = big.NewInt(new $Int64(0, 0));
			s$1.SetBytes($subslice(sig, (_q$3 = sig.$length / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"))));
			/* */ if (!(pk$2 === ptrType$12.nil)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!(pk$2 === ptrType$12.nil)) { */ case 20:
				_r$11 = ecdsa.Verify(pk$2, hashed, r$1, s$1); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* */ if (_r$11) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_r$11) { */ case 22:
					return $ifaceNil;
				/* } */ case 23:
				return $pkg.ErrSig;
			/* } */ case 21:
		/* } */ case 16:
		return $pkg.ErrKeyAlg;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SIG.ptr.prototype.Verify }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.adc = adc; $f.anc = anc; $f.auc = auc; $f.bodyend = bodyend; $f.buf = buf; $f.buflen = buflen; $f.err = err; $f.expire = expire; $f.hash$1 = hash$1; $f.hashed = hashed; $f.hasher = hasher; $f.i = i; $f.i$1 = i$1; $f.incept = incept; $f.k = k; $f.now = now; $f.offset = offset; $f.pk = pk; $f.pk$1 = pk$1; $f.pk$2 = pk$2; $f.qdc = qdc; $f.r = r; $f.r$1 = r$1; $f.rdlen = rdlen; $f.rr = rr; $f.s = s; $f.s$1 = s$1; $f.sig = sig; $f.sigend = sigend; $f.signername = signername; $f.sigstart = sigstart; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	SIG.prototype.Verify = function(k, buf) { return this.$val.Verify(k, buf); };
	CertificateToDANE = function(selector, matchingType, cert) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, cert, h, h$1, matchingType, selector, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; cert = $f.cert; h = $f.h; h$1 = $f.h$1; matchingType = $f.matchingType; selector = $f.selector; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = matchingType;
		/* */ if (_ref === 0) { $s = 1; continue; }
		/* */ if (_ref === 1) { $s = 2; continue; }
		/* */ if (_ref === 2) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 0) { */ case 1:
			_ref$1 = selector;
			if (_ref$1 === 0) {
				return [hex.EncodeToString(cert.Raw), $ifaceNil];
			} else if (_ref$1 === 1) {
				return [hex.EncodeToString(cert.RawSubjectPublicKeyInfo), $ifaceNil];
			}
			$s = 4; continue;
		/* } else if (_ref === 1) { */ case 2:
			h = sha256.New();
			_ref$2 = selector;
			/* */ if (_ref$2 === 0) { $s = 5; continue; }
			/* */ if (_ref$2 === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_ref$2 === 0) { */ case 5:
				_r = io.WriteString(h, $bytesToString(cert.Raw)); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_r$1 = h.Sum(sliceType.nil); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = hex.EncodeToString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				return [_r$2, $ifaceNil];
				$s = 7; continue;
			/* } else if (_ref$2 === 1) { */ case 6:
				_r$3 = io.WriteString(h, $bytesToString(cert.RawSubjectPublicKeyInfo)); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_r$4 = h.Sum(sliceType.nil); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = hex.EncodeToString(_r$4); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				return [_r$5, $ifaceNil];
			/* } */ case 7:
			$s = 4; continue;
		/* } else if (_ref === 2) { */ case 3:
			h$1 = sha512.New();
			_ref$3 = selector;
			/* */ if (_ref$3 === 0) { $s = 14; continue; }
			/* */ if (_ref$3 === 1) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_ref$3 === 0) { */ case 14:
				_r$6 = io.WriteString(h$1, $bytesToString(cert.Raw)); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_r$7 = h$1.Sum(sliceType.nil); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = hex.EncodeToString(_r$7); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				return [_r$8, $ifaceNil];
				$s = 16; continue;
			/* } else if (_ref$3 === 1) { */ case 15:
				_r$9 = io.WriteString(h$1, $bytesToString(cert.RawSubjectPublicKeyInfo)); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
				_r$10 = h$1.Sum(sliceType.nil); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = hex.EncodeToString(_r$10); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				return [_r$11, $ifaceNil];
			/* } */ case 16:
		/* } */ case 4:
		return ["", errors.New("dns: bad TLSA MatchingType or TLSA Selector")];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CertificateToDANE }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.cert = cert; $f.h = h; $f.h$1 = h$1; $f.matchingType = matchingType; $f.selector = selector; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CertificateToDANE = CertificateToDANE;
	TLSA.ptr.prototype.Sign = function(usage, selector, matchingType, cert) {
		var $ptr, _r, _tuple, cert, err, matchingType, r, selector, usage, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; cert = $f.cert; err = $f.err; matchingType = $f.matchingType; r = $f.r; selector = $f.selector; usage = $f.usage; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		r = this;
		r.Hdr.Rrtype = 52;
		r.Usage = (usage << 24 >>> 24);
		r.Selector = (selector << 24 >>> 24);
		r.MatchingType = (matchingType << 24 >>> 24);
		_r = CertificateToDANE(r.Selector, r.MatchingType, cert); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r.Certificate = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		err = $ifaceNil;
		return err;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TLSA.ptr.prototype.Sign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.cert = cert; $f.err = err; $f.matchingType = matchingType; $f.r = r; $f.selector = selector; $f.usage = usage; $f.$s = $s; $f.$r = $r; return $f;
	};
	TLSA.prototype.Sign = function(usage, selector, matchingType, cert) { return this.$val.Sign(usage, selector, matchingType, cert); };
	TLSA.ptr.prototype.Verify = function(cert) {
		var $ptr, _r, _tuple, c, cert, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; cert = $f.cert; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = CertificateToDANE(r.Selector, r.MatchingType, cert); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; c = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (r.Certificate === c) {
			return $ifaceNil;
		}
		return $pkg.ErrSig;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TLSA.ptr.prototype.Verify }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.cert = cert; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	TLSA.prototype.Verify = function(cert) { return this.$val.Verify(cert); };
	TSIG.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	TSIG.prototype.Header = function() { return this.$val.Header(); };
	TSIG.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = "\n;; TSIG PSEUDOSECTION:\n";
		_r = tsigTimeToString(rr.TimeSigned); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = strings.ToUpper(rr.MAC); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		s = s + (rr.Hdr.String() + " " + rr.Algorithm + " " + _r + " " + strconv.Itoa((rr.Fudge >> 0)) + " " + strconv.Itoa((rr.MACSize >> 0)) + " " + _r$1 + " " + strconv.Itoa((rr.OrigId >> 0)) + " " + strconv.Itoa((rr.Error >> 0)) + " " + strconv.Itoa((rr.OtherLen >> 0)) + " " + rr.OtherData);
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TSIG.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	TSIG.prototype.String = function() { return this.$val.String(); };
	TSIG.ptr.prototype.len = function() {
		var $ptr, _q, _q$1, rr;
		rr = this;
		return ((((((((rr.Hdr.len() + rr.Algorithm.length >> 0) + 1 >> 0) + 6 >> 0) + 4 >> 0) + (_q = rr.MAC.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + 1 >> 0) + 6 >> 0) + (_q$1 = rr.OtherData.length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + 1 >> 0;
	};
	TSIG.prototype.len = function() { return this.$val.len(); };
	TSIG.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new TSIG.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Algorithm, rr.TimeSigned, rr.Fudge, rr.MACSize, rr.MAC, rr.OrigId, rr.Error, rr.OtherLen, rr.OtherData);
	};
	TSIG.prototype.copy = function() { return this.$val.copy(); };
	tsigTimeToString = function(t) {
		var $ptr, _r, t, ti, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; ti = $f.ti; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ti = $clone(time.Unix(new $Int64(t.$high, t.$low), new $Int64(0, 0)).UTC(), time.Time);
		_r = ti.Format("20060102150405"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: tsigTimeToString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.ti = ti; $f.$s = $s; $f.$r = $r; return $f;
	};
	Question.ptr.prototype.String = function() {
		var $ptr, q, s;
		s = "";
		q = this;
		s = ";" + sprintName(q.Name) + "\t";
		s = s + (new Class((q.Qclass << 16 >>> 16)).String() + "\t");
		s = s + (" " + new Type((q.Qtype << 16 >>> 16)).String());
		s = s;
		return s;
	};
	Question.prototype.String = function() { return this.$val.String(); };
	Question.ptr.prototype.len = function() {
		var $ptr, l, q;
		q = this;
		l = q.Name.length + 1 >> 0;
		return l + 4 >> 0;
	};
	Question.prototype.len = function() { return this.$val.len(); };
	ANY.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	ANY.prototype.Header = function() { return this.$val.Header(); };
	ANY.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new ANY.ptr($clone(rr.Hdr.copyHeader(), RR_Header));
	};
	ANY.prototype.copy = function() { return this.$val.copy(); };
	ANY.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String();
	};
	ANY.prototype.String = function() { return this.$val.String(); };
	ANY.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len();
	};
	ANY.prototype.len = function() { return this.$val.len(); };
	CNAME.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	CNAME.prototype.Header = function() { return this.$val.Header(); };
	CNAME.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new CNAME.ptr($clone(rr.Hdr.copyHeader(), RR_Header), sprintName(rr.Target));
	};
	CNAME.prototype.copy = function() { return this.$val.copy(); };
	CNAME.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.Target;
	};
	CNAME.prototype.String = function() { return this.$val.String(); };
	CNAME.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + rr.Target.length >> 0) + 1 >> 0;
	};
	CNAME.prototype.len = function() { return this.$val.len(); };
	HINFO.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	HINFO.prototype.Header = function() { return this.$val.Header(); };
	HINFO.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new HINFO.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Cpu, rr.Os);
	};
	HINFO.prototype.copy = function() { return this.$val.copy(); };
	HINFO.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.Cpu + " " + rr.Os;
	};
	HINFO.prototype.String = function() { return this.$val.String(); };
	HINFO.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + rr.Cpu.length >> 0) + rr.Os.length >> 0;
	};
	HINFO.prototype.len = function() { return this.$val.len(); };
	MB.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	MB.prototype.Header = function() { return this.$val.Header(); };
	MB.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new MB.ptr($clone(rr.Hdr.copyHeader(), RR_Header), sprintName(rr.Mb));
	};
	MB.prototype.copy = function() { return this.$val.copy(); };
	MB.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.Mb;
	};
	MB.prototype.String = function() { return this.$val.String(); };
	MB.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + rr.Mb.length >> 0) + 1 >> 0;
	};
	MB.prototype.len = function() { return this.$val.len(); };
	MG.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	MG.prototype.Header = function() { return this.$val.Header(); };
	MG.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new MG.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Mg);
	};
	MG.prototype.copy = function() { return this.$val.copy(); };
	MG.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Mg.length + 1 >> 0;
		return rr.Hdr.len() + l >> 0;
	};
	MG.prototype.len = function() { return this.$val.len(); };
	MG.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Mg);
	};
	MG.prototype.String = function() { return this.$val.String(); };
	MINFO.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	MINFO.prototype.Header = function() { return this.$val.Header(); };
	MINFO.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new MINFO.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Rmail, rr.Email);
	};
	MINFO.prototype.copy = function() { return this.$val.copy(); };
	MINFO.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Rmail) + " " + sprintName(rr.Email);
	};
	MINFO.prototype.String = function() { return this.$val.String(); };
	MINFO.ptr.prototype.len = function() {
		var $ptr, l, n, rr;
		rr = this;
		l = rr.Rmail.length + 1 >> 0;
		n = rr.Email.length + 1 >> 0;
		return (rr.Hdr.len() + l >> 0) + n >> 0;
	};
	MINFO.prototype.len = function() { return this.$val.len(); };
	MR.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	MR.prototype.Header = function() { return this.$val.Header(); };
	MR.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new MR.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Mr);
	};
	MR.prototype.copy = function() { return this.$val.copy(); };
	MR.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Mr.length + 1 >> 0;
		return rr.Hdr.len() + l >> 0;
	};
	MR.prototype.len = function() { return this.$val.len(); };
	MR.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Mr);
	};
	MR.prototype.String = function() { return this.$val.String(); };
	MF.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	MF.prototype.Header = function() { return this.$val.Header(); };
	MF.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new MF.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Mf);
	};
	MF.prototype.copy = function() { return this.$val.copy(); };
	MF.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + rr.Mf.length >> 0) + 1 >> 0;
	};
	MF.prototype.len = function() { return this.$val.len(); };
	MF.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Mf);
	};
	MF.prototype.String = function() { return this.$val.String(); };
	MD.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	MD.prototype.Header = function() { return this.$val.Header(); };
	MD.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new MD.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Md);
	};
	MD.prototype.copy = function() { return this.$val.copy(); };
	MD.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + rr.Md.length >> 0) + 1 >> 0;
	};
	MD.prototype.len = function() { return this.$val.len(); };
	MD.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Md);
	};
	MD.prototype.String = function() { return this.$val.String(); };
	MX.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	MX.prototype.Header = function() { return this.$val.Header(); };
	MX.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new MX.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, rr.Mx);
	};
	MX.prototype.copy = function() { return this.$val.copy(); };
	MX.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Mx.length + 1 >> 0;
		return (rr.Hdr.len() + l >> 0) + 2 >> 0;
	};
	MX.prototype.len = function() { return this.$val.len(); };
	MX.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0)) + " " + sprintName(rr.Mx);
	};
	MX.prototype.String = function() { return this.$val.String(); };
	AFSDB.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	AFSDB.prototype.Header = function() { return this.$val.Header(); };
	AFSDB.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new AFSDB.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Subtype, rr.Hostname);
	};
	AFSDB.prototype.copy = function() { return this.$val.copy(); };
	AFSDB.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Hostname.length + 1 >> 0;
		return (rr.Hdr.len() + l >> 0) + 2 >> 0;
	};
	AFSDB.prototype.len = function() { return this.$val.len(); };
	AFSDB.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Subtype >> 0)) + " " + sprintName(rr.Hostname);
	};
	AFSDB.prototype.String = function() { return this.$val.String(); };
	X25.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	X25.prototype.Header = function() { return this.$val.Header(); };
	X25.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new X25.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.PSDNAddress);
	};
	X25.prototype.copy = function() { return this.$val.copy(); };
	X25.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + rr.PSDNAddress.length >> 0) + 1 >> 0;
	};
	X25.prototype.len = function() { return this.$val.len(); };
	X25.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.PSDNAddress;
	};
	X25.prototype.String = function() { return this.$val.String(); };
	RT.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	RT.prototype.Header = function() { return this.$val.Header(); };
	RT.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new RT.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, rr.Host);
	};
	RT.prototype.copy = function() { return this.$val.copy(); };
	RT.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Host.length + 1 >> 0;
		return (rr.Hdr.len() + l >> 0) + 2 >> 0;
	};
	RT.prototype.len = function() { return this.$val.len(); };
	RT.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0)) + " " + sprintName(rr.Host);
	};
	RT.prototype.String = function() { return this.$val.String(); };
	NS.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NS.prototype.Header = function() { return this.$val.Header(); };
	NS.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Ns.length + 1 >> 0;
		return rr.Hdr.len() + l >> 0;
	};
	NS.prototype.len = function() { return this.$val.len(); };
	NS.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new NS.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Ns);
	};
	NS.prototype.copy = function() { return this.$val.copy(); };
	NS.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Ns);
	};
	NS.prototype.String = function() { return this.$val.String(); };
	PTR.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	PTR.prototype.Header = function() { return this.$val.Header(); };
	PTR.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new PTR.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Ptr);
	};
	PTR.prototype.copy = function() { return this.$val.copy(); };
	PTR.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Ptr.length + 1 >> 0;
		return rr.Hdr.len() + l >> 0;
	};
	PTR.prototype.len = function() { return this.$val.len(); };
	PTR.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Ptr);
	};
	PTR.prototype.String = function() { return this.$val.String(); };
	RP.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	RP.prototype.Header = function() { return this.$val.Header(); };
	RP.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new RP.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Mbox, rr.Txt);
	};
	RP.prototype.copy = function() { return this.$val.copy(); };
	RP.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (((rr.Hdr.len() + rr.Mbox.length >> 0) + 1 >> 0) + rr.Txt.length >> 0) + 1 >> 0;
	};
	RP.prototype.len = function() { return this.$val.len(); };
	RP.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.Mbox + " " + sprintTxt(new sliceType$1([rr.Txt]));
	};
	RP.prototype.String = function() { return this.$val.String(); };
	SOA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	SOA.prototype.Header = function() { return this.$val.Header(); };
	SOA.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new SOA.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Ns, rr.Mbox, rr.Serial, rr.Refresh, rr.Retry, rr.Expire, rr.Minttl);
	};
	SOA.prototype.copy = function() { return this.$val.copy(); };
	SOA.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Ns) + " " + sprintName(rr.Mbox) + " " + strconv.FormatInt(new $Int64(0, rr.Serial), 10) + " " + strconv.FormatInt(new $Int64(0, rr.Refresh), 10) + " " + strconv.FormatInt(new $Int64(0, rr.Retry), 10) + " " + strconv.FormatInt(new $Int64(0, rr.Expire), 10) + " " + strconv.FormatInt(new $Int64(0, rr.Minttl), 10);
	};
	SOA.prototype.String = function() { return this.$val.String(); };
	SOA.ptr.prototype.len = function() {
		var $ptr, l, n, rr;
		rr = this;
		l = rr.Ns.length + 1 >> 0;
		n = rr.Mbox.length + 1 >> 0;
		return ((rr.Hdr.len() + l >> 0) + n >> 0) + 20 >> 0;
	};
	SOA.prototype.len = function() { return this.$val.len(); };
	TXT.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	TXT.prototype.Header = function() { return this.$val.Header(); };
	TXT.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$1, rr.Txt.$length, rr.Txt.$capacity);
		$copySlice(cp, rr.Txt);
		return new TXT.ptr($clone(rr.Hdr.copyHeader(), RR_Header), cp);
	};
	TXT.prototype.copy = function() { return this.$val.copy(); };
	TXT.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintTxt(rr.Txt);
	};
	TXT.prototype.String = function() { return this.$val.String(); };
	sprintName = function(s) {
		var $ptr, _tuple, b, dst, i, n, s, src, x;
		src = new sliceType($stringToBytes(s));
		dst = $makeSlice(sliceType, 0, src.$length);
		i = 0;
		while (true) {
			if (!(i < src.$length)) { break; }
			if ((i + 1 >> 0) < src.$length && (((i < 0 || i >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + i]) === 92) && ((x = i + 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) === 46)) {
				dst = $appendSlice(dst, $subslice(src, i, (i + 2 >> 0)));
				i = i + (2) >> 0;
			} else {
				_tuple = nextByte(src, i); b = _tuple[0]; n = _tuple[1];
				if (n === 0) {
					i = i + (1) >> 0;
				} else if (b === 46) {
					dst = $append(dst, b);
				} else {
					dst = appendDomainNameByte(dst, b);
				}
				i = i + (n) >> 0;
			}
		}
		return $bytesToString(dst);
	};
	sprintTxt = function(txt) {
		var $ptr, _i, _ref, _tuple, b, bs, i, j, n, out, s, txt;
		out = sliceType.nil;
		_ref = txt;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				out = $appendSlice(out, new sliceType($stringToBytes(" \"")));
			} else {
				out = $append(out, 34);
			}
			bs = new sliceType($stringToBytes(s));
			j = 0;
			while (true) {
				if (!(j < bs.$length)) { break; }
				_tuple = nextByte(bs, j); b = _tuple[0]; n = _tuple[1];
				if (n === 0) {
					break;
				}
				out = appendTXTStringByte(out, b);
				j = j + (n) >> 0;
			}
			out = $append(out, 34);
			_i++;
		}
		return $bytesToString(out);
	};
	appendDomainNameByte = function(s, b) {
		var $ptr, _ref, b, s;
		_ref = b;
		if (_ref === 46 || _ref === 32 || _ref === 39 || _ref === 64 || _ref === 59 || _ref === 40 || _ref === 41) {
			return $append(s, 92, b);
		}
		return appendTXTStringByte(s, b);
	};
	appendTXTStringByte = function(s, b) {
		var $ptr, _i, _ref, _ref$1, b, buf, bufs, i, r, s;
		_ref = b;
		if (_ref === 9) {
			return $append(s, 92, 116);
		} else if (_ref === 13) {
			return $append(s, 92, 114);
		} else if (_ref === 10) {
			return $append(s, 92, 110);
		} else if (_ref === 34 || _ref === 92) {
			return $append(s, 92, b);
		}
		if (b < 32 || b > 126) {
			buf = $clone(arrayType.zero(), arrayType);
			bufs = strconv.AppendInt($subslice(new sliceType(buf), 0, 0), new $Int64(0, b), 10);
			s = $append(s, 92);
			i = 0;
			while (true) {
				if (!(i < (3 - bufs.$length >> 0))) { break; }
				s = $append(s, 48);
				i = i + (1) >> 0;
			}
			_ref$1 = bufs;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				r = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				s = $append(s, r);
				_i++;
			}
			return s;
		}
		return $append(s, b);
	};
	nextByte = function(b, offset) {
		var $ptr, _ref, _ref$1, b, offset, x, x$1, x$2, x$3, x$4;
		if (offset >= b.$length) {
			return [0, 0];
		}
		if (!((((offset < 0 || offset >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + offset]) === 92))) {
			return [((offset < 0 || offset >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + offset]), 1];
		}
		_ref = b.$length - offset >> 0;
		if (_ref === 1) {
			return [0, 0];
		} else if (_ref === 2 || _ref === 3) {
		} else {
			if (isDigit((x = offset + 1 >> 0, ((x < 0 || x >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x]))) && isDigit((x$1 = offset + 2 >> 0, ((x$1 < 0 || x$1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$1]))) && isDigit((x$2 = offset + 3 >> 0, ((x$2 < 0 || x$2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$2])))) {
				return [dddToByte($subslice(b, (offset + 1 >> 0))), 4];
			}
		}
		_ref$1 = (x$3 = offset + 1 >> 0, ((x$3 < 0 || x$3 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$3]));
		if (_ref$1 === 116) {
			return [9, 2];
		} else if (_ref$1 === 114) {
			return [13, 2];
		} else if (_ref$1 === 110) {
			return [10, 2];
		} else {
			return [(x$4 = offset + 1 >> 0, ((x$4 < 0 || x$4 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$4])), 2];
		}
	};
	TXT.ptr.prototype.len = function() {
		var $ptr, _i, _ref, l, rr, t;
		rr = this;
		l = rr.Hdr.len();
		_ref = rr.Txt;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			l = l + ((t.length + 1 >> 0)) >> 0;
			_i++;
		}
		return l;
	};
	TXT.prototype.len = function() { return this.$val.len(); };
	SPF.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	SPF.prototype.Header = function() { return this.$val.Header(); };
	SPF.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$1, rr.Txt.$length, rr.Txt.$capacity);
		$copySlice(cp, rr.Txt);
		return new SPF.ptr($clone(rr.Hdr.copyHeader(), RR_Header), cp);
	};
	SPF.prototype.copy = function() { return this.$val.copy(); };
	SPF.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintTxt(rr.Txt);
	};
	SPF.prototype.String = function() { return this.$val.String(); };
	SPF.ptr.prototype.len = function() {
		var $ptr, _i, _ref, l, rr, t;
		rr = this;
		l = rr.Hdr.len();
		_ref = rr.Txt;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			l = l + ((t.length + 1 >> 0)) >> 0;
			_i++;
		}
		return l;
	};
	SPF.prototype.len = function() { return this.$val.len(); };
	SRV.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	SRV.prototype.Header = function() { return this.$val.Header(); };
	SRV.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Target.length + 1 >> 0;
		return (rr.Hdr.len() + l >> 0) + 6 >> 0;
	};
	SRV.prototype.len = function() { return this.$val.len(); };
	SRV.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new SRV.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Priority, rr.Weight, rr.Port, rr.Target);
	};
	SRV.prototype.copy = function() { return this.$val.copy(); };
	SRV.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Priority >> 0)) + " " + strconv.Itoa((rr.Weight >> 0)) + " " + strconv.Itoa((rr.Port >> 0)) + " " + sprintName(rr.Target);
	};
	SRV.prototype.String = function() { return this.$val.String(); };
	NAPTR.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NAPTR.prototype.Header = function() { return this.$val.Header(); };
	NAPTR.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new NAPTR.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Order, rr.Preference, rr.Flags, rr.Service, rr.Regexp, rr.Replacement);
	};
	NAPTR.prototype.copy = function() { return this.$val.copy(); };
	NAPTR.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Order >> 0)) + " " + strconv.Itoa((rr.Preference >> 0)) + " " + "\"" + rr.Flags + "\" " + "\"" + rr.Service + "\" " + "\"" + rr.Regexp + "\" " + rr.Replacement;
	};
	NAPTR.prototype.String = function() { return this.$val.String(); };
	NAPTR.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return ((((((((rr.Hdr.len() + 4 >> 0) + rr.Flags.length >> 0) + 1 >> 0) + rr.Service.length >> 0) + 1 >> 0) + rr.Regexp.length >> 0) + 1 >> 0) + rr.Replacement.length >> 0) + 1 >> 0;
	};
	NAPTR.prototype.len = function() { return this.$val.len(); };
	CERT.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	CERT.prototype.Header = function() { return this.$val.Header(); };
	CERT.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new CERT.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Type, rr.KeyTag, rr.Algorithm, rr.Certificate);
	};
	CERT.prototype.copy = function() { return this.$val.copy(); };
	CERT.ptr.prototype.String = function() {
		var $ptr, _entry, _entry$1, _tmp, _tmp$1, _tuple, _tuple$1, algorithm, certtype, ok, rr;
		rr = this;
		ok = false;
		_tmp = ""; _tmp$1 = ""; certtype = _tmp; algorithm = _tmp$1;
		_tuple = (_entry = $pkg.CertTypeToString[$Uint16.keyFor(rr.Type)], _entry !== undefined ? [_entry.v, true] : ["", false]); certtype = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			certtype = strconv.Itoa((rr.Type >> 0));
		}
		_tuple$1 = (_entry$1 = $pkg.AlgorithmToString[$Uint8.keyFor(rr.Algorithm)], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]); algorithm = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			algorithm = strconv.Itoa((rr.Algorithm >> 0));
		}
		return rr.Hdr.String() + certtype + " " + strconv.Itoa((rr.KeyTag >> 0)) + " " + algorithm + " " + rr.Certificate;
	};
	CERT.prototype.String = function() { return this.$val.String(); };
	CERT.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + 5 >> 0) + base64.StdEncoding.DecodedLen(rr.Certificate.length) >> 0;
	};
	CERT.prototype.len = function() { return this.$val.len(); };
	DNAME.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	DNAME.prototype.Header = function() { return this.$val.Header(); };
	DNAME.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new DNAME.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Target);
	};
	DNAME.prototype.copy = function() { return this.$val.copy(); };
	DNAME.ptr.prototype.len = function() {
		var $ptr, l, rr;
		rr = this;
		l = rr.Target.length + 1 >> 0;
		return rr.Hdr.len() + l >> 0;
	};
	DNAME.prototype.len = function() { return this.$val.len(); };
	DNAME.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Target);
	};
	DNAME.prototype.String = function() { return this.$val.String(); };
	A.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	A.prototype.Header = function() { return this.$val.Header(); };
	A.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new A.ptr($clone(rr.Hdr.copyHeader(), RR_Header), copyIP(rr.A));
	};
	A.prototype.copy = function() { return this.$val.copy(); };
	A.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + 4 >> 0;
	};
	A.prototype.len = function() { return this.$val.len(); };
	A.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		if (rr.A === net.IP.nil) {
			return rr.Hdr.String();
		}
		return rr.Hdr.String() + rr.A.String();
	};
	A.prototype.String = function() { return this.$val.String(); };
	AAAA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	AAAA.prototype.Header = function() { return this.$val.Header(); };
	AAAA.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new AAAA.ptr($clone(rr.Hdr.copyHeader(), RR_Header), copyIP(rr.AAAA));
	};
	AAAA.prototype.copy = function() { return this.$val.copy(); };
	AAAA.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + 16 >> 0;
	};
	AAAA.prototype.len = function() { return this.$val.len(); };
	AAAA.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		if (rr.AAAA === net.IP.nil) {
			return rr.Hdr.String();
		}
		return rr.Hdr.String() + rr.AAAA.String();
	};
	AAAA.prototype.String = function() { return this.$val.String(); };
	PX.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	PX.prototype.Header = function() { return this.$val.Header(); };
	PX.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new PX.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, rr.Map822, rr.Mapx400);
	};
	PX.prototype.copy = function() { return this.$val.copy(); };
	PX.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0)) + " " + sprintName(rr.Map822) + " " + sprintName(rr.Mapx400);
	};
	PX.prototype.String = function() { return this.$val.String(); };
	PX.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return ((((rr.Hdr.len() + 2 >> 0) + rr.Map822.length >> 0) + 1 >> 0) + rr.Mapx400.length >> 0) + 1 >> 0;
	};
	PX.prototype.len = function() { return this.$val.len(); };
	GPOS.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	GPOS.prototype.Header = function() { return this.$val.Header(); };
	GPOS.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new GPOS.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Longitude, rr.Latitude, rr.Altitude);
	};
	GPOS.prototype.copy = function() { return this.$val.copy(); };
	GPOS.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (((rr.Hdr.len() + rr.Longitude.length >> 0) + rr.Latitude.length >> 0) + rr.Altitude.length >> 0) + 3 >> 0;
	};
	GPOS.prototype.len = function() { return this.$val.len(); };
	GPOS.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.Longitude + " " + rr.Latitude + " " + rr.Altitude;
	};
	GPOS.prototype.String = function() { return this.$val.String(); };
	LOC.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	LOC.prototype.Header = function() { return this.$val.Header(); };
	LOC.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + 4 >> 0) + 12 >> 0;
	};
	LOC.prototype.len = function() { return this.$val.len(); };
	LOC.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new LOC.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Version, rr.Size, rr.HorizPre, rr.VertPre, rr.Latitude, rr.Longitude, rr.Altitude);
	};
	LOC.prototype.copy = function() { return this.$val.copy(); };
	cmToM = function(m, e) {
		var $ptr, _r, _r$1, e, m, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; m = $f.m; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (e < 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e < 2) { */ case 1:
			if (e === 1) {
				m = m * (10) << 24 >>> 24;
			}
			_r = fmt.Sprintf("0.%02d", new sliceType$8([new $Uint8(m)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("%d", new sliceType$8([new $Uint8(m)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		s = _r$1;
		while (true) {
			if (!(e > 2)) { break; }
			s = s + ("0");
			e = e - (1) << 24 >>> 24;
		}
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cmToM }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.m = m; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	LOC.ptr.prototype.String = function() {
		var $ptr, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, alt, ew, h, lat, lon, m, ns, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; alt = $f.alt; ew = $f.ew; h = $f.h; lat = $f.lat; lon = $f.lon; m = $f.m; ns = $f.ns; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = rr.Hdr.String();
		lat = rr.Latitude;
		ns = "N";
		if (lat > 2147483648) {
			lat = lat - 2147483648 >>> 0;
		} else {
			ns = "S";
			lat = 2147483648 - lat >>> 0;
		}
		h = (_q = lat / 3600000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		lat = (_r = lat % 3600000, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		m = (_q$1 = lat / 60000, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		lat = (_r$1 = lat % 60000, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		_r$2 = fmt.Sprintf("%02d %02d %0.3f %s ", new sliceType$8([new $Uint32(h), new $Uint32(m), new $Float64((lat / 1000)), new $String(ns)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = s + (_r$2);
		lon = rr.Longitude;
		ew = "E";
		if (lon > 2147483648) {
			lon = lon - 2147483648 >>> 0;
		} else {
			ew = "W";
			lon = 2147483648 - lon >>> 0;
		}
		h = (_q$2 = lon / 3600000, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		lon = (_r$3 = lon % 3600000, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		m = (_q$3 = lon / 60000, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero"));
		lon = (_r$4 = lon % 60000, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		_r$5 = fmt.Sprintf("%02d %02d %0.3f %s ", new sliceType$8([new $Uint32(h), new $Uint32(m), new $Float64((lon / 1000)), new $String(ew)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		s = s + (_r$5);
		alt = rr.Altitude / 100;
		alt = alt - (100000);
		/* */ if (!(((_r$6 = rr.Altitude % 100, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 0))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(((_r$6 = rr.Altitude % 100, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 0))) { */ case 3:
			_r$7 = fmt.Sprintf("%.2fm ", new sliceType$8([new $Float64(alt)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			s = s + (_r$7);
			$s = 5; continue;
		/* } else { */ case 4:
			_r$8 = fmt.Sprintf("%.0fm ", new sliceType$8([new $Float64(alt)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			s = s + (_r$8);
		/* } */ case 5:
		_r$9 = cmToM((((rr.Size & 240) >>> 0)) >>> 4 << 24 >>> 24, (rr.Size & 15) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		s = s + (_r$9 + "m ");
		_r$10 = cmToM((((rr.HorizPre & 240) >>> 0)) >>> 4 << 24 >>> 24, (rr.HorizPre & 15) >>> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		s = s + (_r$10 + "m ");
		_r$11 = cmToM((((rr.VertPre & 240) >>> 0)) >>> 4 << 24 >>> 24, (rr.VertPre & 15) >>> 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		s = s + (_r$11 + "m");
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: LOC.ptr.prototype.String }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.alt = alt; $f.ew = ew; $f.h = h; $f.lat = lat; $f.lon = lon; $f.m = m; $f.ns = ns; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	LOC.prototype.String = function() { return this.$val.String(); };
	RRSIG.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	RRSIG.prototype.Header = function() { return this.$val.Header(); };
	RRSIG.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new RRSIG.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.TypeCovered, rr.Algorithm, rr.Labels, rr.OrigTtl, rr.Expiration, rr.Inception, rr.KeyTag, rr.SignerName, rr.Signature);
	};
	RRSIG.prototype.copy = function() { return this.$val.copy(); };
	RRSIG.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = rr.Hdr.String();
		s = s + (new Type((rr.TypeCovered << 16 >>> 16)).String());
		_r = TimeToString(rr.Expiration); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TimeToString(rr.Inception); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		s = s + (" " + strconv.Itoa((rr.Algorithm >> 0)) + " " + strconv.Itoa((rr.Labels >> 0)) + " " + strconv.FormatInt(new $Int64(0, rr.OrigTtl), 10) + " " + _r + " " + _r$1 + " " + strconv.Itoa((rr.KeyTag >> 0)) + " " + sprintName(rr.SignerName) + " " + rr.Signature);
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RRSIG.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	RRSIG.prototype.String = function() { return this.$val.String(); };
	RRSIG.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (((rr.Hdr.len() + rr.SignerName.length >> 0) + 1 >> 0) + base64.StdEncoding.DecodedLen(rr.Signature.length) >> 0) + 18 >> 0;
	};
	RRSIG.prototype.len = function() { return this.$val.len(); };
	NSEC.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NSEC.prototype.Header = function() { return this.$val.Header(); };
	NSEC.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$7, rr.TypeBitMap.$length, rr.TypeBitMap.$capacity);
		$copySlice(cp, rr.TypeBitMap);
		return new NSEC.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.NextDomain, cp);
	};
	NSEC.prototype.copy = function() { return this.$val.copy(); };
	NSEC.ptr.prototype.String = function() {
		var $ptr, i, rr, s, x;
		rr = this;
		s = rr.Hdr.String() + sprintName(rr.NextDomain);
		i = 0;
		while (true) {
			if (!(i < rr.TypeBitMap.$length)) { break; }
			s = s + (" " + new Type(((x = rr.TypeBitMap, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) << 16 >>> 16)).String());
			i = i + (1) >> 0;
		}
		return s;
	};
	NSEC.prototype.String = function() { return this.$val.String(); };
	NSEC.ptr.prototype.len = function() {
		var $ptr, _i, _q, _ref, l, lastwindow, rr, t, window;
		rr = this;
		l = (rr.Hdr.len() + rr.NextDomain.length >> 0) + 1 >> 0;
		lastwindow = 35;
		_ref = rr.TypeBitMap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			window = (_q = t / 256, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			if (!(((window >>> 0) === lastwindow))) {
				l = l + (33) >> 0;
			}
			lastwindow = (window >>> 0);
			_i++;
		}
		return l;
	};
	NSEC.prototype.len = function() { return this.$val.len(); };
	DS.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	DS.prototype.Header = function() { return this.$val.Header(); };
	DS.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return (rr.Hdr.len() + 4 >> 0) + (_q = rr.Digest.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	DS.prototype.len = function() { return this.$val.len(); };
	DS.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new DS.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.KeyTag, rr.Algorithm, rr.DigestType, rr.Digest);
	};
	DS.prototype.copy = function() { return this.$val.copy(); };
	DS.ptr.prototype.String = function() {
		var $ptr, _r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = strings.ToUpper(rr.Digest); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return rr.Hdr.String() + strconv.Itoa((rr.KeyTag >> 0)) + " " + strconv.Itoa((rr.Algorithm >> 0)) + " " + strconv.Itoa((rr.DigestType >> 0)) + " " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: DS.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	DS.prototype.String = function() { return this.$val.String(); };
	KX.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	KX.prototype.Header = function() { return this.$val.Header(); };
	KX.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return ((rr.Hdr.len() + 2 >> 0) + rr.Exchanger.length >> 0) + 1 >> 0;
	};
	KX.prototype.len = function() { return this.$val.len(); };
	KX.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new KX.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, rr.Exchanger);
	};
	KX.prototype.copy = function() { return this.$val.copy(); };
	KX.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0)) + " " + sprintName(rr.Exchanger);
	};
	KX.prototype.String = function() { return this.$val.String(); };
	TA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	TA.prototype.Header = function() { return this.$val.Header(); };
	TA.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return (rr.Hdr.len() + 4 >> 0) + (_q = rr.Digest.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	TA.prototype.len = function() { return this.$val.len(); };
	TA.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new TA.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.KeyTag, rr.Algorithm, rr.DigestType, rr.Digest);
	};
	TA.prototype.copy = function() { return this.$val.copy(); };
	TA.ptr.prototype.String = function() {
		var $ptr, _r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = strings.ToUpper(rr.Digest); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return rr.Hdr.String() + strconv.Itoa((rr.KeyTag >> 0)) + " " + strconv.Itoa((rr.Algorithm >> 0)) + " " + strconv.Itoa((rr.DigestType >> 0)) + " " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TA.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	TA.prototype.String = function() { return this.$val.String(); };
	TALINK.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	TALINK.prototype.Header = function() { return this.$val.Header(); };
	TALINK.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new TALINK.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.PreviousName, rr.NextName);
	};
	TALINK.prototype.copy = function() { return this.$val.copy(); };
	TALINK.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return ((rr.Hdr.len() + rr.PreviousName.length >> 0) + rr.NextName.length >> 0) + 2 >> 0;
	};
	TALINK.prototype.len = function() { return this.$val.len(); };
	TALINK.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.PreviousName) + " " + sprintName(rr.NextName);
	};
	TALINK.prototype.String = function() { return this.$val.String(); };
	SSHFP.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	SSHFP.prototype.Header = function() { return this.$val.Header(); };
	SSHFP.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return (rr.Hdr.len() + 2 >> 0) + (_q = rr.FingerPrint.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	SSHFP.prototype.len = function() { return this.$val.len(); };
	SSHFP.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new SSHFP.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Algorithm, rr.Type, rr.FingerPrint);
	};
	SSHFP.prototype.copy = function() { return this.$val.copy(); };
	SSHFP.ptr.prototype.String = function() {
		var $ptr, _r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = strings.ToUpper(rr.FingerPrint); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return rr.Hdr.String() + strconv.Itoa((rr.Algorithm >> 0)) + " " + strconv.Itoa((rr.Type >> 0)) + " " + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SSHFP.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	SSHFP.prototype.String = function() { return this.$val.String(); };
	IPSECKEY.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	IPSECKEY.prototype.Header = function() { return this.$val.Header(); };
	IPSECKEY.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new IPSECKEY.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Precedence, rr.GatewayType, rr.Algorithm, rr.GatewayA, rr.GatewayAAAA, rr.GatewayName, rr.PublicKey);
	};
	IPSECKEY.prototype.copy = function() { return this.$val.copy(); };
	IPSECKEY.ptr.prototype.String = function() {
		var $ptr, _ref, rr, s;
		rr = this;
		s = rr.Hdr.String() + strconv.Itoa((rr.Precedence >> 0)) + " " + strconv.Itoa((rr.GatewayType >> 0)) + " " + strconv.Itoa((rr.Algorithm >> 0));
		_ref = rr.GatewayType;
		if (_ref === 0) {
			s = s + (" " + rr.GatewayName);
		} else if (_ref === 3) {
			s = s + (" " + rr.GatewayName);
		} else if (_ref === 1) {
			s = s + (" " + rr.GatewayA.String());
		} else if (_ref === 2) {
			s = s + (" " + rr.GatewayAAAA.String());
		} else {
			s = s + (" .");
		}
		s = s + (" " + rr.PublicKey);
		return s;
	};
	IPSECKEY.prototype.String = function() { return this.$val.String(); };
	IPSECKEY.ptr.prototype.len = function() {
		var $ptr, _ref, l, rr;
		rr = this;
		l = (rr.Hdr.len() + 3 >> 0) + 1 >> 0;
		_ref = rr.GatewayType;
		if (_ref === 0) {
			l = l + (rr.GatewayName.length) >> 0;
		} else if (_ref === 3) {
			l = l + (rr.GatewayName.length) >> 0;
		} else if (_ref === 1) {
			l = l + (4) >> 0;
		} else if (_ref === 2) {
			l = l + (16) >> 0;
		} else {
			l = l + (rr.GatewayName.length) >> 0;
		}
		return l + base64.StdEncoding.DecodedLen(rr.PublicKey.length) >> 0;
	};
	IPSECKEY.prototype.len = function() { return this.$val.len(); };
	DNSKEY.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	DNSKEY.prototype.Header = function() { return this.$val.Header(); };
	DNSKEY.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + 4 >> 0) + base64.StdEncoding.DecodedLen(rr.PublicKey.length) >> 0;
	};
	DNSKEY.prototype.len = function() { return this.$val.len(); };
	DNSKEY.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new DNSKEY.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Flags, rr.Protocol, rr.Algorithm, rr.PublicKey);
	};
	DNSKEY.prototype.copy = function() { return this.$val.copy(); };
	DNSKEY.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Flags >> 0)) + " " + strconv.Itoa((rr.Protocol >> 0)) + " " + strconv.Itoa((rr.Algorithm >> 0)) + " " + rr.PublicKey;
	};
	DNSKEY.prototype.String = function() { return this.$val.String(); };
	RKEY.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	RKEY.prototype.Header = function() { return this.$val.Header(); };
	RKEY.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + 4 >> 0) + base64.StdEncoding.DecodedLen(rr.PublicKey.length) >> 0;
	};
	RKEY.prototype.len = function() { return this.$val.len(); };
	RKEY.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new RKEY.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Flags, rr.Protocol, rr.Algorithm, rr.PublicKey);
	};
	RKEY.prototype.copy = function() { return this.$val.copy(); };
	RKEY.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Flags >> 0)) + " " + strconv.Itoa((rr.Protocol >> 0)) + " " + strconv.Itoa((rr.Algorithm >> 0)) + " " + rr.PublicKey;
	};
	RKEY.prototype.String = function() { return this.$val.String(); };
	NSAP.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NSAP.prototype.Header = function() { return this.$val.Header(); };
	NSAP.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new NSAP.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Length, rr.Nsap);
	};
	NSAP.prototype.copy = function() { return this.$val.copy(); };
	NSAP.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Length >> 0)) + " " + rr.Nsap;
	};
	NSAP.prototype.String = function() { return this.$val.String(); };
	NSAP.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return ((rr.Hdr.len() + 1 >> 0) + rr.Nsap.length >> 0) + 1 >> 0;
	};
	NSAP.prototype.len = function() { return this.$val.len(); };
	NSAPPTR.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NSAPPTR.prototype.Header = function() { return this.$val.Header(); };
	NSAPPTR.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new NSAPPTR.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Ptr);
	};
	NSAPPTR.prototype.copy = function() { return this.$val.copy(); };
	NSAPPTR.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintName(rr.Ptr);
	};
	NSAPPTR.prototype.String = function() { return this.$val.String(); };
	NSAPPTR.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + rr.Ptr.length >> 0;
	};
	NSAPPTR.prototype.len = function() { return this.$val.len(); };
	NSEC3.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NSEC3.prototype.Header = function() { return this.$val.Header(); };
	NSEC3.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$7, rr.TypeBitMap.$length, rr.TypeBitMap.$capacity);
		$copySlice(cp, rr.TypeBitMap);
		return new NSEC3.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Hash, rr.Flags, rr.Iterations, rr.SaltLength, rr.Salt, rr.HashLength, rr.NextDomain, cp);
	};
	NSEC3.prototype.copy = function() { return this.$val.copy(); };
	NSEC3.ptr.prototype.String = function() {
		var $ptr, _r, i, rr, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; rr = $f.rr; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = rr.Hdr.String();
		_r = saltToString(rr.Salt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = s + (strconv.Itoa((rr.Hash >> 0)) + " " + strconv.Itoa((rr.Flags >> 0)) + " " + strconv.Itoa((rr.Iterations >> 0)) + " " + _r + " " + rr.NextDomain);
		i = 0;
		while (true) {
			if (!(i < rr.TypeBitMap.$length)) { break; }
			s = s + (" " + new Type(((x = rr.TypeBitMap, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) << 16 >>> 16)).String());
			i = i + (1) >> 0;
		}
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NSEC3.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.rr = rr; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	NSEC3.prototype.String = function() { return this.$val.String(); };
	NSEC3.ptr.prototype.len = function() {
		var $ptr, _i, _q, _q$1, _ref, l, lastwindow, rr, t, window;
		rr = this;
		l = ((((rr.Hdr.len() + 6 >> 0) + (_q = rr.Salt.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + 1 >> 0) + rr.NextDomain.length >> 0) + 1 >> 0;
		lastwindow = 35;
		_ref = rr.TypeBitMap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			window = (_q$1 = t / 256, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			if (!(((window >>> 0) === lastwindow))) {
				l = l + (33) >> 0;
			}
			lastwindow = (window >>> 0);
			_i++;
		}
		return l;
	};
	NSEC3.prototype.len = function() { return this.$val.len(); };
	NSEC3PARAM.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NSEC3PARAM.prototype.Header = function() { return this.$val.Header(); };
	NSEC3PARAM.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return (((rr.Hdr.len() + 2 >> 0) + 4 >> 0) + 1 >> 0) + (_q = rr.Salt.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	NSEC3PARAM.prototype.len = function() { return this.$val.len(); };
	NSEC3PARAM.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new NSEC3PARAM.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Hash, rr.Flags, rr.Iterations, rr.SaltLength, rr.Salt);
	};
	NSEC3PARAM.prototype.copy = function() { return this.$val.copy(); };
	NSEC3PARAM.ptr.prototype.String = function() {
		var $ptr, _r, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = rr.Hdr.String();
		_r = saltToString(rr.Salt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = s + (strconv.Itoa((rr.Hash >> 0)) + " " + strconv.Itoa((rr.Flags >> 0)) + " " + strconv.Itoa((rr.Iterations >> 0)) + " " + _r);
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NSEC3PARAM.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NSEC3PARAM.prototype.String = function() { return this.$val.String(); };
	TKEY.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	TKEY.prototype.Header = function() { return this.$val.Header(); };
	TKEY.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new TKEY.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Algorithm, rr.Inception, rr.Expiration, rr.Mode, rr.Error, rr.KeySize, rr.Key, rr.OtherLen, rr.OtherData);
	};
	TKEY.prototype.copy = function() { return this.$val.copy(); };
	TKEY.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return "";
	};
	TKEY.prototype.String = function() { return this.$val.String(); };
	TKEY.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (((((((rr.Hdr.len() + rr.Algorithm.length >> 0) + 1 >> 0) + 4 >> 0) + 4 >> 0) + 6 >> 0) + rr.Key.length >> 0) + 2 >> 0) + rr.OtherData.length >> 0;
	};
	TKEY.prototype.len = function() { return this.$val.len(); };
	RFC3597.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	RFC3597.prototype.Header = function() { return this.$val.Header(); };
	RFC3597.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new RFC3597.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Rdata);
	};
	RFC3597.prototype.copy = function() { return this.$val.copy(); };
	RFC3597.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return (rr.Hdr.len() + (_q = rr.Rdata.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + 2 >> 0;
	};
	RFC3597.prototype.len = function() { return this.$val.len(); };
	RFC3597.ptr.prototype.String = function() {
		var $ptr, _q, rr, s;
		rr = this;
		s = rfc3597Header(rr.Hdr);
		s = s + ("\\# " + strconv.Itoa((_q = rr.Rdata.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) + " " + rr.Rdata);
		return s;
	};
	RFC3597.prototype.String = function() { return this.$val.String(); };
	rfc3597Header = function(h) {
		var $ptr, h, s;
		h = $clone(h, RR_Header);
		s = "";
		s = s + (sprintName(h.Name) + "\t");
		s = s + (strconv.FormatInt(new $Int64(0, h.Ttl), 10) + "\t");
		s = s + ("CLASS" + strconv.Itoa((h.Class >> 0)) + "\t");
		s = s + ("TYPE" + strconv.Itoa((h.Rrtype >> 0)) + "\t");
		return s;
	};
	URI.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	URI.prototype.Header = function() { return this.$val.Header(); };
	URI.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$1, rr.Target.$length, rr.Target.$capacity);
		$copySlice(cp, rr.Target);
		return new URI.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Weight, rr.Priority, cp);
	};
	URI.prototype.copy = function() { return this.$val.copy(); };
	URI.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Priority >> 0)) + " " + strconv.Itoa((rr.Weight >> 0)) + sprintTxt(rr.Target);
	};
	URI.prototype.String = function() { return this.$val.String(); };
	URI.ptr.prototype.len = function() {
		var $ptr, _i, _ref, l, rr, t;
		rr = this;
		l = rr.Hdr.len() + 4 >> 0;
		_ref = rr.Target;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			l = l + ((t.length + 1 >> 0)) >> 0;
			_i++;
		}
		return l;
	};
	URI.prototype.len = function() { return this.$val.len(); };
	DHCID.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	DHCID.prototype.Header = function() { return this.$val.Header(); };
	DHCID.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new DHCID.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Digest);
	};
	DHCID.prototype.copy = function() { return this.$val.copy(); };
	DHCID.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.Digest;
	};
	DHCID.prototype.String = function() { return this.$val.String(); };
	DHCID.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + base64.StdEncoding.DecodedLen(rr.Digest.length) >> 0;
	};
	DHCID.prototype.len = function() { return this.$val.len(); };
	TLSA.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	TLSA.prototype.Header = function() { return this.$val.Header(); };
	TLSA.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return (rr.Hdr.len() + 3 >> 0) + (_q = rr.Certificate.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	TLSA.prototype.len = function() { return this.$val.len(); };
	TLSA.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new TLSA.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Usage, rr.Selector, rr.MatchingType, rr.Certificate);
	};
	TLSA.prototype.copy = function() { return this.$val.copy(); };
	TLSA.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Usage >> 0)) + " " + strconv.Itoa((rr.Selector >> 0)) + " " + strconv.Itoa((rr.MatchingType >> 0)) + " " + rr.Certificate;
	};
	TLSA.prototype.String = function() { return this.$val.String(); };
	HIP.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	HIP.prototype.Header = function() { return this.$val.Header(); };
	HIP.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$1, rr.RendezvousServers.$length, rr.RendezvousServers.$capacity);
		$copySlice(cp, rr.RendezvousServers);
		return new HIP.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.HitLength, rr.PublicKeyAlgorithm, rr.PublicKeyLength, rr.Hit, rr.PublicKey, cp);
	};
	HIP.prototype.copy = function() { return this.$val.copy(); };
	HIP.ptr.prototype.String = function() {
		var $ptr, _i, _ref, d, rr, s;
		rr = this;
		s = rr.Hdr.String() + strconv.Itoa((rr.PublicKeyAlgorithm >> 0)) + " " + rr.Hit + " " + rr.PublicKey;
		_ref = rr.RendezvousServers;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + (" " + sprintName(d));
			_i++;
		}
		return s;
	};
	HIP.prototype.String = function() { return this.$val.String(); };
	HIP.ptr.prototype.len = function() {
		var $ptr, _i, _q, _ref, d, l, rr;
		rr = this;
		l = ((rr.Hdr.len() + 4 >> 0) + (_q = rr.Hit.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + base64.StdEncoding.DecodedLen(rr.PublicKey.length) >> 0;
		_ref = rr.RendezvousServers;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			l = l + ((d.length + 1 >> 0)) >> 0;
			_i++;
		}
		return l;
	};
	HIP.prototype.len = function() { return this.$val.len(); };
	NINFO.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NINFO.prototype.Header = function() { return this.$val.Header(); };
	NINFO.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$1, rr.ZSData.$length, rr.ZSData.$capacity);
		$copySlice(cp, rr.ZSData);
		return new NINFO.ptr($clone(rr.Hdr.copyHeader(), RR_Header), cp);
	};
	NINFO.prototype.copy = function() { return this.$val.copy(); };
	NINFO.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintTxt(rr.ZSData);
	};
	NINFO.prototype.String = function() { return this.$val.String(); };
	NINFO.ptr.prototype.len = function() {
		var $ptr, _i, _ref, l, rr, t;
		rr = this;
		l = rr.Hdr.len();
		_ref = rr.ZSData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			l = l + ((t.length + 1 >> 0)) >> 0;
			_i++;
		}
		return l;
	};
	NINFO.prototype.len = function() { return this.$val.len(); };
	WKS.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	WKS.prototype.Header = function() { return this.$val.Header(); };
	WKS.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + 4 >> 0) + 1 >> 0;
	};
	WKS.prototype.len = function() { return this.$val.len(); };
	WKS.ptr.prototype.copy = function() {
		var $ptr, cp, rr;
		rr = this;
		cp = $makeSlice(sliceType$7, rr.BitMap.$length, rr.BitMap.$capacity);
		$copySlice(cp, rr.BitMap);
		return new WKS.ptr($clone(rr.Hdr.copyHeader(), RR_Header), copyIP(rr.Address), rr.Protocol, cp);
	};
	WKS.prototype.copy = function() { return this.$val.copy(); };
	WKS.ptr.prototype.String = function() {
		var $ptr, i, rr, s, x;
		s = "";
		rr = this;
		s = rr.Hdr.String();
		if (!(rr.Address === net.IP.nil)) {
			s = s + (rr.Address.String());
		}
		i = 0;
		while (true) {
			if (!(i < rr.BitMap.$length)) { break; }
			s = s + (" " + strconv.Itoa(((x = rr.BitMap, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) >> 0)));
			i = i + (1) >> 0;
		}
		s = s;
		return s;
	};
	WKS.prototype.String = function() { return this.$val.String(); };
	NID.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NID.prototype.Header = function() { return this.$val.Header(); };
	NID.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new NID.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, rr.NodeID);
	};
	NID.prototype.copy = function() { return this.$val.copy(); };
	NID.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + 2 >> 0) + 8 >> 0;
	};
	NID.prototype.len = function() { return this.$val.len(); };
	NID.ptr.prototype.String = function() {
		var $ptr, _r, node, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; node = $f.node; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0));
		_r = fmt.Sprintf("%0.16x", new sliceType$8([rr.NodeID])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		node = _r;
		s = s + (" " + node.substring(0, 4) + ":" + node.substring(4, 8) + ":" + node.substring(8, 12) + ":" + node.substring(12, 16));
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NID.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.node = node; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NID.prototype.String = function() { return this.$val.String(); };
	L32.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	L32.prototype.Header = function() { return this.$val.Header(); };
	L32.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new L32.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, copyIP(rr.Locator32));
	};
	L32.prototype.copy = function() { return this.$val.copy(); };
	L32.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + 4 >> 0;
	};
	L32.prototype.len = function() { return this.$val.len(); };
	L32.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		if (rr.Locator32 === net.IP.nil) {
			return rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0));
		}
		return rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0)) + " " + rr.Locator32.String();
	};
	L32.prototype.String = function() { return this.$val.String(); };
	L64.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	L64.prototype.Header = function() { return this.$val.Header(); };
	L64.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new L64.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, rr.Locator64);
	};
	L64.prototype.copy = function() { return this.$val.copy(); };
	L64.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + 2 >> 0) + 8 >> 0;
	};
	L64.prototype.len = function() { return this.$val.len(); };
	L64.ptr.prototype.String = function() {
		var $ptr, _r, node, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; node = $f.node; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		s = rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0));
		_r = fmt.Sprintf("%0.16X", new sliceType$8([rr.Locator64])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		node = _r;
		s = s + (" " + node.substring(0, 4) + ":" + node.substring(4, 8) + ":" + node.substring(8, 12) + ":" + node.substring(12, 16));
		return s;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: L64.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.node = node; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	L64.prototype.String = function() { return this.$val.String(); };
	LP.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	LP.prototype.Header = function() { return this.$val.Header(); };
	LP.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new LP.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Preference, rr.Fqdn);
	};
	LP.prototype.copy = function() { return this.$val.copy(); };
	LP.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return ((rr.Hdr.len() + 2 >> 0) + rr.Fqdn.length >> 0) + 1 >> 0;
	};
	LP.prototype.len = function() { return this.$val.len(); };
	LP.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.Itoa((rr.Preference >> 0)) + " " + sprintName(rr.Fqdn);
	};
	LP.prototype.String = function() { return this.$val.String(); };
	EUI48.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	EUI48.prototype.Header = function() { return this.$val.Header(); };
	EUI48.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new EUI48.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Address);
	};
	EUI48.prototype.copy = function() { return this.$val.copy(); };
	EUI48.ptr.prototype.String = function() {
		var $ptr, _r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = euiToString(rr.Address, 48); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return rr.Hdr.String() + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: EUI48.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	EUI48.prototype.String = function() { return this.$val.String(); };
	EUI48.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + 6 >> 0;
	};
	EUI48.prototype.len = function() { return this.$val.len(); };
	EUI64.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	EUI64.prototype.Header = function() { return this.$val.Header(); };
	EUI64.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new EUI64.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Address);
	};
	EUI64.prototype.copy = function() { return this.$val.copy(); };
	EUI64.ptr.prototype.String = function() {
		var $ptr, _r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = euiToString(rr.Address, 64); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return rr.Hdr.String() + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: EUI64.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	EUI64.prototype.String = function() { return this.$val.String(); };
	EUI64.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + 8 >> 0;
	};
	EUI64.prototype.len = function() { return this.$val.len(); };
	UID.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	UID.prototype.Header = function() { return this.$val.Header(); };
	UID.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new UID.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Uid);
	};
	UID.prototype.copy = function() { return this.$val.copy(); };
	UID.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.FormatInt(new $Int64(0, rr.Uid), 10);
	};
	UID.prototype.String = function() { return this.$val.String(); };
	UID.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + 4 >> 0;
	};
	UID.prototype.len = function() { return this.$val.len(); };
	GID.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	GID.prototype.Header = function() { return this.$val.Header(); };
	GID.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new GID.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Gid);
	};
	GID.prototype.copy = function() { return this.$val.copy(); };
	GID.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + strconv.FormatInt(new $Int64(0, rr.Gid), 10);
	};
	GID.prototype.String = function() { return this.$val.String(); };
	GID.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + 4 >> 0;
	};
	GID.prototype.len = function() { return this.$val.len(); };
	UINFO.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	UINFO.prototype.Header = function() { return this.$val.Header(); };
	UINFO.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new UINFO.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Uinfo);
	};
	UINFO.prototype.copy = function() { return this.$val.copy(); };
	UINFO.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + sprintTxt(new sliceType$1([rr.Uinfo]));
	};
	UINFO.prototype.String = function() { return this.$val.String(); };
	UINFO.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return (rr.Hdr.len() + rr.Uinfo.length >> 0) + 1 >> 0;
	};
	UINFO.prototype.len = function() { return this.$val.len(); };
	EID.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	EID.prototype.Header = function() { return this.$val.Header(); };
	EID.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new EID.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Endpoint);
	};
	EID.prototype.copy = function() { return this.$val.copy(); };
	EID.ptr.prototype.String = function() {
		var $ptr, _r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = strings.ToUpper(rr.Endpoint); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return rr.Hdr.String() + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: EID.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	EID.prototype.String = function() { return this.$val.String(); };
	EID.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return rr.Hdr.len() + (_q = rr.Endpoint.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	EID.prototype.len = function() { return this.$val.len(); };
	NIMLOC.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	NIMLOC.prototype.Header = function() { return this.$val.Header(); };
	NIMLOC.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new NIMLOC.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.Locator);
	};
	NIMLOC.prototype.copy = function() { return this.$val.copy(); };
	NIMLOC.ptr.prototype.String = function() {
		var $ptr, _r, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = this;
		_r = strings.ToUpper(rr.Locator); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return rr.Hdr.String() + _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NIMLOC.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	NIMLOC.prototype.String = function() { return this.$val.String(); };
	NIMLOC.ptr.prototype.len = function() {
		var $ptr, _q, rr;
		rr = this;
		return rr.Hdr.len() + (_q = rr.Locator.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	NIMLOC.prototype.len = function() { return this.$val.len(); };
	OPENPGPKEY.ptr.prototype.Header = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr;
	};
	OPENPGPKEY.prototype.Header = function() { return this.$val.Header(); };
	OPENPGPKEY.ptr.prototype.copy = function() {
		var $ptr, rr;
		rr = this;
		return new OPENPGPKEY.ptr($clone(rr.Hdr.copyHeader(), RR_Header), rr.PublicKey);
	};
	OPENPGPKEY.prototype.copy = function() { return this.$val.copy(); };
	OPENPGPKEY.ptr.prototype.String = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.String() + rr.PublicKey;
	};
	OPENPGPKEY.prototype.String = function() { return this.$val.String(); };
	OPENPGPKEY.ptr.prototype.len = function() {
		var $ptr, rr;
		rr = this;
		return rr.Hdr.len() + base64.StdEncoding.DecodedLen(rr.PublicKey.length) >> 0;
	};
	OPENPGPKEY.prototype.len = function() { return this.$val.len(); };
	TimeToString = function(t) {
		var $ptr, _r, mod, t, ti, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; mod = $f.mod; t = $f.t; ti = $f.ti; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mod = (x = $div64(((x$1 = new $Int64(0, t), x$2 = time.Now().Unix(), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low))), new $Int64(0, 2147483648), false), new $Int64(x.$high - 0, x.$low - 1));
		if ((mod.$high < 0 || (mod.$high === 0 && mod.$low < 0))) {
			mod = new $Int64(0, 0);
		}
		ti = $clone(time.Unix((x$3 = new $Int64(0, t), x$4 = $mul64(mod, new $Int64(0, 2147483648)), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), new $Int64(0, 0)).UTC(), time.Time);
		_r = ti.Format("20060102150405"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TimeToString }; } $f.$ptr = $ptr; $f._r = _r; $f.mod = mod; $f.t = t; $f.ti = ti; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TimeToString = TimeToString;
	StringToTime = function(s) {
		var $ptr, _r, _tuple, e, mod, s, t, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; e = $f.e; mod = $f.mod; s = $f.s; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = time.Parse("20060102150405", s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; t = $clone(_tuple[0], time.Time); e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [0, e];
		}
		mod = (x = $div64(t.Unix(), new $Int64(0, 2147483648), false), new $Int64(x.$high - 0, x.$low - 1));
		if ((mod.$high < 0 || (mod.$high === 0 && mod.$low < 0))) {
			mod = new $Int64(0, 0);
		}
		return [((x$1 = t.Unix(), x$2 = $mul64(mod, new $Int64(0, 2147483648)), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low >>> 0), $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringToTime }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.e = e; $f.mod = mod; $f.s = s; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringToTime = StringToTime;
	saltToString = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s.length === 0) {
			return "-";
		}
		_r = strings.ToUpper(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		return _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: saltToString }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	euiToString = function(eui, bits) {
		var $ptr, _r, _r$1, _ref, bits, eui, hex$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; bits = $f.bits; eui = $f.eui; hex$1 = $f.hex$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hex$1 = "";
		_ref = bits;
		/* */ if (_ref === 64) { $s = 1; continue; }
		/* */ if (_ref === 48) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_ref === 64) { */ case 1:
			_r = fmt.Sprintf("%16.16x", new sliceType$8([eui])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			hex$1 = _r;
			hex$1 = hex$1.substring(0, 2) + "-" + hex$1.substring(2, 4) + "-" + hex$1.substring(4, 6) + "-" + hex$1.substring(6, 8) + "-" + hex$1.substring(8, 10) + "-" + hex$1.substring(10, 12) + "-" + hex$1.substring(12, 14) + "-" + hex$1.substring(14, 16);
			$s = 3; continue;
		/* } else if (_ref === 48) { */ case 2:
			_r$1 = fmt.Sprintf("%12.12x", new sliceType$8([eui])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			hex$1 = _r$1;
			hex$1 = hex$1.substring(0, 2) + "-" + hex$1.substring(2, 4) + "-" + hex$1.substring(4, 6) + "-" + hex$1.substring(6, 8) + "-" + hex$1.substring(8, 10) + "-" + hex$1.substring(10, 12);
		/* } */ case 3:
		return hex$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: euiToString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.bits = bits; $f.eui = eui; $f.hex$1 = hex$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	copyIP = function(ip) {
		var $ptr, ip, p;
		p = $makeSlice(net.IP, ip.$length);
		$copySlice(p, ip);
		return p;
	};
	Msg.ptr.prototype.NameUsed = function(rr) {
		var $ptr, _i, _r, _ref, i, r, rr, u, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		u.Answer = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = r.Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			(x = u.Answer, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = new ANY.ptr(new RR_Header.ptr(_r.Name, 255, 255, 0, 0))));
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.NameUsed }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.NameUsed = function(rr) { return this.$val.NameUsed(rr); };
	Msg.ptr.prototype.NameNotUsed = function(rr) {
		var $ptr, _i, _r, _ref, i, r, rr, u, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		u.Answer = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = r.Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			(x = u.Answer, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = new ANY.ptr(new RR_Header.ptr(_r.Name, 255, 254, 0, 0))));
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.NameNotUsed }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.NameNotUsed = function(rr) { return this.$val.NameNotUsed(rr); };
	Msg.ptr.prototype.Used = function(rr) {
		var $ptr, _i, _r, _ref, i, r, rr, u, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		if (u.Question.$length === 0) {
			$panic(new $String("dns: empty question section"));
		}
		u.Answer = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = u.Answer, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = r));
			_r = (x$2 = u.Answer, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r.Class = (x$1 = u.Question, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).Qclass;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.Used }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.Used = function(rr) { return this.$val.Used(rr); };
	Msg.ptr.prototype.RRsetUsed = function(rr) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, i, r, rr, u, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		u.Answer = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = u.Answer, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = r));
			_r = (x$1 = u.Answer, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r.Class = 255;
			_r$1 = (x$2 = u.Answer, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Header(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1.Ttl = 0;
			_r$2 = (x$3 = u.Answer, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i])).Header(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2.Rdlength = 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.RRsetUsed }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.RRsetUsed = function(rr) { return this.$val.RRsetUsed(rr); };
	Msg.ptr.prototype.RRsetNotUsed = function(rr) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, i, r, rr, u, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		u.Answer = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = u.Answer, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = r));
			_r = (x$1 = u.Answer, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r.Class = 254;
			_r$1 = (x$2 = u.Answer, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Header(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1.Rdlength = 0;
			_r$2 = (x$3 = u.Answer, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i])).Header(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2.Ttl = 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.RRsetNotUsed }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.RRsetNotUsed = function(rr) { return this.$val.RRsetNotUsed(rr); };
	Msg.ptr.prototype.Insert = function(rr) {
		var $ptr, _i, _r, _ref, i, r, rr, u, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		if (u.Question.$length === 0) {
			$panic(new $String("dns: empty question section"));
		}
		u.Ns = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = u.Ns, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = r));
			_r = (x$2 = u.Ns, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r.Class = (x$1 = u.Question, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).Qclass;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.Insert }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.Insert = function(rr) { return this.$val.Insert(rr); };
	Msg.ptr.prototype.RemoveRRset = function(rr) {
		var $ptr, _i, _r, _r$1, _ref, i, r, rr, u, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		u.Ns = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = r.Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = r.Header(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			(x = u.Ns, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = new ANY.ptr(new RR_Header.ptr(_r.Name, _r$1.Rrtype, 255, 0, 0))));
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.RemoveRRset }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.RemoveRRset = function(rr) { return this.$val.RemoveRRset(rr); };
	Msg.ptr.prototype.RemoveName = function(rr) {
		var $ptr, _i, _r, _ref, i, r, rr, u, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		u.Ns = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = r.Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			(x = u.Ns, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = new ANY.ptr(new RR_Header.ptr(_r.Name, 255, 255, 0, 0))));
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.RemoveName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.RemoveName = function(rr) { return this.$val.RemoveName(rr); };
	Msg.ptr.prototype.Remove = function(rr) {
		var $ptr, _i, _r, _r$1, _ref, i, r, rr, u, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; i = $f.i; r = $f.r; rr = $f.rr; u = $f.u; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		u.Ns = $makeSlice(sliceType$3, rr.$length);
		_ref = rr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = u.Ns, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = r));
			_r = (x$1 = u.Ns, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Header(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r.Class = 254;
			_r$1 = (x$2 = u.Ns, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Header(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1.Ttl = 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Msg.ptr.prototype.Remove }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.i = i; $f.r = r; $f.rr = rr; $f.u = u; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Msg.prototype.Remove = function(rr) { return this.$val.Remove(rr); };
	generate = function(l, c, t, o) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, c, dom, e, e$1, end, err, err$1, escape, i, i$1, j, l, mod, o, offset, rx, s, s$1, sep, start, step, sx, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; c = $f.c; dom = $f.dom; e = $f.e; e$1 = $f.e$1; end = $f.end; err = $f.err; err$1 = $f.err$1; escape = $f.escape; i = $f.i; i$1 = $f.i$1; j = $f.j; l = $f.l; mod = $f.mod; o = $f.o; offset = $f.offset; rx = $f.rx; s = $f.s; s$1 = $f.s$1; sep = $f.sep; start = $f.start; step = $f.step; sx = $f.sx; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = $clone(l, lex);
		step = 1;
		i = strings.IndexAny(l.token, "/");
		if (!((i === -1))) {
			if ((i + 1 >> 0) === l.token.length) {
				return "bad step in $GENERATE range";
			}
			_tuple = strconv.Atoi(l.token.substring((i + 1 >> 0))); s = _tuple[0]; e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				if (s < 0) {
					return "bad step in $GENERATE range";
				}
				step = s;
			} else {
				return "bad step in $GENERATE range";
			}
			l.token = l.token.substring(0, i);
		}
		sx = strings.SplitN(l.token, "-", 2);
		if (!((sx.$length === 2))) {
			return "bad start-stop in $GENERATE range";
		}
		_tuple$1 = strconv.Atoi((0 >= sx.$length ? $throwRuntimeError("index out of range") : sx.$array[sx.$offset + 0])); start = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return "bad start in $GENERATE range";
		}
		_tuple$2 = strconv.Atoi((1 >= sx.$length ? $throwRuntimeError("index out of range") : sx.$array[sx.$offset + 1])); end = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return "bad stop in $GENERATE range";
		}
		if (end < 0 || start < 0 || end < start) {
			return "bad range in $GENERATE range";
		}
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		s$1 = "";
		/* BuildRR: */ case 2:
		_r$1 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$copy(l, _r$1[0], lex);
		/* */ if (!((l.value === 4)) && !((l.value === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((l.value === 4)) && !((l.value === 0))) { */ case 4:
			s$1 = s$1 + (l.token);
			/* goto BuildRR */ $s = 2; continue;
		/* } */ case 5:
		i$1 = start;
		/* while (true) { */ case 6:
			/* if (!(i$1 <= end)) { break; } */ if(!(i$1 <= end)) { $s = 7; continue; }
			escape = false;
			dom = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
			mod = "";
			err$1 = "";
			offset = 0;
			j = 0;
			/* while (true) { */ case 8:
				/* if (!(j < s$1.length)) { break; } */ if(!(j < s$1.length)) { $s = 9; continue; }
				_ref = s$1.charCodeAt(j);
				/* */ if (_ref === 92) { $s = 10; continue; }
				/* */ if (_ref === 36) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_ref === 92) { */ case 10:
					if (escape) {
						dom.WriteByte(92);
						escape = false;
						j = j + (1) >> 0;
						/* continue; */ $s = 8; continue;
					}
					escape = true;
					$s = 13; continue;
				/* } else if (_ref === 36) { */ case 11:
					mod = "%d";
					offset = 0;
					/* */ if (escape) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (escape) { */ case 14:
						dom.WriteByte(36);
						escape = false;
						j = j + (1) >> 0;
						/* continue; */ $s = 8; continue;
					/* } */ case 15:
					escape = false;
					/* */ if ((j + 1 >> 0) >= s$1.length) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ((j + 1 >> 0) >= s$1.length) { */ case 16:
						_r$2 = fmt.Sprintf(mod, new sliceType$8([new $Int((i$1 + offset >> 0))])); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = dom.WriteString(_r$2); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						j = j + (1) >> 0;
						/* continue; */ $s = 8; continue;
						$s = 18; continue;
					/* } else { */ case 17:
						if (s$1.charCodeAt((j + 1 >> 0)) === 36) {
							dom.WriteByte(36);
							j = j + (1) >> 0;
							j = j + (1) >> 0;
							/* continue; */ $s = 8; continue;
						}
					/* } */ case 18:
					if (s$1.charCodeAt((j + 1 >> 0)) === 123) {
						sep = strings.Index(s$1.substring((j + 2 >> 0)), "}");
						if (sep === -1) {
							return "bad modifier in $GENERATE";
						}
						_tuple$3 = modToPrintf(s$1.substring((j + 2 >> 0), ((j + 2 >> 0) + sep >> 0))); mod = _tuple$3[0]; offset = _tuple$3[1]; err$1 = _tuple$3[2];
						if (!(err$1 === "")) {
							return err$1;
						}
						j = j + ((2 + sep >> 0)) >> 0;
					}
					_r$4 = fmt.Sprintf(mod, new sliceType$8([new $Int((i$1 + offset >> 0))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = dom.WriteString(_r$4); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					$s = 13; continue;
				/* } else { */ case 12:
					if (escape) {
						escape = false;
						j = j + (1) >> 0;
						/* continue; */ $s = 8; continue;
					}
					dom.WriteByte(s$1.charCodeAt(j));
				/* } */ case 13:
				j = j + (1) >> 0;
			/* } */ $s = 8; continue; case 9:
			_r$6 = NewRR("$ORIGIN " + o + "\n" + dom.String()); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$4 = _r$6; rx = _tuple$4[0]; e$1 = _tuple$4[1];
			if (!($interfaceIsEqual(e$1, $ifaceNil))) {
				return $assertType(e$1, ptrType$44).err;
			}
			$r = $send(t, new Token.ptr(rx, ptrType$44.nil, "")); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 + (step) >> 0;
		/* } */ $s = 6; continue; case 7:
		return "";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: generate }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.c = c; $f.dom = dom; $f.e = e; $f.e$1 = e$1; $f.end = end; $f.err = err; $f.err$1 = err$1; $f.escape = escape; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.l = l; $f.mod = mod; $f.o = o; $f.offset = offset; $f.rx = rx; $f.s = s; $f.s$1 = s$1; $f.sep = sep; $f.start = start; $f.step = step; $f.sx = sx; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	modToPrintf = function(s) {
		var $ptr, _tuple, _tuple$1, err, offset, s, width, xs;
		xs = strings.SplitN(s, ",", 3);
		if (!((xs.$length === 3))) {
			return ["", 0, "bad modifier in $GENERATE"];
		}
		if (!((2 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 2]) === "o") && !((2 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 2]) === "d") && !((2 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 2]) === "x") && !((2 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 2]) === "X")) {
			return ["", 0, "bad base in $GENERATE"];
		}
		_tuple = strconv.Atoi((0 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 0])); offset = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return ["", 0, "bad offset in $GENERATE"];
		}
		_tuple$1 = strconv.Atoi((1 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 1])); width = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return ["", offset, "bad width in $GENERATE"];
		}
		if (width < 0) {
			return ["", offset, "bad width in $GENERATE"];
		} else if (width === 0) {
			return ["%" + (1 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 1]) + (2 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 2]), offset, ""];
		}
		return ["%0" + (1 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 1]) + (2 >= xs.$length ? $throwRuntimeError("index out of range") : xs.$array[xs.$offset + 2]), offset, ""];
	};
	debugging.prototype.Printf = function(format, args) {
		var $ptr, args, d, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; args = $f.args; d = $f.d; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this.$val;
		/* */ if (d) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d) { */ case 1:
			$r = log.Printf(format, args); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debugging.prototype.Printf }; } $f.$ptr = $ptr; $f.args = args; $f.d = d; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(debugging).prototype.Printf = function(format, args) { return new debugging(this.$get()).Printf(format, args); };
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e, s;
		s = "";
		e = this;
		if (!(e.file === "")) {
			s = e.file + ": ";
		}
		s = s + ("dns: " + e.err + ": " + strconv.QuoteToASCII(e.lex.token) + " at line: " + strconv.Itoa(e.lex.line) + ":" + strconv.Itoa(e.lex.column));
		return s;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	NewRR = function(s) {
		var $ptr, _r, _r$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.length > 0 && !((s.charCodeAt((s.length - 1 >> 0)) === 10))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.length > 0 && !((s.charCodeAt((s.length - 1 >> 0)) === 10))) { */ case 1:
			_r = ReadRR(strings.NewReader(s + "\n"), ""); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			return _r;
		/* } */ case 2:
		_r$1 = ReadRR(strings.NewReader(s), ""); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		return _r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NewRR }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRR = NewRR;
	ReadRR = function(q, filename) {
		var $ptr, _r, filename, q, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; filename = $f.filename; q = $f.q; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $recv(parseZoneHelper(q, ".", filename, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r[0];
		if (r === ptrType$54.nil) {
			return [$ifaceNil, $ifaceNil];
		}
		if (!(r.Error === ptrType$44.nil)) {
			return [$ifaceNil, r.Error];
		}
		return [r.RR, $ifaceNil];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ReadRR }; } $f.$ptr = $ptr; $f._r = _r; $f.filename = filename; $f.q = q; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadRR = ReadRR;
	ParseZone = function(r, origin, file) {
		var $ptr, file, origin, r;
		return parseZoneHelper(r, origin, file, 10000);
	};
	$pkg.ParseZone = ParseZone;
	parseZoneHelper = function(r, origin, file, chansize) {
		var $ptr, chansize, file, origin, r, t;
		t = new chanType$3(chansize);
		$go(parseZone, [r, origin, file, t, 0]);
		return t;
	};
	parseZone = function(r, origin, f, t, include) {
		var $ptr, _ok, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, c, c1, defttl, e, e$1, e$2, e$3, e1, f, h, include, l, l$1, l$2, neworigin, ok, ok$1, ok$2, ok$3, ok$4, ok$5, ok$6, ok$7, origin, prevName, r, r$1, r1, s, st, t, ttl, ttl$1, ttl$2, ttl$3, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ok = $f._ok; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; c = $f.c; c1 = $f.c1; defttl = $f.defttl; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; e$3 = $f.e$3; e1 = $f.e1; f = $f.f; h = $f.h; include = $f.include; l = $f.l; l$1 = $f.l$1; l$2 = $f.l$2; neworigin = $f.neworigin; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; ok$5 = $f.ok$5; ok$6 = $f.ok$6; ok$7 = $f.ok$7; origin = $f.origin; prevName = $f.prevName; r = $f.r; r$1 = $f.r$1; r1 = $f.r1; s = $f.s; st = $f.st; t = $f.t; ttl = $f.ttl; ttl$1 = $f.ttl$1; ttl$2 = $f.ttl$2; ttl$3 = $f.ttl$3; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		include = [include];
		t = [t];
		$deferred.push([(function(include, t) { return function() {
			var $ptr;
			if (include[0] === 0) {
				$close(t[0]);
			}
		}; })(include, t), []]);
		s = scanInit(r);
		c = new chanType(0);
		$go(zlexer, [s, c]);
		if (origin === "") {
			origin = ".";
		}
		origin = Fqdn(origin);
		_tuple = IsDomainName(origin); ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "bad initial origin name", new lex.ptr("", "", 0, false, 0, 0, 0, 0, "")), "")); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		st = 14;
		h = $clone(new RR_Header.ptr(), RR_Header);
		defttl = 3600;
		prevName = "";
		_ref = c;
		/* while (true) { */ case 4:
			_r = $recv(_ref); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; l = $clone(_tuple$1[0], lex); _ok = _tuple$1[1];
			if (!_ok) {
				/* break; */ $s = 5; continue;
			}
			/* */ if (l.err) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (l.err) { */ case 7:
				$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, l.token, $clone(l, lex)), "")); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 8:
			_ref$1 = st;
			/* */ if (_ref$1 === 14) { $s = 10; continue; }
			/* */ if (_ref$1 === 28) { $s = 11; continue; }
			/* */ if (_ref$1 === 29) { $s = 12; continue; }
			/* */ if (_ref$1 === 24) { $s = 13; continue; }
			/* */ if (_ref$1 === 25) { $s = 14; continue; }
			/* */ if (_ref$1 === 26) { $s = 15; continue; }
			/* */ if (_ref$1 === 27) { $s = 16; continue; }
			/* */ if (_ref$1 === 31) { $s = 17; continue; }
			/* */ if (_ref$1 === 30) { $s = 18; continue; }
			/* */ if (_ref$1 === 15) { $s = 19; continue; }
			/* */ if (_ref$1 === 16) { $s = 20; continue; }
			/* */ if (_ref$1 === 18) { $s = 21; continue; }
			/* */ if (_ref$1 === 20) { $s = 22; continue; }
			/* */ if (_ref$1 === 19) { $s = 23; continue; }
			/* */ if (_ref$1 === 17) { $s = 24; continue; }
			/* */ if (_ref$1 === 22) { $s = 25; continue; }
			/* */ if (_ref$1 === 21) { $s = 26; continue; }
			/* */ if (_ref$1 === 23) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (_ref$1 === 14) { */ case 10:
				h.Ttl = defttl;
				h.Class = 1;
				_ref$2 = l.value;
				/* */ if (_ref$2 === 4) { $s = 29; continue; }
				/* */ if (_ref$2 === 6) { $s = 30; continue; }
				/* */ if (_ref$2 === 9) { $s = 31; continue; }
				/* */ if (_ref$2 === 8) { $s = 32; continue; }
				/* */ if (_ref$2 === 10) { $s = 33; continue; }
				/* */ if (_ref$2 === 11) { $s = 34; continue; }
				/* */ if (_ref$2 === 5) { $s = 35; continue; }
				/* */ if (_ref$2 === 7) { $s = 36; continue; }
				/* */ if (_ref$2 === 2) { $s = 37; continue; }
				/* */ if (_ref$2 === 1) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* switch (0) { default: if (_ref$2 === 4) { */ case 29:
					st = 14;
					$s = 40; continue;
				/* } else if (_ref$2 === 6) { */ case 30:
					h.Name = l.token;
					if (l.token.charCodeAt(0) === 64) {
						h.Name = origin;
						prevName = h.Name;
						st = 15;
						/* break; */ $s = 40; continue;
					}
					if (!((h.Name.charCodeAt((l.length - 1 >> 0)) === 46))) {
						h.Name = appendOrigin(h.Name, origin);
					}
					_tuple$2 = IsDomainName(l.token); ok$1 = _tuple$2[1];
					/* */ if (!ok$1) { $s = 41; continue; }
					/* */ $s = 42; continue;
					/* if (!ok$1) { */ case 41:
						$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "bad owner name", $clone(l, lex)), "")); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						return;
					/* } */ case 42:
					prevName = h.Name;
					st = 15;
					$s = 40; continue;
				/* } else if (_ref$2 === 9) { */ case 31:
					st = 24;
					$s = 40; continue;
				/* } else if (_ref$2 === 8) { */ case 32:
					st = 26;
					$s = 40; continue;
				/* } else if (_ref$2 === 10) { */ case 33:
					st = 28;
					$s = 40; continue;
				/* } else if (_ref$2 === 11) { */ case 34:
					st = 31;
					$s = 40; continue;
				/* } else if (_ref$2 === 5) { */ case 35:
					h.Name = prevName;
					h.Rrtype = l.torc;
					st = 23;
					$s = 40; continue;
				/* } else if (_ref$2 === 7) { */ case 36:
					h.Name = prevName;
					h.Class = l.torc;
					st = 18;
					$s = 40; continue;
				/* } else if (_ref$2 === 2) { */ case 37:
					$s = 40; continue;
				/* } else if (_ref$2 === 1) { */ case 38:
					_tuple$3 = stringToTtl(l.token); ttl = _tuple$3[0]; ok$2 = _tuple$3[1];
					/* */ if (!ok$2) { $s = 44; continue; }
					/* */ $s = 45; continue;
					/* if (!ok$2) { */ case 44:
						$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "not a TTL", $clone(l, lex)), "")); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						return;
					/* } */ case 45:
					h.Ttl = ttl;
					st = 20;
					$s = 40; continue;
				/* } else { */ case 39:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "syntax error at beginning", $clone(l, lex)), "")); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } } */ case 40:
				$s = 28; continue;
			/* } else if (_ref$1 === 28) { */ case 11:
				/* */ if (!((l.value === 2))) { $s = 48; continue; }
				/* */ $s = 49; continue;
				/* if (!((l.value === 2))) { */ case 48:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank after $INCLUDE-directive", $clone(l, lex)), "")); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 49:
				st = 29;
				$s = 28; continue;
			/* } else if (_ref$1 === 29) { */ case 12:
				/* */ if (!((l.value === 1))) { $s = 51; continue; }
				/* */ $s = 52; continue;
				/* if (!((l.value === 1))) { */ case 51:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting $INCLUDE value, not this...", $clone(l, lex)), "")); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 52:
				neworigin = origin;
				_r$1 = $recv(c); /* */ $s = 54; case 54: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				l$1 = $clone(_r$1[0], lex);
				_ref$3 = l$1.value;
				/* */ if (_ref$3 === 2) { $s = 55; continue; }
				/* */ if (_ref$3 === 4 || _ref$3 === 0) { $s = 56; continue; }
				/* */ $s = 57; continue;
				/* if (_ref$3 === 2) { */ case 55:
					_r$2 = $recv(c); /* */ $s = 59; case 59: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					l$2 = $clone(_r$2[0], lex);
					/* */ if (l$2.value === 1) { $s = 60; continue; }
					/* */ $s = 61; continue;
					/* if (l$2.value === 1) { */ case 60:
						_tuple$4 = IsDomainName(l$2.token); ok$3 = _tuple$4[1];
						/* */ if (!ok$3) { $s = 62; continue; }
						/* */ $s = 63; continue;
						/* if (!ok$3) { */ case 62:
							$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "bad origin name", $clone(l$2, lex)), "")); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							return;
						/* } */ case 63:
						if (!((l$2.token.charCodeAt((l$2.length - 1 >> 0)) === 46))) {
							if (!(origin === ".")) {
								neworigin = l$2.token + "." + origin;
							} else {
								neworigin = l$2.token + origin;
							}
						} else {
							neworigin = l$2.token;
						}
					/* } */ case 61:
					$s = 58; continue;
				/* } else if (_ref$3 === 4 || _ref$3 === 0) { */ case 56:
					$s = 58; continue;
				/* } else { */ case 57:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "garbage after $INCLUDE", $clone(l$1, lex)), "")); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 58:
				_tuple$5 = os.Open(l$1.token); r1 = _tuple$5[0]; e1 = _tuple$5[1];
				/* */ if (!($interfaceIsEqual(e1, $ifaceNil))) { $s = 66; continue; }
				/* */ $s = 67; continue;
				/* if (!($interfaceIsEqual(e1, $ifaceNil))) { */ case 66:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "failed to open `" + l$1.token + "'", $clone(l$1, lex)), "")); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 67:
				/* */ if ((include[0] + 1 >> 0) > 7) { $s = 69; continue; }
				/* */ $s = 70; continue;
				/* if ((include[0] + 1 >> 0) > 7) { */ case 69:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "too deeply nested $INCLUDE", $clone(l$1, lex)), "")); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 70:
				$r = parseZone(r1, l$1.token, neworigin, t[0], include[0] + 1 >> 0); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				st = 14;
				$s = 28; continue;
			/* } else if (_ref$1 === 24) { */ case 13:
				/* */ if (!((l.value === 2))) { $s = 73; continue; }
				/* */ $s = 74; continue;
				/* if (!((l.value === 2))) { */ case 73:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank after $TTL-directive", $clone(l, lex)), "")); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 74:
				st = 25;
				$s = 28; continue;
			/* } else if (_ref$1 === 25) { */ case 14:
				/* */ if (!((l.value === 1))) { $s = 76; continue; }
				/* */ $s = 77; continue;
				/* if (!((l.value === 1))) { */ case 76:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting $TTL value, not this...", $clone(l, lex)), "")); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 77:
				_r$3 = slurpRemainder(c, f); /* */ $s = 79; case 79: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$6 = _r$3; e = _tuple$6[0];
				/* */ if (!(e === ptrType$44.nil)) { $s = 80; continue; }
				/* */ $s = 81; continue;
				/* if (!(e === ptrType$44.nil)) { */ case 80:
					$r = $send(t[0], new Token.ptr($ifaceNil, e, "")); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 81:
				_tuple$7 = stringToTtl(l.token); ttl$1 = _tuple$7[0]; ok$4 = _tuple$7[1];
				/* */ if (!ok$4) { $s = 83; continue; }
				/* */ $s = 84; continue;
				/* if (!ok$4) { */ case 83:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting $TTL value, not this...", $clone(l, lex)), "")); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 84:
				defttl = ttl$1;
				st = 14;
				$s = 28; continue;
			/* } else if (_ref$1 === 26) { */ case 15:
				/* */ if (!((l.value === 2))) { $s = 86; continue; }
				/* */ $s = 87; continue;
				/* if (!((l.value === 2))) { */ case 86:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank after $ORIGIN-directive", $clone(l, lex)), "")); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 87:
				st = 27;
				$s = 28; continue;
			/* } else if (_ref$1 === 27) { */ case 16:
				/* */ if (!((l.value === 1))) { $s = 89; continue; }
				/* */ $s = 90; continue;
				/* if (!((l.value === 1))) { */ case 89:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting $ORIGIN value, not this...", $clone(l, lex)), "")); /* */ $s = 91; case 91: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 90:
				_r$4 = slurpRemainder(c, f); /* */ $s = 92; case 92: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$8 = _r$4; e$1 = _tuple$8[0];
				/* */ if (!(e$1 === ptrType$44.nil)) { $s = 93; continue; }
				/* */ $s = 94; continue;
				/* if (!(e$1 === ptrType$44.nil)) { */ case 93:
					$r = $send(t[0], new Token.ptr($ifaceNil, e$1, "")); /* */ $s = 95; case 95: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 94:
				_tuple$9 = IsDomainName(l.token); ok$5 = _tuple$9[1];
				/* */ if (!ok$5) { $s = 96; continue; }
				/* */ $s = 97; continue;
				/* if (!ok$5) { */ case 96:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "bad origin name", $clone(l, lex)), "")); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 97:
				if (!((l.token.charCodeAt((l.length - 1 >> 0)) === 46))) {
					if (!(origin === ".")) {
						origin = l.token + "." + origin;
					} else {
						origin = l.token + origin;
					}
				} else {
					origin = l.token;
				}
				st = 14;
				$s = 28; continue;
			/* } else if (_ref$1 === 31) { */ case 17:
				/* */ if (!((l.value === 2))) { $s = 99; continue; }
				/* */ $s = 100; continue;
				/* if (!((l.value === 2))) { */ case 99:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank after $GENERATE-directive", $clone(l, lex)), "")); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 100:
				st = 30;
				$s = 28; continue;
			/* } else if (_ref$1 === 30) { */ case 18:
				/* */ if (!((l.value === 1))) { $s = 102; continue; }
				/* */ $s = 103; continue;
				/* if (!((l.value === 1))) { */ case 102:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting $GENERATE value, not this...", $clone(l, lex)), "")); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 103:
				_r$5 = generate(l, c, t[0], origin); /* */ $s = 105; case 105: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				e$2 = _r$5;
				/* */ if (!(e$2 === "")) { $s = 106; continue; }
				/* */ $s = 107; continue;
				/* if (!(e$2 === "")) { */ case 106:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, e$2, $clone(l, lex)), "")); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 107:
				st = 14;
				$s = 28; continue;
			/* } else if (_ref$1 === 15) { */ case 19:
				/* */ if (!((l.value === 2))) { $s = 109; continue; }
				/* */ $s = 110; continue;
				/* if (!((l.value === 2))) { */ case 109:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank after owner", $clone(l, lex)), "")); /* */ $s = 111; case 111: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 110:
				st = 16;
				$s = 28; continue;
			/* } else if (_ref$1 === 16) { */ case 20:
				_ref$4 = l.value;
				/* */ if (_ref$4 === 5) { $s = 112; continue; }
				/* */ if (_ref$4 === 7) { $s = 113; continue; }
				/* */ if (_ref$4 === 1) { $s = 114; continue; }
				/* */ $s = 115; continue;
				/* if (_ref$4 === 5) { */ case 112:
					h.Rrtype = l.torc;
					st = 23;
					$s = 116; continue;
				/* } else if (_ref$4 === 7) { */ case 113:
					h.Class = l.torc;
					st = 18;
					$s = 116; continue;
				/* } else if (_ref$4 === 1) { */ case 114:
					_tuple$10 = stringToTtl(l.token); ttl$2 = _tuple$10[0]; ok$6 = _tuple$10[1];
					/* */ if (!ok$6) { $s = 117; continue; }
					/* */ $s = 118; continue;
					/* if (!ok$6) { */ case 117:
						$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "not a TTL", $clone(l, lex)), "")); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						return;
					/* } */ case 118:
					h.Ttl = ttl$2;
					st = 20;
					$s = 116; continue;
				/* } else { */ case 115:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting RR type, TTL or class, not this...", $clone(l, lex)), "")); /* */ $s = 120; case 120: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 116:
				$s = 28; continue;
			/* } else if (_ref$1 === 18) { */ case 21:
				/* */ if (!((l.value === 2))) { $s = 121; continue; }
				/* */ $s = 122; continue;
				/* if (!((l.value === 2))) { */ case 121:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank before class", $clone(l, lex)), "")); /* */ $s = 123; case 123: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 122:
				st = 17;
				$s = 28; continue;
			/* } else if (_ref$1 === 20) { */ case 22:
				/* */ if (!((l.value === 2))) { $s = 124; continue; }
				/* */ $s = 125; continue;
				/* if (!((l.value === 2))) { */ case 124:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank before TTL", $clone(l, lex)), "")); /* */ $s = 126; case 126: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 125:
				st = 19;
				$s = 28; continue;
			/* } else if (_ref$1 === 19) { */ case 23:
				_ref$5 = l.value;
				/* */ if (_ref$5 === 7) { $s = 127; continue; }
				/* */ if (_ref$5 === 5) { $s = 128; continue; }
				/* */ $s = 129; continue;
				/* if (_ref$5 === 7) { */ case 127:
					h.Class = l.torc;
					st = 22;
					$s = 130; continue;
				/* } else if (_ref$5 === 5) { */ case 128:
					h.Rrtype = l.torc;
					st = 23;
					$s = 130; continue;
				/* } else { */ case 129:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting RR type or class, not this...", $clone(l, lex)), "")); /* */ $s = 131; case 131: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 130:
				$s = 28; continue;
			/* } else if (_ref$1 === 17) { */ case 24:
				_ref$6 = l.value;
				/* */ if (_ref$6 === 1) { $s = 132; continue; }
				/* */ if (_ref$6 === 5) { $s = 133; continue; }
				/* */ $s = 134; continue;
				/* if (_ref$6 === 1) { */ case 132:
					_tuple$11 = stringToTtl(l.token); ttl$3 = _tuple$11[0]; ok$7 = _tuple$11[1];
					/* */ if (!ok$7) { $s = 136; continue; }
					/* */ $s = 137; continue;
					/* if (!ok$7) { */ case 136:
						$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "not a TTL", $clone(l, lex)), "")); /* */ $s = 138; case 138: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						return;
					/* } */ case 137:
					h.Ttl = ttl$3;
					st = 22;
					$s = 135; continue;
				/* } else if (_ref$6 === 5) { */ case 133:
					h.Rrtype = l.torc;
					st = 23;
					$s = 135; continue;
				/* } else { */ case 134:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "expecting RR type or TTL, not this...", $clone(l, lex)), "")); /* */ $s = 139; case 139: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 135:
				$s = 28; continue;
			/* } else if (_ref$1 === 22) { */ case 25:
				/* */ if (!((l.value === 2))) { $s = 140; continue; }
				/* */ $s = 141; continue;
				/* if (!((l.value === 2))) { */ case 140:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "no blank before RR type", $clone(l, lex)), "")); /* */ $s = 142; case 142: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 141:
				st = 21;
				$s = 28; continue;
			/* } else if (_ref$1 === 21) { */ case 26:
				/* */ if (!((l.value === 5))) { $s = 143; continue; }
				/* */ $s = 144; continue;
				/* if (!((l.value === 5))) { */ case 143:
					$r = $send(t[0], new Token.ptr($ifaceNil, new ParseError.ptr(f, "unknown RR type", $clone(l, lex)), "")); /* */ $s = 145; case 145: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 144:
				h.Rrtype = l.torc;
				st = 23;
				$s = 28; continue;
			/* } else if (_ref$1 === 23) { */ case 27:
				_r$6 = setRR(h, c, origin, f); /* */ $s = 146; case 146: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$12 = _r$6; r$1 = _tuple$12[0]; e$3 = _tuple$12[1]; c1 = _tuple$12[2];
				/* */ if (!(e$3 === ptrType$44.nil)) { $s = 147; continue; }
				/* */ $s = 148; continue;
				/* if (!(e$3 === ptrType$44.nil)) { */ case 147:
					if (e$3.lex.token === "" && (e$3.lex.value === 0)) {
						$copy(e$3.lex, l, lex);
					}
					$r = $send(t[0], new Token.ptr($ifaceNil, e$3, "")); /* */ $s = 149; case 149: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 148:
				$r = $send(t[0], new Token.ptr(r$1, ptrType$44.nil, c1)); /* */ $s = 150; case 150: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				st = 14;
			/* } */ case 28:
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parseZone }; } $f.$ptr = $ptr; $f._ok = _ok; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.c = c; $f.c1 = c1; $f.defttl = defttl; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.e$3 = e$3; $f.e1 = e1; $f.f = f; $f.h = h; $f.include = include; $f.l = l; $f.l$1 = l$1; $f.l$2 = l$2; $f.neworigin = neworigin; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.ok$5 = ok$5; $f.ok$6 = ok$6; $f.ok$7 = ok$7; $f.origin = origin; $f.prevName = prevName; $f.r = r; $f.r$1 = r$1; $f.r1 = r1; $f.s = s; $f.st = st; $f.t = t; $f.ttl = ttl; $f.ttl$1 = ttl$1; $f.ttl$2 = ttl$2; $f.ttl$3 = ttl$3; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	zlexer = function(s, c) {
		var $ptr, _arg, _entry, _entry$1, _entry$2, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, brace, c, com, comi, commt, err, escape, l, ok, ok$1, ok$2, ok$3, ok$4, owner, quote, rrtype, s, space, str, stri, t, t$1, t$2, t$3, t$4, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; brace = $f.brace; c = $f.c; com = $f.com; comi = $f.comi; commt = $f.commt; err = $f.err; escape = $f.escape; l = $f.l; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; owner = $f.owner; quote = $f.quote; rrtype = $f.rrtype; s = $f.s; space = $f.space; str = $f.str; stri = $f.stri; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = $clone(new lex.ptr(), lex);
		str = $makeSlice(sliceType, 2048);
		stri = 0;
		com = $makeSlice(sliceType, 2048);
		comi = 0;
		quote = false;
		escape = false;
		space = false;
		commt = false;
		rrtype = false;
		owner = true;
		brace = 0;
		_r = s.tokenText(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; x = _tuple[0]; err = _tuple[1];
		$deferred.push([function(_arg) { $close(_arg); }, [c]]);
		/* while (true) { */ case 2:
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
			l.column = s.position.Column;
			l.line = s.position.Line;
			/* */ if (stri > 2048) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (stri > 2048) { */ case 4:
				l.token = "token length insufficient for parsing";
				l.err = true;
				$r = new debugging(false).Printf("[%+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = $send(c, $clone(l, lex)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 5:
			/* */ if (comi > 2048) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (comi > 2048) { */ case 8:
				l.token = "comment length insufficient for parsing";
				l.err = true;
				$r = new debugging(false).Printf("[%+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = $send(c, $clone(l, lex)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 9:
			_ref = x;
			/* */ if (_ref === 32 || _ref === 9) { $s = 12; continue; }
			/* */ if (_ref === 59) { $s = 13; continue; }
			/* */ if (_ref === 13) { $s = 14; continue; }
			/* */ if (_ref === 10) { $s = 15; continue; }
			/* */ if (_ref === 92) { $s = 16; continue; }
			/* */ if (_ref === 34) { $s = 17; continue; }
			/* */ if (_ref === 40 || _ref === 41) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* switch (0) { default: if (_ref === 32 || _ref === 9) { */ case 12:
				if (escape) {
					escape = false;
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				if (quote) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				if (commt) {
					((comi < 0 || comi >= com.$length) ? $throwRuntimeError("index out of range") : com.$array[com.$offset + comi] = x);
					comi = comi + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				/* */ if (stri === 0) { $s = 21; continue; }
				/* */ if (owner) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (stri === 0) { */ case 21:
					$s = 24; continue;
				/* } else if (owner) { */ case 22:
					l.value = 6;
					l.token = $bytesToString($subslice(str, 0, stri));
					_r$1 = strings.ToUpper(l.token); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					l.tokenUpper = _r$1;
					l.length = stri;
					_ref$1 = l.tokenUpper;
					if (_ref$1 === "$TTL") {
						l.value = 9;
					} else if (_ref$1 === "$ORIGIN") {
						l.value = 8;
					} else if (_ref$1 === "$INCLUDE") {
						l.value = 10;
					} else if (_ref$1 === "$GENERATE") {
						l.value = 11;
					}
					$r = new debugging(false).Printf("[7 %+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = $send(c, $clone(l, lex)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 24; continue;
				/* } else { */ case 23:
					l.value = 1;
					l.token = $bytesToString($subslice(str, 0, stri));
					_r$2 = strings.ToUpper(l.token); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					l.tokenUpper = _r$2;
					l.length = stri;
					/* */ if (!rrtype) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (!rrtype) { */ case 29:
						_tuple$1 = (_entry = $pkg.StringToType[$String.keyFor(l.tokenUpper)], _entry !== undefined ? [_entry.v, true] : [0, false]); t = _tuple$1[0]; ok = _tuple$1[1];
						/* */ if (ok) { $s = 31; continue; }
						/* */ $s = 32; continue;
						/* if (ok) { */ case 31:
							l.value = 5;
							l.torc = t;
							rrtype = true;
							$s = 33; continue;
						/* } else { */ case 32:
							/* */ if (strings.HasPrefix(l.tokenUpper, "TYPE")) { $s = 34; continue; }
							/* */ $s = 35; continue;
							/* if (strings.HasPrefix(l.tokenUpper, "TYPE")) { */ case 34:
								_tuple$2 = typeToInt(l.token); t$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
								/* */ if (!ok$1) { $s = 36; continue; }
								/* */ $s = 37; continue;
								/* if (!ok$1) { */ case 36:
									l.token = "unknown RR type";
									l.err = true;
									$r = $send(c, $clone(l, lex)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									return;
								/* } */ case 37:
								l.value = 5;
								l.torc = t$1;
							/* } */ case 35:
						/* } */ case 33:
						_tuple$3 = (_entry$1 = $pkg.StringToClass[$String.keyFor(l.tokenUpper)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]); t$2 = _tuple$3[0]; ok$2 = _tuple$3[1];
						/* */ if (ok$2) { $s = 39; continue; }
						/* */ $s = 40; continue;
						/* if (ok$2) { */ case 39:
							l.value = 7;
							l.torc = t$2;
							$s = 41; continue;
						/* } else { */ case 40:
							/* */ if (strings.HasPrefix(l.tokenUpper, "CLASS")) { $s = 42; continue; }
							/* */ $s = 43; continue;
							/* if (strings.HasPrefix(l.tokenUpper, "CLASS")) { */ case 42:
								_tuple$4 = classToInt(l.token); t$3 = _tuple$4[0]; ok$3 = _tuple$4[1];
								/* */ if (!ok$3) { $s = 44; continue; }
								/* */ $s = 45; continue;
								/* if (!ok$3) { */ case 44:
									l.token = "unknown class";
									l.err = true;
									$r = $send(c, $clone(l, lex)); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
									return;
								/* } */ case 45:
								l.value = 7;
								l.torc = t$3;
							/* } */ case 43:
						/* } */ case 41:
					/* } */ case 30:
					$r = new debugging(false).Printf("[6 %+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = $send(c, $clone(l, lex)); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
				stri = 0;
				/* */ if (!space && !commt) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (!space && !commt) { */ case 49:
					l.value = 2;
					l.token = " ";
					l.length = 1;
					$r = new debugging(false).Printf("[5 %+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = $send(c, $clone(l, lex)); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 50:
				owner = false;
				space = true;
				$s = 20; continue;
			/* } else if (_ref === 59) { */ case 13:
				if (escape) {
					escape = false;
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				if (quote) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				/* */ if (stri > 0) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (stri > 0) { */ case 53:
					l.value = 1;
					l.token = $bytesToString($subslice(str, 0, stri));
					l.length = stri;
					$r = new debugging(false).Printf("[4 %+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = $send(c, $clone(l, lex)); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					stri = 0;
				/* } */ case 54:
				commt = true;
				((comi < 0 || comi >= com.$length) ? $throwRuntimeError("index out of range") : com.$array[com.$offset + comi] = 59);
				comi = comi + (1) >> 0;
				$s = 20; continue;
			/* } else if (_ref === 13) { */ case 14:
				escape = false;
				if (quote) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				$s = 20; continue;
			/* } else if (_ref === 10) { */ case 15:
				escape = false;
				if (quote) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				/* */ if (commt) { $s = 57; continue; }
				/* */ $s = 58; continue;
				/* if (commt) { */ case 57:
					commt = false;
					rrtype = false;
					stri = 0;
					/* */ if (brace === 0) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (brace === 0) { */ case 59:
						owner = true;
						owner = true;
						l.value = 4;
						l.token = "\n";
						l.length = 1;
						l.comment = $bytesToString($subslice(com, 0, comi));
						$r = new debugging(false).Printf("[3 %+v %+v]", new sliceType$8([new $String(l.token), new $String(l.comment)])); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = $send(c, $clone(l, lex)); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						l.comment = "";
						comi = 0;
						/* break; */ $s = 20; continue;
					/* } */ case 60:
					((comi < 0 || comi >= com.$length) ? $throwRuntimeError("index out of range") : com.$array[com.$offset + comi] = 32);
					comi = comi + (1) >> 0;
					/* break; */ $s = 20; continue;
				/* } */ case 58:
				/* */ if (brace === 0) { $s = 63; continue; }
				/* */ $s = 64; continue;
				/* if (brace === 0) { */ case 63:
					/* */ if (!((stri === 0))) { $s = 65; continue; }
					/* */ $s = 66; continue;
					/* if (!((stri === 0))) { */ case 65:
						l.value = 1;
						l.token = $bytesToString($subslice(str, 0, stri));
						_r$3 = strings.ToUpper(l.token); /* */ $s = 67; case 67: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						l.tokenUpper = _r$3;
						l.length = stri;
						if (!rrtype) {
							_tuple$5 = (_entry$2 = $pkg.StringToType[$String.keyFor(l.tokenUpper)], _entry$2 !== undefined ? [_entry$2.v, true] : [0, false]); t$4 = _tuple$5[0]; ok$4 = _tuple$5[1];
							if (ok$4) {
								l.value = 5;
								l.torc = t$4;
								rrtype = true;
							}
						}
						$r = new debugging(false).Printf("[2 %+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = $send(c, $clone(l, lex)); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 66:
					l.value = 4;
					l.token = "\n";
					l.length = 1;
					$r = new debugging(false).Printf("[1 %+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 70; case 70: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = $send(c, $clone(l, lex)); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					stri = 0;
					commt = false;
					rrtype = false;
					owner = true;
					comi = 0;
				/* } */ case 64:
				$s = 20; continue;
			/* } else if (_ref === 92) { */ case 16:
				if (commt) {
					((comi < 0 || comi >= com.$length) ? $throwRuntimeError("index out of range") : com.$array[com.$offset + comi] = x);
					comi = comi + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				if (escape) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					escape = false;
					/* break; */ $s = 20; continue;
				}
				((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
				stri = stri + (1) >> 0;
				escape = true;
				$s = 20; continue;
			/* } else if (_ref === 34) { */ case 17:
				if (commt) {
					((comi < 0 || comi >= com.$length) ? $throwRuntimeError("index out of range") : com.$array[com.$offset + comi] = x);
					comi = comi + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				if (escape) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					escape = false;
					/* break; */ $s = 20; continue;
				}
				space = false;
				/* */ if (!((stri === 0))) { $s = 72; continue; }
				/* */ $s = 73; continue;
				/* if (!((stri === 0))) { */ case 72:
					l.value = 1;
					l.token = $bytesToString($subslice(str, 0, stri));
					l.length = stri;
					$r = new debugging(false).Printf("[%+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = $send(c, $clone(l, lex)); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					stri = 0;
				/* } */ case 73:
				l.value = 3;
				l.token = "\"";
				l.length = 1;
				$r = $send(c, $clone(l, lex)); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				quote = !quote;
				$s = 20; continue;
			/* } else if (_ref === 40 || _ref === 41) { */ case 18:
				if (commt) {
					((comi < 0 || comi >= com.$length) ? $throwRuntimeError("index out of range") : com.$array[com.$offset + comi] = x);
					comi = comi + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				if (escape) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					escape = false;
					/* break; */ $s = 20; continue;
				}
				if (quote) {
					((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
					stri = stri + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				_ref$2 = x;
				/* */ if (_ref$2 === 41) { $s = 77; continue; }
				/* */ if (_ref$2 === 40) { $s = 78; continue; }
				/* */ $s = 79; continue;
				/* if (_ref$2 === 41) { */ case 77:
					brace = brace - (1) >> 0;
					/* */ if (brace < 0) { $s = 80; continue; }
					/* */ $s = 81; continue;
					/* if (brace < 0) { */ case 80:
						l.token = "extra closing brace";
						l.err = true;
						$r = new debugging(false).Printf("[%+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = $send(c, $clone(l, lex)); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						return;
					/* } */ case 81:
					$s = 79; continue;
				/* } else if (_ref$2 === 40) { */ case 78:
					brace = brace + (1) >> 0;
				/* } */ case 79:
				$s = 20; continue;
			/* } else { */ case 19:
				escape = false;
				if (commt) {
					((comi < 0 || comi >= com.$length) ? $throwRuntimeError("index out of range") : com.$array[com.$offset + comi] = x);
					comi = comi + (1) >> 0;
					/* break; */ $s = 20; continue;
				}
				((stri < 0 || stri >= str.$length) ? $throwRuntimeError("index out of range") : str.$array[str.$offset + stri] = x);
				stri = stri + (1) >> 0;
				space = false;
			/* } } */ case 20:
			_r$4 = s.tokenText(); /* */ $s = 84; case 84: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$6 = _r$4; x = _tuple$6[0]; err = _tuple$6[1];
		/* } */ $s = 2; continue; case 3:
		/* */ if (stri > 0) { $s = 85; continue; }
		/* */ $s = 86; continue;
		/* if (stri > 0) { */ case 85:
			l.token = $bytesToString($subslice(str, 0, stri));
			l.length = stri;
			l.value = 1;
			$r = new debugging(false).Printf("[%+v]", new sliceType$8([new $String(l.token)])); /* */ $s = 87; case 87: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $send(c, $clone(l, lex)); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 86:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: zlexer }; } $f.$ptr = $ptr; $f._arg = _arg; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.brace = brace; $f.c = c; $f.com = com; $f.comi = comi; $f.commt = commt; $f.err = err; $f.escape = escape; $f.l = l; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.owner = owner; $f.quote = quote; $f.rrtype = rrtype; $f.s = s; $f.space = space; $f.str = str; $f.stri = stri; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	classToInt = function(token) {
		var $ptr, _tuple, class$1, ok, token;
		_tuple = strconv.Atoi(token.substring(5)); class$1 = _tuple[0]; ok = _tuple[1];
		if (!($interfaceIsEqual(ok, $ifaceNil)) || class$1 > 65535) {
			return [0, false];
		}
		return [(class$1 << 16 >>> 16), true];
	};
	typeToInt = function(token) {
		var $ptr, _tuple, ok, token, typ;
		_tuple = strconv.Atoi(token.substring(4)); typ = _tuple[0]; ok = _tuple[1];
		if (!($interfaceIsEqual(ok, $ifaceNil)) || typ > 65535) {
			return [0, false];
		}
		return [(typ << 16 >>> 16), true];
	};
	stringToTtl = function(token) {
		var $ptr, _i, _ref, _ref$1, _rune, c, i, s, token, x, x$1, x$2, x$3, x$4, x$5, x$6;
		s = 0;
		i = 0;
		_ref = token;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			_ref$1 = c;
			if (_ref$1 === 115 || _ref$1 === 83) {
				s = s + (i) >>> 0;
				i = 0;
			} else if (_ref$1 === 109 || _ref$1 === 77) {
				s = s + (((((i >>> 16 << 16) * 60 >>> 0) + (i << 16 >>> 16) * 60) >>> 0)) >>> 0;
				i = 0;
			} else if (_ref$1 === 104 || _ref$1 === 72) {
				s = s + ((x = (((i >>> 16 << 16) * 60 >>> 0) + (i << 16 >>> 16) * 60) >>> 0, (((x >>> 16 << 16) * 60 >>> 0) + (x << 16 >>> 16) * 60) >>> 0)) >>> 0;
				i = 0;
			} else if (_ref$1 === 100 || _ref$1 === 68) {
				s = s + ((x$1 = (x$2 = (((i >>> 16 << 16) * 60 >>> 0) + (i << 16 >>> 16) * 60) >>> 0, (((x$2 >>> 16 << 16) * 60 >>> 0) + (x$2 << 16 >>> 16) * 60) >>> 0), (((x$1 >>> 16 << 16) * 24 >>> 0) + (x$1 << 16 >>> 16) * 24) >>> 0)) >>> 0;
				i = 0;
			} else if (_ref$1 === 119 || _ref$1 === 87) {
				s = s + ((x$3 = (x$4 = (x$5 = (((i >>> 16 << 16) * 60 >>> 0) + (i << 16 >>> 16) * 60) >>> 0, (((x$5 >>> 16 << 16) * 60 >>> 0) + (x$5 << 16 >>> 16) * 60) >>> 0), (((x$4 >>> 16 << 16) * 24 >>> 0) + (x$4 << 16 >>> 16) * 24) >>> 0), (((x$3 >>> 16 << 16) * 7 >>> 0) + (x$3 << 16 >>> 16) * 7) >>> 0)) >>> 0;
				i = 0;
			} else if (_ref$1 === 48 || _ref$1 === 49 || _ref$1 === 50 || _ref$1 === 51 || _ref$1 === 52 || _ref$1 === 53 || _ref$1 === 54 || _ref$1 === 55 || _ref$1 === 56 || _ref$1 === 57) {
				i = (x$6 = 10, (((i >>> 16 << 16) * x$6 >>> 0) + (i << 16 >>> 16) * x$6) >>> 0);
				i = i + (((c >>> 0) - 48 >>> 0)) >>> 0;
			} else {
				return [0, false];
			}
			_i += _rune[1];
		}
		return [s + i >>> 0, true];
	};
	stringToCm = function(token) {
		var $ptr, _q, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, cmeters, e, err, m, meters, ok, s, token, val;
		e = 0;
		m = 0;
		ok = false;
		if ((token.charCodeAt((token.length - 1 >> 0)) === 77) || (token.charCodeAt((token.length - 1 >> 0)) === 109)) {
			token = token.substring(0, (token.length - 1 >> 0));
		}
		s = strings.SplitN(token, ".", 2);
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; meters = _tmp; cmeters = _tmp$1; val = _tmp$2;
		err = $ifaceNil;
		_ref = s.$length;
		if (_ref === 2) {
			_tuple = strconv.Atoi((1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1])); cmeters = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [e, m, ok];
			}
			_tuple$1 = strconv.Atoi((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0])); meters = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [e, m, ok];
			}
		} else if (_ref === 1) {
			_tuple$2 = strconv.Atoi((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0])); meters = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [e, m, ok];
			}
		} else if (_ref === 0) {
			_tmp$3 = 0; _tmp$4 = 0; _tmp$5 = false; e = _tmp$3; m = _tmp$4; ok = _tmp$5;
			return [e, m, ok];
		}
		ok = true;
		if (meters > 0) {
			e = 2;
			val = meters;
		} else {
			e = 0;
			val = cmeters;
		}
		while (true) {
			if (!(val > 10)) { break; }
			e = e + (1) << 24 >>> 24;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (e > 9) {
			ok = false;
		}
		m = (val << 24 >>> 24);
		return [e, m, ok];
	};
	appendOrigin = function(name, origin) {
		var $ptr, name, origin;
		if (origin === ".") {
			return name + origin;
		}
		return name + "." + origin;
	};
	locCheckNorth = function(token, latitude) {
		var $ptr, _ref, latitude, token;
		_ref = token;
		if (_ref === "n" || _ref === "N") {
			return [2147483648 + latitude >>> 0, true];
		} else if (_ref === "s" || _ref === "S") {
			return [2147483648 - latitude >>> 0, true];
		}
		return [latitude, false];
	};
	locCheckEast = function(token, longitude) {
		var $ptr, _ref, longitude, token;
		_ref = token;
		if (_ref === "e" || _ref === "E") {
			return [2147483648 + longitude >>> 0, true];
		} else if (_ref === "w" || _ref === "W") {
			return [2147483648 - longitude >>> 0, true];
		}
		return [longitude, false];
	};
	slurpRemainder = function(c, f) {
		var $ptr, _r, _r$1, _ref, c, com, f, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; c = $f.c; com = $f.com; f = $f.f; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		com = "";
		_ref = l.value;
		/* */ if (_ref === 2) { $s = 2; continue; }
		/* */ if (_ref === 4) { $s = 3; continue; }
		/* */ if (_ref === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_ref === 2) { */ case 2:
			_r$1 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$copy(l, _r$1[0], lex);
			com = l.comment;
			if (!((l.value === 4)) && !((l.value === 0))) {
				return [new ParseError.ptr(f, "garbage after rdata", $clone(l, lex)), ""];
			}
			$s = 6; continue;
		/* } else if (_ref === 4) { */ case 3:
			com = l.comment;
			$s = 6; continue;
		/* } else if (_ref === 0) { */ case 4:
			$s = 6; continue;
		/* } else { */ case 5:
			return [new ParseError.ptr(f, "garbage after rdata", $clone(l, lex)), ""];
		/* } */ case 6:
		return [ptrType$44.nil, com];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: slurpRemainder }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.c = c; $f.com = com; $f.f = f; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringToNodeID = function(l) {
		var $ptr, _tuple, e, l, s, u;
		l = $clone(l, lex);
		if (l.token.length < 19) {
			return [new $Uint64(0, 0), new ParseError.ptr(l.token, "bad NID/L64 NodeID/Locator64", $clone(l, lex))];
		}
		if (!((l.token.charCodeAt(4) === 58)) && !((l.token.charCodeAt(9) === 58)) && !((l.token.charCodeAt(14) === 58))) {
			return [new $Uint64(0, 0), new ParseError.ptr(l.token, "bad NID/L64 NodeID/Locator64", $clone(l, lex))];
		}
		s = l.token.substring(0, 4) + l.token.substring(5, 9) + l.token.substring(10, 14) + l.token.substring(15, 19);
		_tuple = strconv.ParseUint(s, 16, 64); u = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [new $Uint64(0, 0), new ParseError.ptr(l.token, "bad NID/L64 NodeID/Locator64", $clone(l, lex))];
		}
		return [u, ptrType$44.nil];
	};
	setRR = function(h, c, o, f) {
		var $ptr, _entry, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, c, cm, e, f, h, o, ok, parserfunc, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; cm = $f.cm; e = $f.e; f = $f.f; h = $f.h; o = $f.o; ok = $f.ok; parserfunc = $f.parserfunc; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_tuple = (_entry = typeToparserFunc[$Uint16.keyFor(h.Rrtype)], _entry !== undefined ? [_entry.v, true] : [new parserFunc.ptr(), false]); parserfunc = $clone(_tuple[0], parserFunc); ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = parserfunc.Func(h, c, o, f); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r; r = _tuple$1[0]; e = _tuple$1[1]; cm = _tuple$1[2];
			if (parserfunc.Variable) {
				return [r, e, cm];
			}
			if (!(e === ptrType$44.nil)) {
				return [$ifaceNil, e, ""];
			}
			_r$1 = slurpRemainder(c, f); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1; e = _tuple$2[0]; cm = _tuple$2[1];
			if (!(e === ptrType$44.nil)) {
				return [$ifaceNil, e, ""];
			}
			return [r, ptrType$44.nil, cm];
		/* } */ case 2:
		_r$2 = setRFC3597(h, c, o, f); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setRR }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.cm = cm; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.ok = ok; $f.parserfunc = parserfunc; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	endingToString = function(c, errstr, f) {
		var $ptr, _r, _r$1, _ref, c, errstr, f, l, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; c = $f.c; errstr = $f.errstr; f = $f.f; l = $f.l; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = "";
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		/* while (true) { */ case 2:
			/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 3; continue; }
			_ref = l.value;
			if (_ref === 1) {
				s = s + (l.token);
			} else if (_ref === 2) {
			} else {
				return ["", new ParseError.ptr(f, errstr, $clone(l, lex)), ""];
			}
			_r$1 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$copy(l, _r$1[0], lex);
		/* } */ $s = 2; continue; case 3:
		return [s, ptrType$44.nil, l.comment];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: endingToString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.c = c; $f.errstr = errstr; $f.f = f; $f.l = l; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	endingToTxtSlice = function(c, errstr, f) {
		var $ptr, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, c, empty, errstr, f, i, l, p, quote, s, sx, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; c = $f.c; empty = $f.empty; errstr = $f.errstr; f = $f.f; i = $f.i; l = $f.l; p = $f.p; quote = $f.quote; s = $f.s; sx = $f.sx; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		quote = false;
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		s = sliceType$1.nil;
		_ref = l.value === 3;
		/* */ if (_ref) { $s = 2; continue; }
		/* */ if (_ref === false) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref) { */ case 2:
			s = $makeSlice(sliceType$1, 0);
			empty = true;
			/* while (true) { */ case 5:
				/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 6; continue; }
				_ref$1 = l.value;
				switch (0) { default: if (_ref$1 === 1) {
					empty = false;
					if (l.token.length > 255) {
						sx = new sliceType$1([]);
						_tmp = 0; _tmp$1 = 255; p = _tmp; i = _tmp$1;
						while (true) {
							if (i <= l.token.length) {
								sx = $append(sx, l.token.substring(p, i));
							} else {
								sx = $append(sx, l.token.substring(p));
								break;
							}
							_tmp$2 = p + 255 >> 0; _tmp$3 = i + 255 >> 0; p = _tmp$2; i = _tmp$3;
						}
						s = $appendSlice(s, sx);
						break;
					}
					s = $append(s, l.token);
				} else if (_ref$1 === 2) {
					if (quote) {
						return [sliceType$1.nil, new ParseError.ptr(f, errstr, $clone(l, lex)), ""];
					}
				} else if (_ref$1 === 3) {
					if (empty && quote) {
						s = $append(s, "");
					}
					quote = !quote;
					empty = true;
				} else {
					return [sliceType$1.nil, new ParseError.ptr(f, errstr, $clone(l, lex)), ""];
				} }
				_r$1 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$copy(l, _r$1[0], lex);
			/* } */ $s = 5; continue; case 6:
			if (quote) {
				return [sliceType$1.nil, new ParseError.ptr(f, errstr, $clone(l, lex)), ""];
			}
			$s = 4; continue;
		/* } else if (_ref === false) { */ case 3:
			s = $makeSlice(sliceType$1, 1);
			/* while (true) { */ case 8:
				/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 9; continue; }
				(0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0] = (0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) + (l.token));
				_r$2 = $recv(c); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$copy(l, _r$2[0], lex);
			/* } */ $s = 8; continue; case 9:
		/* } */ case 4:
		return [s, ptrType$44.nil, l.comment];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: endingToTxtSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.c = c; $f.empty = empty; $f.errstr = errstr; $f.f = f; $f.i = i; $f.l = l; $f.p = p; $f.quote = quote; $f.s = s; $f.sx = sx; $f.$s = $s; $f.$r = $r; return $f;
	};
	setA = function(h, c, o, f) {
		var $ptr, _r, c, f, h, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new A.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		rr.A = net.ParseIP(l.token);
		if (rr.A === net.IP.nil) {
			return [$ifaceNil, new ParseError.ptr(f, "bad A A", $clone(l, lex)), ""];
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setA }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setAAAA = function(h, c, o, f) {
		var $ptr, _r, c, f, h, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new AAAA.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		rr.AAAA = net.ParseIP(l.token);
		if (rr.AAAA === net.IP.nil) {
			return [$ifaceNil, new ParseError.ptr(f, "bad AAAA AAAA", $clone(l, lex)), ""];
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setAAAA }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNS = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NS.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Ns = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Ns = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NS Ns", $clone(l, lex)), ""];
		}
		if (!((rr.Ns.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Ns = appendOrigin(rr.Ns, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNS }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setPTR = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new PTR.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Ptr = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Ptr = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad PTR Ptr", $clone(l, lex)), ""];
		}
		if (!((rr.Ptr.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Ptr = appendOrigin(rr.Ptr, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setPTR }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNSAPPTR = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NSAPPTR.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Ptr = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Ptr = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSAP-PTR Ptr", $clone(l, lex)), ""];
		}
		if (!((rr.Ptr.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Ptr = appendOrigin(rr.Ptr, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNSAPPTR }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setRP = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, f, h, l, o, ok, ok$1, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new RP.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Mbox = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Mbox = o;
		} else {
			_tuple = IsDomainName(l.token); ok = _tuple[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad RP Mbox", $clone(l, lex)), ""];
			}
			if (!((rr.Mbox.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.Mbox = appendOrigin(rr.Mbox, o);
			}
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Txt = l.token;
		if (l.token === "@") {
			rr.Txt = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok$1 = _tuple$1[1];
		if (!ok$1) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RP Txt", $clone(l, lex)), ""];
		}
		if (!((rr.Txt.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Txt = appendOrigin(rr.Txt, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setRP }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMR = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new MR.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Mr = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Mr = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MR Mr", $clone(l, lex)), ""];
		}
		if (!((rr.Mr.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Mr = appendOrigin(rr.Mr, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMR }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMB = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new MB.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Mb = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Mb = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MB Mb", $clone(l, lex)), ""];
		}
		if (!((rr.Mb.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Mb = appendOrigin(rr.Mb, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMB }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMG = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new MG.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Mg = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Mg = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MG Mg", $clone(l, lex)), ""];
		}
		if (!((rr.Mg.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Mg = appendOrigin(rr.Mg, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMG }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setHINFO = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, c, f, h, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new HINFO.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Cpu = l.token;
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Os = l.token;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setHINFO }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMINFO = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, f, h, l, o, ok, ok$1, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new MINFO.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Rmail = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Rmail = o;
		} else {
			_tuple = IsDomainName(l.token); ok = _tuple[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad MINFO Rmail", $clone(l, lex)), ""];
			}
			if (!((rr.Rmail.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.Rmail = appendOrigin(rr.Rmail, o);
			}
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Email = l.token;
		if (l.token === "@") {
			rr.Email = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok$1 = _tuple$1[1];
		if (!ok$1) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MINFO Email", $clone(l, lex)), ""];
		}
		if (!((rr.Email.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Email = appendOrigin(rr.Email, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMINFO }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMF = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new MF.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Mf = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Mf = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MF Mf", $clone(l, lex)), ""];
		}
		if (!((rr.Mf.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Mf = appendOrigin(rr.Mf, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMF }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMD = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new MD.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Md = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Md = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MD Md", $clone(l, lex)), ""];
		}
		if (!((rr.Md.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Md = appendOrigin(rr.Md, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMD }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMX = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new MX.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MX Pref", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Mx = l.token;
		if (l.token === "@") {
			rr.Mx = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok = _tuple$1[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad MX Mx", $clone(l, lex)), ""];
		}
		if (!((rr.Mx.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Mx = appendOrigin(rr.Mx, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMX }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setRT = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new RT.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RT Preference", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Host = l.token;
		if (l.token === "@") {
			rr.Host = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok = _tuple$1[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RT Host", $clone(l, lex)), ""];
		}
		if (!((rr.Host.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Host = appendOrigin(rr.Host, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setRT }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setAFSDB = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new AFSDB.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad AFSDB Subtype", $clone(l, lex)), ""];
		}
		rr.Subtype = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Hostname = l.token;
		if (l.token === "@") {
			rr.Hostname = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok = _tuple$1[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad AFSDB Hostname", $clone(l, lex)), ""];
		}
		if (!((rr.Hostname.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Hostname = appendOrigin(rr.Hostname, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setAFSDB }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setX25 = function(h, c, o, f) {
		var $ptr, _r, c, f, h, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new X25.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.PSDNAddress = l.token;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setX25 }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setKX = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new KX.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad KX Pref", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Exchanger = l.token;
		if (l.token === "@") {
			rr.Exchanger = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok = _tuple$1[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad KX Exchanger", $clone(l, lex)), ""];
		}
		if (!((rr.Exchanger.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Exchanger = appendOrigin(rr.Exchanger, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setKX }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setCNAME = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new CNAME.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Target = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Target = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad CNAME Target", $clone(l, lex)), ""];
		}
		if (!((rr.Target.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Target = appendOrigin(rr.Target, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setCNAME }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDNAME = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, f, h, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new DNAME.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Target = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Target = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = IsDomainName(l.token); ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad CNAME Target", $clone(l, lex)), ""];
		}
		if (!((rr.Target.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Target = appendOrigin(rr.Target, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setDNAME }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setSOA = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, c, e, f, h, i, j, l, o, ok, ok$1, ok$2, rr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; j = $f.j; l = $f.l; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; rr = $f.rr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new SOA.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.Ns = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		if (l.token === "@") {
			rr.Ns = o;
		} else {
			_tuple = IsDomainName(l.token); ok = _tuple[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad SOA Ns", $clone(l, lex)), ""];
			}
			if (!((rr.Ns.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.Ns = appendOrigin(rr.Ns, o);
			}
		}
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Mbox = l.token;
		if (l.token === "@") {
			rr.Mbox = o;
		} else {
			_tuple$1 = IsDomainName(l.token); ok$1 = _tuple$1[1];
			if (!ok$1 || (l.length === 0)) {
				return [$ifaceNil, new ParseError.ptr(f, "bad SOA Mbox", $clone(l, lex)), ""];
			}
			if (!((rr.Mbox.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.Mbox = appendOrigin(rr.Mbox, o);
			}
		}
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		v = 0;
		ok$2 = false;
		i = 0;
		/* while (true) { */ case 5:
			/* if (!(i < 5)) { break; } */ if(!(i < 5)) { $s = 6; continue; }
			_r$4 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$copy(l, _r$4[0], lex);
			_tuple$2 = strconv.Atoi(l.token); j = _tuple$2[0]; e = _tuple$2[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				if (i === 0) {
					return [$ifaceNil, new ParseError.ptr(f, "bad SOA zone parameter", $clone(l, lex)), ""];
				}
				_tuple$3 = stringToTtl(l.token); v = _tuple$3[0]; ok$2 = _tuple$3[1];
				if (!ok$2) {
					return [$ifaceNil, new ParseError.ptr(f, "bad SOA zone parameter", $clone(l, lex)), ""];
				}
			} else {
				v = (j >>> 0);
			}
			_ref = i;
			/* */ if (_ref === 0) { $s = 8; continue; }
			/* */ if (_ref === 1) { $s = 9; continue; }
			/* */ if (_ref === 2) { $s = 10; continue; }
			/* */ if (_ref === 3) { $s = 11; continue; }
			/* */ if (_ref === 4) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_ref === 0) { */ case 8:
				rr.Serial = v;
				_r$5 = $recv(c); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5[0];
				$s = 13; continue;
			/* } else if (_ref === 1) { */ case 9:
				rr.Refresh = v;
				_r$6 = $recv(c); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6[0];
				$s = 13; continue;
			/* } else if (_ref === 2) { */ case 10:
				rr.Retry = v;
				_r$7 = $recv(c); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7[0];
				$s = 13; continue;
			/* } else if (_ref === 3) { */ case 11:
				rr.Expire = v;
				_r$8 = $recv(c); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8[0];
				$s = 13; continue;
			/* } else if (_ref === 4) { */ case 12:
				rr.Minttl = v;
			/* } */ case 13:
			i = i + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setSOA }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.l = l; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.rr = rr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	setSRV = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new SRV.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad SRV Priority", $clone(l, lex)), ""];
		}
		rr.Priority = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad SRV Weight", $clone(l, lex)), ""];
		}
		rr.Weight = (i << 16 >>> 16);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; e = _tuple$2[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad SRV Port", $clone(l, lex)), ""];
		}
		rr.Port = (i << 16 >>> 16);
		_r$5 = $recv(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5[0];
		_r$6 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$copy(l, _r$6[0], lex);
		rr.Target = l.token;
		if (l.token === "@") {
			rr.Target = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$3 = IsDomainName(l.token); ok = _tuple$3[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad SRV Target", $clone(l, lex)), ""];
		}
		if (!((rr.Target.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Target = appendOrigin(rr.Target, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setSRV }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNAPTR = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NAPTR.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Order", $clone(l, lex)), ""];
		}
		rr.Order = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Preference", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		if (!((l.value === 3))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Flags", $clone(l, lex)), ""];
		}
		_r$5 = $recv(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$copy(l, _r$5[0], lex);
		/* */ if (l.value === 1) { $s = 7; continue; }
		/* */ if (l.value === 3) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (l.value === 1) { */ case 7:
			rr.Flags = l.token;
			_r$6 = $recv(c); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$copy(l, _r$6[0], lex);
			if (!((l.value === 3))) {
				return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Flags", $clone(l, lex)), ""];
			}
			$s = 10; continue;
		/* } else if (l.value === 3) { */ case 8:
			rr.Flags = "";
			$s = 10; continue;
		/* } else { */ case 9:
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Flags", $clone(l, lex)), ""];
		/* } */ case 10:
		_r$7 = $recv(c); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7[0];
		_r$8 = $recv(c); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$copy(l, _r$8[0], lex);
		if (!((l.value === 3))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Service", $clone(l, lex)), ""];
		}
		_r$9 = $recv(c); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$copy(l, _r$9[0], lex);
		/* */ if (l.value === 1) { $s = 15; continue; }
		/* */ if (l.value === 3) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (l.value === 1) { */ case 15:
			rr.Service = l.token;
			_r$10 = $recv(c); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			$copy(l, _r$10[0], lex);
			if (!((l.value === 3))) {
				return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Service", $clone(l, lex)), ""];
			}
			$s = 18; continue;
		/* } else if (l.value === 3) { */ case 16:
			rr.Service = "";
			$s = 18; continue;
		/* } else { */ case 17:
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Service", $clone(l, lex)), ""];
		/* } */ case 18:
		_r$11 = $recv(c); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11[0];
		_r$12 = $recv(c); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		$copy(l, _r$12[0], lex);
		if (!((l.value === 3))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Regexp", $clone(l, lex)), ""];
		}
		_r$13 = $recv(c); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		$copy(l, _r$13[0], lex);
		/* */ if (l.value === 1) { $s = 23; continue; }
		/* */ if (l.value === 3) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (l.value === 1) { */ case 23:
			rr.Regexp = l.token;
			_r$14 = $recv(c); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$copy(l, _r$14[0], lex);
			if (!((l.value === 3))) {
				return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Regexp", $clone(l, lex)), ""];
			}
			$s = 26; continue;
		/* } else if (l.value === 3) { */ case 24:
			rr.Regexp = "";
			$s = 26; continue;
		/* } else { */ case 25:
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Regexp", $clone(l, lex)), ""];
		/* } */ case 26:
		_r$15 = $recv(c); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15[0];
		_r$16 = $recv(c); /* */ $s = 29; case 29: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$copy(l, _r$16[0], lex);
		rr.Replacement = l.token;
		if (l.token === "@") {
			rr.Replacement = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$2 = IsDomainName(l.token); ok = _tuple$2[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NAPTR Replacement", $clone(l, lex)), ""];
		}
		if (!((rr.Replacement.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Replacement = appendOrigin(rr.Replacement, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNAPTR }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setTALINK = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, f, h, l, o, ok, ok$1, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; f = $f.f; h = $f.h; l = $f.l; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new TALINK.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.PreviousName = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.PreviousName = o;
		} else {
			_tuple = IsDomainName(l.token); ok = _tuple[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad TALINK PreviousName", $clone(l, lex)), ""];
			}
			if (!((rr.PreviousName.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.PreviousName = appendOrigin(rr.PreviousName, o);
			}
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.NextName = l.token;
		if (l.token === "@") {
			rr.NextName = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok$1 = _tuple$1[1];
		if (!ok$1 || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad TALINK NextName", $clone(l, lex)), ""];
		}
		if (!((rr.NextName.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.NextName = appendOrigin(rr.NextName, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setTALINK }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setLOC = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, c, count, e, e$1, e$2, e$3, e$4, e$5, e$6, e$7, e$8, e$9, f, h, i, i$1, i$2, i$3, i$4, i$5, i$6, l, m, m$1, m$2, o, ok, ok$1, ok$2, ok$3, rr, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; c = $f.c; count = $f.count; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; e$3 = $f.e$3; e$4 = $f.e$4; e$5 = $f.e$5; e$6 = $f.e$6; e$7 = $f.e$7; e$8 = $f.e$8; e$9 = $f.e$9; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; i$6 = $f.i$6; l = $f.l; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; rr = $f.rr; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new LOC.ptr();
		$copy(rr.Hdr, h, RR_Header);
		rr.HorizPre = 165;
		rr.VertPre = 162;
		rr.Size = 18;
		ok = false;
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LOC Latitude", $clone(l, lex)), ""];
		} else {
			rr.Latitude = (x = (i >>> 0), (((3600000 >>> 16 << 16) * x >>> 0) + (3600000 << 16 >>> 16) * x) >>> 0);
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = locCheckNorth(l.token, rr.Latitude); rr.Latitude = _tuple$1[0]; ok = _tuple$1[1];
		/* */ if (ok) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok) { */ case 4:
			/* goto East */ $s = 6; continue;
		/* } */ case 5:
		_tuple$2 = strconv.Atoi(l.token); i$1 = _tuple$2[0]; e$1 = _tuple$2[1];
		if (!($interfaceIsEqual(e$1, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LOC Latitude minutes", $clone(l, lex)), ""];
		} else {
			rr.Latitude = rr.Latitude + ((x$1 = (i$1 >>> 0), (((60000 >>> 16 << 16) * x$1 >>> 0) + (60000 << 16 >>> 16) * x$1) >>> 0)) >>> 0;
		}
		_r$3 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$3 = strconv.ParseFloat(l.token, 32); i$2 = _tuple$3[0]; e$2 = _tuple$3[1];
		if (!($interfaceIsEqual(e$2, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LOC Latitude seconds", $clone(l, lex)), ""];
		} else {
			rr.Latitude = rr.Latitude + ((1000 * i$2 >> 0)) >>> 0;
		}
		_r$5 = $recv(c); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5[0];
		_r$6 = $recv(c); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$copy(l, _r$6[0], lex);
		_tuple$4 = locCheckNorth(l.token, rr.Latitude); rr.Latitude = _tuple$4[0]; ok = _tuple$4[1];
		/* */ if (ok) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (ok) { */ case 11:
			/* goto East */ $s = 6; continue;
		/* } */ case 12:
		return [$ifaceNil, new ParseError.ptr(f, "bad LOC Latitude North/South", $clone(l, lex)), ""];
		/* East: */ case 6:
		_r$7 = $recv(c); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7[0];
		_r$8 = $recv(c); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$copy(l, _r$8[0], lex);
		_tuple$5 = strconv.Atoi(l.token); i$3 = _tuple$5[0]; e$3 = _tuple$5[1];
		if (!($interfaceIsEqual(e$3, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LOC Longitude", $clone(l, lex)), ""];
		} else {
			rr.Longitude = (x$2 = (i$3 >>> 0), (((3600000 >>> 16 << 16) * x$2 >>> 0) + (3600000 << 16 >>> 16) * x$2) >>> 0);
		}
		_r$9 = $recv(c); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9[0];
		_r$10 = $recv(c); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$copy(l, _r$10[0], lex);
		_tuple$6 = locCheckEast(l.token, rr.Longitude); rr.Longitude = _tuple$6[0]; ok = _tuple$6[1];
		/* */ if (ok) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (ok) { */ case 17:
			/* goto Altitude */ $s = 19; continue;
		/* } */ case 18:
		_tuple$7 = strconv.Atoi(l.token); i$4 = _tuple$7[0]; e$4 = _tuple$7[1];
		if (!($interfaceIsEqual(e$4, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LOC Longitude minutes", $clone(l, lex)), ""];
		} else {
			rr.Longitude = rr.Longitude + ((x$3 = (i$4 >>> 0), (((60000 >>> 16 << 16) * x$3 >>> 0) + (60000 << 16 >>> 16) * x$3) >>> 0)) >>> 0;
		}
		_r$11 = $recv(c); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11[0];
		_r$12 = $recv(c); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		$copy(l, _r$12[0], lex);
		_tuple$8 = strconv.ParseFloat(l.token, 32); i$5 = _tuple$8[0]; e$5 = _tuple$8[1];
		if (!($interfaceIsEqual(e$5, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LOC Longitude seconds", $clone(l, lex)), ""];
		} else {
			rr.Longitude = rr.Longitude + ((1000 * i$5 >> 0)) >>> 0;
		}
		_r$13 = $recv(c); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13[0];
		_r$14 = $recv(c); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$copy(l, _r$14[0], lex);
		_tuple$9 = locCheckEast(l.token, rr.Longitude); rr.Longitude = _tuple$9[0]; ok = _tuple$9[1];
		/* */ if (ok) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (ok) { */ case 24:
			/* goto Altitude */ $s = 19; continue;
		/* } */ case 25:
		return [$ifaceNil, new ParseError.ptr(f, "bad LOC Longitude East/West", $clone(l, lex)), ""];
		/* Altitude: */ case 19:
		_r$15 = $recv(c); /* */ $s = 26; case 26: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15[0];
		_r$16 = $recv(c); /* */ $s = 27; case 27: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$copy(l, _r$16[0], lex);
		if ((l.token.charCodeAt((l.token.length - 1 >> 0)) === 77) || (l.token.charCodeAt((l.token.length - 1 >> 0)) === 109)) {
			l.token = l.token.substring(0, (l.token.length - 1 >> 0));
		}
		_tuple$10 = strconv.ParseFloat(l.token, 32); i$6 = _tuple$10[0]; e$6 = _tuple$10[1];
		if (!($interfaceIsEqual(e$6, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LOC Altitude", $clone(l, lex)), ""];
		} else {
			rr.Altitude = (i$6 * 100 + 1e+07 + 0.5 >> 0);
		}
		_r$17 = $recv(c); /* */ $s = 28; case 28: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		$copy(l, _r$17[0], lex);
		count = 0;
		/* while (true) { */ case 29:
			/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 30; continue; }
			_ref = l.value;
			if (_ref === 1) {
				_ref$1 = count;
				if (_ref$1 === 0) {
					_tuple$11 = stringToCm(l.token); e$7 = _tuple$11[0]; m = _tuple$11[1]; ok$1 = _tuple$11[2];
					if (!ok$1) {
						return [$ifaceNil, new ParseError.ptr(f, "bad LOC Size", $clone(l, lex)), ""];
					}
					rr.Size = ((((e$7 & 15) >>> 0)) | ((((m << 4 << 24 >>> 24) & 240) >>> 0))) >>> 0;
				} else if (_ref$1 === 1) {
					_tuple$12 = stringToCm(l.token); e$8 = _tuple$12[0]; m$1 = _tuple$12[1]; ok$2 = _tuple$12[2];
					if (!ok$2) {
						return [$ifaceNil, new ParseError.ptr(f, "bad LOC HorizPre", $clone(l, lex)), ""];
					}
					rr.HorizPre = ((((e$8 & 15) >>> 0)) | ((((m$1 << 4 << 24 >>> 24) & 240) >>> 0))) >>> 0;
				} else if (_ref$1 === 2) {
					_tuple$13 = stringToCm(l.token); e$9 = _tuple$13[0]; m$2 = _tuple$13[1]; ok$3 = _tuple$13[2];
					if (!ok$3) {
						return [$ifaceNil, new ParseError.ptr(f, "bad LOC VertPre", $clone(l, lex)), ""];
					}
					rr.VertPre = ((((e$9 & 15) >>> 0)) | ((((m$2 << 4 << 24 >>> 24) & 240) >>> 0))) >>> 0;
				}
				count = count + (1) >> 0;
			} else if (_ref === 2) {
			} else {
				return [$ifaceNil, new ParseError.ptr(f, "bad LOC Size, HorizPre or VertPre", $clone(l, lex)), ""];
			}
			_r$18 = $recv(c); /* */ $s = 31; case 31: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			$copy(l, _r$18[0], lex);
		/* } */ $s = 29; continue; case 30:
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setLOC }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.c = c; $f.count = count; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.e$3 = e$3; $f.e$4 = e$4; $f.e$5 = e$5; $f.e$6 = e$6; $f.e$7 = e$7; $f.e$8 = e$8; $f.e$9 = e$9; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.i$6 = i$6; $f.l = l; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.rr = rr; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	setHIP = function(h, c, o, f) {
		var $ptr, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, c, e, f, h, i, l, o, ok, rr, xs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; xs = $f.xs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new HIP.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad HIP PublicKeyAlgorithm", $clone(l, lex)), ""];
		}
		rr.PublicKeyAlgorithm = (i << 24 >>> 24);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Hit = l.token;
		rr.HitLength = (_q = (rr.Hit.length << 24 >>> 24) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		rr.PublicKey = l.token;
		rr.PublicKeyLength = (base64.StdEncoding.DecodedLen(rr.PublicKey.length) << 16 >>> 16);
		_r$5 = $recv(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$copy(l, _r$5[0], lex);
		xs = sliceType$1.nil;
		/* while (true) { */ case 7:
			/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 8; continue; }
			_ref = l.value;
			/* */ if (_ref === 1) { $s = 9; continue; }
			/* */ if (_ref === 2) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_ref === 1) { */ case 9:
				if (l.token === "@") {
					xs = $append(xs, o);
					/* continue; */ $s = 7; continue;
				}
				_tuple$1 = IsDomainName(l.token); ok = _tuple$1[1];
				if (!ok || (l.length === 0)) {
					return [$ifaceNil, new ParseError.ptr(f, "bad HIP RendezvousServers", $clone(l, lex)), ""];
				}
				if (!((l.token.charCodeAt((l.length - 1 >> 0)) === 46))) {
					l.token = appendOrigin(l.token, o);
				}
				xs = $append(xs, l.token);
				$s = 12; continue;
			/* } else if (_ref === 2) { */ case 10:
				$s = 12; continue;
			/* } else { */ case 11:
				return [$ifaceNil, new ParseError.ptr(f, "bad HIP RendezvousServers", $clone(l, lex)), ""];
			/* } */ case 12:
			_r$6 = $recv(c); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$copy(l, _r$6[0], lex);
		/* } */ $s = 7; continue; case 8:
		rr.RendezvousServers = xs;
		return [rr, ptrType$44.nil, l.comment];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setHIP }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.xs = xs; $f.$s = $s; $f.$r = $r; return $f;
	};
	setCERT = function(h, c, o, f) {
		var $ptr, _entry, _entry$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, c, c1, e, e$1, e$2, e1, f, h, i, i$1, i$2, l, o, ok, ok$1, rr, s, v, v$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; c = $f.c; c1 = $f.c1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; e1 = $f.e1; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; l = $f.l; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; rr = $f.rr; s = $f.s; v = $f.v; v$1 = $f.v$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new CERT.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = (_entry = $pkg.StringToCertType[$String.keyFor(l.token)], _entry !== undefined ? [_entry.v, true] : [0, false]); v = _tuple[0]; ok = _tuple[1];
		if (ok) {
			rr.Type = v;
		} else {
			_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				return [$ifaceNil, new ParseError.ptr(f, "bad CERT Type", $clone(l, lex)), ""];
			} else {
				rr.Type = (i << 16 >>> 16);
			}
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i$1 = _tuple$2[0]; e$1 = _tuple$2[1];
		if (!($interfaceIsEqual(e$1, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad CERT KeyTag", $clone(l, lex)), ""];
		}
		rr.KeyTag = (i$1 << 16 >>> 16);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$3 = (_entry$1 = $pkg.StringToAlgorithm[$String.keyFor(l.token)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]); v$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
		if (ok$1) {
			rr.Algorithm = v$1;
		} else {
			_tuple$4 = strconv.Atoi(l.token); i$2 = _tuple$4[0]; e$2 = _tuple$4[1];
			if (!($interfaceIsEqual(e$2, $ifaceNil))) {
				return [$ifaceNil, new ParseError.ptr(f, "bad CERT Algorithm", $clone(l, lex)), ""];
			} else {
				rr.Algorithm = (i$2 << 24 >>> 24);
			}
		}
		_r$5 = endingToString(c, "bad CERT Certificate", f); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$5 = _r$5; s = _tuple$5[0]; e1 = _tuple$5[1]; c1 = _tuple$5[2];
		if (!(e1 === ptrType$44.nil)) {
			return [$ifaceNil, e1, c1];
		}
		rr.Certificate = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setCERT }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.c = c; $f.c1 = c1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.e1 = e1; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.l = l; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.rr = rr; $f.s = s; $f.v = v; $f.v$1 = v$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	setOPENPGPKEY = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new OPENPGPKEY.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToString(c, "bad OPENPGPKEY PublicKey", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, c1];
		}
		rr.PublicKey = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setOPENPGPKEY }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setSIG = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, o, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; o = $f.o; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_r = setRRSIG(h, c, o, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1]; s = _tuple[2];
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			return [new SIG.ptr($clone($assertType(r, ptrType$55), RRSIG)), e, s];
		}
		return [$ifaceNil, e, s];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setSIG }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setRRSIG = function(h, c, o, f) {
		var $ptr, _entry, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, c, c1, e, err, err$1, err$2, err$3, err$4, f, h, i, i$1, i$2, i$3, i$4, l, o, ok, ok$1, rr, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; c = $f.c; c1 = $f.c1; e = $f.e; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; l = $f.l; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; rr = $f.rr; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new RRSIG.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = (_entry = $pkg.StringToType[$String.keyFor(l.tokenUpper)], _entry !== undefined ? [_entry.v, true] : [0, false]); t = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			if (strings.HasPrefix(l.tokenUpper, "TYPE")) {
				_tuple$1 = typeToInt(l.tokenUpper); t = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG Typecovered", $clone(l, lex)), ""];
				}
				rr.TypeCovered = t;
			} else {
				return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG Typecovered", $clone(l, lex)), ""];
			}
		} else {
			rr.TypeCovered = t;
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG Algorithm", $clone(l, lex)), ""];
		}
		rr.Algorithm = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$3 = strconv.Atoi(l.token); i = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG Labels", $clone(l, lex)), ""];
		}
		rr.Labels = (i << 24 >>> 24);
		_r$5 = $recv(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5[0];
		_r$6 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$copy(l, _r$6[0], lex);
		_tuple$4 = strconv.Atoi(l.token); i = _tuple$4[0]; err = _tuple$4[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG OrigTtl", $clone(l, lex)), ""];
		}
		rr.OrigTtl = (i >>> 0);
		_r$7 = $recv(c); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7[0];
		_r$8 = $recv(c); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$copy(l, _r$8[0], lex);
		_r$9 = StringToTime(l.token); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tuple$5 = _r$9; i$1 = _tuple$5[0]; err$1 = _tuple$5[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 11:
			_tuple$6 = strconv.ParseInt(l.token, 10, 64); i$2 = _tuple$6[0]; err$2 = _tuple$6[1];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				rr.Expiration = (i$2.$low >>> 0);
			} else {
				return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG Expiration", $clone(l, lex)), ""];
			}
			$s = 13; continue;
		/* } else { */ case 12:
			rr.Expiration = i$1;
		/* } */ case 13:
		_r$10 = $recv(c); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10[0];
		_r$11 = $recv(c); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		$copy(l, _r$11[0], lex);
		_r$12 = StringToTime(l.token); /* */ $s = 16; case 16: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_tuple$7 = _r$12; i$3 = _tuple$7[0]; err$3 = _tuple$7[1];
		/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 17:
			_tuple$8 = strconv.ParseInt(l.token, 10, 64); i$4 = _tuple$8[0]; err$4 = _tuple$8[1];
			if ($interfaceIsEqual(err$4, $ifaceNil)) {
				rr.Inception = (i$4.$low >>> 0);
			} else {
				return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG Inception", $clone(l, lex)), ""];
			}
			$s = 19; continue;
		/* } else { */ case 18:
			rr.Inception = i$3;
		/* } */ case 19:
		_r$13 = $recv(c); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13[0];
		_r$14 = $recv(c); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		$copy(l, _r$14[0], lex);
		_tuple$9 = strconv.Atoi(l.token); i = _tuple$9[0]; err = _tuple$9[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG KeyTag", $clone(l, lex)), ""];
		}
		rr.KeyTag = (i << 16 >>> 16);
		_r$15 = $recv(c); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15[0];
		_r$16 = $recv(c); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$copy(l, _r$16[0], lex);
		rr.SignerName = l.token;
		if (l.token === "@") {
			rr.SignerName = o;
		} else {
			_tuple$10 = IsDomainName(l.token); ok$1 = _tuple$10[1];
			if (!ok$1 || (l.length === 0)) {
				return [$ifaceNil, new ParseError.ptr(f, "bad RRSIG SignerName", $clone(l, lex)), ""];
			}
			if (!((rr.SignerName.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.SignerName = appendOrigin(rr.SignerName, o);
			}
		}
		_r$17 = endingToString(c, "bad RRSIG Signature", f); /* */ $s = 24; case 24: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_tuple$11 = _r$17; s = _tuple$11[0]; e = _tuple$11[1]; c1 = _tuple$11[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, c1];
		}
		rr.Signature = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setRRSIG }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.c = c; $f.c1 = c1; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.l = l; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.rr = rr; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNSEC = function(h, c, o, f) {
		var $ptr, _entry, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, c, f, h, k, l, o, ok, ok$1, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; f = $f.f; h = $f.h; k = $f.k; l = $f.l; o = $f.o; ok = $f.ok; ok$1 = $f.ok$1; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NSEC.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		rr.NextDomain = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		if (l.token === "@") {
			rr.NextDomain = o;
		} else {
			_tuple = IsDomainName(l.token); ok = _tuple[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad NSEC NextDomain", $clone(l, lex)), ""];
			}
			if (!((rr.NextDomain.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.NextDomain = appendOrigin(rr.NextDomain, o);
			}
		}
		rr.TypeBitMap = $makeSlice(sliceType$7, 0);
		k = 0;
		ok$1 = false;
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$copy(l, _r$1[0], lex);
		/* while (true) { */ case 3:
			/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 4; continue; }
			_ref = l.value;
			if (_ref === 2) {
			} else if (_ref === 1) {
				_tuple$1 = (_entry = $pkg.StringToType[$String.keyFor(l.tokenUpper)], _entry !== undefined ? [_entry.v, true] : [0, false]); k = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (!ok$1) {
					_tuple$2 = typeToInt(l.tokenUpper); k = _tuple$2[0]; ok$1 = _tuple$2[1];
					if (!ok$1) {
						return [$ifaceNil, new ParseError.ptr(f, "bad NSEC TypeBitMap", $clone(l, lex)), ""];
					}
				}
				rr.TypeBitMap = $append(rr.TypeBitMap, k);
			} else {
				return [$ifaceNil, new ParseError.ptr(f, "bad NSEC TypeBitMap", $clone(l, lex)), ""];
			}
			_r$2 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$copy(l, _r$2[0], lex);
		/* } */ $s = 3; continue; case 4:
		return [rr, ptrType$44.nil, l.comment];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNSEC }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.f = f; $f.h = h; $f.k = k; $f.l = l; $f.o = o; $f.ok = ok; $f.ok$1 = ok$1; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNSEC3 = function(h, c, o, f) {
		var $ptr, _entry, _q, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, c, e, f, h, i, k, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; k = $f.k; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NSEC3.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3 Hash", $clone(l, lex)), ""];
		}
		rr.Hash = (i << 24 >>> 24);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3 Flags", $clone(l, lex)), ""];
		}
		rr.Flags = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; e = _tuple$2[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3 Iterations", $clone(l, lex)), ""];
		}
		rr.Iterations = (i << 16 >>> 16);
		_r$5 = $recv(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5[0];
		_r$6 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$copy(l, _r$6[0], lex);
		if (l.token.length === 0) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3 Salt", $clone(l, lex)), ""];
		}
		rr.SaltLength = (_q = (l.token.length << 24 >>> 24) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		rr.Salt = l.token;
		_r$7 = $recv(c); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7[0];
		_r$8 = $recv(c); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$copy(l, _r$8[0], lex);
		rr.HashLength = 20;
		rr.NextDomain = l.token;
		rr.TypeBitMap = $makeSlice(sliceType$7, 0);
		k = 0;
		ok = false;
		_r$9 = $recv(c); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$copy(l, _r$9[0], lex);
		/* while (true) { */ case 11:
			/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 12; continue; }
			_ref = l.value;
			if (_ref === 2) {
			} else if (_ref === 1) {
				_tuple$3 = (_entry = $pkg.StringToType[$String.keyFor(l.tokenUpper)], _entry !== undefined ? [_entry.v, true] : [0, false]); k = _tuple$3[0]; ok = _tuple$3[1];
				if (!ok) {
					_tuple$4 = typeToInt(l.tokenUpper); k = _tuple$4[0]; ok = _tuple$4[1];
					if (!ok) {
						return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3 TypeBitMap", $clone(l, lex)), ""];
					}
				}
				rr.TypeBitMap = $append(rr.TypeBitMap, k);
			} else {
				return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3 TypeBitMap", $clone(l, lex)), ""];
			}
			_r$10 = $recv(c); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			$copy(l, _r$10[0], lex);
		/* } */ $s = 11; continue; case 12:
		return [rr, ptrType$44.nil, l.comment];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNSEC3 }; } $f.$ptr = $ptr; $f._entry = _entry; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.k = k; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNSEC3PARAM = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, c, e, f, h, i, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NSEC3PARAM.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3PARAM Hash", $clone(l, lex)), ""];
		}
		rr.Hash = (i << 24 >>> 24);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3PARAM Flags", $clone(l, lex)), ""];
		}
		rr.Flags = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; e = _tuple$2[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSEC3PARAM Iterations", $clone(l, lex)), ""];
		}
		rr.Iterations = (i << 16 >>> 16);
		_r$5 = $recv(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5[0];
		_r$6 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$copy(l, _r$6[0], lex);
		rr.SaltLength = (l.token.length << 24 >>> 24);
		rr.Salt = l.token;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNSEC3PARAM }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setEUI48 = function(h, c, o, f) {
		var $ptr, _r, _tuple, addr, c, dash, e, f, h, i, i$1, l, o, rr, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; addr = $f.addr; c = $f.c; dash = $f.dash; e = $f.e; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; l = $f.l; o = $f.o; rr = $f.rr; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new EUI48.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (!((l.length === 17))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad EUI48 Address", $clone(l, lex)), ""];
		}
		addr = $makeSlice(sliceType, 12);
		dash = 0;
		i = 0;
		while (true) {
			if (!(i < 10)) { break; }
			((i < 0 || i >= addr.$length) ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + i] = l.token.charCodeAt((i + dash >> 0)));
			(x = i + 1 >> 0, ((x < 0 || x >= addr.$length) ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + x] = l.token.charCodeAt(((i + 1 >> 0) + dash >> 0))));
			dash = dash + (1) >> 0;
			if (!((l.token.charCodeAt(((i + 1 >> 0) + dash >> 0)) === 45))) {
				return [$ifaceNil, new ParseError.ptr(f, "bad EUI48 Address", $clone(l, lex)), ""];
			}
			i = i + (2) >> 0;
		}
		(10 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 10] = l.token.charCodeAt(15));
		(11 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 11] = l.token.charCodeAt(16));
		_tuple = strconv.ParseUint($bytesToString(addr), 16, 48); i$1 = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad EUI48 Address", $clone(l, lex)), ""];
		}
		rr.Address = i$1;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setEUI48 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.addr = addr; $f.c = c; $f.dash = dash; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.o = o; $f.rr = rr; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	setEUI64 = function(h, c, o, f) {
		var $ptr, _r, _tuple, addr, c, dash, e, f, h, i, i$1, l, o, rr, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; addr = $f.addr; c = $f.c; dash = $f.dash; e = $f.e; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; l = $f.l; o = $f.o; rr = $f.rr; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new EUI64.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (!((l.length === 23))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad EUI64 Address", $clone(l, lex)), ""];
		}
		addr = $makeSlice(sliceType, 16);
		dash = 0;
		i = 0;
		while (true) {
			if (!(i < 14)) { break; }
			((i < 0 || i >= addr.$length) ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + i] = l.token.charCodeAt((i + dash >> 0)));
			(x = i + 1 >> 0, ((x < 0 || x >= addr.$length) ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + x] = l.token.charCodeAt(((i + 1 >> 0) + dash >> 0))));
			dash = dash + (1) >> 0;
			if (!((l.token.charCodeAt(((i + 1 >> 0) + dash >> 0)) === 45))) {
				return [$ifaceNil, new ParseError.ptr(f, "bad EUI64 Address", $clone(l, lex)), ""];
			}
			i = i + (2) >> 0;
		}
		(14 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 14] = l.token.charCodeAt(21));
		(15 >= addr.$length ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + 15] = l.token.charCodeAt(22));
		_tuple = strconv.ParseUint($bytesToString(addr), 16, 64); i$1 = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad EUI68 Address", $clone(l, lex)), ""];
		}
		rr.Address = i$1;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setEUI64 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.addr = addr; $f.c = c; $f.dash = dash; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.o = o; $f.rr = rr; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	setWKS = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, c, e, e$1, err, f, h, i, i$1, k, l, o, proto, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; e = $f.e; e$1 = $f.e$1; err = $f.err; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; k = $f.k; l = $f.l; o = $f.o; proto = $f.proto; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new WKS.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		rr.Address = net.ParseIP(l.token);
		if (rr.Address === net.IP.nil) {
			return [$ifaceNil, new ParseError.ptr(f, "bad WKS Address", $clone(l, lex)), ""];
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		proto = "tcp";
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad WKS Protocol", $clone(l, lex)), ""];
		}
		rr.Protocol = (i << 24 >>> 24);
		_ref = rr.Protocol;
		if (_ref === 17) {
			proto = "udp";
		} else if (_ref === 6) {
			proto = "tcp";
		} else {
			return [$ifaceNil, new ParseError.ptr(f, "bad WKS Protocol", $clone(l, lex)), ""];
		}
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		rr.BitMap = $makeSlice(sliceType$7, 0);
		k = 0;
		err = $ifaceNil;
		/* while (true) { */ case 6:
			/* if (!(!((l.value === 4)) && !((l.value === 0)))) { break; } */ if(!(!((l.value === 4)) && !((l.value === 0)))) { $s = 7; continue; }
			_ref$1 = l.value;
			/* */ if (_ref$1 === 2) { $s = 8; continue; }
			/* */ if (_ref$1 === 1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_ref$1 === 2) { */ case 8:
				$s = 11; continue;
			/* } else if (_ref$1 === 1) { */ case 9:
				_r$5 = net.LookupPort(proto, l.token); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$1 = _r$5; k = _tuple$1[0]; err = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 13:
					_tuple$2 = strconv.Atoi(l.token); i$1 = _tuple$2[0]; e$1 = _tuple$2[1];
					if (!($interfaceIsEqual(e$1, $ifaceNil))) {
						rr.BitMap = $append(rr.BitMap, (i$1 << 16 >>> 16));
					} else {
						return [$ifaceNil, new ParseError.ptr(f, "bad WKS BitMap", $clone(l, lex)), ""];
					}
				/* } */ case 14:
				rr.BitMap = $append(rr.BitMap, (k << 16 >>> 16));
				$s = 11; continue;
			/* } else { */ case 10:
				return [$ifaceNil, new ParseError.ptr(f, "bad WKS BitMap", $clone(l, lex)), ""];
			/* } */ case 11:
			_r$6 = $recv(c); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$copy(l, _r$6[0], lex);
		/* } */ $s = 6; continue; case 7:
		return [rr, ptrType$44.nil, l.comment];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setWKS }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.e = e; $f.e$1 = e$1; $f.err = err; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.k = k; $f.l = l; $f.o = o; $f.proto = proto; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setSSHFP = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, c, e, f, h, i, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new SSHFP.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad SSHFP Algorithm", $clone(l, lex)), ""];
		}
		rr.Algorithm = (i << 24 >>> 24);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad SSHFP Type", $clone(l, lex)), ""];
		}
		rr.Type = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		rr.FingerPrint = l.token;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setSSHFP }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDNSKEYs = function(h, c, o, f, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, c, c1, e, e1, f, h, i, l, o, rr, s, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; c1 = $f.c1; e = $f.e; e1 = $f.e1; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; s = $f.s; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new DNSKEY.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad " + typ + " Flags", $clone(l, lex)), ""];
		}
		rr.Flags = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad " + typ + " Protocol", $clone(l, lex)), ""];
		}
		rr.Protocol = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; e = _tuple$2[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad " + typ + " Algorithm", $clone(l, lex)), ""];
		}
		rr.Algorithm = (i << 24 >>> 24);
		_r$5 = endingToString(c, "bad " + typ + " PublicKey", f); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$3 = _r$5; s = _tuple$3[0]; e1 = _tuple$3[1]; c1 = _tuple$3[2];
		if (!(e1 === ptrType$44.nil)) {
			return [$ifaceNil, e1, c1];
		}
		rr.PublicKey = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setDNSKEYs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.c1 = c1; $f.e = e; $f.e1 = e1; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.s = s; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	setKEY = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, o, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; o = $f.o; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_r = setDNSKEYs(h, c, o, f, "KEY"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1]; s = _tuple[2];
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			return [new KEY.ptr($clone($assertType(r, ptrType$8), DNSKEY)), e, s];
		}
		return [$ifaceNil, e, s];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setKEY }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDNSKEY = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, o, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; o = $f.o; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_r = setDNSKEYs(h, c, o, f, "DNSKEY"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1]; s = _tuple[2];
		return [r, e, s];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setDNSKEY }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setCDNSKEY = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, o, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; o = $f.o; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_r = setDNSKEYs(h, c, o, f, "CDNSKEY"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1]; s = _tuple[2];
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			return [new CDNSKEY.ptr($clone($assertType(r, ptrType$8), DNSKEY)), e, s];
		}
		return [$ifaceNil, e, s];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setCDNSKEY }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setRKEY = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, c, c1, e, e1, f, h, i, l, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; c1 = $f.c1; e = $f.e; e1 = $f.e1; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new RKEY.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RKEY Flags", $clone(l, lex)), ""];
		}
		rr.Flags = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RKEY Protocol", $clone(l, lex)), ""];
		}
		rr.Protocol = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; e = _tuple$2[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RKEY Algorithm", $clone(l, lex)), ""];
		}
		rr.Algorithm = (i << 24 >>> 24);
		_r$5 = endingToString(c, "bad RKEY PublicKey", f); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$3 = _r$5; s = _tuple$3[0]; e1 = _tuple$3[1]; c1 = _tuple$3[2];
		if (!(e1 === ptrType$44.nil)) {
			return [$ifaceNil, e1, c1];
		}
		rr.PublicKey = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setRKEY }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.c1 = c1; $f.e = e; $f.e1 = e1; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setEID = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new EID.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToString(c, "bad EID Endpoint", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, c1];
		}
		rr.Endpoint = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setEID }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNIMLOC = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NIMLOC.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToString(c, "bad NIMLOC Locator", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, c1];
		}
		rr.Locator = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNIMLOC }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNSAP = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, c1, e, e1, f, h, i, l, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; c1 = $f.c1; e = $f.e; e1 = $f.e1; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NSAP.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NSAP Length", $clone(l, lex)), ""];
		}
		rr.Length = (i << 24 >>> 24);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = endingToString(c, "bad NSAP Nsap", f); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2; s = _tuple$1[0]; e1 = _tuple$1[1]; c1 = _tuple$1[2];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, e1, c1];
		}
		rr.Nsap = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNSAP }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.c1 = c1; $f.e = e; $f.e1 = e1; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setGPOS = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, c, e, f, h, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; e = $f.e; f = $f.f; h = $f.h; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new GPOS.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.ParseFloat(l.token, 64); e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad GPOS Longitude", $clone(l, lex)), ""];
		}
		rr.Longitude = l.token;
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.ParseFloat(l.token, 64); e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad GPOS Latitude", $clone(l, lex)), ""];
		}
		rr.Latitude = l.token;
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.ParseFloat(l.token, 64); e = _tuple$2[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad GPOS Altitude", $clone(l, lex)), ""];
		}
		rr.Altitude = l.token;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setGPOS }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDSs = function(h, c, o, f, typ) {
		var $ptr, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, c, c1, e, e$1, e1, f, h, i, i$1, i$2, l, o, ok, rr, s, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; c = $f.c; c1 = $f.c1; e = $f.e; e$1 = $f.e$1; e1 = $f.e1; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; s = $f.s; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new DS.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad " + typ + " KeyTag", $clone(l, lex)), ""];
		}
		rr.KeyTag = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i$1 = _tuple$1[0]; e$1 = _tuple$1[1];
		if (!($interfaceIsEqual(e$1, $ifaceNil))) {
			_tuple$2 = (_entry = $pkg.StringToAlgorithm[$String.keyFor(l.tokenUpper)], _entry !== undefined ? [_entry.v, true] : [0, false]); i$2 = _tuple$2[0]; ok = _tuple$2[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad " + typ + " Algorithm", $clone(l, lex)), ""];
			}
			rr.Algorithm = i$2;
		} else {
			rr.Algorithm = (i$1 << 24 >>> 24);
		}
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$3 = strconv.Atoi(l.token); i = _tuple$3[0]; e = _tuple$3[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad " + typ + " DigestType", $clone(l, lex)), ""];
		}
		rr.DigestType = (i << 24 >>> 24);
		_r$5 = endingToString(c, "bad " + typ + " Digest", f); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$4 = _r$5; s = _tuple$4[0]; e1 = _tuple$4[1]; c1 = _tuple$4[2];
		if (!(e1 === ptrType$44.nil)) {
			return [$ifaceNil, e1, c1];
		}
		rr.Digest = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setDSs }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.c = c; $f.c1 = c1; $f.e = e; $f.e$1 = e$1; $f.e1 = e1; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.s = s; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDS = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, o, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; o = $f.o; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_r = setDSs(h, c, o, f, "DS"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1]; s = _tuple[2];
		return [r, e, s];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setDS }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDLV = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, o, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; o = $f.o; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_r = setDSs(h, c, o, f, "DLV"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1]; s = _tuple[2];
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			return [new DLV.ptr($clone($assertType(r, ptrType$9), DS)), e, s];
		}
		return [$ifaceNil, e, s];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setDLV }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setCDS = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, o, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; o = $f.o; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		_r = setDSs(h, c, o, f, "CDS"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; r = _tuple[0]; e = _tuple[1]; s = _tuple[2];
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			return [new CDS.ptr($clone($assertType(r, ptrType$9), DS)), e, s];
		}
		return [$ifaceNil, e, s];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setCDS }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setTA = function(h, c, o, f) {
		var $ptr, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, c, c1, e, e$1, f, h, i, i$1, i$2, l, o, ok, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; c = $f.c; c1 = $f.c1; e = $f.e; e$1 = $f.e$1; f = $f.f; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new TA.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad TA KeyTag", $clone(l, lex)), ""];
		}
		rr.KeyTag = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i$1 = _tuple$1[0]; e$1 = _tuple$1[1];
		if (!($interfaceIsEqual(e$1, $ifaceNil))) {
			_tuple$2 = (_entry = $pkg.StringToAlgorithm[$String.keyFor(l.tokenUpper)], _entry !== undefined ? [_entry.v, true] : [0, false]); i$2 = _tuple$2[0]; ok = _tuple$2[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad TA Algorithm", $clone(l, lex)), ""];
			}
			rr.Algorithm = i$2;
		} else {
			rr.Algorithm = (i$1 << 24 >>> 24);
		}
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$3 = strconv.Atoi(l.token); i = _tuple$3[0]; e = _tuple$3[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad TA DigestType", $clone(l, lex)), ""];
		}
		rr.DigestType = (i << 24 >>> 24);
		_r$5 = endingToString(c, "bad TA Digest", f); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$4 = _r$5; s = _tuple$4[0]; e = _tuple$4[1]; c1 = _tuple$4[2];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, $assertType(e, ptrType$44), c1];
		}
		rr.Digest = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setTA }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.c = c; $f.c1 = c1; $f.e = e; $f.e$1 = e$1; $f.f = f; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setTLSA = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, c, c1, e, f, h, i, l, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new TLSA.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad TLSA Usage", $clone(l, lex)), ""];
		}
		rr.Usage = (i << 24 >>> 24);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad TLSA Selector", $clone(l, lex)), ""];
		}
		rr.Selector = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; e = _tuple$2[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad TLSA MatchingType", $clone(l, lex)), ""];
		}
		rr.MatchingType = (i << 24 >>> 24);
		_r$5 = endingToString(c, "bad TLSA Certificate", f); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$3 = _r$5; s = _tuple$3[0]; e = _tuple$3[1]; c1 = _tuple$3[2];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, $assertType(e, ptrType$44), c1];
		}
		rr.Certificate = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setTLSA }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setRFC3597 = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, c, c1, e, e1, f, h, l, o, rdlength, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; c1 = $f.c1; e = $f.e; e1 = $f.e1; f = $f.f; h = $f.h; l = $f.l; o = $f.o; rdlength = $f.rdlength; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new RFC3597.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (!(l.token === "\\#")) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RFC3597 Rdata", $clone(l, lex)), ""];
		}
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple = strconv.Atoi(l.token); rdlength = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RFC3597 Rdata ", $clone(l, lex)), ""];
		}
		_r$3 = endingToString(c, "bad RFC3597 Rdata", f); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3; s = _tuple$1[0]; e1 = _tuple$1[1]; c1 = _tuple$1[2];
		if (!(e1 === ptrType$44.nil)) {
			return [$ifaceNil, e1, c1];
		}
		if (!(((rdlength * 2 >> 0) === s.length))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad RFC3597 Rdata", $clone(l, lex)), ""];
		}
		rr.Rdata = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setRFC3597 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.c1 = c1; $f.e = e; $f.e1 = e1; $f.f = f; $f.h = h; $f.l = l; $f.o = o; $f.rdlength = rdlength; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setSPF = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new SPF.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToTxtSlice(c, "bad SPF Txt", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, ""];
		}
		rr.Txt = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setSPF }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setTXT = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new TXT.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToTxtSlice(c, "bad TXT Txt", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, ""];
		}
		rr.Txt = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setTXT }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNINFO = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NINFO.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToTxtSlice(c, "bad NINFO ZSData", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, ""];
		}
		rr.ZSData = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNINFO }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setURI = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, c, c1, e, f, h, i, l, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new URI.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad URI Priority", $clone(l, lex)), ""];
		}
		rr.Priority = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad URI Weight", $clone(l, lex)), ""];
		}
		rr.Weight = (i << 16 >>> 16);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = endingToTxtSlice(c, "bad URI Target", f); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4; s = _tuple$2[0]; e = _tuple$2[1]; c1 = _tuple$2[2];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, $assertType(e, ptrType$44), ""];
		}
		rr.Target = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setURI }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDHCID = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new DHCID.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToString(c, "bad DHCID Digest", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, c1];
		}
		rr.Digest = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setDHCID }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setNID = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, e, err, f, h, i, l, o, rr, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; err = $f.err; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new NID.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad NID Preference", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = stringToNodeID(l); u = _tuple$1[0]; err = _tuple$1[1];
		if (!(err === ptrType$44.nil)) {
			return [$ifaceNil, err, ""];
		}
		rr.NodeID = u;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setNID }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.err = err; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	setL32 = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, c, e, f, h, i, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new L32.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad L32 Preference", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Locator32 = net.ParseIP(l.token);
		if (rr.Locator32 === net.IP.nil) {
			return [$ifaceNil, new ParseError.ptr(f, "bad L32 Locator", $clone(l, lex)), ""];
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setL32 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setLP = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new LP.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LP Preference", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Fqdn = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Fqdn = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok = _tuple$1[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad LP Fqdn", $clone(l, lex)), ""];
		}
		if (!((rr.Fqdn.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Fqdn = appendOrigin(rr.Fqdn, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setLP }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setL64 = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, c, e, err, f, h, i, l, o, rr, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; e = $f.e; err = $f.err; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new L64.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad L64 Preference", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = stringToNodeID(l); u = _tuple$1[0]; err = _tuple$1[1];
		if (!(err === ptrType$44.nil)) {
			return [$ifaceNil, err, ""];
		}
		rr.Locator64 = u;
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setL64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.e = e; $f.err = err; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	setUID = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, i, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new UID.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad UID Uid", $clone(l, lex)), ""];
		}
		rr.Uid = (i >>> 0);
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setUID }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setGID = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, e, f, h, i, l, o, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new GID.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad GID Gid", $clone(l, lex)), ""];
		}
		rr.Gid = (i >>> 0);
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setGID }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setUINFO = function(h, c, o, f) {
		var $ptr, _r, _tuple, c, c1, e, f, h, o, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; c1 = $f.c1; e = $f.e; f = $f.f; h = $f.h; o = $f.o; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new UINFO.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = endingToTxtSlice(c, "bad UINFO Uinfo", f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r; s = _tuple[0]; e = _tuple[1]; c1 = _tuple[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, ""];
		}
		rr.Uinfo = (0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]);
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setUINFO }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.c1 = c1; $f.e = e; $f.f = f; $f.h = h; $f.o = o; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	setPX = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, c, e, f, h, i, l, o, ok, rr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; e = $f.e; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new PX.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad PX Preference", $clone(l, lex)), ""];
		}
		rr.Preference = (i << 16 >>> 16);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		rr.Map822 = l.token;
		if (l.length === 0) {
			return [rr, ptrType$44.nil, ""];
		}
		if (l.token === "@") {
			rr.Map822 = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$1 = IsDomainName(l.token); ok = _tuple$1[1];
		if (!ok) {
			return [$ifaceNil, new ParseError.ptr(f, "bad PX Map822", $clone(l, lex)), ""];
		}
		if (!((rr.Map822.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Map822 = appendOrigin(rr.Map822, o);
		}
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		rr.Mapx400 = l.token;
		if (l.token === "@") {
			rr.Mapx400 = o;
			return [rr, ptrType$44.nil, ""];
		}
		_tuple$2 = IsDomainName(l.token); ok = _tuple$2[1];
		if (!ok || (l.length === 0)) {
			return [$ifaceNil, new ParseError.ptr(f, "bad PX Mapx400", $clone(l, lex)), ""];
		}
		if (!((rr.Mapx400.charCodeAt((l.length - 1 >> 0)) === 46))) {
			rr.Mapx400 = appendOrigin(rr.Mapx400, o);
		}
		return [rr, ptrType$44.nil, ""];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setPX }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.e = e; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;
	};
	setIPSECKEY = function(h, c, o, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, c, c1, e, err, f, h, i, l, o, ok, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; c = $f.c; c1 = $f.c1; e = $f.e; err = $f.err; f = $f.f; h = $f.h; i = $f.i; l = $f.l; o = $f.o; ok = $f.ok; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = $clone(h, RR_Header);
		rr = new IPSECKEY.ptr();
		$copy(rr.Hdr, h, RR_Header);
		_r = $recv(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = $clone(_r[0], lex);
		if (l.length === 0) {
			return [rr, ptrType$44.nil, l.comment];
		}
		_tuple = strconv.Atoi(l.token); i = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY Precedence", $clone(l, lex)), ""];
		}
		rr.Precedence = (i << 24 >>> 24);
		_r$1 = $recv(c); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		_r$2 = $recv(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$copy(l, _r$2[0], lex);
		_tuple$1 = strconv.Atoi(l.token); i = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY GatewayType", $clone(l, lex)), ""];
		}
		rr.GatewayType = (i << 24 >>> 24);
		_r$3 = $recv(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3[0];
		_r$4 = $recv(c); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$copy(l, _r$4[0], lex);
		_tuple$2 = strconv.Atoi(l.token); i = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY Algorithm", $clone(l, lex)), ""];
		}
		rr.Algorithm = (i << 24 >>> 24);
		_r$5 = $recv(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5[0];
		_r$6 = $recv(c); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$copy(l, _r$6[0], lex);
		_ref = rr.GatewayType;
		if (_ref === 0) {
			rr.GatewayName = l.token;
			if (l.token === "@") {
				rr.GatewayName = o;
			}
			_tuple$3 = IsDomainName(l.token); ok = _tuple$3[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY GatewayName", $clone(l, lex)), ""];
			}
			if (!((rr.GatewayName.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.GatewayName = appendOrigin(rr.GatewayName, o);
			}
		} else if (_ref === 3) {
			rr.GatewayName = l.token;
			if (l.token === "@") {
				rr.GatewayName = o;
			}
			_tuple$4 = IsDomainName(l.token); ok = _tuple$4[1];
			if (!ok) {
				return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY GatewayName", $clone(l, lex)), ""];
			}
			if (!((rr.GatewayName.charCodeAt((l.length - 1 >> 0)) === 46))) {
				rr.GatewayName = appendOrigin(rr.GatewayName, o);
			}
		} else if (_ref === 1) {
			rr.GatewayA = net.ParseIP(l.token);
			if (rr.GatewayA === net.IP.nil) {
				return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY GatewayA", $clone(l, lex)), ""];
			}
		} else if (_ref === 2) {
			rr.GatewayAAAA = net.ParseIP(l.token);
			if (rr.GatewayAAAA === net.IP.nil) {
				return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY GatewayAAAA", $clone(l, lex)), ""];
			}
		} else {
			return [$ifaceNil, new ParseError.ptr(f, "bad IPSECKEY GatewayType", $clone(l, lex)), ""];
		}
		_r$7 = endingToString(c, "bad IPSECKEY PublicKey", f); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$5 = _r$7; s = _tuple$5[0]; e = _tuple$5[1]; c1 = _tuple$5[2];
		if (!(e === ptrType$44.nil)) {
			return [$ifaceNil, e, c1];
		}
		rr.PublicKey = s;
		return [rr, ptrType$44.nil, c1];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setIPSECKEY }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.c = c; $f.c1 = c1; $f.e = e; $f.err = err; $f.f = f; $f.h = h; $f.i = i; $f.l = l; $f.o = o; $f.ok = ok; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$7.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$57.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "copyHeader", name: "copyHeader", pkg: "github.com/cloudflare/dns", typ: $funcType([], [ptrType$57], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	wireSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "Version", name: "Version", pkg: "", typ: $funcType([], [$Uint8], false)}, {prop: "SetVersion", name: "SetVersion", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "ExtendedRcode", name: "ExtendedRcode", pkg: "", typ: $funcType([], [$Uint8], false)}, {prop: "SetExtendedRcode", name: "SetExtendedRcode", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "UDPSize", name: "UDPSize", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "SetUDPSize", name: "SetUDPSize", pkg: "", typ: $funcType([$Uint16], [], false)}, {prop: "Do", name: "Do", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetDo", name: "SetDo", pkg: "", typ: $funcType([], [], false)}];
	ptrType$30.methods = [{prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$31.methods = [{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$32.methods = [{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}];
	ptrType$33.methods = [{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$34.methods = [{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$35.methods = [{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$36.methods = [{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$37.methods = [{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}];
	ptrType$38.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "SetReply", name: "SetReply", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "SetQuestion", name: "SetQuestion", pkg: "", typ: $funcType([$String, $Uint16], [ptrType], false)}, {prop: "SetNotify", name: "SetNotify", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "SetRcode", name: "SetRcode", pkg: "", typ: $funcType([ptrType, $Int], [ptrType], false)}, {prop: "SetRcodeFormatError", name: "SetRcodeFormatError", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "SetUpdate", name: "SetUpdate", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "SetIxfr", name: "SetIxfr", pkg: "", typ: $funcType([$String, $Uint32, $String, $String], [ptrType], false)}, {prop: "SetAxfr", name: "SetAxfr", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "SetTsig", name: "SetTsig", pkg: "", typ: $funcType([$String, $String, $Int64, $Int64], [ptrType], false)}, {prop: "SetEdns0", name: "SetEdns0", pkg: "", typ: $funcType([$Uint16, $Bool], [ptrType], false)}, {prop: "IsTsig", name: "IsTsig", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "IsEdns0", name: "IsEdns0", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Pack", name: "Pack", pkg: "", typ: $funcType([], [sliceType, $error], false)}, {prop: "PackBuffer", name: "PackBuffer", pkg: "", typ: $funcType([sliceType], [sliceType, $error], false)}, {prop: "Unpack", name: "Unpack", pkg: "", typ: $funcType([sliceType], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "CopyTo", name: "CopyTo", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "NameUsed", name: "NameUsed", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "NameNotUsed", name: "NameNotUsed", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "Used", name: "Used", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "RRsetUsed", name: "RRsetUsed", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "RRsetNotUsed", name: "RRsetNotUsed", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "Insert", name: "Insert", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "RemoveRRset", name: "RemoveRRset", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "RemoveName", name: "RemoveName", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([sliceType$3], [], false)}];
	ptrType$60.methods = [{prop: "tokenText", name: "tokenText", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Uint8, $error], false)}];
	ptrType$62.methods = [{prop: "match", name: "match", pkg: "github.com/cloudflare/dns", typ: $funcType([$String, $Uint16], [Handler], false)}, {prop: "Handle", name: "Handle", pkg: "", typ: $funcType([$String, Handler], [], false)}, {prop: "HandleFunc", name: "HandleFunc", pkg: "", typ: $funcType([$String, funcType], [], false)}, {prop: "HandleRemove", name: "HandleRemove", pkg: "", typ: $funcType([$String], [], false)}, {prop: "ServeDNS", name: "ServeDNS", pkg: "", typ: $funcType([ResponseWriter, ptrType], [], false)}];
	HandlerFunc.methods = [{prop: "ServeDNS", name: "ServeDNS", pkg: "", typ: $funcType([ResponseWriter, ptrType], [], false)}];
	ptrType$4.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}];
	Type.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Class.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$65.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$66.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$15.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$67.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$17.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$18.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$21.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$19.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$39.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$40.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$22.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$42.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$68.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$41.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$20.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$69.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$16.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$70.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$71.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$25.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$72.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$26.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$73.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$74.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$75.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$76.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$77.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$78.methods = [{prop: "Sign", name: "Sign", pkg: "", typ: $funcType([crypto.Signer, ptrType], [sliceType, $error], false)}, {prop: "Verify", name: "Verify", pkg: "", typ: $funcType([ptrType$49, sliceType], [$error], false)}];
	ptrType$55.methods = [{prop: "Sign", name: "Sign", pkg: "", typ: $funcType([crypto.Signer, sliceType$3], [$error], false)}, {prop: "Verify", name: "Verify", pkg: "", typ: $funcType([ptrType$8, sliceType$3], [$error], false)}, {prop: "ValidityPeriod", name: "ValidityPeriod", pkg: "", typ: $funcType([time.Time], [$Bool], false)}, {prop: "sigBuf", name: "sigBuf", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$79.methods = [{prop: "Cover", name: "Cover", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$9.methods = [{prop: "ToCDS", name: "ToCDS", pkg: "", typ: $funcType([], [ptrType$80], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$24.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$81.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$82.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$83.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$84.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$8.methods = [{prop: "KeyTag", name: "KeyTag", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "ToDS", name: "ToDS", pkg: "", typ: $funcType([$Uint8], [ptrType$9], false)}, {prop: "ToCDNSKEY", name: "ToCDNSKEY", pkg: "", typ: $funcType([], [ptrType$85], false)}, {prop: "publicKeyRSA", name: "publicKeyRSA", pkg: "github.com/cloudflare/dns", typ: $funcType([], [ptrType$11], false)}, {prop: "publicKeyECDSA", name: "publicKeyECDSA", pkg: "github.com/cloudflare/dns", typ: $funcType([], [ptrType$12], false)}, {prop: "publicKeyDSA", name: "publicKeyDSA", pkg: "github.com/cloudflare/dns", typ: $funcType([], [ptrType$13], false)}, {prop: "Generate", name: "Generate", pkg: "", typ: $funcType([$Int], [crypto.PrivateKey, $error], false)}, {prop: "setPublicKeyRSA", name: "setPublicKeyRSA", pkg: "github.com/cloudflare/dns", typ: $funcType([$Int, ptrType$10], [$Bool], false)}, {prop: "setPublicKeyECDSA", name: "setPublicKeyECDSA", pkg: "github.com/cloudflare/dns", typ: $funcType([ptrType$10, ptrType$10], [$Bool], false)}, {prop: "setPublicKeyDSA", name: "setPublicKeyDSA", pkg: "github.com/cloudflare/dns", typ: $funcType([ptrType$10, ptrType$10, ptrType$10, ptrType$10], [$Bool], false)}, {prop: "NewPrivateKey", name: "NewPrivateKey", pkg: "", typ: $funcType([$String], [crypto.PrivateKey, $error], false)}, {prop: "ReadPrivateKey", name: "ReadPrivateKey", pkg: "", typ: $funcType([io.Reader, $String], [crypto.PrivateKey, $error], false)}, {prop: "PrivateKeyString", name: "PrivateKeyString", pkg: "", typ: $funcType([crypto.PrivateKey], [$String], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$86.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$87.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$88.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$89.methods = [{prop: "Cover", name: "Cover", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$90.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$91.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$92.methods = [{prop: "ToRFC3597", name: "ToRFC3597", pkg: "", typ: $funcType([RR], [$error], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$93.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$94.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$96.methods = [{prop: "Sign", name: "Sign", pkg: "", typ: $funcType([$Int, $Int, $Int, ptrType$95], [$error], false)}, {prop: "Verify", name: "Verify", pkg: "", typ: $funcType([ptrType$95], [$error], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$97.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$98.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$99.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$100.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$101.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$102.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$103.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$104.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$105.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$106.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$107.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$108.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$109.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$110.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	ptrType$111.methods = [{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}];
	debugging.methods = [{prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$8], [], true)}];
	ptrType$44.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init([{prop: "err", name: "err", pkg: "github.com/cloudflare/dns", typ: $String, tag: ""}]);
	RR.init([{prop: "Header", name: "Header", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "copy", name: "copy", pkg: "github.com/cloudflare/dns", typ: $funcType([], [RR], false)}, {prop: "len", name: "len", pkg: "github.com/cloudflare/dns", typ: $funcType([], [$Int], false)}]);
	RR_Header.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}, {prop: "Rrtype", name: "Rrtype", pkg: "", typ: $Uint16, tag: ""}, {prop: "Class", name: "Class", pkg: "", typ: $Uint16, tag: ""}, {prop: "Ttl", name: "Ttl", pkg: "", typ: $Uint32, tag: ""}, {prop: "Rdlength", name: "Rdlength", pkg: "", typ: $Uint16, tag: ""}]);
	rrsigWireFmt.init([{prop: "TypeCovered", name: "TypeCovered", pkg: "", typ: $Uint16, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "Labels", name: "Labels", pkg: "", typ: $Uint8, tag: ""}, {prop: "OrigTtl", name: "OrigTtl", pkg: "", typ: $Uint32, tag: ""}, {prop: "Expiration", name: "Expiration", pkg: "", typ: $Uint32, tag: ""}, {prop: "Inception", name: "Inception", pkg: "", typ: $Uint32, tag: ""}, {prop: "KeyTag", name: "KeyTag", pkg: "", typ: $Uint16, tag: ""}, {prop: "SignerName", name: "SignerName", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	dnskeyWireFmt.init([{prop: "Flags", name: "Flags", pkg: "", typ: $Uint16, tag: ""}, {prop: "Protocol", name: "Protocol", pkg: "", typ: $Uint8, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	wireSlice.init(sliceType);
	OPT.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Option", name: "Option", pkg: "", typ: sliceType$6, tag: "dns:\"opt\""}]);
	EDNS0.init([{prop: "Option", name: "Option", pkg: "", typ: $funcType([], [$Uint16], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "pack", name: "pack", pkg: "github.com/cloudflare/dns", typ: $funcType([], [sliceType, $error], false)}, {prop: "unpack", name: "unpack", pkg: "github.com/cloudflare/dns", typ: $funcType([sliceType], [$error], false)}]);
	EDNS0_NSID.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "Nsid", name: "Nsid", pkg: "", typ: $String, tag: ""}]);
	EDNS0_SUBNET.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "Family", name: "Family", pkg: "", typ: $Uint16, tag: ""}, {prop: "SourceNetmask", name: "SourceNetmask", pkg: "", typ: $Uint8, tag: ""}, {prop: "SourceScope", name: "SourceScope", pkg: "", typ: $Uint8, tag: ""}, {prop: "Address", name: "Address", pkg: "", typ: net.IP, tag: ""}, {prop: "DraftOption", name: "DraftOption", pkg: "", typ: $Bool, tag: ""}]);
	EDNS0_UL.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "Lease", name: "Lease", pkg: "", typ: $Uint32, tag: ""}]);
	EDNS0_LLQ.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "Version", name: "Version", pkg: "", typ: $Uint16, tag: ""}, {prop: "Opcode", name: "Opcode", pkg: "", typ: $Uint16, tag: ""}, {prop: "Error", name: "Error", pkg: "", typ: $Uint16, tag: ""}, {prop: "Id", name: "Id", pkg: "", typ: $Uint64, tag: ""}, {prop: "LeaseLife", name: "LeaseLife", pkg: "", typ: $Uint32, tag: ""}]);
	EDNS0_DAU.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "AlgCode", name: "AlgCode", pkg: "", typ: sliceType, tag: ""}]);
	EDNS0_DHU.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "AlgCode", name: "AlgCode", pkg: "", typ: sliceType, tag: ""}]);
	EDNS0_N3U.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "AlgCode", name: "AlgCode", pkg: "", typ: sliceType, tag: ""}]);
	EDNS0_LOCAL.init([{prop: "Code", name: "Code", pkg: "", typ: $Uint16, tag: ""}, {prop: "Data", name: "Data", pkg: "", typ: sliceType, tag: ""}]);
	MsgHdr.init([{prop: "Id", name: "Id", pkg: "", typ: $Uint16, tag: ""}, {prop: "Response", name: "Response", pkg: "", typ: $Bool, tag: ""}, {prop: "Opcode", name: "Opcode", pkg: "", typ: $Int, tag: ""}, {prop: "Authoritative", name: "Authoritative", pkg: "", typ: $Bool, tag: ""}, {prop: "Truncated", name: "Truncated", pkg: "", typ: $Bool, tag: ""}, {prop: "RecursionDesired", name: "RecursionDesired", pkg: "", typ: $Bool, tag: ""}, {prop: "RecursionAvailable", name: "RecursionAvailable", pkg: "", typ: $Bool, tag: ""}, {prop: "Zero", name: "Zero", pkg: "", typ: $Bool, tag: ""}, {prop: "AuthenticatedData", name: "AuthenticatedData", pkg: "", typ: $Bool, tag: ""}, {prop: "CheckingDisabled", name: "CheckingDisabled", pkg: "", typ: $Bool, tag: ""}, {prop: "Rcode", name: "Rcode", pkg: "", typ: $Int, tag: ""}]);
	Msg.init([{prop: "MsgHdr", name: "", pkg: "", typ: MsgHdr, tag: ""}, {prop: "Compress", name: "Compress", pkg: "", typ: $Bool, tag: "json:\"-\""}, {prop: "Question", name: "Question", pkg: "", typ: sliceType$2, tag: ""}, {prop: "Answer", name: "Answer", pkg: "", typ: sliceType$3, tag: ""}, {prop: "Ns", name: "Ns", pkg: "", typ: sliceType$3, tag: ""}, {prop: "Extra", name: "Extra", pkg: "", typ: sliceType$3, tag: ""}]);
	saltWireFmt.init([{prop: "Salt", name: "Salt", pkg: "", typ: $String, tag: "dns:\"size-hex\""}]);
	PrivateRdata.init([{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([PrivateRdata], [$error], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pack", name: "Pack", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unpack", name: "Unpack", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	scan.init([{prop: "src", name: "src", pkg: "github.com/cloudflare/dns", typ: ptrType$59, tag: ""}, {prop: "position", name: "position", pkg: "github.com/cloudflare/dns", typ: scanner.Position, tag: ""}, {prop: "eof", name: "eof", pkg: "github.com/cloudflare/dns", typ: $Bool, tag: ""}]);
	Handler.init([{prop: "ServeDNS", name: "ServeDNS", pkg: "", typ: $funcType([ResponseWriter, ptrType], [], false)}]);
	ResponseWriter.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Hijack", name: "Hijack", pkg: "", typ: $funcType([], [], false)}, {prop: "LocalAddr", name: "LocalAddr", pkg: "", typ: $funcType([], [net.Addr], false)}, {prop: "RemoteAddr", name: "RemoteAddr", pkg: "", typ: $funcType([], [net.Addr], false)}, {prop: "TsigStatus", name: "TsigStatus", pkg: "", typ: $funcType([], [$error], false)}, {prop: "TsigTimersOnly", name: "TsigTimersOnly", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([ptrType], [$error], false)}]);
	ServeMux.init([{prop: "z", name: "z", pkg: "github.com/cloudflare/dns", typ: mapType$1, tag: ""}, {prop: "m", name: "m", pkg: "github.com/cloudflare/dns", typ: ptrType$45, tag: ""}]);
	HandlerFunc.init([ResponseWriter, ptrType], [], false);
	TSIG.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "TimeSigned", name: "TimeSigned", pkg: "", typ: $Uint64, tag: "dns:\"uint48\""}, {prop: "Fudge", name: "Fudge", pkg: "", typ: $Uint16, tag: ""}, {prop: "MACSize", name: "MACSize", pkg: "", typ: $Uint16, tag: ""}, {prop: "MAC", name: "MAC", pkg: "", typ: $String, tag: "dns:\"size-hex\""}, {prop: "OrigId", name: "OrigId", pkg: "", typ: $Uint16, tag: ""}, {prop: "Error", name: "Error", pkg: "", typ: $Uint16, tag: ""}, {prop: "OtherLen", name: "OtherLen", pkg: "", typ: $Uint16, tag: ""}, {prop: "OtherData", name: "OtherData", pkg: "", typ: $String, tag: "dns:\"size-hex\""}]);
	Header.init([{prop: "Id", name: "Id", pkg: "", typ: $Uint16, tag: ""}, {prop: "Bits", name: "Bits", pkg: "", typ: $Uint16, tag: ""}, {prop: "Qdcount", name: "Qdcount", pkg: "", typ: $Uint16, tag: ""}, {prop: "Ancount", name: "Ancount", pkg: "", typ: $Uint16, tag: ""}, {prop: "Nscount", name: "Nscount", pkg: "", typ: $Uint16, tag: ""}, {prop: "Arcount", name: "Arcount", pkg: "", typ: $Uint16, tag: ""}]);
	Question.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}, {prop: "Qtype", name: "Qtype", pkg: "", typ: $Uint16, tag: ""}, {prop: "Qclass", name: "Qclass", pkg: "", typ: $Uint16, tag: ""}]);
	ANY.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}]);
	CNAME.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Target", name: "Target", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	HINFO.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Cpu", name: "Cpu", pkg: "", typ: $String, tag: ""}, {prop: "Os", name: "Os", pkg: "", typ: $String, tag: ""}]);
	MB.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Mb", name: "Mb", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	MG.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Mg", name: "Mg", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	MINFO.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Rmail", name: "Rmail", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}, {prop: "Email", name: "Email", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	MR.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Mr", name: "Mr", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	MF.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Mf", name: "Mf", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	MD.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Md", name: "Md", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	MX.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Mx", name: "Mx", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	AFSDB.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Subtype", name: "Subtype", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hostname", name: "Hostname", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	X25.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "PSDNAddress", name: "PSDNAddress", pkg: "", typ: $String, tag: ""}]);
	RT.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Host", name: "Host", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	NS.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Ns", name: "Ns", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	PTR.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Ptr", name: "Ptr", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}]);
	RP.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Mbox", name: "Mbox", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "Txt", name: "Txt", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	SOA.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Ns", name: "Ns", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}, {prop: "Mbox", name: "Mbox", pkg: "", typ: $String, tag: "dns:\"cdomain-name\""}, {prop: "Serial", name: "Serial", pkg: "", typ: $Uint32, tag: ""}, {prop: "Refresh", name: "Refresh", pkg: "", typ: $Uint32, tag: ""}, {prop: "Retry", name: "Retry", pkg: "", typ: $Uint32, tag: ""}, {prop: "Expire", name: "Expire", pkg: "", typ: $Uint32, tag: ""}, {prop: "Minttl", name: "Minttl", pkg: "", typ: $Uint32, tag: ""}]);
	TXT.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Txt", name: "Txt", pkg: "", typ: sliceType$1, tag: "dns:\"txt\""}]);
	SPF.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Txt", name: "Txt", pkg: "", typ: sliceType$1, tag: "dns:\"txt\""}]);
	SRV.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Priority", name: "Priority", pkg: "", typ: $Uint16, tag: ""}, {prop: "Weight", name: "Weight", pkg: "", typ: $Uint16, tag: ""}, {prop: "Port", name: "Port", pkg: "", typ: $Uint16, tag: ""}, {prop: "Target", name: "Target", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	NAPTR.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Order", name: "Order", pkg: "", typ: $Uint16, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $String, tag: ""}, {prop: "Service", name: "Service", pkg: "", typ: $String, tag: ""}, {prop: "Regexp", name: "Regexp", pkg: "", typ: $String, tag: ""}, {prop: "Replacement", name: "Replacement", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	CERT.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $Uint16, tag: ""}, {prop: "KeyTag", name: "KeyTag", pkg: "", typ: $Uint16, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "Certificate", name: "Certificate", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	DNAME.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Target", name: "Target", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	A.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "A", name: "A", pkg: "", typ: net.IP, tag: "dns:\"a\""}]);
	AAAA.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "AAAA", name: "AAAA", pkg: "", typ: net.IP, tag: "dns:\"aaaa\""}]);
	PX.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Map822", name: "Map822", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "Mapx400", name: "Mapx400", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	GPOS.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Longitude", name: "Longitude", pkg: "", typ: $String, tag: ""}, {prop: "Latitude", name: "Latitude", pkg: "", typ: $String, tag: ""}, {prop: "Altitude", name: "Altitude", pkg: "", typ: $String, tag: ""}]);
	LOC.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Version", name: "Version", pkg: "", typ: $Uint8, tag: ""}, {prop: "Size", name: "Size", pkg: "", typ: $Uint8, tag: ""}, {prop: "HorizPre", name: "HorizPre", pkg: "", typ: $Uint8, tag: ""}, {prop: "VertPre", name: "VertPre", pkg: "", typ: $Uint8, tag: ""}, {prop: "Latitude", name: "Latitude", pkg: "", typ: $Uint32, tag: ""}, {prop: "Longitude", name: "Longitude", pkg: "", typ: $Uint32, tag: ""}, {prop: "Altitude", name: "Altitude", pkg: "", typ: $Uint32, tag: ""}]);
	SIG.init([{prop: "RRSIG", name: "", pkg: "", typ: RRSIG, tag: ""}]);
	RRSIG.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "TypeCovered", name: "TypeCovered", pkg: "", typ: $Uint16, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "Labels", name: "Labels", pkg: "", typ: $Uint8, tag: ""}, {prop: "OrigTtl", name: "OrigTtl", pkg: "", typ: $Uint32, tag: ""}, {prop: "Expiration", name: "Expiration", pkg: "", typ: $Uint32, tag: ""}, {prop: "Inception", name: "Inception", pkg: "", typ: $Uint32, tag: ""}, {prop: "KeyTag", name: "KeyTag", pkg: "", typ: $Uint16, tag: ""}, {prop: "SignerName", name: "SignerName", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "Signature", name: "Signature", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	NSEC.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "NextDomain", name: "NextDomain", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "TypeBitMap", name: "TypeBitMap", pkg: "", typ: sliceType$7, tag: "dns:\"nsec\""}]);
	DLV.init([{prop: "DS", name: "", pkg: "", typ: DS, tag: ""}]);
	CDS.init([{prop: "DS", name: "", pkg: "", typ: DS, tag: ""}]);
	DS.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "KeyTag", name: "KeyTag", pkg: "", typ: $Uint16, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "DigestType", name: "DigestType", pkg: "", typ: $Uint8, tag: ""}, {prop: "Digest", name: "Digest", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	KX.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Exchanger", name: "Exchanger", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	TA.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "KeyTag", name: "KeyTag", pkg: "", typ: $Uint16, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "DigestType", name: "DigestType", pkg: "", typ: $Uint8, tag: ""}, {prop: "Digest", name: "Digest", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	TALINK.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "PreviousName", name: "PreviousName", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "NextName", name: "NextName", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	SSHFP.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $Uint8, tag: ""}, {prop: "FingerPrint", name: "FingerPrint", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	IPSECKEY.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Precedence", name: "Precedence", pkg: "", typ: $Uint8, tag: ""}, {prop: "GatewayType", name: "GatewayType", pkg: "", typ: $Uint8, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "GatewayA", name: "GatewayA", pkg: "", typ: net.IP, tag: "dns:\"a\""}, {prop: "GatewayAAAA", name: "GatewayAAAA", pkg: "", typ: net.IP, tag: "dns:\"aaaa\""}, {prop: "GatewayName", name: "GatewayName", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	KEY.init([{prop: "DNSKEY", name: "", pkg: "", typ: DNSKEY, tag: ""}]);
	CDNSKEY.init([{prop: "DNSKEY", name: "", pkg: "", typ: DNSKEY, tag: ""}]);
	DNSKEY.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint16, tag: ""}, {prop: "Protocol", name: "Protocol", pkg: "", typ: $Uint8, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	RKEY.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint16, tag: ""}, {prop: "Protocol", name: "Protocol", pkg: "", typ: $Uint8, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	NSAP.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Length", name: "Length", pkg: "", typ: $Uint8, tag: ""}, {prop: "Nsap", name: "Nsap", pkg: "", typ: $String, tag: ""}]);
	NSAPPTR.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Ptr", name: "Ptr", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	NSEC3.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Hash", name: "Hash", pkg: "", typ: $Uint8, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint8, tag: ""}, {prop: "Iterations", name: "Iterations", pkg: "", typ: $Uint16, tag: ""}, {prop: "SaltLength", name: "SaltLength", pkg: "", typ: $Uint8, tag: ""}, {prop: "Salt", name: "Salt", pkg: "", typ: $String, tag: "dns:\"size-hex\""}, {prop: "HashLength", name: "HashLength", pkg: "", typ: $Uint8, tag: ""}, {prop: "NextDomain", name: "NextDomain", pkg: "", typ: $String, tag: "dns:\"size-base32\""}, {prop: "TypeBitMap", name: "TypeBitMap", pkg: "", typ: sliceType$7, tag: "dns:\"nsec\""}]);
	NSEC3PARAM.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Hash", name: "Hash", pkg: "", typ: $Uint8, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint8, tag: ""}, {prop: "Iterations", name: "Iterations", pkg: "", typ: $Uint16, tag: ""}, {prop: "SaltLength", name: "SaltLength", pkg: "", typ: $Uint8, tag: ""}, {prop: "Salt", name: "Salt", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	TKEY.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Algorithm", name: "Algorithm", pkg: "", typ: $String, tag: "dns:\"domain-name\""}, {prop: "Inception", name: "Inception", pkg: "", typ: $Uint32, tag: ""}, {prop: "Expiration", name: "Expiration", pkg: "", typ: $Uint32, tag: ""}, {prop: "Mode", name: "Mode", pkg: "", typ: $Uint16, tag: ""}, {prop: "Error", name: "Error", pkg: "", typ: $Uint16, tag: ""}, {prop: "KeySize", name: "KeySize", pkg: "", typ: $Uint16, tag: ""}, {prop: "Key", name: "Key", pkg: "", typ: $String, tag: ""}, {prop: "OtherLen", name: "OtherLen", pkg: "", typ: $Uint16, tag: ""}, {prop: "OtherData", name: "OtherData", pkg: "", typ: $String, tag: ""}]);
	RFC3597.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Rdata", name: "Rdata", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	URI.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Priority", name: "Priority", pkg: "", typ: $Uint16, tag: ""}, {prop: "Weight", name: "Weight", pkg: "", typ: $Uint16, tag: ""}, {prop: "Target", name: "Target", pkg: "", typ: sliceType$1, tag: "dns:\"txt\""}]);
	DHCID.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Digest", name: "Digest", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	TLSA.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Usage", name: "Usage", pkg: "", typ: $Uint8, tag: ""}, {prop: "Selector", name: "Selector", pkg: "", typ: $Uint8, tag: ""}, {prop: "MatchingType", name: "MatchingType", pkg: "", typ: $Uint8, tag: ""}, {prop: "Certificate", name: "Certificate", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	HIP.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "HitLength", name: "HitLength", pkg: "", typ: $Uint8, tag: ""}, {prop: "PublicKeyAlgorithm", name: "PublicKeyAlgorithm", pkg: "", typ: $Uint8, tag: ""}, {prop: "PublicKeyLength", name: "PublicKeyLength", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hit", name: "Hit", pkg: "", typ: $String, tag: "dns:\"hex\""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: $String, tag: "dns:\"base64\""}, {prop: "RendezvousServers", name: "RendezvousServers", pkg: "", typ: sliceType$1, tag: "dns:\"domain-name\""}]);
	NINFO.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "ZSData", name: "ZSData", pkg: "", typ: sliceType$1, tag: "dns:\"txt\""}]);
	WKS.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Address", name: "Address", pkg: "", typ: net.IP, tag: "dns:\"a\""}, {prop: "Protocol", name: "Protocol", pkg: "", typ: $Uint8, tag: ""}, {prop: "BitMap", name: "BitMap", pkg: "", typ: sliceType$7, tag: "dns:\"wks\""}]);
	NID.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "NodeID", name: "NodeID", pkg: "", typ: $Uint64, tag: ""}]);
	L32.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Locator32", name: "Locator32", pkg: "", typ: net.IP, tag: "dns:\"a\""}]);
	L64.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Locator64", name: "Locator64", pkg: "", typ: $Uint64, tag: ""}]);
	LP.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Preference", name: "Preference", pkg: "", typ: $Uint16, tag: ""}, {prop: "Fqdn", name: "Fqdn", pkg: "", typ: $String, tag: "dns:\"domain-name\""}]);
	EUI48.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Address", name: "Address", pkg: "", typ: $Uint64, tag: "dns:\"uint48\""}]);
	EUI64.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Address", name: "Address", pkg: "", typ: $Uint64, tag: ""}]);
	UID.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Uid", name: "Uid", pkg: "", typ: $Uint32, tag: ""}]);
	GID.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Gid", name: "Gid", pkg: "", typ: $Uint32, tag: ""}]);
	UINFO.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Uinfo", name: "Uinfo", pkg: "", typ: $String, tag: ""}]);
	EID.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Endpoint", name: "Endpoint", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	NIMLOC.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "Locator", name: "Locator", pkg: "", typ: $String, tag: "dns:\"hex\""}]);
	OPENPGPKEY.init([{prop: "Hdr", name: "Hdr", pkg: "", typ: RR_Header, tag: ""}, {prop: "PublicKey", name: "PublicKey", pkg: "", typ: $String, tag: "dns:\"base64\""}]);
	ParseError.init([{prop: "file", name: "file", pkg: "github.com/cloudflare/dns", typ: $String, tag: ""}, {prop: "err", name: "err", pkg: "github.com/cloudflare/dns", typ: $String, tag: ""}, {prop: "lex", name: "lex", pkg: "github.com/cloudflare/dns", typ: lex, tag: ""}]);
	lex.init([{prop: "token", name: "token", pkg: "github.com/cloudflare/dns", typ: $String, tag: ""}, {prop: "tokenUpper", name: "tokenUpper", pkg: "github.com/cloudflare/dns", typ: $String, tag: ""}, {prop: "length", name: "length", pkg: "github.com/cloudflare/dns", typ: $Int, tag: ""}, {prop: "err", name: "err", pkg: "github.com/cloudflare/dns", typ: $Bool, tag: ""}, {prop: "value", name: "value", pkg: "github.com/cloudflare/dns", typ: $Uint8, tag: ""}, {prop: "line", name: "line", pkg: "github.com/cloudflare/dns", typ: $Int, tag: ""}, {prop: "column", name: "column", pkg: "github.com/cloudflare/dns", typ: $Int, tag: ""}, {prop: "torc", name: "torc", pkg: "github.com/cloudflare/dns", typ: $Uint16, tag: ""}, {prop: "comment", name: "comment", pkg: "github.com/cloudflare/dns", typ: $String, tag: ""}]);
	Token.init([{prop: "RR", name: "", pkg: "", typ: RR, tag: ""}, {prop: "Error", name: "Error", pkg: "", typ: ptrType$44, tag: ""}, {prop: "Comment", name: "Comment", pkg: "", typ: $String, tag: ""}]);
	parserFunc.init([{prop: "Func", name: "Func", pkg: "", typ: funcType$4, tag: ""}, {prop: "Variable", name: "Variable", pkg: "", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crypto.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dsa.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ecdsa.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = elliptic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hmac.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = md5.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rsa.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha1.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha256.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sha512.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = x509.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = asn1.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base32.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hex.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand$1.$init(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = net.$init(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = scanner.$init(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.AlgorithmToString = (_map = new $Map(), _key = 1, _map[$Uint8.keyFor(_key)] = { k: _key, v: "RSAMD5" }, _key = 2, _map[$Uint8.keyFor(_key)] = { k: _key, v: "DH" }, _key = 3, _map[$Uint8.keyFor(_key)] = { k: _key, v: "DSA" }, _key = 5, _map[$Uint8.keyFor(_key)] = { k: _key, v: "RSASHA1" }, _key = 6, _map[$Uint8.keyFor(_key)] = { k: _key, v: "DSA-NSEC3-SHA1" }, _key = 7, _map[$Uint8.keyFor(_key)] = { k: _key, v: "RSASHA1-NSEC3-SHA1" }, _key = 8, _map[$Uint8.keyFor(_key)] = { k: _key, v: "RSASHA256" }, _key = 10, _map[$Uint8.keyFor(_key)] = { k: _key, v: "RSASHA512" }, _key = 12, _map[$Uint8.keyFor(_key)] = { k: _key, v: "ECC-GOST" }, _key = 13, _map[$Uint8.keyFor(_key)] = { k: _key, v: "ECDSAP256SHA256" }, _key = 14, _map[$Uint8.keyFor(_key)] = { k: _key, v: "ECDSAP384SHA384" }, _key = 252, _map[$Uint8.keyFor(_key)] = { k: _key, v: "INDIRECT" }, _key = 253, _map[$Uint8.keyFor(_key)] = { k: _key, v: "PRIVATEDNS" }, _key = 254, _map[$Uint8.keyFor(_key)] = { k: _key, v: "PRIVATEOID" }, _map);
		$pkg.AlgorithmToHash = (_map$1 = new $Map(), _key$1 = 1, _map$1[$Uint8.keyFor(_key$1)] = { k: _key$1, v: 2 }, _key$1 = 5, _map$1[$Uint8.keyFor(_key$1)] = { k: _key$1, v: 3 }, _key$1 = 7, _map$1[$Uint8.keyFor(_key$1)] = { k: _key$1, v: 3 }, _key$1 = 8, _map$1[$Uint8.keyFor(_key$1)] = { k: _key$1, v: 5 }, _key$1 = 13, _map$1[$Uint8.keyFor(_key$1)] = { k: _key$1, v: 5 }, _key$1 = 14, _map$1[$Uint8.keyFor(_key$1)] = { k: _key$1, v: 6 }, _key$1 = 10, _map$1[$Uint8.keyFor(_key$1)] = { k: _key$1, v: 7 }, _map$1);
		$pkg.HashToString = (_map$2 = new $Map(), _key$2 = 1, _map$2[$Uint8.keyFor(_key$2)] = { k: _key$2, v: "SHA1" }, _key$2 = 2, _map$2[$Uint8.keyFor(_key$2)] = { k: _key$2, v: "SHA256" }, _key$2 = 3, _map$2[$Uint8.keyFor(_key$2)] = { k: _key$2, v: "GOST94" }, _key$2 = 4, _map$2[$Uint8.keyFor(_key$2)] = { k: _key$2, v: "SHA384" }, _key$2 = 5, _map$2[$Uint8.keyFor(_key$2)] = { k: _key$2, v: "SHA512" }, _map$2);
		$pkg.ErrAlg = new Error.ptr("bad algorithm");
		$pkg.ErrBuf = new Error.ptr("buffer size too small");
		$pkg.ErrExtendedRcode = new Error.ptr("bad extended rcode");
		$pkg.ErrFqdn = new Error.ptr("domain must be fully qualified");
		$pkg.ErrKeyAlg = new Error.ptr("bad key algorithm");
		$pkg.ErrKey = new Error.ptr("bad key");
		$pkg.ErrKeySize = new Error.ptr("bad key size");
		$pkg.ErrPrivKey = new Error.ptr("bad private key");
		$pkg.ErrRcode = new Error.ptr("bad rcode");
		$pkg.ErrRdata = new Error.ptr("bad rdata");
		$pkg.ErrRRset = new Error.ptr("bad rrset");
		$pkg.ErrSig = new Error.ptr("bad signature");
		$pkg.ErrTime = new Error.ptr("bad time");
		$pkg.StringToAlgorithm = reverseInt8($pkg.AlgorithmToString);
		$pkg.StringToHash = reverseInt8($pkg.HashToString);
		$pkg.Id = id;
		$pkg.DefaultServeMux = NewServeMux();
		$pkg.TypeToString = (_map$3 = new $Map(), _key$3 = 1, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "A" }, _key$3 = 28, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "AAAA" }, _key$3 = 18, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "AFSDB" }, _key$3 = 255, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "ANY" }, _key$3 = 34, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "ATMA" }, _key$3 = 252, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "AXFR" }, _key$3 = 257, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "CAA" }, _key$3 = 60, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "CDNSKEY" }, _key$3 = 59, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "CDS" }, _key$3 = 37, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "CERT" }, _key$3 = 5, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "CNAME" }, _key$3 = 49, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "DHCID" }, _key$3 = 32769, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "DLV" }, _key$3 = 39, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "DNAME" }, _key$3 = 48, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "DNSKEY" }, _key$3 = 43, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "DS" }, _key$3 = 31, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "EID" }, _key$3 = 108, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "EUI48" }, _key$3 = 109, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "EUI64" }, _key$3 = 102, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "GID" }, _key$3 = 27, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "GPOS" }, _key$3 = 13, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "HINFO" }, _key$3 = 55, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "HIP" }, _key$3 = 45, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "IPSECKEY" }, _key$3 = 20, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "ISDN" }, _key$3 = 251, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "IXFR" }, _key$3 = 25, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "KEY" }, _key$3 = 36, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "KX" }, _key$3 = 105, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "L32" }, _key$3 = 106, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "L64" }, _key$3 = 29, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "LOC" }, _key$3 = 107, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "LP" }, _key$3 = 7, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "MB" }, _key$3 = 3, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "MD" }, _key$3 = 4, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "MF" }, _key$3 = 8, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "MG" }, _key$3 = 14, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "MINFO" }, _key$3 = 9, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "MR" }, _key$3 = 15, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "MX" }, _key$3 = 35, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NAPTR" }, _key$3 = 104, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NID" }, _key$3 = 56, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NINFO" }, _key$3 = 32, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NIMLOC" }, _key$3 = 2, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NS" }, _key$3 = 22, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NSAP" }, _key$3 = 23, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NSAP-PTR" }, _key$3 = 50, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NSEC3" }, _key$3 = 51, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NSEC3PARAM" }, _key$3 = 47, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NSEC" }, _key$3 = 10, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "NULL" }, _key$3 = 41, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "OPT" }, _key$3 = 61, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "OPENPGPKEY" }, _key$3 = 12, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "PTR" }, _key$3 = 57, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "RKEY" }, _key$3 = 17, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "RP" }, _key$3 = 46, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "RRSIG" }, _key$3 = 21, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "RT" }, _key$3 = 24, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "SIG" }, _key$3 = 6, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "SOA" }, _key$3 = 99, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "SPF" }, _key$3 = 33, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "SRV" }, _key$3 = 44, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "SSHFP" }, _key$3 = 32768, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "TA" }, _key$3 = 58, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "TALINK" }, _key$3 = 249, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "TKEY" }, _key$3 = 52, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "TLSA" }, _key$3 = 250, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "TSIG" }, _key$3 = 16, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "TXT" }, _key$3 = 26, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "PX" }, _key$3 = 101, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "UID" }, _key$3 = 100, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "UINFO" }, _key$3 = 103, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "UNSPEC" }, _key$3 = 256, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "URI" }, _key$3 = 11, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "WKS" }, _key$3 = 19, _map$3[$Uint16.keyFor(_key$3)] = { k: _key$3, v: "X25" }, _map$3);
		$pkg.StringToType = reverseInt16($pkg.TypeToString);
		$pkg.ClassToString = (_map$4 = new $Map(), _key$4 = 1, _map$4[$Uint16.keyFor(_key$4)] = { k: _key$4, v: "IN" }, _key$4 = 2, _map$4[$Uint16.keyFor(_key$4)] = { k: _key$4, v: "CS" }, _key$4 = 3, _map$4[$Uint16.keyFor(_key$4)] = { k: _key$4, v: "CH" }, _key$4 = 4, _map$4[$Uint16.keyFor(_key$4)] = { k: _key$4, v: "HS" }, _key$4 = 254, _map$4[$Uint16.keyFor(_key$4)] = { k: _key$4, v: "NONE" }, _key$4 = 255, _map$4[$Uint16.keyFor(_key$4)] = { k: _key$4, v: "ANY" }, _map$4);
		$pkg.StringToClass = reverseInt16($pkg.ClassToString);
		$pkg.RcodeToString = (_map$5 = new $Map(), _key$5 = 0, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "NOERROR" }, _key$5 = 1, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "FORMERR" }, _key$5 = 2, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "SERVFAIL" }, _key$5 = 3, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "NXDOMAIN" }, _key$5 = 4, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "NOTIMPL" }, _key$5 = 5, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "REFUSED" }, _key$5 = 6, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "YXDOMAIN" }, _key$5 = 7, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "YXRRSET" }, _key$5 = 8, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "NXRRSET" }, _key$5 = 9, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "NOTAUTH" }, _key$5 = 10, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "NOTZONE" }, _key$5 = 16, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "BADSIG" }, _key$5 = 17, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "BADKEY" }, _key$5 = 18, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "BADTIME" }, _key$5 = 19, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "BADMODE" }, _key$5 = 20, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "BADNAME" }, _key$5 = 21, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "BADALG" }, _key$5 = 22, _map$5[$Int.keyFor(_key$5)] = { k: _key$5, v: "BADTRUNC" }, _map$5);
		$pkg.StringToRcode = reverseInt($pkg.RcodeToString);
		$pkg.OpcodeToString = (_map$6 = new $Map(), _key$6 = 0, _map$6[$Int.keyFor(_key$6)] = { k: _key$6, v: "QUERY" }, _key$6 = 1, _map$6[$Int.keyFor(_key$6)] = { k: _key$6, v: "IQUERY" }, _key$6 = 2, _map$6[$Int.keyFor(_key$6)] = { k: _key$6, v: "STATUS" }, _key$6 = 4, _map$6[$Int.keyFor(_key$6)] = { k: _key$6, v: "NOTIFY" }, _key$6 = 5, _map$6[$Int.keyFor(_key$6)] = { k: _key$6, v: "UPDATE" }, _map$6);
		$pkg.StringToOpcode = reverseInt($pkg.OpcodeToString);
		$pkg.CertTypeToString = (_map$7 = new $Map(), _key$7 = 1, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "PKIX" }, _key$7 = 2, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "SPKI" }, _key$7 = 3, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "PGP" }, _key$7 = 4, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "IPIX" }, _key$7 = 5, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "ISPKI" }, _key$7 = 6, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "IPGP" }, _key$7 = 7, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "ACPKIX" }, _key$7 = 8, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "IACPKIX" }, _key$7 = 253, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "URI" }, _key$7 = 254, _map$7[$Uint16.keyFor(_key$7)] = { k: _key$7, v: "OID" }, _map$7);
		$pkg.StringToCertType = reverseInt16($pkg.CertTypeToString);
		typeToRR = (_map$8 = new $Map(), _key$8 = 1, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new A.ptr();
		}) }, _key$8 = 28, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new AAAA.ptr();
		}) }, _key$8 = 18, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new AFSDB.ptr();
		}) }, _key$8 = 59, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new CDS.ptr();
		}) }, _key$8 = 37, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new CERT.ptr();
		}) }, _key$8 = 5, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new CNAME.ptr();
		}) }, _key$8 = 49, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new DHCID.ptr();
		}) }, _key$8 = 32769, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new DLV.ptr();
		}) }, _key$8 = 39, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new DNAME.ptr();
		}) }, _key$8 = 25, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new KEY.ptr();
		}) }, _key$8 = 48, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new DNSKEY.ptr();
		}) }, _key$8 = 43, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new DS.ptr();
		}) }, _key$8 = 108, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new EUI48.ptr();
		}) }, _key$8 = 109, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new EUI64.ptr();
		}) }, _key$8 = 102, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new GID.ptr();
		}) }, _key$8 = 27, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new GPOS.ptr();
		}) }, _key$8 = 31, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new EID.ptr();
		}) }, _key$8 = 13, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new HINFO.ptr();
		}) }, _key$8 = 55, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new HIP.ptr();
		}) }, _key$8 = 45, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new IPSECKEY.ptr();
		}) }, _key$8 = 36, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new KX.ptr();
		}) }, _key$8 = 105, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new L32.ptr();
		}) }, _key$8 = 106, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new L64.ptr();
		}) }, _key$8 = 29, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new LOC.ptr();
		}) }, _key$8 = 107, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new LP.ptr();
		}) }, _key$8 = 7, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new MB.ptr();
		}) }, _key$8 = 3, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new MD.ptr();
		}) }, _key$8 = 4, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new MF.ptr();
		}) }, _key$8 = 8, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new MG.ptr();
		}) }, _key$8 = 14, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new MINFO.ptr();
		}) }, _key$8 = 9, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new MR.ptr();
		}) }, _key$8 = 15, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new MX.ptr();
		}) }, _key$8 = 35, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NAPTR.ptr();
		}) }, _key$8 = 104, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NID.ptr();
		}) }, _key$8 = 56, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NINFO.ptr();
		}) }, _key$8 = 32, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NIMLOC.ptr();
		}) }, _key$8 = 2, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NS.ptr();
		}) }, _key$8 = 22, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NSAP.ptr();
		}) }, _key$8 = 23, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NSAPPTR.ptr();
		}) }, _key$8 = 50, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NSEC3.ptr();
		}) }, _key$8 = 51, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NSEC3PARAM.ptr();
		}) }, _key$8 = 47, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new NSEC.ptr();
		}) }, _key$8 = 61, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new OPENPGPKEY.ptr();
		}) }, _key$8 = 41, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new OPT.ptr();
		}) }, _key$8 = 12, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new PTR.ptr();
		}) }, _key$8 = 57, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new RKEY.ptr();
		}) }, _key$8 = 17, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new RP.ptr();
		}) }, _key$8 = 26, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new PX.ptr();
		}) }, _key$8 = 24, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new SIG.ptr();
		}) }, _key$8 = 46, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new RRSIG.ptr();
		}) }, _key$8 = 21, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new RT.ptr();
		}) }, _key$8 = 6, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new SOA.ptr();
		}) }, _key$8 = 99, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new SPF.ptr();
		}) }, _key$8 = 33, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new SRV.ptr();
		}) }, _key$8 = 44, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new SSHFP.ptr();
		}) }, _key$8 = 32768, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new TA.ptr();
		}) }, _key$8 = 58, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new TALINK.ptr();
		}) }, _key$8 = 249, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new TKEY.ptr();
		}) }, _key$8 = 52, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new TLSA.ptr();
		}) }, _key$8 = 250, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new TSIG.ptr();
		}) }, _key$8 = 16, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new TXT.ptr();
		}) }, _key$8 = 101, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new UID.ptr();
		}) }, _key$8 = 100, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new UINFO.ptr();
		}) }, _key$8 = 256, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new URI.ptr();
		}) }, _key$8 = 11, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new WKS.ptr();
		}) }, _key$8 = 19, _map$8[$Uint16.keyFor(_key$8)] = { k: _key$8, v: (function() {
			var $ptr;
			return new X25.ptr();
		}) }, _map$8);
		typeToparserFunc = (_map$9 = new $Map(), _key$9 = 28, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setAAAA, false) }, _key$9 = 18, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setAFSDB, false) }, _key$9 = 1, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setA, false) }, _key$9 = 59, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setCDS, true) }, _key$9 = 60, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setCDNSKEY, true) }, _key$9 = 37, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setCERT, true) }, _key$9 = 5, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setCNAME, false) }, _key$9 = 49, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setDHCID, true) }, _key$9 = 32769, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setDLV, true) }, _key$9 = 39, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setDNAME, false) }, _key$9 = 25, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setKEY, true) }, _key$9 = 48, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setDNSKEY, true) }, _key$9 = 43, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setDS, true) }, _key$9 = 31, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setEID, true) }, _key$9 = 108, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setEUI48, false) }, _key$9 = 109, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setEUI64, false) }, _key$9 = 102, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setGID, false) }, _key$9 = 27, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setGPOS, false) }, _key$9 = 13, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setHINFO, false) }, _key$9 = 55, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setHIP, true) }, _key$9 = 45, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setIPSECKEY, true) }, _key$9 = 36, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setKX, false) }, _key$9 = 105, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setL32, false) }, _key$9 = 106, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setL64, false) }, _key$9 = 29, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setLOC, true) }, _key$9 = 107, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setLP, false) }, _key$9 = 7, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setMB, false) }, _key$9 = 3, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setMD, false) }, _key$9 = 4, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setMF, false) }, _key$9 = 8, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setMG, false) }, _key$9 = 14, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setMINFO, false) }, _key$9 = 9, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setMR, false) }, _key$9 = 15, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setMX, false) }, _key$9 = 35, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNAPTR, false) }, _key$9 = 104, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNID, false) }, _key$9 = 32, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNIMLOC, true) }, _key$9 = 56, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNINFO, true) }, _key$9 = 22, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNSAP, true) }, _key$9 = 23, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNSAPPTR, false) }, _key$9 = 51, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNSEC3PARAM, false) }, _key$9 = 50, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNSEC3, true) }, _key$9 = 47, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNSEC, true) }, _key$9 = 2, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setNS, false) }, _key$9 = 61, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setOPENPGPKEY, true) }, _key$9 = 12, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setPTR, false) }, _key$9 = 26, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setPX, false) }, _key$9 = 24, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setSIG, true) }, _key$9 = 57, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setRKEY, true) }, _key$9 = 17, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setRP, false) }, _key$9 = 46, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setRRSIG, true) }, _key$9 = 21, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setRT, false) }, _key$9 = 6, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setSOA, false) }, _key$9 = 99, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setSPF, true) }, _key$9 = 33, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setSRV, false) }, _key$9 = 44, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setSSHFP, false) }, _key$9 = 58, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setTALINK, false) }, _key$9 = 32768, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setTA, true) }, _key$9 = 52, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setTLSA, true) }, _key$9 = 16, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setTXT, true) }, _key$9 = 101, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setUID, false) }, _key$9 = 100, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setUINFO, true) }, _key$9 = 256, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setURI, true) }, _key$9 = 11, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setWKS, true) }, _key$9 = 19, _map$9[$Uint16.keyFor(_key$9)] = { k: _key$9, v: new parserFunc.ptr(setX25, false) }, _map$9);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["dnskey-to-ds"] = (function() {
	var $pkg = {}, $init, fmt, dns, js, log, strings, funcType, mapType, ptrType, sliceType, ptrType$1, main, ToDS;
	fmt = $packages["fmt"];
	dns = $packages["github.com/cloudflare/dns"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	log = $packages["log"];
	strings = $packages["strings"];
	funcType = $funcType([$String], [], false);
	mapType = $mapType($String, $emptyInterface);
	ptrType = $ptrType(dns.ParseError);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(dns.DNSKEY);
	main = function() {
		var $ptr, _key, _map;
		$global.go = $externalize((_map = new $Map(), _key = "ToDS", _map[$String.keyFor(_key)] = { k: _key, v: new funcType(ToDS) }, _map), mapType);
	};
	ToDS = function(zone) {
		var $ptr, zone;
		$go((function $b() {
			var $ptr, _ok, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, dnskey, ds1, ds2, ok, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ok = $f._ok; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dnskey = $f.dnskey; ds1 = $f.ds1; ds2 = $f.ds2; ok = $f.ok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_ref = dns.ParseZone(strings.NewReader(zone), "", "");
			/* while (true) { */ case 1:
				_r = $recv(_ref); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r; x = _tuple[0]; _ok = _tuple[1];
				if (!_ok) {
					/* break; */ $s = 2; continue;
				}
				/* */ if (!(x.Error === ptrType.nil)) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (!(x.Error === ptrType.nil)) { */ case 4:
					$r = log.Println(new sliceType([x.Error])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 1; continue;
				/* } */ case 5:
				_tuple$1 = $assertType(x.RR, ptrType$1, true); dnskey = _tuple$1[0]; ok = _tuple$1[1];
				/* */ if (!ok) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!ok) { */ case 7:
					$r = log.Println(new sliceType([new $String("Not a DNSKEY:"), x.RR])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 1; continue;
				/* } */ case 8:
				/* */ if (((dnskey.Flags & 1) >>> 0) === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (((dnskey.Flags & 1) >>> 0) === 0) { */ case 10:
					$r = log.Println(new sliceType([new $String("Ignoring ZSK:"), x.RR])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 1; continue;
				/* } */ case 11:
				_r$1 = dnskey.ToDS(1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				ds1 = _r$1;
				_r$2 = dnskey.ToDS(2); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				ds2 = _r$2;
				_r$3 = fmt.Sprintf("%s\n%s\n", new sliceType([ds1, ds2])); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$global.document.write($externalize(_r$3, $String));
			/* } */ $s = 1; continue; case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._ok = _ok; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dnskey = dnskey; $f.ds1 = ds1; $f.ds2 = ds2; $f.ok = ok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}), []);
	};
	$pkg.ToDS = ToDS;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dns.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		main();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
$packages["runtime"].$init();
$go($packages["dnskey-to-ds"].$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=dnskey-to-ds.js.map
